The Collections reverse() method can reverse the elements in a Java List.,"['modification: (collections, reverse the elements of, list)', 'dependency: (reverse, method requires, list)']","[""('class', 'modification', 'class'): (collections, reverse the elements of, list)""]"
Here is an example of finding the minimum element in a Java List using Collections min() method:,"['dependency: (collections, method-used-for, min())', 'containment: (collections, includes, list)', 'dependency: (min(), requires, list)']","[""('class', 'dependency', 'method'): (collections, method-used-for, min())""]"
"Notice too, that the compareTo() method should throw a NullPointerException if the parameter object is null.","['exception: (compareto(), throw, nullpointerexception)']",[]
The LinkedList class is a pretty standard Deque and Queue implementation.,"['equivalence: (linkedlist, is_a_standard_implementation_of, deque)', 'equivalence: (linkedlist, is_a_standard_implementation_of, queue)']","[""('class', 'equivalence', 'interface'): (linkedlist, is_a_standard_implementation_of, deque)"", ""('class', 'equivalence', 'interface'): (linkedlist, is_a_standard_implementation_of, queue)""]"
You add elements to the beginning end of a Deque using the add() method.,"['containment: (deque, inclusion, add())']",[]
"If the element cannot be inserted into the Deque, the add() method will throw an exception.","['exception: (deque, throw an exception, add())']",[]
"If the element cannot be inserted into the Deque, the addLast() method will throw an exception.","['exception: (addlast(), throw exception, deque)']",[]
To peek at the last element of a Java Deque you can use the getLast() method.,"['dependency: (deque, method used to peek at last element, getlast())']","[""('class', 'dependency', 'method'): (deque, method used to peek at last element, getlast())""]"
The remove() method removes the first element of a Java Deque.,"['modification: (remove(), removes the first element, deque)']","[""('method', 'modification', 'class'): (remove(), removes the first element, deque)""]"
"The pollFirst() method removes an element from the beginning of the Deque, just like poll().","['comparison: (pollfirst(), removes an element from the beginning just like, poll())']","[""('method', 'comparison', 'method'): (pollfirst(), removes an element from the beginning just like, poll())""]"
Here is an example of removing the last element from a Java Deque using the pollLast() method:,"['traversal: (deque, removing the last element from, polllast())']",[]
The Java Deque size() method returns the number of elements stored in the Java Deque at the time you invoke the method.,"['return: (deque, returns the number of elements stored, size())']",[]
"Because the Iterator has its generic type set to String, the Java compiler already knows that next() will return a String.","['return: (next(), will return, string)']","[""('method', 'return', 'class'): (next(), will return, string)""]"
"As you can see, a proper implementation of .equals() is essential for your own classes to work well with the Java Collection classes.","['dependency: (.equals(), implementation, java collection)']",[]
"So, as you can see, a combination of the hashCode() and equals() methods are used when storing and when looking up objects in a hashtable.","['collaboration: (hashcode(), used together with, equals())', 'dependency: (hashcode(), when storing and looking up objects, hashtable)', 'dependency: (equals(), when storing and looking up objects, hashtable)']",[]
"Then it uses a for-each loop to iterate the elements of the List, and print out the toString() value of each element.","['return: (tostring(), print_value_of, list)']","[""('method', 'return', 'class'): (tostring(), print_value_of, list)""]"
Here is an example of iterating the elements of an Iterable via its forEach() method:,"['traversal: (foreach(), iterating the elements, iterable)']",[]
"The reason the for-each loop is slower is, that each iteration will call the List iterator() method, which will create a new Iterator object.","['creation: (iterator(), create a new, iterator)']","[""('method', 'creation', 'class'): (iterator(), create a new, iterator)""]"
"In other words, if the Iterator has not yet iterated over all of the elements in the collection the Iterator was obtained from - the hasNext() method will return true.","['dependency: (iterator, prerequisite_for_iteration, hasnext())', 'traversal: (iterator, facilitates_iteration_over_elements, hasnext())']","[""('class', 'dependency', 'method'): (iterator, prerequisite_for_iteration, hasnext())""]"
The first three add() calls add a String instance to the end of the list.,"['containment: (add(), inclusion, list)', 'creation: (add(), formation, string)']","[""('method', 'creation', 'class'): (add(), formation, string)""]"
"The addAll() method takes a Collection as parameter, so you can pass either a List or Java Set as parameter.",,[]
"Notice that the get() method returns a Java Object, so we have to cast it to a String (because we know the value is a String).","['dependency: (get(), requires, string)']",[]
"This example creates a Map and stores three values in it using the keys A, B and C. Then the example calls the Map getOrDefault() method, passing the String E as key, along with a default value - the String default value.","['return: (getordefault(), returns, map)']","[""('method', 'return', 'class'): (getordefault(), returns, map)""]"
Since the Map does not contain any object stored by the key E the given default value will be returned - which is the String default value passed as the last parameter to the getOrDefault() method.,"['containment: (map, does not contain, getordefault())', 'return: (getordefault(), will be returned, map)']","[""('method', 'return', 'class'): (getordefault(), will be returned, map)""]"
"As you can see, the key Iterator returns every key stored in a Java Map, one by one (one for each call to next()).","['containment: (map, stores, key)']",[]
The number of entries in a Java Map is also referred to as the Map size - hence the method name size() .,,[]
The isEmpty() method will return false if the Map instance contains 1 or more entries.,"['containment: (map, contains, isempty())', 'return: (isempty(), return, map)']","[""('method', 'return', 'class'): (isempty(), return, map)""]"
Here is an example of creating an instance of the Java TreeMap class which implements the NavigableMap interface:,"['inheritance: (treemap, implements, navigablemap)']",[]
"The tailMap variable will reference a SortedMap containing all key + value pairs from the NavigableMap for the keys ""c"", ""d"" and ""e"", as these keys are considered equal to or larger than the parameter value ""c"" passed to the tailMap() method.","['containment: (sortedmap, includes_key_value_pairs_from, navigablemap)', 'dependency: (sortedmap, relies_on_keys_equal_to_or_larger_than, tailmap())', 'dependency: (navigablemap, produces_subset_based_on, tailmap())']",[]
The lowerEntry() method in the NavigableMap interface returns the key + value pair for the highest key which is lower than the parameter value passed to the lowerEntry() method.,"['containment: (navigablemap, interface_contains_method, lowerentry())', 'return: (lowerentry(), method_returns_key_value_pair, navigablemap)']","[""('method', 'return', 'interface'): (lowerentry(), method_returns_key_value_pair, navigablemap)""]"
"The pollFirstEntry() method returns and removes the ""first"" entry (key + value) in the NavigableMap or null if the map is empty.","['return: (pollfirstentry(), returns_and_removes, navigablemap)']","[""('method', 'return', 'class'): (pollfirstentry(), returns_and_removes, navigablemap)""]"
"The descendingIterator() method allows you to iterate the elements of the NavigableSet (which is also a SortedSet) in reverse order, without changing the order of the elements internally.","['traversal: (descendingiterator(), iterate the elements, navigableset)', 'inheritance: (navigableset, is also a, sortedset)']","[""('interface', 'inheritance', 'interface'): (navigableset, is also a, sortedset)""]"
"To get properties from a Java Properties object you use the getProperty() method, passing the key of the property to get as parameter.","['dependency: (properties, passing as parameter to, getproperty())']","[""('class', 'dependency', 'method'): (properties, passing as parameter to, getproperty())""]"
"Using the InputStream you can load the file into a Java Properties instance, using either the load() or loadFromXML() methods explained earlier in this Java Properties tutorial.","['dependency: (inputstream, load_into, properties)', 'dependency: (inputstream, use_with, load())', 'dependency: (inputstream, use_with, loadfromxml())']","[""('class', 'dependency', 'class'): (inputstream, load_into, properties)"", ""('class', 'dependency', 'method'): (inputstream, use_with, load())"", ""('class', 'dependency', 'method'): (inputstream, use_with, loadfromxml())""]"
Here are two examples of taking an element from a Java Queue using its poll() and remove() methods:,"['comparison: (poll(), evaluating or contrasting characteristics with, remove())']","[""('method', 'comparison', 'method'): (poll(), evaluating or contrasting characteristics with, remove())""]"
You can check if a Java Queue contains a certain element via its contains() method.,"['containment: (queue, includes_via_contains_method, contains())']",[]
The Java Set interface as a method called removeAll() which removes all elements in the Set which are also present in another Collection.,"['dependency: (removeall, depends on presence in, another collection)']",[]
You can check the size of a Java Set using the size() method.,"['containment: (set, size, size())']",[]
"You iterate the keys of a SortedMap by calling its keySet() method, like this:","['traversal: (keyset(), iterate the keys, sortedmap)']",[]
The SortedMap interface has a method named headMap() which returns a new Map which contains the first elements of the SortedMap according to the sort order used.,"['containment: (sortedmap, contains, headmap())']",[]
Here is an example of obtaining a submap from a Java SortedMap via its subMap() method:,"['containment: (sortedmap, inclusion, submap())']",[]
The Java Collections API only has one implementation of the Java SortedSet interface - the java.util.TreeSet class.,"['containment: (java.util.treeset, implementation of, java.util.sortedset)', 'containment: (java.util.treeset, implementation of, java.util.collections)']",[]
"Additionally, the Vector class uses several older (no longer recommended) parts of Java, like the Enumeration which is superseded by the Iterator interface.","['replacement: (enumeration, is superseded by, iterator)']",[]
You push elements onto a Java Stack using its push() method.,"['dependency: (stack, requires method invocation with, push())']","[""('class', 'dependency', 'method'): (stack, requires method invocation with, push())""]"
Here is an example of obtaining the size of a Java Stack via its size() method:,"['dependency: (size(), method for obtaining the size, stack)']",[]
The lockWrite() method of a ReadWriteLock class shown below is an example of a test-and-set method.,"['containment: (lockwrite(), method of, readwritelock)']","[""('method', 'containment', 'class'): (lockwrite(), method of, readwritelock)""]"
The BoundedSemaphore class shown below has two test-and-set methods: take() and release().,"['containment: (boundedsemaphore, has methods, take())', 'containment: (boundedsemaphore, has methods, release())']",[]
Here is an example showing how to implement the lock() method shown earlier using the AtomicBoolean class:,"['dependency: (lock(), implementation, atomicboolean)']",[]
"a stop() or pause() method too), then you can no longer create your Runnable implementation with a Java lambda expression.","['equivalence: (stop(), alternate_method, pause())', 'dependency: (stop(), prerequisite_for_nonlambda_creation, runnable)', 'dependency: (pause(), prerequisite_for_nonlambda_creation, runnable)']","[""('method', 'equivalence', 'method'): (stop(), alternate_method, pause())""]"
"If a thread (1) calls the parent.addChild(child) method at the same time as another thread (2) calls the child.setParent(parent) method, on the same parent and child instances, a deadlock can occur.","['dependency: (addchild(), simultaneous_use_with, setparent())', 'exception: (addchild(), can_cause_deadlock_with, setparent())']","[""('method', 'dependency', 'method'): (addchild(), simultaneous_use_with, setparent())""]"
"Here are the two classes used in the example above, Counter and CounterThread.","['containment: (counter, is_used_in, counterthread)', 'containment: (counterthread, includes, counter)']","[""('class', 'containment', 'class'): (counter, is_used_in, counterthread)"", ""('class', 'containment', 'class'): (counterthread, includes, counter)""]"
"The easiest way to create a subclass of ThreadLocal is to simply create an anonymous subclass, right where you create the ThreadLocal variable.","['creation: (threadlocal, create a subclass, threadlocal())']",[]
"Here is an example of creating a ThreadLocal using its withInitial() static factory method, passing a simple Supplier implementation as parameter:","['creation: (threadlocal, creating withinitial using supplier, withinitial())', 'dependency: (withinitial(), using supplier implementation, supplier)']","[""('class', 'creation', 'method'): (threadlocal, creating withinitial using supplier, withinitial())""]"
Notice how the format() method calls the getThreadLocalSimpleDateFormat() method to obtain a Java SimpleDatFormat instance.,"['dependency: (format(), obtain, getthreadlocalsimpledateformat)', 'return: (getthreadlocalsimpledateformat, calls, simpledateformat)']",[]
"The Counter class could have been written like this instead, using a Lock instead of a synchronized block:","['replacement: (counter, using, lock)']","[""('class', 'replacement', 'class'): (counter, using, lock)""]"
"While isLocked is true, the thread calling lock() is parked waiting in the wait() call.","['dependency: (islocked, condition_for_execution, lock())', 'dependency: (islocked, condition_for_execution, wait())', 'dependency: (islocked, prerequisite, thread)', 'collaboration: (lock(), interacts_with, wait())', 'dependency: (lock(), requires, thread)', 'dependency: (wait(), relies_on, thread)']",[]
"When the thread is done with the code in the critical section (the code between lock() and unlock()), the thread calls unlock().","['dependency: (lock(), prerequisite_for_execution, unlock())']","[""('method', 'dependency', 'method'): (lock(), prerequisite_for_execution, unlock())""]"
"Otherwise, a single call to unlock() will unlock the lock, even if the lock has been locked multiple times.","['modification: (unlock(), changes_state_of, lock)']",[]
"That you would not call wait() and notify() on an internal monitor object, but rather on the This is probably true.","['exception: (wait(), call, notify())']",[]
This is how such exclusive access could look using a synchronized block in Java: public class SynchronizedCounter { long count = 0; public void inc() { synchronized(this) { count++; } } public long count() { synchronized(this) { return this.count; } } } Notice how the inc() and count() methods both contain a synchronized block.,"['containment: (synchronizedcounter, contains_method, inc)', 'containment: (synchronizedcounter, contains_method, count)', 'dependency: (inc, depends_on_synchronized_block, count)']","[""('method', 'dependency', 'method'): (inc, depends_on_synchronized_block, count)""]"
"import java.util.concurrent.atomic.AtomicBoolean; import java.util.concurrent.atomic.AtomicStampedReference; public class NonblockingTemplate { public static class IntendedModification { public AtomicBoolean completed = new AtomicBoolean(false); } private AtomicStampedReference<IntendedModification> ongoingMod = new AtomicStampedReference<IntendedModification>(null, 0); //declare the state of the data structure here.","['containment: (java.util.concurrent.atomic.atomicboolean, is contained within, java.util.concurrent.atomic.atomicstampedreference)']","[""('class', 'containment', 'class'): (java.util.concurrent.atomic.atomicboolean, is contained within, java.util.concurrent.atomic.atomicstampedreference)""]"
Here is how the lockRead() and unlockRead() methods looks after that change:,"['modification: (lockread(), change_of_behavior, unlockread())']","[""('method', 'modification', 'method'): (lockread(), change_of_behavior, unlockread())""]"
Here is how the lockWrite() and unlockWrite() methods look after that change:,"['modification: (lockwrite(), change_applies_to, unlockwrite())']","[""('method', 'modification', 'method'): (lockwrite(), change_applies_to, unlockwrite())""]"
"You can read more about it in the java.util.concurrent.Semaphore text, in my java.util.concurrent tutorial.","['containment: (java.util.concurrent, contains_reference_to, java.util.concurrent.semaphore)', 'containment: (java.util.concurrent.semaphore, mentioned_in, java.util.concurrent.tutorial)']",[]
The take() method sends a signal which is stored internally in the Semaphore.,"['dependency: (take(), sends a signal to, semaphore)']",[]
"That way the signal is not missed, even if doNotify() is called before doWait().","['dependency: (donotify(), prerequisite, dowait())']","[""('method', 'dependency', 'method'): (donotify(), prerequisite, dowait())""]"
"If you look at the Synchronizer class above and look into this Lock implementation you will notice that threads are now blocked trying to access the lock() method, if more than one thread calls lock() simultanously.","['dependency: (synchronizer, requires, lock())']","[""('class', 'dependency', 'method'): (synchronizer, requires, lock())""]"
"The thread calling unlock() will take the top QueueObject in the queue and call doNotify() on it, to awaken the thread waiting on that object.","['collaboration: (donotify(), interact_with, queueobject)']",[]
"The queueObject.doWait() call is placed outside the synchronized(this) block to avoid nested monitor lockout, so another thread can actually call unlock() when no thread is executing inside the synchronized(this) block in lock() method.","['containment: (synchronized(this), inside, lock())', 'dependency: (queueobject.dowait(), to avoid nested monitor lockout, synchronized(this))', 'collaboration: (queueobject.dowait(), call is placed outside, synchronized(this))', 'collaboration: (queueobject.dowait(), another thread can actually call, unlock())', 'dependency: (synchronized(this), when no thread is executing, unlock())']","[""('method', 'containment', 'method'): (synchronized(this), inside, lock())"", ""('method', 'dependency', 'method'): (queueobject.dowait(), to avoid nested monitor lockout, synchronized(this))"", ""('method', 'dependency', 'method'): (synchronized(this), when no thread is executing, unlock())""]"
"Below here is the PoolThreadRunnable class which implements the Runnable interface, so it can be executed by a Java thread:","['inheritance: (poolthreadrunnable, implements, runnable)']",[]
"Notice how the add() method returns a new ImmutableValue instance with the result of the add operation, rather than adding the value to itself.","['immutability: (immutablevalue, ensures, immutability)']",[]
"The class java.lang.Object defines three methods, wait(), notify(), and notifyAll(), to facilitate this.","['containment: (java.lang.object, defines, wait())', 'containment: (java.lang.object, defines, notify())', 'containment: (java.lang.object, defines, notifyall())', 'collaboration: (wait(), facilitate, notify())', 'collaboration: (wait(), facilitate, notifyall())', 'collaboration: (notify(), facilitate, notifyall())']",[]
"In other words, the calling thread must call wait() or notify() from inside a synchronized block.","['dependency: (wait(), prerequisite_for_execution, notify())']","[""('method', 'dependency', 'method'): (wait(), prerequisite_for_execution, notify())""]"
The methods notify() and notifyAll() do not save the method calls to them in case no threads are waiting when they are called.,"['equivalence: (notify(), do not save method calls, notifyall())']","[""('method', 'equivalence', 'method'): (notify(), do not save method calls, notifyall())""]"
"If the doNotify() method had called notifyAll() instead of notify(), all waiting threads had been awakened and checked for signals in turn.","['replacement: (donotify(), called notifyall() instead of, notify())', 'dependency: (notifyall(), awakened and checked for signals in turn, notify())']","[""('method', 'replacement', 'method'): (donotify(), called notifyall() instead of, notify())"", ""('method', 'dependency', 'method'): (notifyall(), awakened and checked for signals in turn, notify())""]"
"The other of C and D would go back to waiting, because the thread discovering the signal clears it on the way out of doWait().",,[]
"The method compareAndSet() allows you to compare the current value of the AtomicBoolean to an expected value, and if current value is equal to the expected value, a new value can be set on the AtomicBoolean.","['comparison: (compareandset(), evaluates current value against expected value, atomicboolean)', 'modification: (compareandset(), sets new value if condition satisfied, atomicboolean)']","[""('method', 'modification', 'class'): (compareandset(), sets new value if condition satisfied, atomicboolean)""]"
"The AtomicInteger class provides you with a int variable which can be read and written atomically, and which also contains advanced atomic operations like compareAndSet().","['collaboration: (atomicinteger, provides, compareandset())']",[]
You can get the value of an AtomicInteger instance via the get() method.,"['return: (atomicinteger, value retrieval via, get())']",[]
Calling addAndGet() is also an atomic operation (like all operations on the AtomicIntegerArray).,"['equivalence: (addandget(), atomic operation like all operations on, atomicintegerarray)']","[""('method', 'equivalence', 'class'): (addandget(), atomic operation like all operations on, atomicintegerarray)""]"
You should check out the JavaDoc for the AtomicIntegerArray class to learn more about those methods.,,[]
"The AtomicLong class provides you with a long variable which can be read and written atomically, and which also contains advanced atomic operations like compareAndSet().","['containment: (atomiclong, contains, compareandset)']",[]
You can set the value of an AtomicLong instance via the set() method.,"['modification: (atomiclong, set value via, set())']","[""('class', 'modification', 'method'): (atomiclong, set value via, set())""]"
The Java AtomicLongArray class (java.util.concurrent.atomic.AtomicLongArray) represents an array of long .,,[]
You can get the value of a given element using the get() method on the AtomicLongArray.,"['dependency: (get(), using on, atomiclongarray)']",[]
You can set the value of a given element using the set() method on the AtomicLongArray.,"['modification: (atomiclongarray, set the value, set())']","[""('class', 'modification', 'method'): (atomiclongarray, set the value, set())""]"
"AtomicReference even has an advanced compareAndSet() method which lets you compare the reference to an expected value (reference) and if they are equal, set a new reference inside the AtomicReference object.","['comparison: (atomicreference, compare the reference to an expected value, compareandset)', 'containment: (atomicreference, set a new reference inside, atomicreference)']","[""('class', 'containment', 'class'): (atomicreference, set a new reference inside, atomicreference)""]"
Notice how it is no longer necessary to cast the referenced returned by get() because the compiler knows it will return a String reference.,"['return: (get, returns, string)']","[""('method', 'return', 'class'): (get, returns, string)""]"
"The compareAndSet() method can compare the reference stored in the AtomicReference instance with an expected reference, and if they two references are the same (not equal as in equals() but same as in ==), then a new reference can be set on the AtomicReference instance.","['comparison: (compareandset(), evaluates_reference_equality, atomicreference)', 'comparison: (compareandset(), evaluates_reference_equality, equals())', 'replacement: (compareandset(), updates_reference_conditionally, atomicreference)']","[""('method', 'comparison', 'method'): (compareandset(), evaluates_reference_equality, equals())"", ""('method', 'replacement', 'class'): (compareandset(), updates_reference_conditionally, atomicreference)""]"
If you have a typed AtomicStampedReference then getReference() returns a reference to the type you declared on the AtomicStampedReference variable when you created it.,"['dependency: (atomicstampedreference, requires, getreference())', 'return: (getreference(), provides, atomicstampedreference)']","[""('class', 'dependency', 'method'): (atomicstampedreference, requires, getreference())"", ""('method', 'return', 'class'): (getreference(), provides, atomicstampedreference)""]"
The AtomicStampedReference also contains a getStamp() method which can be used to obtain the internally stored stamp.,"['containment: (atomicstampedreference, contains, getstamp())']",[]
"The compareAndSet() method can compare the reference stored in the AtomicStampedReference instance with an expected reference, and the stored stamp with an expected stamp, and if they two references and stamps are the same (not equal as in equals() but same as in ==), then a new reference can be set on the AtomicStampedReference instance.","['comparison: (compareandset, compare the reference with expected reference and stamp, atomicstampedreference)', 'comparison: (compareandset, compare with an expected reference and stamp, equals)']","[""('method', 'comparison', 'method'): (compareandset, compare with an expected reference and stamp, equals)""]"
"The BlockingDeque interface in the java.util.concurrent class represents a deque which is thread safe to put into, and take instances from.","['creation: (blockingdeque, represents a deque which is thread safe, java.util.concurrent)']",[]
"The ConcurrentMap has a few extra atomic methods in addition to the methods it inherits from its superinterface, java.util.Map.","['inheritance: (concurrentmap, inherits methods from, java.util.map)']","[""('interface', 'inheritance', 'interface'): (concurrentmap, inherits methods from, java.util.map)""]"
"The java.util.concurrent.ConcurrentNavigableMap class is a java.util.NavigableMap with support for concurrent access, and which has concurrent access enabled for its submaps.","['dependency: (java.util.concurrent.concurrentnavigablemap, has concurrent access enabled for, its submaps)']",[]
"First, the BlockingQueueExample class which starts a Producer and a Consumer in separate threads.","['collaboration: (blockingqueueexample, starts, producer)', 'collaboration: (blockingqueueexample, starts, consumer)']","[""('class', 'collaboration', 'class'): (blockingqueueexample, starts, producer)"", ""('class', 'collaboration', 'class'): (blockingqueueexample, starts, consumer)""]"
The Java BlockingQueue add() method will add the element passed as parameter to this method if the BlockingQueue has space for it internally.,"['dependency: (blockingqueue, has space for, add())']","[""('class', 'dependency', 'method'): (blockingqueue, has space for, add())""]"
"If the BlockingQueue does not have space internally for this new element, the add() method throws an IllegalStateException.","['dependency: (blockingqueue, does not have space internally, add())', 'exception: (add(), throws, illegalstateexception)']",[]
The remove() method will use the o.equals(element) to decide if the object o passed as parameter matches a given element in the BlockingQueue.,"['comparison: (remove(), uses_equality_check_with, equals())', 'dependency: (remove(), depends_on, equals())', 'containment: (remove(), interacts_with, blockingqueue)', 'containment: (equals(), assists_in_comparison_within, blockingqueue)']","[""('method', 'comparison', 'method'): (remove(), uses_equality_check_with, equals())"", ""('method', 'dependency', 'method'): (remove(), depends_on, equals())"", ""('method', 'containment', 'class'): (remove(), interacts_with, blockingqueue)"", ""('method', 'containment', 'class'): (equals(), assists_in_comparison_within, blockingqueue)""]"
"If the BlockingQueue does not contain any elements, the element() method will throw a NoSuchElementException.","['containment: (blockingqueue, does_not_contain, element())', 'exception: (element(), will_throw, nosuchelementexception)']",[]
The result of that is that the call() method will return a String.,"['return: (call(), return, string)']","[""('method', 'return', 'class'): (call(), return, string)""]"
"The Java ExecutorService interface, java.util.concurrent.ExecutorService, represents an asynchronous execution mechanism which is capable of executing tasks concurrently in the background.",,[]
"The Java ExecutorService execute(Runnable) method takes a java.lang.Runnable object, and executes it asynchronously.","['equivalence: (runnable, is_a, java.lang.runnable)']",[]
"The invokeAny() method takes a collection of Callable objects, or subinterfaces of Callable.",,[]
The invokeAll() method invokes all of the Callable objects you pass to it in the collection passed as parameter.,,[]
The main difference between the Runnable run() method and the Callable call() method is that the call() method can return an Object from the method call.,"['comparison: (runnable.run(), main difference, callable.call())', 'return: (callable.call(), can return an object from the method call, runnable.run())']","[""('method', 'comparison', 'method'): (runnable.run(), main difference, callable.call())"", ""('method', 'return', 'method'): (callable.call(), can return an object from the method call, runnable.run())""]"
"The ExecutorService awaitTermination() method will block the thread calling it until either the ExecutorService has shutdown completely, or until a given time out occurs.","['dependency: (executorservice, blocks until terminated or timeout, awaittermination())']",[]
The awaitTermination() method is typically called after calling shutdown() or shutdownNow().,"['dependency: (awaittermination, is typically called after, shutdown)', 'dependency: (awaittermination, is typically called after, shutdownnow)']",[]
In the following sections I will explain how to use the ReentrantLock class as a Lock.,"['conversion: (reentrantlock, use as, lock)']",[]
To unlock the Lock instance you must call its unlock() method.,"['dependency: (lock, requires calling, unlock())']","[""('class', 'dependency', 'method'): (lock, requires calling, unlock())""]"
"To better understand how using a Lock looks different from using a synchronized block, I have created two simple concurrent Counter classes which protects their internal count in different ways.","['comparison: (lock, looks different from using, counter)']","[""('class', 'comparison', 'class'): (lock, looks different from using, counter)""]"
"Notice how the calculate() method both locks the Calculator instance's Lock before performing any calculations, and also call the add() and subtract() methods which also locks the lock.","['containment: (lock, used by, calculator)']","[""('class', 'containment', 'class'): (lock, used by, calculator)""]"
"If the Lock instance is already locked, the thread calling lock() is blocked until the Lock is unlocked.","['dependency: (lock, prerequisite for blocking, lock())']","[""('class', 'dependency', 'method'): (lock, prerequisite for blocking, lock())""]"
The Java ReentrantLock getHoldCount() method returns the number of times a given thread has locked this Lock instance.,"['return: (reentrantlock, returns the number of times a given thread has locked, getholdcount())']",[]
"The Java CertPath class (java.security.cert.CertPath represents a chain of cryptographic identity certificates (Java Certificate objects), where each certificate is the digital signer of the next certificate in the chain.","['creation: (certpath, represents formation of, java.security.cert.certpath)', 'containment: (certpath, includes, chain of cryptographic identity certificates)']",[]
The CertPath getType() method returns a string telling what type of certificates (e.g.,"['return: (certpath, gettype, gettype())']",[]
If you want to set a different offset for the dest byte array there is a version of update() and doFinal() which takes an offset parameter extra.,"['modification: (update(), takes an offset parameter, dofinal())']","[""('method', 'modification', 'method'): (update(), takes an offset parameter, dofinal())""]"
Notice the call to update() and then doFinal() for these two blocks of data.,"['dependency: (update(), prerequisite_for, dofinal())']","[""('method', 'dependency', 'method'): (update(), prerequisite_for, dofinal())""]"
To generate an asymmetric key pair you can use the KeyPairGenerator (java.security.KeyPairGenerator).,"['containment: (java.security, includes, keypairgenerator)']",[]
You create a KeyGenerator instance by calling the static method getInstance() passing as parameter the name of the encryption algorithm to create a key for.,"['creation: (keygenerator, create, getinstance())']","[""('class', 'creation', 'method'): (keygenerator, create, getinstance())""]"
Initializing a KeyGenerator instance is done by calling its init() method.,"['dependency: (keygenerator, is initialized by, init())']","[""('class', 'dependency', 'method'): (keygenerator, is initialized by, init())""]"
Generating a key is done by calling the KeyGenerator generateKey() method.,"['creation: (keygenerator, generates, generatekey())']","[""('class', 'creation', 'method'): (keygenerator, generates, generatekey())""]"
You can access the PublicKey of a KeyPair by calling its getPublic() method.,"['containment: (keypair, access, publickey)', 'dependency: (publickey, by calling, getpublic())', 'return: (getpublic(), method, keypair)']","[""('method', 'return', 'class'): (getpublic(), method, keypair)""]"
You can access the PrivateKey of a KeyPair by calling the getPrivate() method.,"['containment: (keypair, access privatekey, privatekey)', 'dependency: (privatekey, access by calling getprivate(), getprivate())']","[""('class', 'containment', 'class'): (keypair, access privatekey, privatekey)"", ""('class', 'dependency', 'method'): (privatekey, access by calling getprivate(), getprivate())""]"
You can create a Java KeyStore instance by calling its getInstance() method.,"['creation: (java keystore, instance creation using, getinstance())']","[""('class', 'creation', 'method'): (java keystore, instance creation using, getinstance())""]"
This Keytool -delete command will remove the KeyStore entry with the alias testkey from the KeyStore stored in the file keystore.jks .,"['replacement: (keytool, will_remove_entry_from, keystore)']","[""('class', 'replacement', 'class'): (keytool, will_remove_entry_from, keystore)""]"
"You create a digital signature by calling the update() method one or more times, finishing with a call to sign().","['dependency: (update(), prerequisite_for, sign())']","[""('method', 'dependency', 'method'): (update(), prerequisite_for, sign())""]"
"If you need to read and write the date and time to a database, use the java.sql.Date and java.sql.Timestamp classes.","['equivalence: (java.sql.date, read and write the date and time, java.sql.timestamp)']","[""('class', 'equivalence', 'class'): (java.sql.date, read and write the date and time, java.sql.timestamp)""]"
Here is an example of how to create a Duration object using the between() method:,"['creation: (duration, create, between())']","[""('class', 'creation', 'method'): (duration, create, between())""]"
Here is an example that shows how to create a LocalDateTime object via the now() method:,"['creation: (localdatetime, creation_via_now_method, now())']","[""('class', 'creation', 'method'): (localdatetime, creation_via_now_method, now())""]"
The LocalTime class in the Java 8 date time API represents a specific time of day without any time zone information.,,[]
The parameter passed to the of() method is the ID of the time zone to create a ZoneId for.,"['creation: (of(), create, zoneid)']","[""('method', 'creation', 'class'): (of(), create, zoneid)""]"
"If you need to set a date on a java.sql.PreparedStatement or get a date from a java.sql.ResultSet, you will interact with java.sql.Date.","['collaboration: (java.sql.preparedstatement, interact with, java.sql.date)', 'collaboration: (java.sql.resultset, interact with, java.sql.date)']","[""('class', 'collaboration', 'class'): (java.sql.preparedstatement, interact with, java.sql.date)"", ""('class', 'collaboration', 'class'): (java.sql.resultset, interact with, java.sql.date)""]"
One difference in the java.sql.Timestamp from its superclass java.util.Date is its ability to hold the nanoseconds of a date too.,"['comparison: (java.sql.timestamp, difference in ability to hold nanoseconds, java.util.date)', 'inheritance: (java.sql.timestamp, superclass relationship, java.util.date)']","[""('class', 'comparison', 'class'): (java.sql.timestamp, difference in ability to hold nanoseconds, java.util.date)""]"
You can get and set the nanoseconds using the getNanos() and setNanos().,"['collaboration: (getnanos(), interacting_with, setnanos())', 'replacement: (setnanos(), updating, getnanos())']","[""('method', 'replacement', 'method'): (setnanos(), updating, getnanos())""]"
The Calendar class has a corresponding set() method so you can set these fields too.,"['modification: (calendar, has corresponding method, set())', 'modification: (calendar, set fields, fields)', 'dependency: (set(), set these, fields)']","[""('class', 'modification', 'method'): (calendar, has corresponding method, set())""]"
"You can access the date and time contained in a java.util.Date instance using the getTime() method, like this:","['containment: (java.util.date, access the date and time contained, gettime())']",[]
You can compare java.util.Date instance because the class implements the java.lang.Comparable interface.,"['comparison: (java.util.date, implements the, java.lang.comparable)']","[""('class', 'comparison', 'interface'): (java.util.date, implements the, java.lang.comparable)""]"
The java.util.TimeZone class is used in conjunction with the java.util.Calendar class.,"['collaboration: (java.util.timezone, used in conjunction with, java.util.calendar)']","[""('class', 'collaboration', 'class'): (java.util.timezone, used in conjunction with, java.util.calendar)""]"
As you can see the readNumberFromUrl() needs to declare throwing both the BadUrlException and the BadNumberException that are thrown from the readDataFromUrl() and converData() methods.,"['exception: (converdata, throwing, badnumberexception)']",[]
As you can see the readNumberFromUrl() method now only declares throwing ApplicationException.,"['exception: (readnumberfromurl(), declares throwing, applicationexception)']",[]
"In the example with FileNotFoundException, if you catch IOException which is the superclass of FileNotFoundException, you will also catch FileNotFoundException.","['inheritance: (filenotfoundexception, superclass of, ioexception)']",[]
"If the input.close() call fails, and an IOException is thrown, then it is caught, wrapped and rethrown.","['exception: (close(), is_thrown_as, ioexception)']",[]
The Throwable class has a method named addSuppressed() which takes a Throwable object as parameter.,"['containment: (throwable, has a method, addsuppressed())']",[]
The applyPattern() method simply applies a new pattern to the DecimalFormat instance as if it were created with that pattern.,"['modification: (applypattern(), applies a new pattern to, decimalformat)']","[""('method', 'modification', 'class'): (applypattern(), applies a new pattern to, decimalformat)""]"
The applyLocalizedPattern() does the same as applyPattern() except it interpretes the characters in the pattern according to the Locale the DecimalFormat was created with.,"['equivalence: (applylocalizedpattern, interprets pattern similarly to, applypattern)', 'dependency: (applylocalizedpattern, depends on locale of, decimalformat)', 'dependency: (applypattern, depends on locale of, decimalformat)']","[""('method', 'equivalence', 'method'): (applylocalizedpattern, interprets pattern similarly to, applypattern)""]"
"To sort a collection of strings according to the rules of a certain Locale, you use a java.text.Collator instance created for that specific Locale.","['creation: (java.text.collator, is created for, java.util.locale)']",[]
The factory method Locale.forLanguageTag() can also be used to create a Locale instance.,"['creation: (locale.forlanguagetag(), create_instance, locale)']","[""('method', 'creation', 'class'): (locale.forlanguagetag(), create_instance, locale)""]"
Finally you can access the localized values in the ResourceBundle via its different getString() and getObject() etc.,"['containment: (getstring(), access, resourcebundle)', 'containment: (getobject(), access, resourcebundle)']","[""('method', 'containment', 'class'): (getstring(), access, resourcebundle)"", ""('method', 'containment', 'class'): (getobject(), access, resourcebundle)""]"
For this example to work you should put a standard Java property file named MyBundle.properties in a Java package named i18n.,"['containment: (i18n, named, mybundle.properties)']",[]
Once you have created a SimpleDateFormat instance you can format dates using its format() method.,"['dependency: (simpledateformat, requires usage of, format())']","[""('class', 'dependency', 'method'): (simpledateformat, requires usage of, format())""]"
The Date instance passed to the format() method is a java.util.Date instance.,"['dependency: (format(), passed to, java.util.date)']",[]
"The Java SimpleDateFormat class is also capable of formatting a Date object into a StringBuffer, instead of returning an individual String with the date formatted.","['conversion: (simpledateformat, formatting, date)', 'conversion: (simpledateformat, formatting, stringbuffer)']","[""('class', 'conversion', 'class'): (simpledateformat, formatting, date)"", ""('class', 'conversion', 'class'): (simpledateformat, formatting, stringbuffer)""]"
You can parse a String into a java.util.Date instance using the parse() method of the SimpleDateFormat instance.,"['conversion: (java.text.simpledateformat, parses, java.util.date)', 'dependency: (java.util.date, requires, parse())', 'containment: (java.text.simpledateformat, contains, parse())']","[""('class', 'conversion', 'class'): (java.text.simpledateformat, parses, java.util.date)"", ""('class', 'dependency', 'method'): (java.util.date, requires, parse())""]"
You can set the time zone of a SimpleDateFormat using its setTimeZone() method.,"['modification: (simpledateformat, set time zone, settimezone())']","[""('class', 'modification', 'method'): (simpledateformat, set time zone, settimezone())""]"
"In general you can call the markSupported() method to find out if mark() and reset() are supported on a given InputStream or not, but the BufferedInputStream supports them.","['containment: (bufferedinputstream, supports_features_for, inputstream)']","[""('class', 'containment', 'class'): (bufferedinputstream, supports_features_for, inputstream)""]"
"After that, the while loop exits, and the BufferedInputStream close() method is called.","['modification: (bufferedinputstream, method_called, close())']","[""('class', 'modification', 'method'): (bufferedinputstream, method_called, close())""]"
"The setSource() method actually returns a reference to the ReusableBufferedInputStream, so you can actually create a ReusableBufferedInputStream and set the source in a single instruction:","['return: (setsource(), returns_reference_to, reusablebufferedinputstream)']","[""('method', 'return', 'class'): (setsource(), returns_reference_to, reusablebufferedinputstream)""]"
To write data to a Java BufferedOutputStream you can use its write() method.,"['dependency: (bufferedoutputstream, requires, write())']","[""('class', 'dependency', 'method'): (bufferedoutputstream, requires, write())""]"
If you want to make sure that all written data is written to disk without having to close the BufferedOutputStream you can call its flush() method.,"['dependency: (bufferedoutputstream, requires, flush())']","[""('class', 'dependency', 'method'): (bufferedoutputstream, requires, flush())""]"
"Once the try block is exited, the close() method of the BufferedOutputStream is called automatically, because the BufferedOutputStream was declared inside the parentheses of the try block.","['dependency: (bufferedoutputstream, requires, close())']","[""('class', 'dependency', 'method'): (bufferedoutputstream, requires, close())""]"
"The Java BufferedReader class is a subclass of the Java Reader class, so you can use a BufferedReader anywhere a Reader is required.","['inheritance: (bufferedreader, is a subclass of, reader)', 'dependency: (bufferedreader, can be used anywhere a, reader)']","[""('class', 'dependency', 'class'): (bufferedreader, can be used anywhere a, reader)""]"
"The Java BufferedReader class also has a read() method that takes a char array as parameter, as well as a start offset and length.","['dependency: (bufferedreader, has a method named, read())', 'containment: (bufferedreader, includes a method for handling, char array)']","[""('class', 'dependency', 'method'): (bufferedreader, has a method named, read())""]"
The Java BufferedReader has a special read method named readLine() which reads a full line of text from the BufferedReader's internal buffer.,"['containment: (bufferedreader, internal buffer includes, readline())', 'dependency: (bufferedreader, relies on special read method, readline())', 'traversal: (bufferedreader, facilitates reading a full line of text using, readline())']","[""('class', 'dependency', 'method'): (bufferedreader, relies on special read method, readline())""]"
The Java BufferedWriter's flush() method flushes all data written to the BufferedWriter to the underlying data destination.,"['dependency: (flush(), requires data written, bufferedwriter)']",[]
The mark() method of the ByteArrayInputStream class sets an internal mark at the current byte position - meaning right after the previous byte read.,"['modification: (bytearrayinputstream, sets an internal mark, mark())']","[""('class', 'modification', 'method'): (bytearrayinputstream, sets an internal mark, mark())""]"
"Since the Java ByteArrayOutputStream class is a subclass of the Java OutputStream class, you write bytes to it using the same write methods that OutputStream has:","['inheritance: (bytearrayoutputstream, is a subclass of, outputstream)', 'equivalence: (bytearrayoutputstream, using the same write methods as, write)', 'dependency: (outputstream, using the same write methods as, write)']","[""('class', 'equivalence', 'method'): (bytearrayoutputstream, using the same write methods as, write)"", ""('class', 'dependency', 'method'): (outputstream, using the same write methods as, write)""]"
"Once you have finished writing to the ByteArrayOutputStream you can obtain all the bytes written as a Java byte array, using the ByteArrayOutputStream toByteArray() method.","['conversion: (bytearrayoutputstream, obtain as byte array, tobytearray())', 'containment: (bytearrayoutputstream, inclusion of bytes written, tobytearray())']",[]
You can read a Java float from the DataInputStream using its readFloat() method.,"['containment: (datainputstream, using readfloat(), readfloat())']",[]
You can read a Java unsigned short (only positive values) from the DataInputStream using its readUnsignedShort() method.,"['containment: (datainputstream, includes, readunsignedshort())']",[]
You can read a Java long from the DataInputStream using its readLong() method.,"['containment: (datainputstream, consists_of, readlong())']",[]
"To rename (or move) a file, call the method renameTo() on the File class.","['modification: (renameto(), rename or move, file)']","[""('method', 'modification', 'class'): (renameto(), rename or move, file)""]"
You can obtain a list of all the files in a directory by calling either the Java File list() method or the listFiles() method.,"['equivalence: (list(), alternate_with, listfiles())']","[""('method', 'equivalence', 'method'): (list(), alternate_with, listfiles())""]"
Here is an example of listing all files in a directory via the Java File list() and listFiles() methods:,"['equivalence: (list(), alternate_method, listfiles())']","[""('method', 'equivalence', 'method'): (list(), alternate_method, listfiles())""]"
To write data to a Java FileOutputStream you can use its write() method.,"['dependency: (fileoutputstream, use, write())']","[""('class', 'dependency', 'method'): (fileoutputstream, use, write())""]"
Here is an example of writing data to a Java FileOutputStream using its write() method:,"['dependency: (fileoutputstream, requires use of, write())']","[""('class', 'dependency', 'method'): (fileoutputstream, requires use of, write())""]"
Here is an example of closing a Java FileOutputStream by calling its close() method:,"['modification: (fileoutputstream, closing by calling its close() method, close())']","[""('class', 'modification', 'method'): (fileoutputstream, closing by calling its close() method, close())""]"
You can convert a FileOutputStream to a character based Writer using the Java OutputStreamWriter class.,"['conversion: (fileoutputstream, convert_to, outputstreamwriter)']","[""('class', 'conversion', 'class'): (fileoutputstream, convert_to, outputstreamwriter)""]"
The Java FileWriter's flush() method flushes all data written to the FileWriter to the underlying file.,"['modification: (filewriter, flushes data to underlying file, flush())']","[""('class', 'modification', 'method'): (filewriter, flushes data to underlying file, flush())""]"
Here is an example of flushing data written to a Java FileWriter by calling its flush() method:,"['dependency: (filewriter, requires_flush_method_for_flushing, flush())']","[""('class', 'dependency', 'method'): (filewriter, requires_flush_method_for_flushing, flush())""]"
Notice how there is no longer any explicit close() method call to the FileWriter instance.,"['dependency: (close(), requires usage of, filewriter)']",[]
The Java InputStream class contains a method called readAllBytes() (since Java 9).,"['containment: (inputstream, contains_method, readallbytes())']",[]
Here is an example of reading all bytes from a Java InputStream via readAllBytes():,"['containment: (inputstream, includes, readallbytes())']",[]
"If an InputStream subclass supports the mark() and reset() methods, then that subclass should override the markSupported() to return true.","['dependency: (inputstream, supports, mark())', 'dependency: (inputstream, supports, reset())', 'dependency: (inputstream, override, marksupported())', 'dependency: (inputstream, return, true)']","[""('class', 'dependency', 'method'): (inputstream, supports, mark())"", ""('class', 'dependency', 'method'): (inputstream, supports, reset())"", ""('class', 'dependency', 'method'): (inputstream, override, marksupported())""]"
The read() method of an InputStreamReader returns an int which contains the char value of the char read.,"['return: (inputstreamreader, returns, read())']",[]
Notice how there is no longer any explicit close() method call to the CharArrayWriter instance.,"['exception: (close(), no longer any explicit call to, chararraywriter)']",[]
"Like with FilterInputStream, I see no sensible purpose for this class.",,[]
They make it somewhat easier to understand what the classes are targeting.,,[]
The read() method of a Java PipedReader returns an int which contains the char value of the character read.,"['return: (read(), returns, pipedreader)']","[""('method', 'return', 'class'): (read(), returns, pipedreader)""]"
"Third, the example calls the advanced printf() method of the PrintWriter which can insert formatted numbers into a text string.","['containment: (printwriter, method, printf())']",[]
Closing a Java StringReader can be done using the close() method like this:,"['modification: (stringreader, can be closed using, close())']","[""('class', 'modification', 'method'): (stringreader, can be closed using, close())""]"
The Java OutputStream's flush() method flushes all data written to the OutputStream to the underlying data destination.,"['dependency: (outputstream, flushes, flush())', 'containment: (outputstream, includes, outputstream)', 'collaboration: (flush(), writes data to, outputstream)']","[""('class', 'dependency', 'method'): (outputstream, flushes, flush())"", ""('class', 'containment', 'class'): (outputstream, includes, outputstream)""]"
The Java OutputStreamWriter's flush() method flushes all data written to the OutputStreamWriter to the underlying data destination.,"['dependency: (outputstreamwriter, depends on flushing data to, flush())']","[""('class', 'dependency', 'method'): (outputstreamwriter, depends on flushing data to, flush())""]"
"If you push back multiple bytes into the PushbackInputStream, the latest byte pushed back will be returned first from read(), just like on a stack.","['dependency: (pushbackinputstream, requires order of pushback, read())', 'return: (read(), retrieves latest byte pushed back, pushbackinputstream)']","[""('class', 'dependency', 'method'): (pushbackinputstream, requires order of pushback, read())"", ""('method', 'return', 'class'): (read(), retrieves latest byte pushed back, pushbackinputstream)""]"
"You read bytes from the Java PushbackInputStream via its read() method, just like you do from a regular InputStream .","['traversal: (pushbackinputstream, read bytes via, read())', 'equivalence: (pushbackinputstream, just like, inputstream)']","[""('class', 'equivalence', 'class'): (pushbackinputstream, just like, inputstream)""]"
"Remember, calling this write() method will advance the file position of the RandomAccessFile by 1.","['modification: (write(), advance the file position, randomaccessfile)']","[""('method', 'modification', 'class'): (write(), advance the file position, randomaccessfile)""]"
The Java Reader class has a method named skip() which can be used to skip over a number of characters in the input that you do not want to read.,"['modification: (reader, has_a_method_named, skip())']","[""('class', 'modification', 'method'): (reader, has_a_method_named, skip())""]"
You do so by calling the nextToken() method of the StreamTokenizer inside a loop.,"['traversal: (nexttoken(), calling the method inside a loop, streamtokenizer)']",[]
"System.in, System.out and System.err are initialized by the Java runtime when a Java VM starts up, so you don't have to instantiate any streams yourself (although you can exchange them at runtime).","['replacement: (system.out, can_be_exchanged_with, system.err)']",[]
You will normally use a Writer subclass rather than a Writer directly.,"['inheritance: (writer, use a subclass rather than, writer)']",[]
The Java String parameter passed to the Class forName() method is the name of the JDBC driver class for the given JDBC driver.,,[]
"By the way, imagine that the used Person class looks like this:",,[]
Here is an example of creating a JDBC DatabaseMetaData object via the JDBC Connection getMetaData() method:,"['return: (connection, provides, getmetadata())']",[]
The ResultSet returned by the getColumns() method contains a list of columns for the given table.,,[]
Before the first next() call the ResultSet is positioned before the first row.,"['dependency: (next(), positioned_before, resultset)']",[]
"Once the row is ready to be inserted into the ResultSet, call the insertRow() method.","['containment: (insertrow(), inserted_into, resultset)']","[""('method', 'containment', 'class'): (insertrow(), inserted_into, resultset)""]"
"If you need to insert another row, explicitly call moveToInsertRow() to signal this to the ResultSet.","['dependency: (movetoinsertrow, requires signal to, resultset)']",[]
The purpose of an abstract class is to function as a base for subclasses.,,[]
"If a class has an abstract method, the whole class must be declared abstract.","['dependency: (class, requires, method)']","[""('class', 'dependency', 'method'): (class, requires, method)""]"
The example I showed you above with the URLProcessorBase class is actually an example of the Template Method design pattern.,"['equivalence: (urlprocessorbase, is an example of, template method)']","[""('class', 'equivalence', 'method'): (urlprocessorbase, is an example of, template method)""]"
In the above example the subclass SmartClock has a method called getTimeInSeconds() which accesses the time variable of the superclass Clock.,"['containment: (clock, contains, time)']",[]
The utility class is called Arrays and is located in the standard Java package java.util.,"['containment: (arrays, is located in, java.util)']",[]
The purpose of a constructor is to initialize the fields in the class.,"['dependency: (constructor, purpose, class)']",[]
Now the isValid() method returns the value returned by the value.equals() method call.,"['dependency: (isvalid(), returns the value returned by, equals())']","[""('method', 'dependency', 'method'): (isvalid(), returns the value returned by, equals())""]"
In many cases it would have made sense to place the getLicensePlate() method in the Vehicle class where the licensePlate field is located.,"['containment: (vehicle, contains_field, licenseplate)', 'containment: (vehicle, contains_method, getlicenseplate)', 'dependency: (getlicenseplate(), located_in, vehicle)', 'dependency: (getlicenseplate(), related_to, licenseplate)']",[]
"Here is the same instanceof example, but using a Truck object instead of a Car object: Truck truck = new Truck(); Vehicle vehicle = truck; boolean isCar = vehicle instanceof Car; After executing this code the isCar will contain the value false.","['comparison: (vehicle, evaluated using instanceof against, car)']","[""('class', 'comparison', 'class'): (vehicle, evaluated using instanceof against, car)""]"
The updateLicensePlate() method sets the license plate value on the licensePlate field in the Car class.,"['replacement: (updatelicenseplate(), sets the license plate value on, licenseplate)', 'containment: (licenseplate, field in, car)']",[]
"The getLicensePlate() method, however, returns the value of the licensePlate field in the Vehicle class.","['dependency: (getlicenseplate, depends on, vehicle)']",[]
"If you override a method in a subclass, and the method is all of a sudden removed or renamed or have its signature changed in the superclass, the method in the subclass no longer overrides the method in the superclass.","['modification: (superclass, change_signature, method)', 'inheritance: (subclass, overrides_method, superclass)']","[""('class', 'modification', 'method'): (superclass, change_signature, method)""]"
Here is a Java instanceof example illustrating the comparison of null against a class:,,[]
"That is because it is not the reference type that is compared against the target class or interface, but the actual type of the referenced object.","['comparison: (class, compared against, interface)']","[""('class', 'comparison', 'interface'): (class, compared against, interface)""]"
"A Java interface is a bit like a Java class, except a Java interface can only contain method signatures and fields.","['containment: (java interface, contain, fields)']",[]
The class does not need to implement (declare) the variables of an interface.,"['dependency: (class, need to implement, interface)']","[""('class', 'dependency', 'interface'): (class, need to implement, interface)""]"
"You must always create an instance of some class that implements the interface, and reference that instance as an instance of the interface.","['dependency: (class, create, instance)']",[]
"While it is normally possible for a class to implement multiple interfaces even if the interfaces contain methods with the same signature, this is not possible if one or more of these methods are default methods.","['dependency: (methods, conflict with, default methods)']","[""('method', 'dependency', 'method'): (methods, conflict with, default methods)""]"
In both of the above situations the Java compiler requires that the class implementing the interface(s) explicitly implements the method which causes the problem.,"['modification: (class, explicitly implements the method which causes the problem, interface)']",[]
The implementation in the class takes precedence over any default implementations.,,[]
"Since the return value of produce() is Object, it can return any Java object.","['return: (produce(), return any, object)']","[""('method', 'return', 'class'): (produce(), return any, object)""]"
"Notice how the object returned from the carProducer.produce() method call has to be cast to a Car instance, because the produce() method return type is Object.","['conversion: (car, cast_to, object)']","[""('class', 'conversion', 'class'): (car, cast_to, object)""]"
"As you can see, since the generic type for the CarProducer instance is set to Car, it is no longer necessary to cast the object returned from the produce() method, since the original method declaration in the MyProducer interface states, that this method returns the same type as is specified in the generic type when used.","['dependency: (carproducer, depends_on_generic_type_set, produce())', 'inheritance: (carproducer, follows_method_declaration_of, myproducer)', 'return: (produce(), outputs_same_type_as_specified, myproducer)']","[""('class', 'dependency', 'method'): (carproducer, depends_on_generic_type_set, produce())"", ""('method', 'return', 'interface'): (produce(), outputs_same_type_as_specified, myproducer)""]"
Now the result variable would end up with the value 12.5.,,[]
The example above defines a method called writeText inside a class named MyClass.,"['creation: (myclass, defines, writetext)', 'containment: (myclass, contains, writetext)']","[""('class', 'creation', 'method'): (myclass, defines, writetext)""]"
This would happen sometime at runtime - depending on when the application tried to use the missing class.,,[]
This example module descriptor declares that it requires the standard Java module named javafx.graphics.,,[]
Here is how you run the main class from a Java module JAR file:,,[]
In Java nested classes are classes that are defined inside another class.,,[]
Notice how you put new after the reference to the outer class in order to create an instance of the inner class.,,[]
"As you can see, an anonymous class implementing an interface is pretty similar to an anonymous class extending another class.","['equivalence: (interface, similar to, class)']",[]
"Users of the Cache class may never see the CacheEntry class, if they have no need to obtain information about the CacheEntry itself, but only the cached value.","['dependency: (cache, requirement, cacheentry)']","[""('class', 'dependency', 'class'): (cache, requirement, cacheentry)""]"
"If the classes A and B are located in the same Java package, there is no problem with the code above.","['dependency: (a, located in the same package as, b)', 'dependency: (a, located in the same package as, java)', 'dependency: (b, located in the same package as, java)']","[""('class', 'dependency', 'class'): (a, located in the same package as, b)""]"
"Instead of having a fixed number of layer packages which keep growing in number of classes, you get a growing number of application functionality packages with a smaller number of classes inside.",,[]
A Java Record is a special kind of Java class which has a concise syntax for defining immutable data-only classes.,,[]
You can add instance methods to a Java Record definition - just like you can with a regular Java class.,"['modification: (record, add instance methods to, instance methods)', 'comparison: (record, just like, class)', 'comparison: (instance methods, just like, class)']","[""('class', 'modification', 'method'): (record, add instance methods to, instance methods)"", ""('class', 'comparison', 'class'): (record, just like, class)""]"
Notice how the brandAsLowerCase() method calls the auto-generated brand() method internally.,"['dependency: (brandaslowercase(), internally calls, brand())']","[""('method', 'dependency', 'method'): (brandaslowercase(), internally calls, brand())""]"
"As you can see, a new StringBuilder is created, passing along the first String to its constructor, and the second String to its append() method, before finally calling the toString() method.","['creation: (stringbuilder, creation_of, append())', 'conversion: (stringbuilder, transforms_into, tostring())', 'dependency: (append(), prerequisite_for, tostring())']","[""('class', 'creation', 'method'): (stringbuilder, creation_of, append())"", ""('method', 'dependency', 'method'): (append(), prerequisite_for, tostring())""]"
You can search for substrings in Strings using the indexOf() method.,"['containment: (indexof(), search for substrings in, strings)']","[""('method', 'containment', 'class'): (indexof(), search for substrings in, strings)""]"
The Java String class also has a lastIndexOf() method which finds the last occurrence of a substring.,"['containment: (string, has_a, lastindexof())', 'traversal: (lastindexof(), finds_the_last_occurrence_of, string)']",[]
The Java String class contains a method called trim() which can trim a string object.,"['containment: (string, contains_method, trim())']",[]
"If not, the default toString() method (inherited from the Object class) will get called.","['inheritance: (tostring(), inherited from, object)']",[]
From Java 13 the Java String class got a new method called translateEscapes() which can translate escape codes that exist inside a String in the same way the Java compiler translates them.,"['conversion: (string, translates escape codes using, translateescapes())']",[]
When you create an instance of a class (an object) the object can have methods you can execute.,"['creation: (class, can create, method)']","[""('class', 'creation', 'method'): (class, can create, method)""]"
The second line assigns the floating point value 199.99 to the floating point variable named myFloat.,,[]
"When you click the ""Run..."" option, IntelliJ IDEA will first compile your Java class, and then run it.","['dependency: (run, requires compilation of, class)']",[]
"The logrb() methods work like the log() methods too, except they can obtain the log messages from a resource bundle.","['comparison: (logrb(), similarity in behavior, log())']","[""('method', 'comparison', 'method'): (logrb(), similarity in behavior, log())""]"
You can obtain the parent Logger of a given Logger using the getParent() method.,"['dependency: (logger, obtain_using, getparent())']","[""('class', 'dependency', 'method'): (logger, obtain_using, getparent())""]"
The getParameters() method returns the parameters to be inserted into the message of this LogRecord.,"['return: (getparameters(), returns the parameters to be inserted into the message of, logrecord)']","[""('method', 'return', 'class'): (getparameters(), returns the parameters to be inserted into the message of, logrecord)""]"
The getResourceBundle() method returns the ResourceBundle (if any) used to localize the message of this LogRecord.,"['return: (getresourcebundle(), returns, resourcebundle)']","[""('method', 'return', 'class'): (getresourcebundle(), returns, resourcebundle)""]"
"Note: This tutorial does not cover the other popular Java logging API's (Log4J, SLF4J, Apache Commons Logging, LogBack etc.).","['comparison: (log4j, is another popular java logging api like, slf4j)', 'comparison: (log4j, is another popular java logging api like, apache commons logging)', 'comparison: (log4j, is another popular java logging api like, logback)', 'comparison: (slf4j, is another popular java logging api like, apache commons logging)', 'comparison: (slf4j, is another popular java logging api like, logback)', 'comparison: (apache commons logging, is another popular java logging api like, logback)']",[]
Receiving data via a DatagramSocket is done by first creating a DatagramPacket and then receiving data into it via the DatagramSocket's receive() method.,"['dependency: (datagrampacket, is prerequisite for, receive())']","[""('class', 'dependency', 'method'): (datagrampacket, is prerequisite for, receive())""]"
The java.net package contains two interesting classes: The URL class and the URLConnection class.,"['comparison: (url, and, urlconnection)']","[""('class', 'comparison', 'class'): (url, and, urlconnection)""]"
You can check the when the read operation is finished by calling the isDone() method of the Future instance returned by the read() method.,"['dependency: (isdone(), dependency_on, future)', 'return: (read(), returns, future)']","[""('method', 'return', 'class'): (read(), returns, future)""]"
Each way to write data call one of the write() methods of the AsynchronousFileChannel.,"['dependency: (asynchronousfilechannel, requires calling, write())']","[""('class', 'dependency', 'method'): (asynchronousfilechannel, requires calling, write())""]"
The int returned by the read() method tells how many bytes were written into the Buffer.,"['dependency: (read(), prerequisites for how many bytes were written, buffer)', 'return: (read(), tells how many bytes were written, buffer)']","[""('method', 'return', 'class'): (read(), tells how many bytes were written, buffer)""]"
There is no guarantee of how many bytes the write() method writes to the FileChannel.,"['dependency: (write(), guarantee, filechannel)']",[]
You can obtain the current position of the FileChannel object by calling the position() method.,"['dependency: (filechannel, current position obtained by calling, position())']","[""('class', 'dependency', 'method'): (filechannel, current position obtained by calling, position())""]"
The Files.createDirectory() method creates a new directory from a Path instance.,"['creation: (files.createdirectory(), creates, path)']","[""('method', 'creation', 'class'): (files.createdirectory(), creates, path)""]"
The Java NIO Files class also contains a function for moving files from one path to another.,,[]
Here is a walkFileTree() that extends SimpleFileVisitor to look for a file named README.txt :,"['inheritance: (walkfiletree(), extends, simplefilevisitor)']",[]
"By walking through all directories and deleting all files (inside visitFile()) in each directory, and afterwards delete the directory itself (inside postVisitDirectory()) you can delete a directory with all subdirectories and files.","['dependency: (visitfile(), prerequisite_for_deleting_directories, postvisitdirectory())', 'traversal: (visitfile(), processes_files_in_directories_to_prepare_for_deletion, postvisitdirectory())']","[""('method', 'dependency', 'method'): (visitfile(), prerequisite_for_deleting_directories, postvisitdirectory())""]"
"In many cases though, you can replace the use of the File class with use of the Path interface.","['replacement: (file, replace the use of, path)']",[]
The normalize() method of the Path interface can normalize a path.,,[]
"As you saw in the previous section, when you register a Channel with a Selector the register() method returns a SelectionKey objects.",,[]
"You can also attach an object already while registering the Channel with the Selector, in the register() method.",,[]
NOTE: Only the interfaces specifically declared implemented by a given class is returned.,,[]
All you need to do is to obtain a ClassLoader and call its loadClass() method.,,[]
"When the MyAction class calls methods on the IMyFactory instance injected into its constructor by the container, the method calls are translated into calls to the IContainer.instance() method, which is the method you use to obtain instances from the container.",,[]
"You cannot ask for getters and setters explicitly, so you will have to scan through all the methods of a class and check if each method is a getter or setter.",,[]
To access a private field you will need to call the Class.getDeclaredField(String name) or Class.getDeclaredFields() method.,,[]
"By calling Field.setAcessible(true) you turn off the access checks for this particular Field instance, for reflection only.",,[]
"The methods Class.getMethod(String name, Class[] parameterTypes) and Class.getMethods() methods only return public methods, so they won't work.",,[]
"It will explain the basics of Java Reflection including how to work with arrays, annotations, generics and dynamic proxies, and do dynamic class loading and reloading.",,[]
"For instance, if you are introspecting a String array, you can detect that the element type is String by inspecting the array class.",,[]
"For instance, the character class [a-zA-Z] will match all letters between a and z or between A and Z .",,[]
"For that, you need to use the find(), start() and end() methods.",,[]
"In other words, if the regular expression matches the beginning of a text but not the whole text, lookingAt() will return true, whereas matches() will return false.",,[]
"In case you have started matching occurrences in a string via the find() method, the Matcher will internally keep a state about how far it has searched through the input text.",,[]
The Matcher replaceAll() and replaceFirst() methods can be used to replace parts of the string the Matcher is searching through.,,[]
A regular expression is also sometimes referred to as a pattern (hence the name of the Java Pattern class).,,[]
"Too keep this text short, the Matcher covered in more detail in the text about the Java Matcher class.",,[]
When you are finished reading data from the GZIPInputStream you should close it using its close() method.,,[]
"But, notice how no DI is used inside the BO.checkPersonIsValid() or the DAO.readPerson() methods.",,[]
"This little script defines the ""max"" factory as a call to the static max() method with input parameter 0 and 1 passed to the max() method.",,[]
"In other words, as a call to the get() method on the HttpRequestCache singleton.",,[]
The ScriptFactoryBuilder has a addFactories() method that takes an InputStream as parameter instead of a String.,,[]
"Notice how the HttpServletRequest and HttpServletResponse are not obtained by the ThreadLocal.get() method, but via the static methods getRequest() and getResponse().",,[]
"The IObjectMappingKey instance can contain more information about the class to be mapped, than a Class object can.",,[]
This is the object is obtained from the getResult() method of the IResultSetProcessor.,,[]
"This speeds up object mapping cache lookups because the hashCode() method returns this int id, and because equals() also only compares int id's, instead of Class objects, table names etc.",,[]
The extended class CustomObjectMapperBase is an empty implementation of the ICustomObjectMapper interface.,,[]
Just call the IObjectMapping.removeGetterMapping(String name) or IObjectMapping.removeSetterMapping(String name) method to do so.,,[]
"Second, you do not need the parentheses around the closure when calling doFirst() or doLast().",,[]
The and() method is used to combine two other Predicate functions in the same way I showed in the beginning of this Java functional composition tutorial.,,[]
"The Java Function compose() method composes a new Function instance from the Function instance it is called on, and the Function instance passed as parameter to the compose() method.",,[]
The first example of a higher order function is the Collections.sort() method which takes a Comparator as parameter.,,[]
The call to the map() method of the Stream interface is a non-terminal operation.,,[]
Only the first occurrence of this element will be included in the Stream returned by distinct().,,[]
"The findFirst() method returns an Optional from which you can obtain the element, if present.",,[]
"The Java Stream forEach() method is a terminal operation which starts the internal iteration of the elements in the Stream, and applies a Consumer (java.util.function.Consumer) to each element in the Stream.",,[]
Which element is the largest is determined by the Comparator implementation you pass to the max() method.,,[]
This Optional contains the value (if any) returned by the lambda expression passed to the reduce() method.,,[]
"Note: Even if the class is called RollingBufferInputStream, it is not an InputStream subclass.",,[]
"You can specify fonts for most text objects (Chunk, Phrase, Paragraph etc.)",,[]
"If you already have a finished PDF, and just want to add a header, footer or watermark to it, IText provides the com.itextpdf.pdf.PdfStamper class.",,[]
"You can write text as superscript or subscript using the Chunk class, and it's setTextRise() method.",,[]
"You can add underline and strikethrough text using the Chunk class, and its setUnderline() method.",,[]
"It is now up to the caller of the readMyData() method to decide if an existing MyData instance should be reused, or if a new instance should be created.",,[]
The value returned by write() is the number of bytes copied from the ByteBuffer.,,[]
Here is an implementation of the ring buffer that uses a fill count including the batch put() and take() operations.,,[]
"Here is an implementation of the ring buffer that uses a read position and flip marker, including the batch put() and take() operations.",,[]
"If your benchmark method produces multiple results you can pass each of these results to a black hole, meaning calling consume() on the Blackhole instance for each value.",,[]
The javax.servlet.http.HttpServlet class is a slightly more advanced base class than the GenericServlet shown in the Simple Servlet example.,,[]
The easiest way to implement this interface is to extend either the class GenericServlet or HttpServlet.,,[]
Each test method usually tests a single method of the target class.,,[]
"A protected method or field, on the other hand, is also accessible to other classes in the same package, and for subclasses of the unit too.",,[]
"When your business logic class is separated from the boundary class, you can test the business logic class separately.",,[]
Here is the unit test which uses a ByteArrayOutputStream to collect the data written to the OutputStream passed to the MyIOUnit.write() method:,,[]
You may also be able to use the StringReader and StringWriter classes in your unit tests.,,[]
"To avoid fragmenting the Java heap with Bytes instances, the Bytes class is designed to be obtained from an ObjectPool .",,[]
To defragment the free blocks you call the defragment() method of the BytesAllocatorManualDefrag .,,[]
The Bytes class represents a byte sequence allocated from a shared byte array.,,[]
"As you can see, the ChannelInitializer is added to the ServerBootstrap using the childHandler() method.",,[]
"By calling sync() on the ChannelFuture the main thread that creates the server waits until the server has started, before continuing.",,[]
The easiest way to create an instance of the RionObjectReader is via the RionObjectReaderBuilder class.,,[]
The RionObjectReader readCyclic() method reads a cyclic object graph stored as RION in a byte array.,,[]
The RionObjectWriter writeAcyclic() can write an acyclic object graph as RION into a byte array.,,[]
When reading a composite RION field you need to use the RionReader moveInto() and moveOutOf() methods.,,[]
"Here are two examples of writing a 32 bit and 64 bit floating point number as RION Float fields to the destination byte array, using the RionWriter writeFloat32() and writeFloat64() methods:",,[]
The StreamStorageFS class contains a method to read bytes from a stream block file.,,[]
"The readBytes() method reads bytes from the file represented by the given StreamStorageBlockFS instance, into the byte[] array passed as parameter.",,[]
You can always obtain the root directory path a StreamStorageRootFS was created with via its getRootDirPath() method.,,[]
"When you write records to a stream via the StreamStorageFS instance, the StreamStorageFS class will divide the records into multiple files.",,[]
You can read the data stored in a Buffer using the many get...() methods.,,[]
Notice the use of / as directory separator and the use of : as classpath entry separator.,,[]
"However, if you do need to access the body of the HTTP response, you need to register another handler on the HttpClientResponse that is passed as parameter to the first Handler's handle() method.",,[]
"Again, the NetClient's close() method is asynchronous, so the underlying TCP connection may not yet be closed by the time the close() method returns.",,[]
Sending messages via the event bus can be done via either the send() or publish() method on the event bus.,,[]
A verticle has a start() and a stop() method which are called when the verticle is deployed and when it is undeployed.,,[]
The addAll() method takes a Collection as parameter so you can pass either a List or Java Set as parameter,,[]
But no thread can actually execute unlock() until the thread waiting in lock() leaves the outer synchronized block,,[]
A thread cannot call wait() notify() or notifyAll() without holding the lock on the object the method is called on,,[]
"The Arrays class contains a set of methods called binarySearch(). This method helps you perform a binary search in an array. The array must first be sorted. You can do so yourself, or via the Arrays.sort() method covered earlier in this text.",,[]
java.lang.ThreadLocal is possible to set an initial value for a Java ThreadLocal which will get used the first time get() is called before set() has been called with a new value,,[]
Adding and getting elements to a generic Map is done using the put() and get() methods just like you have always done,,[]
Deque.pollLast() is different than removeLast() which throws an exception if the Deque is empty,,[]
The tailSet() method works the same way as the headSet() method except it returns all elements that are equal to or higher than the given parameter element,,[]
"You can also obtain an Iterator from many of the Java Collection data structures, e.g. a List, Set, Map, Queue, Deque or Map.",,[]
java.io.Writer works just like combining the Reader with InputStream or the Writer with OutputStream,,[]
Remember that even if the 4 threads call wait() and notify() on the same shared string instance the signals from the doWait() and doNotify() calls are stored individually in the two MyWaitNotify instances,,[]
The bigger the result String grows the longer it takes to copy the characters from it into a new StringBuilder and again copy the characters from the StringBuilder into the temporary String created by the toString() method,,[]
The logp() methods work like the log() methods except each method take an extra two parameters The sourceClass and sourceMethod parameter,,[]
But since the thread waiting in lock() has not yet called queueObject.wait() the call to queueObject.notify() passes into oblivion,,[]
Since PipedOutputStream is a subclass of OutputStream PipedOutputStream has the same basic methods and use patterns as an OutputStream,,[]
You can convert a Java Set to a Java List by creating a List and calling its addAll() method passing the Set as parameter to the addAll() method,,[]
Even though the Java Networking APIs enable you to open and close network connections via sockets all communication happens via the Java IO classes InputStream and OutputStream,,[]
Again here the first() and next() methods return the unicode index of the found word boundary,,[]
Obviously if the input parameter to contains() is null the contains() method will not use the equals() method to compare against each element but rather use the == operator,,[]
Both Java File and FileChannel works but in case you want a pure Java NIO solution use the Java NIO FileChannel class,"['comparison: (file, works but in case you want a pure java nio solution use, filechannel)']","[""('class', 'comparison', 'class'): (file, works but in case you want a pure java nio solution use, filechannel)""]"
If you need an integer value use the round() floor() or ceil() method,"['comparison: (round(), evaluates_similarity, floor())', 'comparison: (round(), evaluates_similarity, ceil())', 'comparison: (floor(), evaluates_similarity, ceil())']","[""('method', 'comparison', 'method'): (round(), evaluates_similarity, floor())"", ""('method', 'comparison', 'method'): (round(), evaluates_similarity, ceil())"", ""('method', 'comparison', 'method'): (floor(), evaluates_similarity, ceil())""]"
The poll() and remove() both removes the first element in the Queue. They differ in how they behave if the Queue is empty. The poll() method returns null if the Queue is empty. The remove() method throws an exception if the Queue is empty.,"['comparison: (poll(), behavior difference, remove())', 'exception: (remove(), throws an exception if empty, queue)', 'return: (poll(), returns null if empty, queue)']","[""('method', 'comparison', 'method'): (poll(), behavior difference, remove())"", ""('method', 'return', 'class'): (poll(), returns null if empty, queue)""]"
"The add() and offer() methods differ in how the behave if the Queue is full, so no more elements can be added. The add() method throws an exception in that case, whereas the offer() method just returns false.","['comparison: (add(), differ in behavior if the queue is full, offer())', 'exception: (add(), throws an exception if the queue is full, offer())', 'return: (offer(), returns false if the queue is full, add())']","[""('method', 'comparison', 'method'): (add(), differ in behavior if the queue is full, offer())"", ""('method', 'return', 'method'): (offer(), returns false if the queue is full, add())""]"
Each of the methods ceilingEntry() floorEntry() higherEntry() and lowerEntry() will be covered in the following sections,"['containment: (ceilingentry(), covered_with, floorentry())', 'containment: (ceilingentry(), covered_with, higherentry())', 'containment: (ceilingentry(), covered_with, lowerentry())', 'containment: (floorentry(), covered_with, higherentry())', 'containment: (floorentry(), covered_with, lowerentry())', 'containment: (higherentry(), covered_with, lowerentry())']","[""('method', 'containment', 'method'): (ceilingentry(), covered_with, floorentry())"", ""('method', 'containment', 'method'): (ceilingentry(), covered_with, higherentry())"", ""('method', 'containment', 'method'): (ceilingentry(), covered_with, lowerentry())"", ""('method', 'containment', 'method'): (floorentry(), covered_with, higherentry())"", ""('method', 'containment', 'method'): (floorentry(), covered_with, lowerentry())"", ""('method', 'containment', 'method'): (higherentry(), covered_with, lowerentry())""]"
To do so set the upper bound to 1 and have the call to take() and release() guard the critical section,"['collaboration: (take(), guard the critical section, release())']",[]
Once you have opened a socket (network connection) though you read and write data to and from it via Java IO InputStream and OutputStream classes,"['collaboration: (inputstream, interacts_with, outputstream)']","[""('class', 'collaboration', 'class'): (inputstream, interacts_with, outputstream)""]"
Many of the core components in the Java Collection API rely on the correct implementation of the `hashCode()` and `equals()` methods.,"['dependency: (hashcode(), correct implementation reliance, equals())']","[""('method', 'dependency', 'method'): (hashcode(), correct implementation reliance, equals())""]"
java.io.PrintWriter example first creates a PrintWriter instance which is connected to a FileWriter,"['creation: (java.io.printwriter, creates a, java.io.filewriter)']",[]
InputStream.read() example creates an AsynchronousFileChannel and then creates a ByteBuffer which is passed to the read() method as parameter along with a position of 0,"['creation: (inputstream.read(), creates, asynchronousfilechannel)', 'creation: (inputstream.read(), creates, bytebuffer)', 'containment: (inputstream.read(), passed_to, read())', 'collaboration: (asynchronousfilechannel, interacts_with, bytebuffer)', 'dependency: (asynchronousfilechannel, prerequisite_for, read())', 'dependency: (bytebuffer, condition_for, read())']","[""('method', 'creation', 'class'): (inputstream.read(), creates, asynchronousfilechannel)"", ""('method', 'creation', 'class'): (inputstream.read(), creates, bytebuffer)"", ""('method', 'containment', 'method'): (inputstream.read(), passed_to, read())"", ""('class', 'collaboration', 'class'): (asynchronousfilechannel, interacts_with, bytebuffer)"", ""('class', 'dependency', 'method'): (asynchronousfilechannel, prerequisite_for, read())"", ""('class', 'dependency', 'method'): (bytebuffer, condition_for, read())""]"
java.lang.StringBuffer text explains how to use the SimpleDateFormat class to format dates,"['dependency: (java.lang.stringbuffer, explains usage of, simpledateformat)']","[""('class', 'dependency', 'class'): (java.lang.stringbuffer, explains usage of, simpledateformat)""]"
In general you can call the markSupported() method to find out if mark() and reset() are supported on a given InputStream or not but the BufferedInputStream supports them,"['containment: (bufferedinputstream, wraps, inputstream)']","[""('class', 'containment', 'class'): (bufferedinputstream, wraps, inputstream)""]"
"The newLine() method which can write a new-line character to the underlying Writer. In addition, you may need to call flush() if you need to be absolutely sure that the characters written until now is flushed out of the buffer and onto the network or disk.","['dependency: (newline(), method functionality, flush())']","[""('method', 'dependency', 'method'): (newline(), method functionality, flush())""]"
Queue.poll() is different than remove() which throws an exception if the Deque is empty,"['comparison: (queue.poll(), different than, remove())', 'exception: (remove(), throws an exception if, deque)']","[""('method', 'comparison', 'method'): (queue.poll(), different than, remove())""]"
Notice the two synchronized blocks inside the set() and get() method. Notice how the blocks are placed last and first in the two methods.,"['collaboration: (set(), synchronized_blocks_interaction, get())']",[]
"The replace() method will only insert the new value if there is already an existing value mapped to the key. If no existing value is mapped to the given key, no value is inserted. This is different from how put() works, which always insert the value no matter what.","['comparison: (replace(), inserts conditionally, put())']","[""('method', 'comparison', 'method'): (replace(), inserts conditionally, put())""]"
The logrb() methods work like the log() methods too except they can obtain the log messages from a resource bundle,"['equivalence: (logrb(), work like, log())']","[""('method', 'equivalence', 'method'): (logrb(), work like, log())""]"
The Handler in the Java Logging API use a java.util.logging.Formatter to format the LogRecord before writing it to an external system,"['dependency: (logrecord, written_by, java.util.logging)']",[]
