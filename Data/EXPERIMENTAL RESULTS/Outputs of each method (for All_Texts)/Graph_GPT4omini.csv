Original Text,NULL
The Collections reverse() method can reverse the elements in a Java List.,"(""reverse"", ""reverse() is a method of the Collections class."", ""Collections"")"
Here is an example of finding the minimum element in a Java List using Collections min() method:,"(""Collections"", ""Collections is a package that contains the min method."", ""min"")"
"Notice too, that the compareTo() method should throw a NullPointerException if the parameter object is null.",NULL
The LinkedList class is a pretty standard Deque and Queue implementation.,"(""LinkedList"", ""The LinkedList class is a standard implementation of the Deque."", ""Deque"")"
You add elements to the beginning end of a Deque using the add() method.,NULL
"If the element cannot be inserted into the Deque, the add() method will throw an exception.",NULL
"If the element cannot be inserted into the Deque, the addLast() method will throw an exception.",NULL
To peek at the last element of a Java Deque you can use the getLast() method.,NULL
The remove() method removes the first element of a Java Deque.,NULL
"The pollFirst() method removes an element from the beginning of the Deque, just like poll().","(""pollFirst"", ""The pollFirst() method operates on the Deque class by removing an element from its beginning."", ""Deque"")"
Here is an example of removing the last element from a Java Deque using the pollLast() method:,NULL
The Java Deque size() method returns the number of elements stored in the Java Deque at the time you invoke the method.,"(""size"", ""The size() method is a method of the Deque class that returns the number of elements stored in it."", ""Deque"")"
"Because the Iterator has its generic type set to String, the Java compiler already knows that next() will return a String.","(""Iterator"", ""The next() method is associated with the Iterator class, indicating it is a method defined within that class."", ""next"")"
"As you can see, a proper implementation of .equals() is essential for your own classes to work well with the Java Collection classes.",NULL
"So, as you can see, a combination of the hashCode() and equals() methods are used when storing and when looking up objects in a hashtable.","(""hashCode"", ""Both methods are used in conjunction when storing and looking up objects in a hashtable."", ""equals""); (""hashCode"", ""The hashCode method is used when looking up objects in a hashtable."", ""hashtable"")"
"Then it uses a for-each loop to iterate the elements of the List, and print out the toString() value of each element.",NULL
Here is an example of iterating the elements of an Iterable via its forEach() method:,NULL
"The reason the for-each loop is slower is, that each iteration will call the List iterator() method, which will create a new Iterator object.","(""ForEachLoop"", ""The for-each loop uses the List iterator() method to create a new Iterator object for each iteration."", ""Iterator"")"
"In other words, if the Iterator has not yet iterated over all of the elements in the collection the Iterator was obtained from - the hasNext() method will return true.","(""Iterator"", ""The hasNext() method is a function of the Iterator class that checks if there are more elements to iterate over."", ""hasNext"")"
The first three add() calls add a String instance to the end of the list.,"(""add"", ""The add() method is used to add a String instance to the list."", ""String"")"
"The addAll() method takes a Collection as parameter, so you can pass either a List or Java Set as parameter.","(""addAll"", ""The addAll() method takes a Collection as a parameter."", ""Collection""); (""addAll"", ""The addAll() method can accept a List as a parameter."", ""List"")"
"Notice that the get() method returns a Java Object, so we have to cast it to a String (because we know the value is a String).","(""get"", ""The get() method returns a Java Object."", ""Java Object"")"
"This example creates a Map and stores three values in it using the keys A, B and C. Then the example calls the Map getOrDefault() method, passing the String E as key, along with a default value - the String default value.","(""Map"", ""The getOrDefault method is called on the Map to retrieve a value associated with a key."", ""getOrDefault""); (""getOrDefault"", ""The getOrDefault method takes a String as a key parameter."", ""String"")"
Since the Map does not contain any object stored by the key E the given default value will be returned - which is the String default value passed as the last parameter to the getOrDefault() method.,"(""Map"", ""The Map class is using the getOrDefault method to retrieve a value based on a key."", ""getOrDefault"")"
"As you can see, the key Iterator returns every key stored in a Java Map, one by one (one for each call to next()).",NULL
The number of entries in a Java Map is also referred to as the Map size - hence the method name size() .,NULL
The isEmpty() method will return false if the Map instance contains 1 or more entries.,NULL
Here is an example of creating an instance of the Java TreeMap class which implements the NavigableMap interface:,NULL
"The tailMap variable will reference a SortedMap containing all key + value pairs from the NavigableMap for the keys ""c"", ""d"" and ""e"", as these keys are considered equal to or larger than the parameter value ""c"" passed to the tailMap() method.","(""tailMap"", ""tailMap references a SortedMap containing key-value pairs."", ""SortedMap"")"
The lowerEntry() method in the NavigableMap interface returns the key + value pair for the highest key which is lower than the parameter value passed to the lowerEntry() method.,NULL
"The pollFirstEntry() method returns and removes the ""first"" entry (key + value) in the NavigableMap or null if the map is empty.",NULL
"The descendingIterator() method allows you to iterate the elements of the NavigableSet (which is also a SortedSet) in reverse order, without changing the order of the elements internally.","(""DescendingIterator"", ""The method allows you to iterate the elements of the NavigableSet in reverse order."", ""NavigableSet"")"
"To get properties from a Java Properties object you use the getProperty() method, passing the key of the property to get as parameter.","(""getProperty"", ""The getProperty method is used to retrieve properties from a Properties object."", ""Properties"")"
"Using the InputStream you can load the file into a Java Properties instance, using either the load() or loadFromXML() methods explained earlier in this Java Properties tutorial.","(""InputStream"", ""InputStream is used to load a file into a Java Properties instance."", ""Properties""); (""Properties"", ""Properties class has a method called load() to load properties."", ""load"")"
Here are two examples of taking an element from a Java Queue using its poll() and remove() methods:,"(""Queue"", ""poll() is a method of the Queue class used to retrieve and remove the head of the queue."", ""poll"")"
You can check if a Java Queue contains a certain element via its contains() method.,NULL
The Java Set interface as a method called removeAll() which removes all elements in the Set which are also present in another Collection.,"(""removeAll"", ""removeAll() is a method of the Set class that operates on Set instances."", ""Set"")"
You can check the size of a Java Set using the size() method.,NULL
"You iterate the keys of a SortedMap by calling its keySet() method, like this:",NULL
The SortedMap interface has a method named headMap() which returns a new Map which contains the first elements of the SortedMap according to the sort order used.,"(""SortedMap"", ""headMap() is a method of the SortedMap interface that returns a new Map containing elements of the SortedMap."", ""headMap"")"
Here is an example of obtaining a submap from a Java SortedMap via its subMap() method:,NULL
The Java Collections API only has one implementation of the Java SortedSet interface - the java.util.TreeSet class.,"(""Java Collections API"", ""The Java Collections API includes the SortedSet interface as part of its functionality."", ""SortedSet"")"
"Additionally, the Vector class uses several older (no longer recommended) parts of Java, like the Enumeration which is superseded by the Iterator interface.","(""Vector"", ""Vector class uses Enumeration as a part of its implementation."", ""Enumeration"")"
You push elements onto a Java Stack using its push() method.,NULL
Here is an example of obtaining the size of a Java Stack via its size() method:,NULL
The lockWrite() method of a ReadWriteLock class shown below is an example of a test-and-set method.,NULL
The BoundedSemaphore class shown below has two test-and-set methods: take() and release().,"(""BoundedSemaphore"", ""The take() method is a test-and-set method of the BoundedSemaphore class."", ""take"")"
Here is an example showing how to implement the lock() method shown earlier using the AtomicBoolean class:,NULL
"a stop() or pause() method too), then you can no longer create your Runnable implementation with a Java lambda expression.","(""Runnable"", ""The stop method is related to the Runnable class as it is a method that can be invoked on a Runnable implementation."", ""stop""); (""Runnable"", ""The pause method is related to the Runnable class as it is a method that can be invoked on a Runnable implementation."", ""pause"")"
"If a thread (1) calls the parent.addChild(child) method at the same time as another thread (2) calls the child.setParent(parent) method, on the same parent and child instances, a deadlock can occur.","(""Thread"", ""The thread calls the addChild method, indicating a relationship between the thread and the method being invoked."", ""addChild""); (""Thread"", ""The thread calls the setParent method, indicating a relationship between the thread and the method being invoked."", ""setParent""); (""Parent"", ""The addChild method is associated with the Parent class, indicating a relationship between the method and the class."", ""addChild"")"
"Here are the two classes used in the example above, Counter and CounterThread.",NULL
"The easiest way to create a subclass of ThreadLocal is to simply create an anonymous subclass, right where you create the ThreadLocal variable.",NULL
"Here is an example of creating a ThreadLocal using its withInitial() static factory method, passing a simple Supplier implementation as parameter:","(""withInitial"", ""withInitial() is a static factory method used to create an instance of ThreadLocal."", ""ThreadLocal"")"
Notice how the format() method calls the getThreadLocalSimpleDateFormat() method to obtain a Java SimpleDatFormat instance.,"(""format"", ""The format() method calls the getThreadLocalSimpleDateFormat() method."", ""getThreadLocalSimpleDateFormat"")"
"The Counter class could have been written like this instead, using a Lock instead of a synchronized block:",NULL
"While isLocked is true, the thread calling lock() is parked waiting in the wait() call.","(""isLocked"", ""isLocked indicates the state of the lock method being called."", ""lock"")"
"When the thread is done with the code in the critical section (the code between lock() and unlock()), the thread calls unlock().","(""Thread"", ""The thread executes code within the critical section."", ""Critical Section""); (""Thread"", ""The thread calls unlock() after finishing the critical section."", ""Unlock()"")"
"Otherwise, a single call to unlock() will unlock the lock, even if the lock has been locked multiple times.",NULL
"That you would not call wait() and notify() on an internal monitor object, but rather on the This is probably true.","(""wait"", ""wait() is a method that should be called on an internal monitor object."", ""internal monitor object"")"
This is how such exclusive access could look using a synchronized block in Java: public class SynchronizedCounter { long count = 0; public void inc() { synchronized(this) { count++; } } public long count() { synchronized(this) { return this.count; } } } Notice how the inc() and count() methods both contain a synchronized block.,"(""SynchronizedCounter"", ""The inc() method is defined within the SynchronizedCounter class."", ""inc""); (""SynchronizedCounter"", ""The count() method is defined within the SynchronizedCounter class."", ""count"")"
"import java.util.concurrent.atomic.AtomicBoolean; import java.util.concurrent.atomic.AtomicStampedReference; public class NonblockingTemplate { public static class IntendedModification { public AtomicBoolean completed = new AtomicBoolean(false); } private AtomicStampedReference<IntendedModification> ongoingMod = new AtomicStampedReference<IntendedModification>(null, 0); //declare the state of the data structure here.","(""NonblockingTemplate"", ""NonblockingTemplate contains IntendedModification as a nested class."", ""IntendedModification""); (""IntendedModification"", ""IntendedModification has a field of type AtomicBoolean named completed."", ""AtomicBoolean""); (""NonblockingTemplate"", ""NonblockingTemplate has a field of type AtomicStampedReference that references IntendedModification."", ""AtomicStampedReference"")"
Here is how the lockRead() and unlockRead() methods looks after that change:,NULL
Here is how the lockWrite() and unlockWrite() methods look after that change:,NULL
"You can read more about it in the java.util.concurrent.Semaphore text, in my java.util.concurrent tutorial.",NULL
The take() method sends a signal which is stored internally in the Semaphore.,NULL
"That way the signal is not missed, even if doNotify() is called before doWait().",NULL
"If you look at the Synchronizer class above and look into this Lock implementation you will notice that threads are now blocked trying to access the lock() method, if more than one thread calls lock() simultanously.","(""Synchronizer"", ""The Synchronizer class is related to the Lock implementation as it references the Lock class in its functionality."", ""Lock"")"
"The thread calling unlock() will take the top QueueObject in the queue and call doNotify() on it, to awaken the thread waiting on that object.","(""unlock"", ""The method unlock() operates on the QueueObject by taking it from the queue."", ""QueueObject"")"
"The queueObject.doWait() call is placed outside the synchronized(this) block to avoid nested monitor lockout, so another thread can actually call unlock() when no thread is executing inside the synchronized(this) block in lock() method.","(""queueObject"", ""doWait is a method of the queueObject class."", ""doWait"")"
"Below here is the PoolThreadRunnable class which implements the Runnable interface, so it can be executed by a Java thread:",NULL
"Notice how the add() method returns a new ImmutableValue instance with the result of the add operation, rather than adding the value to itself.",NULL
"The class java.lang.Object defines three methods, wait(), notify(), and notifyAll(), to facilitate this.","(""Java.lang.Object"", ""The method wait() is defined in the class java.lang.Object."", ""wait()""); (""Java.lang.Object"", ""The method notify() is defined in the class java.lang.Object."", ""notify()"")"
"In other words, the calling thread must call wait() or notify() from inside a synchronized block.","(""Thread"", ""The calling thread must call wait() from inside a synchronized block."", ""wait"")"
The methods notify() and notifyAll() do not save the method calls to them in case no threads are waiting when they are called.,NULL
"If the doNotify() method had called notifyAll() instead of notify(), all waiting threads had been awakened and checked for signals in turn.","(""doNotify"", ""doNotify() method is related to notifyAll() because it is suggested that doNotify() should have called notifyAll() instead of notify()."", ""notifyAll"")"
"The other of C and D would go back to waiting, because the thread discovering the signal clears it on the way out of doWait().","(""C"", ""C and D are mentioned together in the context of waiting for a signal."", ""D""); (""doWait()"", ""doWait() is a method that is related to the behavior of C in the context of waiting."", ""C"")"
"The method compareAndSet() allows you to compare the current value of the AtomicBoolean to an expected value, and if current value is equal to the expected value, a new value can be set on the AtomicBoolean.",NULL
"The AtomicInteger class provides you with a int variable which can be read and written atomically, and which also contains advanced atomic operations like compareAndSet().",NULL
You can get the value of an AtomicInteger instance via the get() method.,NULL
Calling addAndGet() is also an atomic operation (like all operations on the AtomicIntegerArray).,NULL
You should check out the JavaDoc for the AtomicIntegerArray class to learn more about those methods.,"(""JavaDoc"", ""JavaDoc provides documentation for the AtomicIntegerArray class."", ""AtomicIntegerArray"")"
"The AtomicLong class provides you with a long variable which can be read and written atomically, and which also contains advanced atomic operations like compareAndSet().",NULL
You can set the value of an AtomicLong instance via the set() method.,NULL
The Java AtomicLongArray class (java.util.concurrent.atomic.AtomicLongArray) represents an array of long .,NULL
You can get the value of a given element using the get() method on the AtomicLongArray.,NULL
You can set the value of a given element using the set() method on the AtomicLongArray.,NULL
"AtomicReference even has an advanced compareAndSet() method which lets you compare the reference to an expected value (reference) and if they are equal, set a new reference inside the AtomicReference object.",NULL
Notice how it is no longer necessary to cast the referenced returned by get() because the compiler knows it will return a String reference.,NULL
"The compareAndSet() method can compare the reference stored in the AtomicReference instance with an expected reference, and if they two references are the same (not equal as in equals() but same as in ==), then a new reference can be set on the AtomicReference instance.",NULL
If you have a typed AtomicStampedReference then getReference() returns a reference to the type you declared on the AtomicStampedReference variable when you created it.,NULL
The AtomicStampedReference also contains a getStamp() method which can be used to obtain the internally stored stamp.,NULL
"The compareAndSet() method can compare the reference stored in the AtomicStampedReference instance with an expected reference, and the stored stamp with an expected stamp, and if they two references and stamps are the same (not equal as in equals() but same as in ==), then a new reference can be set on the AtomicStampedReference instance.",NULL
"The BlockingDeque interface in the java.util.concurrent class represents a deque which is thread safe to put into, and take instances from.",NULL
"The ConcurrentMap has a few extra atomic methods in addition to the methods it inherits from its superinterface, java.util.Map.","(""ConcurrentMap"", ""ConcurrentMap inherits methods from its superinterface, java.util.Map."", ""java.util.Map"")"
"The java.util.concurrent.ConcurrentNavigableMap class is a java.util.NavigableMap with support for concurrent access, and which has concurrent access enabled for its submaps.",NULL
"First, the BlockingQueueExample class which starts a Producer and a Consumer in separate threads.","(""BlockingQueueExample"", ""The BlockingQueueExample class starts a Producer in a separate thread."", ""Producer"")"
The Java BlockingQueue add() method will add the element passed as parameter to this method if the BlockingQueue has space for it internally.,"(""add()"", ""The add() method is a method of the BlockingQueue class."", ""BlockingQueue"")"
"If the BlockingQueue does not have space internally for this new element, the add() method throws an IllegalStateException.","(""BlockingQueue"", ""The add() method is a function that operates on the BlockingQueue class."", ""add"")"
The remove() method will use the o.equals(element) to decide if the object o passed as parameter matches a given element in the BlockingQueue.,"(""remove"", ""The remove() method uses the o.equals(element) to determine if the object o matches a given element."", ""o""); (""remove"", ""The remove() method checks if the object o matches the given element."", ""element"")"
"If the BlockingQueue does not contain any elements, the element() method will throw a NoSuchElementException.","(""BlockingQueue"", ""The element() method is associated with the BlockingQueue class as it retrieves elements from it."", ""element"")"
The result of that is that the call() method will return a String.,NULL
"The Java ExecutorService interface, java.util.concurrent.ExecutorService, represents an asynchronous execution mechanism which is capable of executing tasks concurrently in the background.",NULL
"The Java ExecutorService execute(Runnable) method takes a java.lang.Runnable object, and executes it asynchronously.","(""ExecutorService"", ""The execute method is a method of the ExecutorService class."", ""execute"")"
"The invokeAny() method takes a collection of Callable objects, or subinterfaces of Callable.",NULL
The invokeAll() method invokes all of the Callable objects you pass to it in the collection passed as parameter.,"(""invokeAll"", ""The invokeAll() method is designed to invoke all Callable objects."", ""Callable"")"
The main difference between the Runnable run() method and the Callable call() method is that the call() method can return an Object from the method call.,"(""run()"", ""The run() method is compared to the call() method in terms of their functionality."", ""call()"")"
"The ExecutorService awaitTermination() method will block the thread calling it until either the ExecutorService has shutdown completely, or until a given time out occurs.",NULL
The awaitTermination() method is typically called after calling shutdown() or shutdownNow().,"(""AwaitTermination"", ""The awaitTermination() method is called after calling the shutdown() method."", ""Shutdown"")"
In the following sections I will explain how to use the ReentrantLock class as a Lock.,NULL
To unlock the Lock instance you must call its unlock() method.,NULL
"To better understand how using a Lock looks different from using a synchronized block, I have created two simple concurrent Counter classes which protects their internal count in different ways.","(""Lock"", ""Lock is used to protect the internal count in the Counter class."", ""Counter"")"
"Notice how the calculate() method both locks the Calculator instance's Lock before performing any calculations, and also call the add() and subtract() methods which also locks the lock.","(""calculate"", ""The calculate() method is a part of the Calculator class."", ""Calculator""); (""calculate"", ""The calculate() method calls the add() method."", ""add"")"
"If the Lock instance is already locked, the thread calling lock() is blocked until the Lock is unlocked.","(""Lock"", ""The lock() method is associated with the Lock class, indicating it is a method that operates on Lock instances."", ""lock""); (""thread"", ""The thread calling the lock() method is related to the Lock class as it attempts to acquire the lock."", ""lock"")"
The Java ReentrantLock getHoldCount() method returns the number of times a given thread has locked this Lock instance.,NULL
"The Java CertPath class (java.security.cert.CertPath represents a chain of cryptographic identity certificates (Java Certificate objects), where each certificate is the digital signer of the next certificate in the chain.",NULL
The CertPath getType() method returns a string telling what type of certificates (e.g.,NULL
If you want to set a different offset for the dest byte array there is a version of update() and doFinal() which takes an offset parameter extra.,"(""update"", ""Both methods are related as they are versions that handle an offset parameter for the dest byte array."", ""doFinal""); (""update"", ""The update method is used to set a different offset for the dest byte array."", ""dest byte array"")"
Notice the call to update() and then doFinal() for these two blocks of data.,NULL
To generate an asymmetric key pair you can use the KeyPairGenerator (java.security.KeyPairGenerator).,NULL
You create a KeyGenerator instance by calling the static method getInstance() passing as parameter the name of the encryption algorithm to create a key for.,"(""getInstance"", ""getInstance is a static method used to create an instance of KeyGenerator."", ""KeyGenerator"")"
Initializing a KeyGenerator instance is done by calling its init() method.,NULL
Generating a key is done by calling the KeyGenerator generateKey() method.,NULL
You can access the PublicKey of a KeyPair by calling its getPublic() method.,NULL
You can access the PrivateKey of a KeyPair by calling the getPrivate() method.,"(""KeyPair"", ""The PrivateKey is a property of the KeyPair class."", ""PrivateKey"")"
You can create a Java KeyStore instance by calling its getInstance() method.,NULL
This Keytool -delete command will remove the KeyStore entry with the alias testkey from the KeyStore stored in the file keystore.jks .,"(""Keytool"", ""The delete method is a command associated with the Keytool class."", ""delete""); (""KeyStore"", ""The testkey is an alias for an entry in the KeyStore class."", ""testkey"")"
"You create a digital signature by calling the update() method one or more times, finishing with a call to sign().",NULL
"If you need to read and write the date and time to a database, use the java.sql.Date and java.sql.Timestamp classes.","(""Date"", ""Date is a class within the java.sql package."", ""java.sql"")"
Here is an example of how to create a Duration object using the between() method:,NULL
Here is an example that shows how to create a LocalDateTime object via the now() method:,NULL
The LocalTime class in the Java 8 date time API represents a specific time of day without any time zone information.,NULL
The parameter passed to the of() method is the ID of the time zone to create a ZoneId for.,NULL
"If you need to set a date on a java.sql.PreparedStatement or get a date from a java.sql.ResultSet, you will interact with java.sql.Date.","(""PreparedStatement"", ""PreparedStatement can set a date using java.sql.Date."", ""Date""); (""ResultSet"", ""ResultSet can get a date using java.sql.Date."", ""Date"")"
One difference in the java.sql.Timestamp from its superclass java.util.Date is its ability to hold the nanoseconds of a date too.,"(""Timestamp"", ""Timestamp is a subclass of Date, indicating an inheritance relationship."", ""Date""); (""Timestamp"", ""Timestamp is part of the java.sql package."", ""java.sql"")"
You can get and set the nanoseconds using the getNanos() and setNanos().,NULL
The Calendar class has a corresponding set() method so you can set these fields too.,NULL
"You can access the date and time contained in a java.util.Date instance using the getTime() method, like this:","(""Date"", ""The getTime method is used to access the date and time contained in a Date instance."", ""getTime"")"
You can compare java.util.Date instance because the class implements the java.lang.Comparable interface.,"(""Date"", ""The Date class implements the Comparable interface, allowing instances of Date to be compared."", ""Comparable""); (""Date"", ""The Date class is part of the java.util package."", ""java.util"")"
The java.util.TimeZone class is used in conjunction with the java.util.Calendar class.,NULL
As you can see the readNumberFromUrl() needs to declare throwing both the BadUrlException and the BadNumberException that are thrown from the readDataFromUrl() and converData() methods.,"(""readNumberFromUrl"", ""The method readNumberFromUrl() needs to declare throwing BadUrlException."", ""BadUrlException""); (""readNumberFromUrl"", ""The method readNumberFromUrl() needs to declare throwing BadNumberException."", ""BadNumberException""); (""readDataFromUrl"", ""BadUrlException is thrown from the method readDataFromUrl()."", ""BadUrlException""); (""readDataFromUrl"", ""BadNumberException is thrown from the method readDataFromUrl()."", ""BadNumberException"")"
As you can see the readNumberFromUrl() method now only declares throwing ApplicationException.,NULL
"In the example with FileNotFoundException, if you catch IOException which is the superclass of FileNotFoundException, you will also catch FileNotFoundException.",NULL
"If the input.close() call fails, and an IOException is thrown, then it is caught, wrapped and rethrown.","(""Input"", ""The method input.close() is related to the IOException as it may throw this exception if it fails."", ""IOException"")"
The Throwable class has a method named addSuppressed() which takes a Throwable object as parameter.,NULL
The applyPattern() method simply applies a new pattern to the DecimalFormat instance as if it were created with that pattern.,NULL
The applyLocalizedPattern() does the same as applyPattern() except it interpretes the characters in the pattern according to the Locale the DecimalFormat was created with.,"(""applyLocalizedPattern"", ""applyLocalizedPattern() does the same as applyPattern()"", ""applyPattern"")"
"To sort a collection of strings according to the rules of a certain Locale, you use a java.text.Collator instance created for that specific Locale.",NULL
The factory method Locale.forLanguageTag() can also be used to create a Locale instance.,NULL
Finally you can access the localized values in the ResourceBundle via its different getString() and getObject() etc.,"(""ResourceBundle"", ""getString() is a method that accesses localized values in ResourceBundle."", ""getString"")"
For this example to work you should put a standard Java property file named MyBundle.properties in a Java package named i18n.,NULL
Once you have created a SimpleDateFormat instance you can format dates using its format() method.,NULL
The Date instance passed to the format() method is a java.util.Date instance.,"(""Date"", ""The format() method is used to format the Date instance."", ""format"")"
"The Java SimpleDateFormat class is also capable of formatting a Date object into a StringBuffer, instead of returning an individual String with the date formatted.","(""SimpleDateFormat"", ""The SimpleDateFormat class is capable of formatting a Date object."", ""Date""); (""SimpleDateFormat"", ""The SimpleDateFormat class formats a Date object into a StringBuffer."", ""StringBuffer"")"
You can parse a String into a java.util.Date instance using the parse() method of the SimpleDateFormat instance.,"(""parse"", ""The parse() method is a method of the SimpleDateFormat class."", ""SimpleDateFormat""); (""java.util.Date"", ""A String can be parsed into a java.util.Date instance."", ""String"")"
You can set the time zone of a SimpleDateFormat using its setTimeZone() method.,NULL
"In general you can call the markSupported() method to find out if mark() and reset() are supported on a given InputStream or not, but the BufferedInputStream supports them.","(""BufferedInputStream"", ""BufferedInputStream is a class that supports the markSupported() method."", ""markSupported""); (""BufferedInputStream"", ""BufferedInputStream is a class that supports the mark() method."", ""mark""); (""BufferedInputStream"", ""BufferedInputStream is a class that supports the reset() method."", ""reset""); (""InputStream"", ""mark() is a method that is called on InputStream."", ""mark"")"
"After that, the while loop exits, and the BufferedInputStream close() method is called.",NULL
"The setSource() method actually returns a reference to the ReusableBufferedInputStream, so you can actually create a ReusableBufferedInputStream and set the source in a single instruction:",NULL
To write data to a Java BufferedOutputStream you can use its write() method.,NULL
If you want to make sure that all written data is written to disk without having to close the BufferedOutputStream you can call its flush() method.,NULL
"Once the try block is exited, the close() method of the BufferedOutputStream is called automatically, because the BufferedOutputStream was declared inside the parentheses of the try block.",NULL
"The Java BufferedReader class is a subclass of the Java Reader class, so you can use a BufferedReader anywhere a Reader is required.",NULL
"The Java BufferedReader class also has a read() method that takes a char array as parameter, as well as a start offset and length.",NULL
The Java BufferedReader has a special read method named readLine() which reads a full line of text from the BufferedReader's internal buffer.,NULL
The Java BufferedWriter's flush() method flushes all data written to the BufferedWriter to the underlying data destination.,"(""BufferedWriter"", ""The flush() method is a method of the BufferedWriter class that flushes data to the underlying data destination."", ""flush"")"
The mark() method of the ByteArrayInputStream class sets an internal mark at the current byte position - meaning right after the previous byte read.,NULL
"Since the Java ByteArrayOutputStream class is a subclass of the Java OutputStream class, you write bytes to it using the same write methods that OutputStream has:","(""ByteArrayOutputStream"", ""ByteArrayOutputStream is a subclass of OutputStream"", ""OutputStream"")"
"Once you have finished writing to the ByteArrayOutputStream you can obtain all the bytes written as a Java byte array, using the ByteArrayOutputStream toByteArray() method.",NULL
You can read a Java float from the DataInputStream using its readFloat() method.,NULL
You can read a Java unsigned short (only positive values) from the DataInputStream using its readUnsignedShort() method.,NULL
You can read a Java long from the DataInputStream using its readLong() method.,NULL
"To rename (or move) a file, call the method renameTo() on the File class.",NULL
You can obtain a list of all the files in a directory by calling either the Java File list() method or the listFiles() method.,"(""File"", ""The list() method is a method of the Java File class."", ""list"")"
Here is an example of listing all files in a directory via the Java File list() and listFiles() methods:,"(""File"", ""The list() method is used to list files in a directory via the File class."", ""list"")"
To write data to a Java FileOutputStream you can use its write() method.,NULL
Here is an example of writing data to a Java FileOutputStream using its write() method:,NULL
Here is an example of closing a Java FileOutputStream by calling its close() method:,NULL
You can convert a FileOutputStream to a character based Writer using the Java OutputStreamWriter class.,"(""OutputStreamWriter"", ""OutputStreamWriter is a class that converts FileOutputStream to a character based Writer."", ""Writer"")"
The Java FileWriter's flush() method flushes all data written to the FileWriter to the underlying file.,NULL
Here is an example of flushing data written to a Java FileWriter by calling its flush() method:,NULL
Notice how there is no longer any explicit close() method call to the FileWriter instance.,NULL
The Java InputStream class contains a method called readAllBytes() (since Java 9).,"(""InputStream"", ""The readAllBytes method is a method defined in the InputStream class."", ""readAllBytes"")"
Here is an example of reading all bytes from a Java InputStream via readAllBytes():,NULL
"If an InputStream subclass supports the mark() and reset() methods, then that subclass should override the markSupported() to return true.","(""InputStream"", ""InputStream subclass supports the mark() method"", ""mark""); (""InputStream"", ""InputStream subclass supports the reset() method"", ""reset"")"
The read() method of an InputStreamReader returns an int which contains the char value of the char read.,NULL
Notice how there is no longer any explicit close() method call to the CharArrayWriter instance.,NULL
"Like with FilterInputStream, I see no sensible purpose for this class.",NULL
They make it somewhat easier to understand what the classes are targeting.,NULL
The read() method of a Java PipedReader returns an int which contains the char value of the character read.,NULL
"Third, the example calls the advanced printf() method of the PrintWriter which can insert formatted numbers into a text string.",NULL
Closing a Java StringReader can be done using the close() method like this:,NULL
The Java OutputStream's flush() method flushes all data written to the OutputStream to the underlying data destination.,NULL
The Java OutputStreamWriter's flush() method flushes all data written to the OutputStreamWriter to the underlying data destination.,"(""flush"", ""The flush() method is a method of the OutputStreamWriter class that flushes data to the underlying data destination."", ""OutputStreamWriter"")"
"If you push back multiple bytes into the PushbackInputStream, the latest byte pushed back will be returned first from read(), just like on a stack.",NULL
"You read bytes from the Java PushbackInputStream via its read() method, just like you do from a regular InputStream .","(""Java PushbackInputStream"", ""The read() method is a function of the Java PushbackInputStream class."", ""read()"")"
"Remember, calling this write() method will advance the file position of the RandomAccessFile by 1.",NULL
The Java Reader class has a method named skip() which can be used to skip over a number of characters in the input that you do not want to read.,NULL
You do so by calling the nextToken() method of the StreamTokenizer inside a loop.,NULL
"System.in, System.out and System.err are initialized by the Java runtime when a Java VM starts up, so you don't have to instantiate any streams yourself (although you can exchange them at runtime).","(""System.in"", ""Both System.in and System.out are initialized by the Java runtime, indicating they are related as part of the Java I/O system."", ""System.out""); (""System.in"", ""Both System.in and System.err are initialized by the Java runtime, indicating they are related as part of the Java I/O system."", ""System.err"")"
You will normally use a Writer subclass rather than a Writer directly.,NULL
The Java String parameter passed to the Class forName() method is the name of the JDBC driver class for the given JDBC driver.,"(""forName()"", ""The forName() method is used to obtain the Class object associated with the specified class name."", ""Class""); (""String"", ""The String parameter is passed to the forName() method."", ""forName()""); (""JDBC driver class"", ""The JDBC driver class is represented by the Class object obtained from the forName() method."", ""Class"")"
"By the way, imagine that the used Person class looks like this:",NULL
Here is an example of creating a JDBC DatabaseMetaData object via the JDBC Connection getMetaData() method:,"(""Connection"", ""The getMetaData() method is a method of the Connection class that retrieves the DatabaseMetaData object."", ""getMetaData"")"
The ResultSet returned by the getColumns() method contains a list of columns for the given table.,"(""getColumns"", ""The getColumns() method returns a ResultSet containing a list of columns."", ""ResultSet"")"
Before the first next() call the ResultSet is positioned before the first row.,NULL
"Once the row is ready to be inserted into the ResultSet, call the insertRow() method.",NULL
"If you need to insert another row, explicitly call moveToInsertRow() to signal this to the ResultSet.",NULL
The purpose of an abstract class is to function as a base for subclasses.,NULL
"If a class has an abstract method, the whole class must be declared abstract.",NULL
The example I showed you above with the URLProcessorBase class is actually an example of the Template Method design pattern.,NULL
In the above example the subclass SmartClock has a method called getTimeInSeconds() which accesses the time variable of the superclass Clock.,"(""SmartClock"", ""SmartClock has a method called getTimeInSeconds()"", ""getTimeInSeconds"")"
The utility class is called Arrays and is located in the standard Java package java.util.,NULL
The purpose of a constructor is to initialize the fields in the class.,NULL
Now the isValid() method returns the value returned by the value.equals() method call.,NULL
In many cases it would have made sense to place the getLicensePlate() method in the Vehicle class where the licensePlate field is located.,"(""getLicensePlate()"", ""The method getLicensePlate() is suggested to be placed in the Vehicle class because it relates to the licensePlate field within that class."", ""Vehicle"")"
"Here is the same instanceof example, but using a Truck object instead of a Car object: Truck truck = new Truck(); Vehicle vehicle = truck; boolean isCar = vehicle instanceof Car; After executing this code the isCar will contain the value false.","(""Truck"", ""Truck is a type of Vehicle, as it is being assigned to a Vehicle reference."", ""Vehicle""); (""Vehicle"", ""The Vehicle reference is checked to see if it is an instance of Car, indicating a relationship between Vehicle and Car."", ""Car"")"
The updateLicensePlate() method sets the license plate value on the licensePlate field in the Car class.,"(""updateLicensePlate"", ""The updateLicensePlate method is defined within the Car class."", ""Car"")"
"The getLicensePlate() method, however, returns the value of the licensePlate field in the Vehicle class.","(""getLicensePlate"", ""The getLicensePlate() method is defined within the Vehicle class."", ""Vehicle"")"
"If you override a method in a subclass, and the method is all of a sudden removed or renamed or have its signature changed in the superclass, the method in the subclass no longer overrides the method in the superclass.","(""Subclass"", ""The method in the subclass overrides the method in the superclass."", ""Method"")"
Here is a Java instanceof example illustrating the comparison of null against a class:,"(""Java"", ""Java is a programming language that uses instanceof as a method for type comparison."", ""instanceof"")"
"That is because it is not the reference type that is compared against the target class or interface, but the actual type of the referenced object.","(""ReferenceType"", ""The reference type is compared against the target class or interface."", ""TargetClass"")"
"A Java interface is a bit like a Java class, except a Java interface can only contain method signatures and fields.","(""Java Interface"", ""A Java interface is similar to a Java class, indicating a relationship between the two concepts."", ""Java Class""); (""Java Interface"", ""A Java interface can contain method signatures, establishing a direct relationship."", ""method signatures"")"
The class does not need to implement (declare) the variables of an interface.,NULL
"You must always create an instance of some class that implements the interface, and reference that instance as an instance of the interface.",NULL
"While it is normally possible for a class to implement multiple interfaces even if the interfaces contain methods with the same signature, this is not possible if one or more of these methods are default methods.","(""Class"", ""A class can implement multiple interfaces."", ""Interfaces""); (""Interfaces"", ""Interfaces contain methods with the same signature."", ""Methods"")"
In both of the above situations the Java compiler requires that the class implementing the interface(s) explicitly implements the method which causes the problem.,"(""Java Compiler"", ""The Java Compiler requires that the class implementing the interface(s) explicitly implements the method."", ""Interface"")"
The implementation in the class takes precedence over any default implementations.,NULL
"Since the return value of produce() is Object, it can return any Java object.",NULL
"Notice how the object returned from the carProducer.produce() method call has to be cast to a Car instance, because the produce() method return type is Object.","(""carProducer"", ""carProducer is the package that contains the produce() method."", ""produce"")"
"As you can see, since the generic type for the CarProducer instance is set to Car, it is no longer necessary to cast the object returned from the produce() method, since the original method declaration in the MyProducer interface states, that this method returns the same type as is specified in the generic type when used.","(""CarProducer"", ""The CarProducer class has a method called produce that is related to its functionality of producing Car instances."", ""produce""); (""MyProducer"", ""The produce method is declared in the MyProducer interface, indicating a direct relationship between the interface and the method."", ""produce"")"
Now the result variable would end up with the value 12.5.,NULL
The example above defines a method called writeText inside a class named MyClass.,NULL
This would happen sometime at runtime - depending on when the application tried to use the missing class.,NULL
This example module descriptor declares that it requires the standard Java module named javafx.graphics.,NULL
Here is how you run the main class from a Java module JAR file:,NULL
In Java nested classes are classes that are defined inside another class.,NULL
Notice how you put new after the reference to the outer class in order to create an instance of the inner class.,NULL
"As you can see, an anonymous class implementing an interface is pretty similar to an anonymous class extending another class.","(""AnonymousClass"", ""An anonymous class can implement an interface."", ""Interface"")"
"Users of the Cache class may never see the CacheEntry class, if they have no need to obtain information about the CacheEntry itself, but only the cached value.",NULL
"If the classes A and B are located in the same Java package, there is no problem with the code above.","(""A"", ""Class A is located in the same Java package as Class B."", ""Java package"")"
"Instead of having a fixed number of layer packages which keep growing in number of classes, you get a growing number of application functionality packages with a smaller number of classes inside.","(""LayerPackages"", ""Layer packages contain a growing number of classes."", ""Classes"")"
A Java Record is a special kind of Java class which has a concise syntax for defining immutable data-only classes.,NULL
You can add instance methods to a Java Record definition - just like you can with a regular Java class.,NULL
Notice how the brandAsLowerCase() method calls the auto-generated brand() method internally.,NULL
"As you can see, a new StringBuilder is created, passing along the first String to its constructor, and the second String to its append() method, before finally calling the toString() method.","(""StringBuilder"", ""The append() method is called on the StringBuilder instance to append a String."", ""append"")"
You can search for substrings in Strings using the indexOf() method.,NULL
The Java String class also has a lastIndexOf() method which finds the last occurrence of a substring.,NULL
The Java String class contains a method called trim() which can trim a string object.,NULL
"If not, the default toString() method (inherited from the Object class) will get called.",NULL
From Java 13 the Java String class got a new method called translateEscapes() which can translate escape codes that exist inside a String in the same way the Java compiler translates them.,NULL
When you create an instance of a class (an object) the object can have methods you can execute.,"(""Class"", ""A class is used to create an instance, which is referred to as an object."", ""Object"")"
The second line assigns the floating point value 199.99 to the floating point variable named myFloat.,NULL
"When you click the ""Run..."" option, IntelliJ IDEA will first compile your Java class, and then run it.",NULL
"The logrb() methods work like the log() methods too, except they can obtain the log messages from a resource bundle.",NULL
You can obtain the parent Logger of a given Logger using the getParent() method.,NULL
The getParameters() method returns the parameters to be inserted into the message of this LogRecord.,NULL
The getResourceBundle() method returns the ResourceBundle (if any) used to localize the message of this LogRecord.,"(""getResourceBundle"", ""The getResourceBundle() method returns the ResourceBundle used to localize messages."", ""ResourceBundle"")"
"Note: This tutorial does not cover the other popular Java logging API's (Log4J, SLF4J, Apache Commons Logging, LogBack etc.).",NULL
Receiving data via a DatagramSocket is done by first creating a DatagramPacket and then receiving data into it via the DatagramSocket's receive() method.,"(""DatagramSocket"", ""DatagramSocket is used to receive data into a DatagramPacket."", ""DatagramPacket"")"
The java.net package contains two interesting classes: The URL class and the URLConnection class.,"(""java.net"", ""The URL class is part of the java.net package."", ""URL"")"
You can check the when the read operation is finished by calling the isDone() method of the Future instance returned by the read() method.,"(""isDone"", ""isDone() is a method of the Future class that checks if the read operation is finished."", ""Future"")"
Each way to write data call one of the write() methods of the AsynchronousFileChannel.,NULL
The int returned by the read() method tells how many bytes were written into the Buffer.,NULL
There is no guarantee of how many bytes the write() method writes to the FileChannel.,NULL
You can obtain the current position of the FileChannel object by calling the position() method.,NULL
The Files.createDirectory() method creates a new directory from a Path instance.,"(""createDirectory()"", ""The createDirectory() method is a part of the Files class, which is responsible for creating directories."", ""Files"")"
The Java NIO Files class also contains a function for moving files from one path to another.,NULL
Here is a walkFileTree() that extends SimpleFileVisitor to look for a file named README.txt :,"(""WalkFileTree"", ""WalkFileTree is a method that extends the SimpleFileVisitor class."", ""SimpleFileVisitor"")"
"By walking through all directories and deleting all files (inside visitFile()) in each directory, and afterwards delete the directory itself (inside postVisitDirectory()) you can delete a directory with all subdirectories and files.",NULL
"In many cases though, you can replace the use of the File class with use of the Path interface.",NULL
The normalize() method of the Path interface can normalize a path.,NULL
"As you saw in the previous section, when you register a Channel with a Selector the register() method returns a SelectionKey objects.","(""Channel"", ""Channel is registered with a Selector."", ""Selector"")"
"You can also attach an object already while registering the Channel with the Selector, in the register() method.","(""Channel"", ""The Channel can be registered with the Selector, indicating a relationship between the two classes."", ""Selector""); (""Channel"", ""The register() method is used to register the Channel object."", ""register"")"
NOTE: Only the interfaces specifically declared implemented by a given class is returned.,NULL
All you need to do is to obtain a ClassLoader and call its loadClass() method.,NULL
"When the MyAction class calls methods on the IMyFactory instance injected into its constructor by the container, the method calls are translated into calls to the IContainer.instance() method, which is the method you use to obtain instances from the container.","(""MyAction"", ""MyAction class calls methods on the IMyFactory instance injected into its constructor."", ""IMyFactory""); (""IMyFactory"", ""The method calls on IMyFactory are translated into calls to the IContainer.instance() method."", ""IContainer"")"
"You cannot ask for getters and setters explicitly, so you will have to scan through all the methods of a class and check if each method is a getter or setter.",NULL
To access a private field you will need to call the Class.getDeclaredField(String name) or Class.getDeclaredFields() method.,"(""Class"", ""getDeclaredField is a method of the Class class that retrieves a field by name."", ""getDeclaredField"")"
"By calling Field.setAcessible(true) you turn off the access checks for this particular Field instance, for reflection only.",NULL
"The methods Class.getMethod(String name, Class[] parameterTypes) and Class.getMethods() methods only return public methods, so they won't work.","(""Class"", ""Class is the containing class for the method getMethod."", ""getMethod""); (""Class"", ""Class is the containing class for the method getMethods."", ""getMethods""); (""getMethod"", ""getMethod takes a String parameter as an argument."", ""String"")"
"It will explain the basics of Java Reflection including how to work with arrays, annotations, generics and dynamic proxies, and do dynamic class loading and reloading.","(""Java Reflection"", ""Java Reflection explains how to work with arrays."", ""arrays""); (""Java Reflection"", ""Java Reflection explains how to work with annotations."", ""annotations""); (""Java Reflection"", ""Java Reflection explains how to work with generics."", ""generics""); (""Java Reflection"", ""Java Reflection explains how to work with dynamic proxies."", ""dynamic proxies""); (""Java Reflection"", ""Java Reflection explains how to do dynamic class loading."", ""dynamic class loading"")"
"For instance, if you are introspecting a String array, you can detect that the element type is String by inspecting the array class.",NULL
"For instance, the character class [a-zA-Z] will match all letters between a and z or between A and Z .","(""Character"", ""The character class matches all uppercase letters between A and Z."", ""A-Z"")"
"For that, you need to use the find(), start() and end() methods.","(""find"", ""Both methods are used in the context of performing operations."", ""start""); (""find"", ""Both methods are used in the context of performing operations."", ""end"")"
"In other words, if the regular expression matches the beginning of a text but not the whole text, lookingAt() will return true, whereas matches() will return false.",NULL
"In case you have started matching occurrences in a string via the find() method, the Matcher will internally keep a state about how far it has searched through the input text.",NULL
The Matcher replaceAll() and replaceFirst() methods can be used to replace parts of the string the Matcher is searching through.,"(""Matcher"", ""The replaceAll method is a method of the Matcher class used for string replacement."", ""replaceAll"")"
A regular expression is also sometimes referred to as a pattern (hence the name of the Java Pattern class).,NULL
"Too keep this text short, the Matcher covered in more detail in the text about the Java Matcher class.",NULL
When you are finished reading data from the GZIPInputStream you should close it using its close() method.,NULL
"But, notice how no DI is used inside the BO.checkPersonIsValid() or the DAO.readPerson() methods.","(""BO"", ""The method checkPersonIsValid is defined within the BO class."", ""checkPersonIsValid"")"
"This little script defines the ""max"" factory as a call to the static max() method with input parameter 0 and 1 passed to the max() method.",NULL
"In other words, as a call to the get() method on the HttpRequestCache singleton.",NULL
The ScriptFactoryBuilder has a addFactories() method that takes an InputStream as parameter instead of a String.,"(""addFactories"", ""The addFactories() method takes an InputStream as a parameter."", ""InputStream"")"
"Notice how the HttpServletRequest and HttpServletResponse are not obtained by the ThreadLocal.get() method, but via the static methods getRequest() and getResponse().","(""getRequest"", ""getRequest() is a static method that retrieves an instance of HttpServletRequest."", ""HttpServletRequest""); (""getResponse"", ""getResponse() is a static method that retrieves an instance of HttpServletResponse."", ""HttpServletResponse""); (""ThreadLocal"", ""ThreadLocal.get() method is mentioned in relation to obtaining HttpServletRequest."", ""getRequest"")"
"The IObjectMappingKey instance can contain more information about the class to be mapped, than a Class object can.",NULL
This is the object is obtained from the getResult() method of the IResultSetProcessor.,NULL
"This speeds up object mapping cache lookups because the hashCode() method returns this int id, and because equals() also only compares int id's, instead of Class objects, table names etc.","(""hashCode"", ""The hashCode() method returns this int id."", ""id"")"
The extended class CustomObjectMapperBase is an empty implementation of the ICustomObjectMapper interface.,NULL
Just call the IObjectMapping.removeGetterMapping(String name) or IObjectMapping.removeSetterMapping(String name) method to do so.,"(""IObjectMapping"", ""removeGetterMapping is a method of the IObjectMapping class."", ""removeGetterMapping"")"
"Second, you do not need the parentheses around the closure when calling doFirst() or doLast().",NULL
The and() method is used to combine two other Predicate functions in the same way I showed in the beginning of this Java functional composition tutorial.,NULL
"The Java Function compose() method composes a new Function instance from the Function instance it is called on, and the Function instance passed as parameter to the compose() method.","(""compose()"", ""The compose() method is a method of the Function class."", ""Function"")"
The first example of a higher order function is the Collections.sort() method which takes a Comparator as parameter.,NULL
The call to the map() method of the Stream interface is a non-terminal operation.,NULL
Only the first occurrence of this element will be included in the Stream returned by distinct().,NULL
"The findFirst() method returns an Optional from which you can obtain the element, if present.",NULL
"The Java Stream forEach() method is a terminal operation which starts the internal iteration of the elements in the Stream, and applies a Consumer (java.util.function.Consumer) to each element in the Stream.","(""forEach()"", ""forEach() is a method that operates on the elements of the Java Stream."", ""Java Stream""); (""forEach()"", ""forEach() applies a Consumer to each element in the Stream."", ""Consumer"")"
Which element is the largest is determined by the Comparator implementation you pass to the max() method.,NULL
This Optional contains the value (if any) returned by the lambda expression passed to the reduce() method.,NULL
"Note: Even if the class is called RollingBufferInputStream, it is not an InputStream subclass.",NULL
"You can specify fonts for most text objects (Chunk, Phrase, Paragraph etc.)","(""Chunk"", ""Both are classes that can be used to specify fonts for text objects."", ""Phrase""); (""Chunk"", ""Both are classes that can be used to specify fonts for text objects."", ""Paragraph"")"
"If you already have a finished PDF, and just want to add a header, footer or watermark to it, IText provides the com.itextpdf.pdf.PdfStamper class.",NULL
"You can write text as superscript or subscript using the Chunk class, and it's setTextRise() method.",NULL
"You can add underline and strikethrough text using the Chunk class, and its setUnderline() method.",NULL
"It is now up to the caller of the readMyData() method to decide if an existing MyData instance should be reused, or if a new instance should be created.",NULL
The value returned by write() is the number of bytes copied from the ByteBuffer.,NULL
Here is an implementation of the ring buffer that uses a fill count including the batch put() and take() operations.,"(""RingBuffer"", ""The put method is an operation that is part of the RingBuffer class implementation."", ""put"")"
"Here is an implementation of the ring buffer that uses a read position and flip marker, including the batch put() and take() operations.","(""RingBuffer"", ""The put method is an operation of the RingBuffer class."", ""put"")"
"If your benchmark method produces multiple results you can pass each of these results to a black hole, meaning calling consume() on the Blackhole instance for each value.","(""Benchmark"", ""The benchmark method produces results that can be passed to the Blackhole class for consumption."", ""Blackhole"")"
The javax.servlet.http.HttpServlet class is a slightly more advanced base class than the GenericServlet shown in the Simple Servlet example.,"(""HttpServlet"", ""HttpServlet is a more advanced base class than GenericServlet."", ""GenericServlet"")"
The easiest way to implement this interface is to extend either the class GenericServlet or HttpServlet.,NULL
Each test method usually tests a single method of the target class.,"(""TestMethod"", ""A test method is designed to test a single method."", ""SingleMethod"")"
"A protected method or field, on the other hand, is also accessible to other classes in the same package, and for subclasses of the unit too.","(""Method"", ""A protected method is accessible to other classes in the same package."", ""Class""); (""Field"", ""A protected field is accessible to other classes in the same package."", ""Class""); (""Method"", ""A protected method is accessible to subclasses of the unit in the same package."", ""Package"")"
"When your business logic class is separated from the boundary class, you can test the business logic class separately.",NULL
Here is the unit test which uses a ByteArrayOutputStream to collect the data written to the OutputStream passed to the MyIOUnit.write() method:,"(""ByteArrayOutputStream"", ""ByteArrayOutputStream is used in the context of the MyIOUnit class to collect data written to an OutputStream."", ""MyIOUnit"")"
You may also be able to use the StringReader and StringWriter classes in your unit tests.,NULL
"To avoid fragmenting the Java heap with Bytes instances, the Bytes class is designed to be obtained from an ObjectPool .",NULL
To defragment the free blocks you call the defragment() method of the BytesAllocatorManualDefrag .,NULL
The Bytes class represents a byte sequence allocated from a shared byte array.,"(""Bytes"", ""The Bytes class represents a byte sequence, indicating that the class defines or encapsulates the byte sequence functionality."", ""byte sequence"")"
"As you can see, the ChannelInitializer is added to the ServerBootstrap using the childHandler() method.","(""ChannelInitializer"", ""ChannelInitializer is added to ServerBootstrap."", ""ServerBootstrap"")"
"By calling sync() on the ChannelFuture the main thread that creates the server waits until the server has started, before continuing.",NULL
The easiest way to create an instance of the RionObjectReader is via the RionObjectReaderBuilder class.,NULL
The RionObjectReader readCyclic() method reads a cyclic object graph stored as RION in a byte array.,"(""RionObjectReader"", ""The readCyclic() method is a method of the RionObjectReader class."", ""readCyclic"")"
The RionObjectWriter writeAcyclic() can write an acyclic object graph as RION into a byte array.,"(""RionObjectWriter"", ""The method writeAcyclic() belongs to the class RionObjectWriter."", ""writeAcyclic"")"
When reading a composite RION field you need to use the RionReader moveInto() and moveOutOf() methods.,"(""RionReader"", ""The moveInto() method is a function of the RionReader class."", ""moveInto"")"
"Here are two examples of writing a 32 bit and 64 bit floating point number as RION Float fields to the destination byte array, using the RionWriter writeFloat32() and writeFloat64() methods:","(""RionWriter"", ""RionWriter is the class that contains the method writeFloat32."", ""writeFloat32"")"
The StreamStorageFS class contains a method to read bytes from a stream block file.,NULL
"The readBytes() method reads bytes from the file represented by the given StreamStorageBlockFS instance, into the byte[] array passed as parameter.","(""readBytes"", ""The readBytes() method reads bytes from the file represented by the given StreamStorageBlockFS instance."", ""StreamStorageBlockFS"")"
You can always obtain the root directory path a StreamStorageRootFS was created with via its getRootDirPath() method.,NULL
"When you write records to a stream via the StreamStorageFS instance, the StreamStorageFS class will divide the records into multiple files.",NULL
You can read the data stored in a Buffer using the many get...() methods.,NULL
Notice the use of / as directory separator and the use of : as classpath entry separator.,NULL
"However, if you do need to access the body of the HTTP response, you need to register another handler on the HttpClientResponse that is passed as parameter to the first Handler's handle() method.","(""HttpClientResponse"", ""HttpClientResponse is passed as a parameter to the handle method of the Handler class."", ""Handler"")"
"Again, the NetClient's close() method is asynchronous, so the underlying TCP connection may not yet be closed by the time the close() method returns.",NULL
Sending messages via the event bus can be done via either the send() or publish() method on the event bus.,"(""EventBus"", ""The send method is a function that can be called on the EventBus class to send messages."", ""send"")"
A verticle has a start() and a stop() method which are called when the verticle is deployed and when it is undeployed.,"(""Verticle"", ""The start() method is a function of the Verticle class that is called when the verticle is deployed."", ""start"")"
The addAll() method takes a Collection as parameter so you can pass either a List or Java Set as parameter,"(""addAll"", ""The addAll() method takes a Collection as a parameter."", ""Collection""); (""addAll"", ""The addAll() method can accept a List as a parameter."", ""List"")"
But no thread can actually execute unlock() until the thread waiting in lock() leaves the outer synchronized block,NULL
A thread cannot call wait() notify() or notifyAll() without holding the lock on the object the method is called on,"(""Thread"", ""A thread can call the wait() method when it holds the lock on the object."", ""wait""); (""Thread"", ""A thread can call the notify() method when it holds the lock on the object."", ""notify"")"
"The Arrays class contains a set of methods called binarySearch(). This method helps you perform a binary search in an array. The array must first be sorted. You can do so yourself, or via the Arrays.sort() method covered earlier in this text.","(""binarySearch"", ""binarySearch is a method that belongs to the Arrays class."", ""Arrays""); (""Arrays.sort"", ""Arrays.sort is a method that belongs to the Arrays class."", ""Arrays"")"
java.lang.ThreadLocal is possible to set an initial value for a Java ThreadLocal which will get used the first time get() is called before set() has been called with a new value,"(""ThreadLocal"", ""The method get() retrieves the value from the ThreadLocal instance."", ""get"")"
Adding and getting elements to a generic Map is done using the put() and get() methods just like you have always done,"(""Map"", ""The put() method is used to add elements to the Map."", ""put()"")"
Deque.pollLast() is different than removeLast() which throws an exception if the Deque is empty,NULL
The tailSet() method works the same way as the headSet() method except it returns all elements that are equal to or higher than the given parameter element,NULL
"You can also obtain an Iterator from many of the Java Collection data structures, e.g. a List, Set, Map, Queue, Deque or Map.","(""Iterator"", ""Iterator can be obtained from a List as part of Java Collection data structures."", ""List""); (""Iterator"", ""Iterator can be obtained from a Set as part of Java Collection data structures."", ""Set""); (""Iterator"", ""Iterator can be obtained from a Map as part of Java Collection data structures."", ""Map""); (""Iterator"", ""Iterator can be obtained from a Queue as part of Java Collection data structures."", ""Queue"")"
java.io.Writer works just like combining the Reader with InputStream or the Writer with OutputStream,"(""Writer"", ""Writer is mentioned as working with InputStream."", ""InputStream"")"
Remember that even if the 4 threads call wait() and notify() on the same shared string instance the signals from the doWait() and doNotify() calls are stored individually in the two MyWaitNotify instances,"(""MyWaitNotify"", ""The wait() method is called on the MyWaitNotify instance to manage thread synchronization."", ""wait""); (""MyWaitNotify"", ""The notify() method is called on the MyWaitNotify instance to manage thread synchronization."", ""notify""); (""MyWaitNotify"", ""The doWait() method is associated with the MyWaitNotify instance for handling waiting threads."", ""doWait"")"
The bigger the result String grows the longer it takes to copy the characters from it into a new StringBuilder and again copy the characters from the StringBuilder into the temporary String created by the toString() method,"(""String"", ""String is being copied into StringBuilder for character manipulation."", ""StringBuilder"")"
The logp() methods work like the log() methods except each method take an extra two parameters The sourceClass and sourceMethod parameter,"(""logp"", ""The logp() method works similarly to the log() method, indicating a relationship between these two methods."", ""log""); (""logp"", ""The logp() method takes the sourceMethod parameter, establishing a relationship between them."", ""sourceMethod""); (""logp"", ""The logp() method takes the sourceClass parameter, establishing a relationship between them."", ""sourceClass""); (""log"", ""The log() method is mentioned in relation to the sourceMethod parameter, indicating a connection."", ""sourceMethod"")"
But since the thread waiting in lock() has not yet called queueObject.wait() the call to queueObject.notify() passes into oblivion,"(""lock"", ""The method lock() is related to the class queueObject as it is involved in the synchronization process with the queueObject's wait() and notify() methods."", ""queueObject""); (""wait"", ""The method wait() is called on the class queueObject, indicating a direct relationship between them."", ""queueObject"")"
Since PipedOutputStream is a subclass of OutputStream PipedOutputStream has the same basic methods and use patterns as an OutputStream,"(""PipedOutputStream"", ""PipedOutputStream is a subclass of OutputStream, indicating an inheritance relationship."", ""OutputStream"")"
You can convert a Java Set to a Java List by creating a List and calling its addAll() method passing the Set as parameter to the addAll() method,"(""Java Set"", ""A Java Set can be converted to a Java List by using the addAll() method."", ""Java List"")"
Even though the Java Networking APIs enable you to open and close network connections via sockets all communication happens via the Java IO classes InputStream and OutputStream,"(""Java Networking APIs"", ""The Java Networking APIs utilize InputStream for network communication."", ""InputStream"")"
Again here the first() and next() methods return the unicode index of the found word boundary,"(""first"", ""The first() method returns the unicode index of the found word boundary"", ""unicode index"")"
Obviously if the input parameter to contains() is null the contains() method will not use the equals() method to compare against each element but rather use the == operator,"(""contains"", ""The contains() method does not use the equals() method when the input parameter is null."", ""equals"")"
Both Java File and FileChannel works but in case you want a pure Java NIO solution use the Java NIO FileChannel class,"(""Java File"", ""Both Java File and FileChannel works together in Java programming."", ""FileChannel"")"
If you need an integer value use the round() floor() or ceil() method,"(""round"", ""Both are methods used to obtain integer values."", ""floor""); (""round"", ""Both are methods used to obtain integer values."", ""ceil"")"
The poll() and remove() both removes the first element in the Queue. They differ in how they behave if the Queue is empty. The poll() method returns null if the Queue is empty. The remove() method throws an exception if the Queue is empty.,"(""poll"", ""The poll() method operates on the Queue class by removing the first element."", ""Queue""); (""remove"", ""The remove() method operates on the Queue class by removing the first element."", ""Queue"")"
"The add() and offer() methods differ in how the behave if the Queue is full, so no more elements can be added. The add() method throws an exception in that case, whereas the offer() method just returns false.","(""add"", ""The add() method interacts with the Queue class by attempting to add elements to it."", ""Queue""); (""offer"", ""The offer() method interacts with the Queue class by attempting to add elements to it."", ""Queue"")"
Each of the methods ceilingEntry() floorEntry() higherEntry() and lowerEntry() will be covered in the following sections,NULL
To do so set the upper bound to 1 and have the call to take() and release() guard the critical section,NULL
Once you have opened a socket (network connection) though you read and write data to and from it via Java IO InputStream and OutputStream classes,"(""Socket"", ""Socket is a network connection that can be read and written to using InputStream."", ""InputStream"")"
Many of the core components in the Java Collection API rely on the correct implementation of the `hashCode()` and `equals()` methods.,"(""Java Collection API"", ""The Java Collection API relies on the correct implementation of the hashCode() method."", ""hashCode()"")"
java.io.PrintWriter example first creates a PrintWriter instance which is connected to a FileWriter,"(""example"", ""The method 'example' creates an instance of the class 'PrintWriter'"", ""PrintWriter"")"
InputStream.read() example creates an AsynchronousFileChannel and then creates a ByteBuffer which is passed to the read() method as parameter along with a position of 0,"(""InputStream"", ""InputStream has a method called read() which is being invoked."", ""read()""); (""AsynchronousFileChannel"", ""AsynchronousFileChannel is created to work with ByteBuffer for reading data."", ""ByteBuffer"")"
java.lang.StringBuffer text explains how to use the SimpleDateFormat class to format dates,NULL
In general you can call the markSupported() method to find out if mark() and reset() are supported on a given InputStream or not but the BufferedInputStream supports them,"(""BufferedInputStream"", ""BufferedInputStream supports the markSupported() method to check for mark() and reset() support."", ""markSupported""); (""BufferedInputStream"", ""BufferedInputStream is a subclass of InputStream."", ""InputStream""); (""markSupported"", ""markSupported() is used to determine if mark() is supported."", ""mark"")"
"The newLine() method which can write a new-line character to the underlying Writer. In addition, you may need to call flush() if you need to be absolutely sure that the characters written until now is flushed out of the buffer and onto the network or disk.","(""newLine"", ""The newLine() method writes a new-line character to the underlying Writer."", ""Writer"")"
Queue.poll() is different than remove() which throws an exception if the Deque is empty,"(""Queue"", ""poll() is a method of the Queue class"", ""poll""); (""Deque"", ""remove() is a method of the Deque class"", ""remove"")"
Notice the two synchronized blocks inside the set() and get() method. Notice how the blocks are placed last and first in the two methods.,NULL
"The replace() method will only insert the new value if there is already an existing value mapped to the key. If no existing value is mapped to the given key, no value is inserted. This is different from how put() works, which always insert the value no matter what.",NULL
The logrb() methods work like the log() methods too except they can obtain the log messages from a resource bundle,NULL
The Handler in the Java Logging API use a java.util.logging.Formatter to format the LogRecord before writing it to an external system,"(""Handler"", ""The Handler uses a Formatter to format the LogRecord."", ""Formatter""); (""Handler"", ""The Handler formats the LogRecord before writing it to an external system."", ""LogRecord"")"
Notice how the second value passed to put() is now also a string.,NULL
"Even if you can get get() and put() to work, I would recommend that you do not use these methods.",NULL
"Using that formulation, Properties would not have been made a subclass of Hashtable, because Properties should not be usable as a Hashtable .",NULL
"Instead, the Properties class should have just had an internal Hashtable to keep the property key,value pairs in.",NULL
"The Java Queue interface, java.util.Queue represents a data structure designed to have elements inserted at the end of the queue, and elements removed from the beginning of the queue.",NULL
"There are also Queue implementations in the java.util.concurrent package, but I will leave the concurrency utilities out of this tutorial.",NULL
"The add() and offer() methods differ in how the behave if the Queue is full, so no more elements can be added.","(""add"", ""The add() method is used to add elements to the Queue."", ""Queue"")"
"The add() method throws an exception in that case, whereas the offer() method just returns false.",NULL
Here are two examples of adding elements to a Java Queue via its add() and offer() methods:,"(""Java Queue"", ""The add method is used to add elements to the Java Queue."", ""add"")"
To take an element from a Java Queue you can call either its poll() or remove() method.,"(""Queue"", ""poll() is a method that can be called on a Queue to take an element."", ""poll"")"
The poll() and remove() both removes the first element in the Queue.,"(""poll"", ""The poll() method operates on the Queue class to remove the first element."", ""Queue"")"
The remove() method throws an exception if the Queue is empty.,NULL
Here are two examples of taking an element from a Java Queue using its poll() and remove() methods:,"(""Queue"", ""poll is a method that operates on the Queue class to retrieve and remove the head of the queue."", ""poll"")"
"The call to poll() will remove the first element of the Queue - which is the first Java String instance added - ""element 1"".","(""poll"", ""poll() is a method that operates on the Queue class to remove its first element."", ""Queue"")"
"The call to rmove() will remove the second element of the Queue - which after the first poll() call is now the String instance added - ""element 2"".","(""rmove"", ""rmove() is a method that operates on the Queue class to remove an element."", ""Queue""); (""poll"", ""poll() is a method that operates on the Queue class to retrieve an element."", ""Queue""); (""rmove"", ""rmove() is called after poll() to remove an element that was added by poll()."", ""poll"")"
"If the Queue is empty, the element() method throws a NoSuchElementException.","(""Queue"", ""The element() method is associated with the Queue class as it operates on its elements."", ""element()"")"
Here is an example of peeking at the first element of a Java Queue using the element() method:,NULL
The peek() works like the element() method except it does not throw an exception if the Queue is empty.,"(""peek"", ""peek() works like the element() method except it does not throw an exception if the Queue is empty."", ""element""); (""peek"", ""peek() is a method that operates on the Queue class."", ""Queue"")"
Here is an example of peeking at the first element of a Queue using the peek() method:,NULL
"To remove elements from a Java Queue, you call the remove() method.",NULL
You can remove all elements from a Java Queue using its clear() method.,NULL
Here is an example of removing all elements from a Java Queue via its clear() method:,NULL
You can read the number of elements stored in a Java Queue via its size() method.,NULL
Here is an example of obtaining the size of a Java Queue via its size() method:,NULL
After running this code the size variable should contain the value 3 - because the Queue contains 3 elements at the time size() is called.,"(""Size"", ""The size variable is related to the Queue class as it holds the number of elements in the Queue."", ""Queue"")"
You can check if a Java Queue contains a certain element via its contains() method.,NULL
"The contains() method will return true if the Queue contains the given element, and false if not.",NULL
"The contains() method is actually inherited from the Collection interface, but in practice that doesn't matter.",NULL
"The Java Set interface, java.util.Set, represents a collection of objects where each object in the Java Set is unique.",NULL
"If the Set is not typed, using Java Generics, then you can even mix objects of different types (classes) in the same Set.","(""Set"", ""Java Generics allows for the use of different types of objects in a Set, indicating a relationship between the Set and Java Generics."", ""Java Generics"")"
This example creates a HashSet which is one of the classes in the Java APIs that implement the Set interface.,"(""HashSet"", ""HashSet is a class that implements the Set interface."", ""Set""); (""HashSet"", ""HashSet is part of the Java APIs."", ""Java APIs"")"
"In other words, the order in which the elements whould be sorted if you used a Collections.sort() on a List or array containing these elements.","(""Collections"", ""The method sort() is a method of the Collections class used to sort elements."", ""sort""); (""sort"", ""The sort() method can be applied to a List to sort its elements."", ""List"")"
"There are also Set implementations in the java.util.concurrent package, but I will leave the concurrency utilities out of this tutorial.",NULL
The Java Set static factory methods are called of() and take either zero or more parameters.,"(""Set"", ""The method 'of' is a static factory method of the class Set."", ""of"")"
"Here is first an example of creating an empty, immutable Set using Set.of() :",NULL
Specifying a generic type of the Set returned by Set.of() looks like this:,NULL
Here is an example of how creating a Set containing elements using the Set.of() method looks:,NULL
To add elements to a Set you call its add() method.,NULL
The three add() calls add a String instance to the set.,"(""add"", ""The add() method is used to add a String instance to the set."", ""String"")"
You obtain an Iterator from a Set by calling the iterator() method.,"(""Set"", ""An Iterator is obtained from a Set."", ""Iterator"")"
You can remove all elements from a Java Set using the clear() method.,NULL
The Java List interface has a method called addAll() which adds all elements from another Collection (List or Set) to the Set.,"(""Java List"", ""The addAll() method is a method of the Java List class."", ""addAll()""); (""addAll()"", ""The addAll() method operates on a Collection, adding elements from it."", ""Collection""); (""addAll()"", ""The addAll() method can add elements from a List to another Collection."", ""List"")"
The Java Set interface as a method called removeAll() which removes all elements in the Set which are also present in another Collection.,"(""removeAll"", ""removeAll() is a method of the Set class."", ""Set"")"
"The element three has been removed, because it was present in set2, which was given as parameter to set.removeAll(set2) .","(""set"", ""The method removeAll is called on the set entity to remove elements present in set2."", ""removeAll"")"
You can check the size of a Java Set using the size() method.,NULL
"You can check if a Java Set is empty, meaning it contains no elements, by calling the isEmpty() method on the Set.",NULL
You can also check if a Set is empty by comparing the value returned by the size() method with 0.,NULL
"After running this Java code the isEmpty variable will contain the value true, because the Set size() method returns 0 - because the Set in the example contains no elements.","(""Set"", ""The size method is a method of the Set class that returns the number of elements in the Set."", ""size"")"
You can check if a Java Set contains a given element (object) by calling the contains() method.,NULL
"You can convert a Java Set to a Java List by creating a List and calling its addAll() method, passing the Set as parameter to the addAll() method.","(""Java Set"", ""Java Set can be converted to a Java List by using the addAll() method."", ""Java List""); (""Java List"", ""The addAll() method is called on the Java List to add elements from the Java Set."", ""addAll"")"
"The Java SortedMap interface, java.util.SortedMap, is a subtype of the java.util.Map interface, with the addition that the elements stored in a Java SortedMap map are sorted internally.","(""SortedMap"", ""SortedMap is a subtype of Map."", ""Map"")"
Java comes with a built-in implementation of the Java SortedMap interface called TreeMap (java.util.TreeMap).,"(""TreeMap"", ""TreeMap is an implementation of the SortedMap interface."", ""SortedMap"")"
"The order of the sorting in a Java SortedMap is either the natural sorting order of the elements (if they implement java.lang.Comparable), or the order determined by a Comparator that you can give to the SortedSet.","(""SortedMap"", ""SortedMap uses the natural sorting order of elements if they implement Comparable."", ""Comparable"")"
But it is also possible to iterate the elements in descending order using the method TreeMap.descendingKeySet().,NULL
"You iterate the keys of a SortedMap by calling its keySet() method, like this:",NULL
"Remember, if you want to iterate the keys in descending order rather than ascending order, use the sortedMap.descendingKeySet().iterator() method, like this:","(""sortedMap"", ""sortedMap has a method called descendingKeySet that returns a set of keys in descending order."", ""descendingKeySet"")"
"If your Java SortedMap was created using a Comparator, you can obtain the Comparator used via the SortedMap comparator() method.","(""SortedMap"", ""The SortedMap class can utilize a Comparator for sorting its keys."", ""Comparator"")"
Here is an example of obtaining the Comparator used by a SortedMap via its comparator() method:,"(""comparator"", ""The comparator() method is used to obtain the Comparator associated with the SortedMap."", ""SortedMap"")"
Here is an example of obtaining the first key of a SortedMap via its firstKey() method:,NULL
Here is an example of obtaining the last key of a SortedMap via its lastKey() method:,NULL
The SortedMap interface has a method named headMap() which returns a new Map which contains the first elements of the SortedMap according to the sort order used.,"(""SortedMap"", ""headMap() is a method of the SortedMap interface that returns a new Map."", ""headMap"")"
The headMap() method takes a parameter that acts as a delimiter for what elements gets included in the returned head map.,NULL
All elements with a key that is smaller than / earlier than the parameter passed to the headMap() method.,NULL
Here is an example of obtaining a head map from a SortedMap via its headMap() method:,NULL
The SortedMap interface has a method named tailMap() which returns a new Map which contains the last elements of the SortedMap according to the sort order used.,"(""SortedMap"", ""tailMap() is a method of the SortedMap class that returns a new Map."", ""tailMap"")"
The tailMap() method takes a parameter that acts as a delimiter for what elements gets included in the returned tail map.,NULL
All elements with a key that is equal to or larger than the parameter passed to the tailMap() method.,NULL
Here is an example of obtaining a tail map from a SortedMap via its tailMap() method:,NULL
"The tail map returned will contain the key, value pairs (""c"", ""3""), (""d"", ""4"") and (""e"", ""5""), since ""c"", ""d"" and ""e"" are larger than or equal to the ""c"" passed as parameter to tailMap() .","(""tailMap"", ""tailMap() method processes the key 'c' to return values larger than or equal to it."", ""c""); (""tailMap"", ""tailMap() method processes the key 'd' to return values larger than or equal to it."", ""d"")"
The Java SortedMap also has a method named subMap() which can return a new Map which is a submap of the SortedMap.,"(""subMap"", ""subMap() is a method of the SortedMap class that returns a new Map."", ""SortedMap"")"
The subMap() method takes two parameters which act as delimiters for what elements are included in the returned submap.,"(""subMap"", ""The subMap() method takes two parameters which act as delimiters for what elements are included in the returned submap."", ""parameters"")"
Here is an example of obtaining a submap from a Java SortedMap via its subMap() method:,NULL
"The Java SortedSet interface, java.util.SortedSet, is a subtype of the java.util.Set interface.",NULL
The Java Collections API only has one implementation of the Java SortedSet interface - the java.util.TreeSet class.,"(""Java Collections API"", ""The Java Collections API provides an implementation of the Java SortedSet interface."", ""Java SortedSet"")"
"The java.util.concurrent package also has an implementation of this interface, but I will leave the concurrency utilities out of this trail.",NULL
"It it possible to pass a Comparator, java.util.Comparator implementation to the constructor of the TreeSet.","(""Comparator"", ""The Comparator is passed to the constructor of the TreeSet to define the ordering of its elements."", ""TreeSet"")"
"For the SortedSet to be able to determine the natural order of the elements, the elements must implement the java.lang.Comparable interface.",NULL
But it is also possible to iterate the elements in descending order using the method TreeSet.descendingIterator().,NULL
"If you created your SortedSet with a Comparator, you can obtain that Comparator via the SortedSet comparator() method.","(""SortedSet"", ""The SortedSet class has a method called comparator() that returns the Comparator used to create the SortedSet."", ""comparator()"")"
Here is an example of obtaining the Comparator used by a SortedSet via the comparator() method:,NULL
You add elements to a Java SortedSet in the same way you do with a normal Java Set - via its add() method.,"(""Java SortedSet"", ""The add() method is used to add elements to the Java SortedSet."", ""add()""); (""Java Set"", ""The add() method is used to add elements to the Java Set."", ""add()"")"
"To remove an element from a SortedSet you call its remove() method, passing the element to remove as parameter.",NULL
You can get the first element of a SortedSet according to its sort order by calling the first() method of the SortedSet.,NULL
You can get the last element of a SortedSet according to its sort order by calling the last() method of the SortedSet.,NULL
"You call the SortedSet iterator() method which returns an Iterator, and then you can iterate the elements via that.","(""SortedSet"", ""SortedSet has a method called iterator() that returns an Iterator."", ""iterator"")"
"The Java SortedSet interface has a method named headSet() which returns another SortedSet with all elements that are smaller than (ahead of) a given parameter value, according to the sort order used by the SortedSet.",NULL
Here is an example of obtaining a head set from a Java SortedSet via its headSet() method:,NULL
"After running this code the headSet will contain the elements ""a"" and ""b"" since these two elements are smaller than (ahead of) the parameter value ""c"" that was passed to the headSet() method.","(""headSet"", ""The headSet method is designed to return elements that are smaller than the parameter value c."", ""c""); (""headSet"", ""The headSet method contains the element a as it is smaller than the parameter value c."", ""a"")"
"The Java SortedSet interface has a method named setSet() which returns another SortedSet with all elements that are greater than or equal to (tailing) a given parameter value, according to the sort order used by the SortedSet.",NULL
Here is an example of obtaining a tail set from a Java SortedSet via its tailSet() method:,NULL
"After running this code the tailSet will contain the elements ""c"", ""d"" and ""e"", since these three elements are greater than or equal to (tailing) the parameter value ""c"" that was passed to the tailSet() method.","(""tailSet"", ""The tailSet method returns elements that are greater than or equal to the parameter value 'c'."", ""c""); (""tailSet"", ""The tailSet method returns elements that are greater than or equal to the parameter value 'c'."", ""d"")"
The Java SortedSet interface has a method named subSet() method which will return a new SortedSet which is a subset of the SortedSet the subSet() method is called on.,NULL
The subSet() method takes two parameter values which specify what elements the returned SortedSet should contain.,NULL
Here is an example of obtaining a subset of a Java SortedSet via its subSet() method:,NULL
Notice how there is no longer a cast of the object returned from iterator.next() needed.,NULL
"Because the generic type of the SortedSet is String, the compiler knows that the iterator is an Iterato<String>, so next() return String objects.","(""SortedSet"", ""SortedSet is a generic type that uses String as its type parameter."", ""String""); (""Iterator"", ""Iterator<String> is an iterator that returns String objects."", ""String"")"
You can sort a Java List collections using the java.util.Collections.sort() method.,"(""java.util.Collections"", ""The method sort() is part of the java.util.Collections package."", ""sort"")"
For objects to have a natural order they must implement the interface java.lang.Comparable.,NULL
"The compareTo() method should compare this object to another object, return an int value.",NULL
"So, if a string is less than another string by alphabetic comparison it will return a negative number from the compareTo() method.",NULL
When you implement the compareTo() method in your own classes you will have to decide how these objects should be compared to each other.,NULL
Notice how the Collections.sort() method now takes a java.util.Comparator as parameter in addition to the List.,"(""Collections"", ""Collections class contains the sort method."", ""sort""); (""sort"", ""The sort method takes java.util.Comparator as a parameter."", ""java.util.Comparator"")"
The compare() method compares two objects to each other and should:,NULL
"There are a few more requirements to the implementation of the compare() method, but these are the primary requirements.",NULL
"If you want to compare objects by more than one factor, start by comparing by the first factor (e.g first name).",NULL
"Then, if the first factors are equal, compare by the second factor (e.g.",NULL
"The Java Stack class, java.util.Stack, is a classical stack data structure.",NULL
"The Java Stack class actually implements the Java List interface, but you rarely use a Stack as a List - except perhaps if you need to inspect all elements currently stored on the stack.",NULL
"Please note, that the Java Stack class is a subclass of Vector, an older Java class which is synchronized.",NULL
"Additionally, the Vector class uses several older (no longer recommended) parts of Java, like the Enumeration which is superseded by the Iterator interface.","(""Vector"", ""Vector class uses Enumeration as a part of its implementation."", ""Enumeration"")"
To use a Java Stack you must first create an instance of the Stack class.,NULL
You push elements onto a Java Stack using its push() method.,NULL
You pop an element off a Java Stack using the pop() method.,NULL
Here is an example of popping an element off a Stack using the pop() method:,NULL
"The Java Stack class has a method called peek() which enables you to see what the top element on the Stack is, without popping off the element.",NULL
After running this Java example the topElement variable will contain the String object 1 which was pushed onto the Stack just before peek() was called.,"(""topElement"", ""topElement is a variable that contains a String object."", ""String""); (""topElement"", ""topElement is related to Stack as it holds a value that was pushed onto the Stack."", ""Stack"")"
The String object is still present on the Stack after calling peek().,"(""String"", ""The String object is present on the Stack, indicating a relationship between the String class and the Stack class."", ""Stack"")"
"You can search for an object on the stack to get it's index, using the search() method.",NULL
The object's equals() method is called on every object on the Stack to determine if the searched-for object is present on the Stack.,NULL
"You can obtain the size of a Java Stack, meaning the number of elements currently stored on the Stack, via the Stack size() method.",NULL
Here is an example of obtaining the size of a Java Stack via its size() method:,NULL
"After running this code the size variable will contain the value 3, since the Stack in the example contains 3 elements at the time its size() method is called.","(""Size"", ""The size variable is related to the Stack class as it holds the number of elements in the Stack instance."", ""Stack"")"
You do so by first obtaining a Stream from the Stack via the stream() method.,"(""Stack"", ""The Stream is obtained from the Stack."", ""Stream"")"
"Notice, that this example uses a Java Lambda as parameter to the Stream.forEach() method.",NULL
The non-parallelizable part of the programs is 40% which out of a total time of 1 is equal to 0.4 .,NULL
The parallelizable part is thus equal to 1 - 0.4 = 0.6 .,NULL
"If B is 0.4, O is 2 and N is 5, then the calculation looks like this:","(""B"", ""B and O are both variables used in the calculation."", ""O""); (""B"", ""B and N are both variables used in the calculation."", ""N"")"
"With B = 0.4, O = 2 and N = 5, the calculation becomes:","(""B"", ""B and O are both variables used in the calculation."", ""O""); (""B"", ""B and N are both variables used in the calculation."", ""N"")"
"That means, that if you optimize the non-parallelizable (sequential) part by a factor of 2, and paralellize the parallelizable part by a factor of 5, the new optimized version of the program or algorithm would run a maximum of 2.77777 times faster than the old version.",NULL
Note: The content of this text is a part result of a M.Sc.,NULL
Once a thread want to notify the waiting threads it calls notifyAll() on the object the waiting threads called wait() on.,"(""Thread"", ""The Thread class uses the notifyAll method to notify waiting threads."", ""notifyAll"")"
Just have the notifying thread call notify() on the object the waiting threads have called wait() on.,"(""Notifying Thread"", ""The notifying thread calls the notify method to wake up waiting threads."", ""Notify"")"
"To achive this each waiting thread must call wait() on its own, separate object.","(""Thread"", ""A thread must call the wait() method on its own object to achieve synchronization."", ""wait"")"
When the notifying thread wants to notify a specific waiting thread it will call notify() on the object this specific thread has called wait() on.,"(""NotifyingThread"", ""The notifying thread calls the notify() method to notify a specific waiting thread."", ""notify"")"
The lockWrite() method of a ReadWriteLock class shown below is an example of a test-and-set method.,NULL
Threads calling lockWrite() first sets the state before the test (writeRequests++).,NULL
Then it tests the internal state against the access condition in the canGrantWriteAccess() method.,NULL
The BoundedSemaphore class shown below has two test-and-set methods: take() and release().,"(""BoundedSemaphore"", ""The take() method is a test-and-set method of the BoundedSemaphore class."", ""take"")"
A typical example of a set method is the unlock() method of a Lock class.,NULL
Java 5 comes with blocking queue implementations in the java.util.concurrent package.,"(""Java 5"", ""Java 5 is associated with the java.util.concurrent package as it contains the blocking queue implementations."", ""java.util.concurrent"")"
Notice how notifyAll() is only called from enqueue() and dequeue() if the queue size is equal to the size bounds (0 or limit).,"(""enqueue"", ""The method enqueue() calls notifyAll() when certain conditions are met."", ""notifyAll""); (""dequeue"", ""The method dequeue() calls notifyAll() when certain conditions are met."", ""notifyAll""); (""queue"", ""The class queue contains the method enqueue()."", ""enqueue"")"
"If the queue size is not equal to either bound when enqueue() or dequeue() is called, there can be no threads waiting to either enqueue or dequeue items.","(""enqueue"", ""enqueue() is a method that operates on the queue class."", ""queue"")"
"As you can see, the lock() method first checks if the locked member variable is equal to false (check), and if it is it ses locked to true (then act).",NULL
"If multiple threads had access to the same MyLock instance, the above lock() function would not be guaranteed to work.",NULL
Here is the code example from earlier with the lock() method turned into an atomic block of code using the synchronized keyword:,NULL
Now the lock() method is synchronized so only one thread can executed it at a time on the same MyLock instance.,NULL
"The atomic lock() method is actually an example of ""compare and swap"".",NULL
"The lock() method compares the variable locked to the expected value false and if locked is equal to this expected value, it swaps the variable's value to true .","(""lock"", ""The lock() method compares the variable locked to the expected value false."", ""locked""); (""locked"", ""The variable locked is compared to the expected value false."", ""false"")"
From Java 5 you can get access to these functions in the CPU via some of the new atomic classes in the java.util.concurrent.atomic package.,NULL
Here is an example showing how to implement the lock() method shown earlier using the AtomicBoolean class:,NULL
"This class has a compareAndSet() function which will compare the value of the AtomicBoolean instance to an expected value, and if has the expected value, it swaps the value with a new value.",NULL
"The compareAndSet() method returns true if the value was swapped, and false if not.",NULL
Many of the concurrency utilities in the java.util.concurrent Java package are designed for use with this model.,"(""java.util.concurrent"", ""java.util.concurrent is a package within the Java programming language."", ""Java""); (""concurrency utilities"", ""concurrency utilities are part of the java.util.concurrent package."", ""java.util.concurrent"")"
Non-blocking IO means that when a worker starts an IO operation (e.g.,NULL
"When the IO operation finishes, the result of the IO operation ( e.g.",NULL
It just needs to know what channel to forward the job to (or send the message to etc.).,"(""Channel"", ""The channel is used to forward the job."", ""Job"")"
"The main disadvantage of the assembly line concurrency model is that the execution of a job is often spread out over multiple workers, and thus over multiple classes in your project.","(""Assembly Line Concurrency Model"", ""The assembly line concurrency model involves the execution of a job across multiple workers."", ""Job""); (""Job"", ""Jobs are executed by multiple workers in the assembly line concurrency model."", ""Workers"")"
"Of course parallel worker code may also be spread over many different classes, but the execution sequence is often easier to read from the code.",NULL
With Java 7 we got the java.util.concurrent package contains the ForkAndJoinPool which can help you implement something similar to functional parallelism.,"(""java.util.concurrent"", ""ForkAndJoinPool is a class contained within the java.util.concurrent package."", ""ForkAndJoinPool"")"
"However, if the system is concurrently executing multiple other tasks (like e.g.",NULL
when a Java application is started its main() method is executed by the main thread - a special thread that is created by the Java VM to run your application.,"(""Java Application"", ""The main() method is executed when a Java application is started."", ""main()""); (""main()"", ""The main() method is executed by the main thread."", ""main Thread"")"
"Threads are instances of class java.lang.Thread, or instances of subclasses of this class.",NULL
"To start the Java thread you will call its start() method, like this:",NULL
The first is to create a subclass of Thread and override the run() method.,NULL
The second method is to pass an object that implements Runnable (java.lang.Runnable to the Thread constructor.,NULL
"The first way to specify what code a thread is to run, is to create a subclass of Thread and override the run() method.",NULL
The run() method is what is executed by the thread after you call start().,NULL
The start() call will return as soon as the thread is started.,NULL
The run() method will execute as if executed by a different CPU.,NULL
"When the run() method executes it will print out the text ""MyThread running"".",NULL
You can also create an anonymous subclass of Thread like this:,NULL
"This example will print out the text ""Thread running"" once the run() method is executed by the new thread.","(""run()"", ""The run() method is executed to print out the text 'Thread running'."", ""Thread running"")"
The second way to specify what code a thread should run is by creating a class that implements the java.lang.Runnable interface.,NULL
Whatever the thread is supposed to do when it executes must be included in the implementation of the run() method.,NULL
The first way to implement the Java Runnable interface is by creating your own Java class that implements the Runnable interface.,NULL
Here is an example of a custom Java class that implements the Runnable interface:,NULL
"After printing that text, the run() method exits, and the thread running the run() method will stop.",NULL
Here is an example of an anonymous Java class that implements the Runnable interface:,NULL
"Apart from being an anononymous class, this example is quite similar to the example that used a custom class to implement the Runnable interface.","(""Anononymous Class"", ""The Anononymous Class is an example of a class that implements the Runnable interface."", ""Runnable Interface"")"
"To have the run() method executed by a thread, pass an instance of a class, anonymous class or lambda expression that implements the Runnable interface to a Thread in its constructor.","(""run"", ""The run() method is executed by a Thread."", ""Thread""); (""Runnable"", ""An instance of a class that implements the Runnable interface is passed to a Thread."", ""Thread""); (""anonymous class"", ""An anonymous class that implements Runnable can be passed to a Thread."", ""Thread"")"
When the thread is started it will call the run() method of the MyRunnable instance instead of executing it's own run() method.,NULL
Sometimes you may have to implement Runnable as well as subclass Thread.,NULL
"For instance, if creating a subclass of Thread that can execute more than one Runnable.",NULL
"When creating and starting a thread a common mistake is to call the run() method of the Thread instead of start(), like this:","(""Thread"", ""run() is a method of the Thread class."", ""run"")"
At first you may not notice anything because the Runnable's run() method is executed like you expected.,NULL
Instead the run() method is executed by the thread that created the thread.,NULL
"To have the run() method of the MyRunnable instance called by the new created thread, newThread, you MUST call the newThread.start() method.","(""newThread"", ""The start() method must be called on the newThread instance to initiate the run() method of MyRunnable."", ""start"")"
"For instance, if multiple threads write to System.out it can be handy to see which thread wrote the text.",NULL
"Notice however, that since the MyRunnable class is not a subclass of Thread, it does not have access to the getName() method of the thread executing it.","(""MyRunnable"", ""MyRunnable is not a subclass of Thread, indicating a relationship of inheritance or class hierarchy."", ""Thread"")"
The Thread.currentThread() method returns a reference to the Thread instance executing currentThread() .,NULL
First it prints out the name of the thread executing the main() method.,NULL
"Note that even if the threads are started in sequence (1, 2, 3 etc.)",NULL
"they may not execute sequentially, meaning thread 1 may not be the first thread to write its name to System.out.",NULL
A thread can pause itself by calling the static method Thread.sleep() .,NULL
The sleep() method will attempt to sleep that number of milliseconds before resuming execution.,NULL
"The Thread sleep() is not 100% precise, but it is pretty good still.",NULL
Here is an example of pausing a Java thread for 3 seconds (3.000 millliseconds) by calling the Thread sleep() method:,NULL
"The thread executing the Java code above, will sleep for approximately 10 seconds (10.000 milliseconds).","(""Thread"", ""The thread is executing the sleep method to pause its execution."", ""sleep"")"
"The Java Thread class contains a stop() method, but it is deprecated.",NULL
The original stop() method would not provide any guarantees about in what state the thread was stopped.,NULL
Instead of calling the stop() method you will have to implement your thread code so it can be stopped.,NULL
Here is an example of a class that implements Runnable which contains an extra method called doStop() which signals to the Runnable to stop.,NULL
The doStop() is intended to be called from another thread than the thread executing the MyRunnable's run() method.,NULL
The keepRunning() method is called internally by the thread executing the MyRunnable's run() method.,"(""keepRunning"", ""The keepRunning() method is called internally by the thread executing the MyRunnable's run() method."", ""MyRunnable"")"
As long as doStop() has not been called the keepRunning() method will return true - meaning the thread executing the run() method will keep running.,"(""doStop"", ""The doStop() method controls the execution of the keepRunning() method by determining if it should return true or not."", ""keepRunning"")"
"Here is an example of starting a Java thread that executes an instance of the above MyRunnable class, and stopping it again after a delay:",NULL
"Then the thread executing the main() method (the main thread) sleeps for 10 seconds, and then calls the doStop() method of the MyRunnable instance.","(""main"", ""The main method calls the doStop method of the MyRunnable instance."", ""doStop"")"
"This will cause the thread executing the MyRunnable method to stop, because the keepRunning() will return false after doStop() has been called.","(""MyRunnable"", ""MyRunnable is a method that will stop the thread when keepRunning() returns false."", ""keepRunning"")"
Please keep in mind that if your Runnable implementation needs more than just the run() method (e.g.,NULL
"a stop() or pause() method too), then you can no longer create your Runnable implementation with a Java lambda expression.","(""Runnable"", ""The stop method is related to the Runnable class as it is a method that can be invoked on a Runnable implementation."", ""stop""); (""Runnable"", ""The pause method is related to the Runnable class as it is a method that can be invoked on a Runnable implementation."", ""pause"")"
"Instead you must use a custom class, or a custom interface that extends Runnable which has the extra methods, and which is implemented by an anonymous class.","(""CustomClass"", ""CustomClass must extend Runnable to add extra methods."", ""Runnable"")"
You will have to create a custom lock class or use one of the Java 5 concurrency constructs in the java.util.concurrency package.,NULL
"Every time a thread takes a lock it is noted in a data structure (map, graph etc.)","(""Thread"", ""A thread takes a lock to ensure exclusive access to a resource."", ""Lock""); (""Thread"", ""A thread's actions related to locking are recorded in a data structure."", ""Data Structure""); (""Data Structure"", ""A map is a type of data structure that can be used to store information."", ""Map"")"
Here is an example of a TreeNode class that call synchronized methods in different instances:,NULL
"If a thread (1) calls the parent.addChild(child) method at the same time as another thread (2) calls the child.setParent(parent) method, on the same parent and child instances, a deadlock can occur.","(""Thread"", ""The thread calls the addChild method."", ""addChild""); (""Thread"", ""The thread calls the setParent method."", ""setParent"")"
Here is some pseudo code that illustrates this: Thread 1: parent.addChild(child); //locks parent --> child.setParentOnly(parent); Thread 2: child.setParent(parent); //locks child --> parent.addChildOnly() First thread 1 calls parent.addChild(child).,"(""parent"", ""The method addChild is called on the parent entity."", ""addChild""); (""child"", ""The method setParentOnly is called on the child entity with the parent as an argument."", ""setParentOnly""); (""child"", ""The method setParent is called on the child entity with the parent as an argument."", ""setParent"")"
Since addChild() is synchronized thread 1 effectively locks the parent object for access from other treads.,NULL
Since setParent() is synchronized thread 2 effectively locks the child object for acces from other threads.,"(""setParent"", ""setParent() method is used to set the parent of the child object."", ""child object"")"
"Next thread 1 tries to call child.setParentOnly() method, but the child object is locked by thread 2, so the method call just blocks.","(""thread 1"", ""Thread 1 is attempting to call the setParentOnly method."", ""setParentOnly"")"
"Thread 2 also tries to call parent.addChildOnly() but the parent object is locked by thread 1, causing thread 2 to block on that method call.","(""Thread"", ""Thread 2 is trying to call the addChildOnly method of the parent object."", ""addChildOnly""); (""parent"", ""The addChildOnly method belongs to the parent class."", ""addChildOnly"")"
"Note: The two threads must call parent.addChild(child) and child.setParent(parent) at the same time as described above, and on the same two parent and child instances for a deadlock to occur.","(""parent"", ""The parent entity is related to the child entity as it is the parent instance that adds the child instance."", ""child""); (""child"", ""The child entity is related to the parent entity as it is the child instance that sets the parent instance."", ""parent""); (""parent"", ""The addChild method is called on the parent entity to add the child entity."", ""addChild"")"
Thread 1: parent.addChild(child); //locks parent --> child.setParentOnly(parent); Thread 2: child.setParent(parent); //locks child --> parent.addChildOnly() First thread 1 calls parent.addChild(child).,"(""parent"", ""The parent method is adding the child as a child entity."", ""child""); (""child"", ""The child method is setting the parent entity for the child."", ""parent""); (""parent"", ""The addChild method is invoked on the parent to add the child."", ""addChild""); (""child"", ""The setParentOnly method is invoked on the child to set the parent."", ""setParentOnly"")"
By far the best book on the java.util.concurrent package in Java 5 and forward.,NULL
"https://lmax-exchange.github.io/disruptor/ The LMAX Disrupter concurrent data structure (a single reader, single writer queue-like structure with high concurrency).","(""LMAX Disrupter"", ""LMAX Disrupter is a type of concurrent data structure."", ""concurrent data structure""); (""concurrent data structure"", ""single reader is a method used in the concurrent data structure."", ""single reader""); (""concurrent data structure"", ""single writer is a method used in the concurrent data structure."", ""single writer"")"
In the following code example I have created an example of such a communication mechanism - a Java class called FrameExchanger.,NULL
It is not important how this class looks in order to understand how the FrameExchanger works.,NULL
"The producing thread will call storeFrame() continuously, and the drawing thread will call takeFrame() continuously.",NULL
Notice how the three instructions inside the storeFrame() method seem like they do not depend on each other.,NULL
"That means, that if the drawing thread is waiting in the while-loop in the takeFrame() method, the drawing thread could exit that while-loop, and take the old Frame object.",NULL
Notice that the first instruction is a read of a volatile variable (other.volatileVarC).,NULL
"When other.volatileVarC is read in from main memory, the other.nonVolatileB and other.nonVolatileA are also read in from main memory.","(""volatileVarC"", ""volatileVarC is read in from main memory along with nonVolatileB"", ""nonVolatileB"")"
"To illustrate why this guarantee is necessary, let us modify the FrameExchanger class from earlier in this tutorial to have the hasNewFrame variable be declared volatile:",NULL
"Additionally, every time the drawing thread reads the hasNewFrame variable in the while-loop inside the takeFrame() method, the frame and framesStoredCount will also be refreshed from main memory.","(""takeFrame"", ""The takeFrame() method reads the hasNewFrame variable."", ""hasNewFrame""); (""takeFrame"", ""The takeFrame() method refreshes the frame variable."", ""frame"")"
"Imagine if the Java VM reordered the instructions inside the storeFrame() method, like this:",NULL
"This means, that the drawing thread executing the takeFrame() method may exit the while-loop before the new value is assigned to the frame variable.",NULL
"As you can see, the reordering of the instructions inside storeFrame() method may make the application malfunction.",NULL
"In the case of the storeFrame() method that means that the two first write instructions cannot be reordered to happen after the last write to hasNewFrame, since hasNewFrame is a volatile variable.",NULL
"This reordering does not break the code in the takeFrame() method, as the frame variable is still written to before the hasNewFrame variable is written to.","(""takeFrame"", ""The takeFrame() method uses the frame variable, indicating a relationship between the method and the frame class."", ""frame"")"
"Because of the volatile read visibility guarantee, when this.volatileVarA is read from main memory, so are all other variables visible to the thread at that time.",NULL
"Thus, this.nonVolatileVarB and this.nonVolatileVarC are also read in from main memory at the same time.",NULL
"With regards to the takeFrame() method, the first read of a volatile variable is the read of the hasNewFrame field inside the while-loop.",NULL
Notice the two synchronized blocks inside the set() and get() method.,NULL
In the set() method the synchronized block at the end of the method will force all the variables to be synchronized to main memory after being updated.,"(""set"", ""The set() method contains a synchronized block that ensures synchronization of variables."", ""synchronized block"")"
In the get() method the synchronized block is placed at the beginning of the method.,NULL
"When the thread calling get() enters the synchronized block, all variables are re-read in from main memory.",NULL
"To illustrate why, I will use the get() method of the ValueExchanger shown earlier:",NULL
"As you can see, the synchronized block at the beginning of the method will guarantee that all of the variables this.valC, this.valB and this.valA are refreshed (read in) from main memory.","(""synchronized block"", ""The synchronized block ensures that valC is refreshed from main memory."", ""valC""); (""synchronized block"", ""The synchronized block ensures that valB is refreshed from main memory."", ""valB"")"
"To illustrate why, I will use the set() method of the ValueExchanger shown earlier:",NULL
"As you can see, the synchronized block at the end of the method will guarantee that all of the changed variables this.valA, this.valB and this.valC will be written back to (flushed) to main memory when the thread calling set() exits the synchronized blocks.","(""synchronized block"", ""The synchronized block ensures that the set method is called in a thread-safe manner, allowing for proper flushing of variables to main memory."", ""set""); (""synchronized block"", ""The synchronized block guarantees that the value of this.valA is written back to main memory."", ""this.valA""); (""synchronized block"", ""The synchronized block guarantees that the value of this.valB is written back to main memory."", ""this.valB"")"
"The original Java memory model was insufficient, so the Java memory model was revised in Java 1.5.",NULL
Static class variables are also stored on the heap along with the class definition.,"(""Static Class Variables"", ""Static class variables are stored on the heap."", ""Heap"")"
If two threads were executing the run() method then the diagram shown earlier would be the outcome.,NULL
methodOne() declares a primitive local variable (localVariable1 of type int) and an local variable which is an object reference (localVariable2).,"(""methodOne"", ""methodOne declares localVariable1 as a primitive local variable of type int"", ""localVariable1"")"
Each thread executing methodOne() will create its own copy of localVariable1 and localVariable2 on their respective thread stacks.,"(""methodOne"", ""methodOne creates a copy of localVariable1 on each thread's stack."", ""localVariable1"")"
Each thread executing methodOne() will also create their own copy of localVariable2.,NULL
The localVariable1 reference will be stored in one copy per thread executing methodTwo().,NULL
The Integer objects created inside methodTwo() correspond to Object 1 and Object 5 in the diagram above.,"(""methodTwo"", ""The method methodTwo() creates Integer objects."", ""Integer""); (""methodTwo"", ""The method methodTwo() corresponds to Object 1 in the diagram."", ""Object 1"")"
Notice also the two member variables in the class MySharedObject of type long which is a primitive type.,NULL
That is why Java 5 got a whole set of concurrency utility classes to help developers implement more fine grained concurrency control than what you get with synchronized.,"(""Java 5"", ""Java 5 introduced concurrency utility classes to enhance concurrency control."", ""concurrency utility classes"")"
Notice the use of the synchronized keyword in the add() method declaration.,NULL
Also here the synchronized keyword tells Java that the add() method is synchronized.,NULL
Synchronized static methods are synchronized on the class object of the class the synchronized static method belongs to.,"(""Synchronized Static Methods"", ""Synchronized static methods belong to the class they are defined in."", ""Class"")"
"Since only one class object exists in the Java VM per class, only one thread can execute inside a static synchronized method in the same class.",NULL
"In case a class contains more than one static synchronized method, only one thread can execute inside any of these methods at the same time.",NULL
Only one thread can execute inside any of the two add() and subtract() methods at any given time.,NULL
If Thread A is executing add() then Thread B cannot execute neither add() nor subtract() until Thread A has exited add().,"(""Thread A"", ""Thread A is executing the add() method."", ""add()""); (""Thread B"", ""Thread B cannot execute add() until Thread A has exited add()."", ""add()"")"
"If the static synchronized methods are located in different classes, then one thread can execute inside the static synchronized methods of each class.","(""Static Synchronized Methods"", ""Static synchronized methods can be executed by different threads if they are located in different classes."", ""Different Classes"")"
One thread per class regardless of which static synchronized method it calls.,"(""Thread"", ""A thread is associated with a class, indicating that each thread operates within the context of a specific class."", ""Class"")"
These methods are synchronized on the class object of the class the methods belong to:,NULL
"Had the second synchronized block been synchronized on a different object than MyClass.class, then one thread could execute inside each method at the same time.","(""synchronized block"", ""The synchronized block is related to MyClass because it is synchronized on MyClass.class."", ""MyClass"")"
It is even possible to use synchronized blocks inside a Java Lambda Expression as well as inside anonymous classes.,NULL
Notice that the synchronized block is synchronized on the class object of the class containing the lambda expression.,"(""Synchronized Block"", ""The synchronized block is synchronized on the class object of the class containing the lambda expression."", ""Class"")"
"It could have been synchronized on another object too, if that would have made more sense (given a specific use case), but using the class object is fine for this example.",NULL
"Here are the two classes used in the example above, Counter and CounterThread.",NULL
"The Counter.add() method is synchronized on the instance, because the add method is an instance method, and marked as synchronized.",NULL
Therefore only one of the threads can call the add() method at a time.,NULL
"The other thread will wait until the first thread leaves the add() method, before it can execute the method itself.",NULL
"If the two threads had referenced two separate Counter instances, there would have been no problems calling the add() methods simultaneously.",NULL
Calling add() on counterA will thus not block a call to add() on counterB.,"(""counterA"", ""counterA is using the add method."", ""add"")"
Without the use of the synchronized keyword (or the Java volatile keyword) there is no guarantee that when one thread changes the value of a variable shared with other threads (e.g.,"(""Thread"", ""A thread can change the value of a variable that is shared with other threads."", ""Variable""); (""Synchronized"", ""The synchronized keyword is used to control access to a thread."", ""Thread"")"
"If you call Integer.valueOf(1) multiple times, it might actually return the same wrapper object instance for the same input parameter values.","(""Integer"", ""valueOf is a method of the Integer class that converts an integer to its corresponding Integer object."", ""valueOf"")"
"That means, that if you are synchronizing multiple blocks on the same primitive wrapper object (e.g.",NULL
"use Integer.valueOf(1) multiple times as monitor object), then you risk that those synchronized blocks all get synchronized on the same object.",NULL
"To be on the safe side, synchronize on this - or on a new Object() .",NULL
Java actually comes with a built in ReadWriteLock class you can use.,NULL
Java actually comes with a built-in Java Semaphore class you can use.,NULL
Just focus on how inside the synchronized block inside the count() method calls the count() method recursively.,NULL
"Thus, the thread calling count() may eventually enter the same synchronized block multiple times.",NULL
The Java ThreadLocal class enables you to create variables that can only be read and written by the same thread.,NULL
"Thus, the Java ThreadLocal class provides a simple way to make code thread safe that would not otherwise be so.",NULL
Once a ThreadLocal has been created you can set the value to be stored in it using its set() method.,NULL
You read the value stored in a ThreadLocal using its get() method.,NULL
"Additionally, you do not have to typecast the value returned by get().",NULL
It is possible to set an initial value for a Java ThreadLocal which will get used the first time get() is called - before set() has been called with a new value.,"(""ThreadLocal"", ""The get() method retrieves the value from the ThreadLocal instance."", ""get"")"
The first way to specify an initial value for a Java ThreadLocal variable is to create a subclass of ThreadLocal which overrides its initialValue() method.,NULL
"The easiest way to create a subclass of ThreadLocal is to simply create an anonymous subclass, right where you create the ThreadLocal variable.",NULL
Here is an example of creating an anonymous subclass of ThreadLocal which overrides the initialValue() method:,NULL
"Only if you return the exact same object from the initialValue() method, will all threads see the same object.",NULL
"Here is an example of creating a ThreadLocal using its withInitial() static factory method, passing a simple Supplier implementation as parameter:","(""withInitial"", ""withInitial is a static factory method used to create an instance of ThreadLocal."", ""ThreadLocal"")"
Here is how providing a Supplier implementation as a lambda expression to withInitial() looks:,NULL
Notice how the format() method calls the getThreadLocalSimpleDateFormat() method to obtain a Java SimpleDatFormat instance.,"(""format"", ""The format() method calls the getThreadLocalSimpleDateFormat() method."", ""getThreadLocalSimpleDateFormat"")"
"The SimpleDateFormat class is not thread safe, so multiple threads cannot use it at the same time.",NULL
"To solve this problem, the MyDateFormatter class above creates a SimpleDateFormat per thread, so each thread calling the format() method will use its own SimpleDateFormat instance.","(""MyDateFormatter"", ""MyDateFormatter class creates a SimpleDateFormat instance per thread."", ""SimpleDateFormat"")"
"Both threads execute the run() method, and thus sets different values on the ThreadLocal instance.","(""Thread"", ""The run() method is executed by the Thread class."", ""run"")"
"If the access to the set() call had been synchronized, and it had not been a ThreadLocal object, the second thread would have overridden the value set by the first thread.",NULL
"The udpate() method writes three variables, of which only days is volatile.",NULL
Notice the totalDays() method starts by reading the value of days into the total variable.,NULL
Let us look at the MyClass class from the example earlier in this Java volatile tutorial:,NULL
"Once the update() method writes a value to days, the newly written values to years and months are also written to main memory.","(""update"", ""The update() method writes a value to days."", ""days""); (""update"", ""The update() method also writes values to years."", ""years""); (""update"", ""The update() method also writes values to months."", ""months""); (""days"", ""The values written to days are stored in main memory."", ""main memory""); (""years"", ""The values written to years are stored in main memory."", ""main memory"")"
As an alternative to a synchronized block you could also use one of the many atomic data types found in the java.util.concurrent package.,NULL
"From Java 5 the package java.util.concurrent.locks contains several lock implementations, so you may not have to implement your own locks.",NULL
"The Counter class could have been written like this instead, using a Lock instead of a synchronized block:",NULL
The lock() method locks the Lock instance so that all threads calling lock() are blocked until unlock() is executed.,"(""lock"", ""The lock() method is a method of the Lock class."", ""Lock"")"
Spin locks and the methods wait() and notify() are covered in more detail in the text Thread Signaling.,NULL
"While isLocked is true, the thread calling lock() is parked waiting in the wait() call.","(""isLocked"", ""The method isLocked indicates the state of the lock being called by the lock() method."", ""lock""); (""lock"", ""The lock() method causes the thread to wait in the wait() call if the lock is not available."", ""wait"")"
"In case the thread should return unexpectedly from the wait() call without having received a notify() call (AKA a Spurious Wakeup) the thread re-checks the isLocked condition to see if it is safe to proceed or not, rather than just assume that being awakened means it is safe to proceed.","(""Thread"", ""The thread calls the wait() method to pause its execution until it receives a notify() call."", ""wait""); (""Thread"", ""The thread is expected to receive a notify() call to resume its execution."", ""notify"")"
"If isLocked is false, the thread exits the while(isLocked) loop, and sets isLocked back to true, to lock the Lock instance for other threads calling lock().","(""Lock"", ""isLocked is a method that determines the state of the Lock instance."", ""isLocked"")"
"When the thread is done with the code in the critical section (the code between lock() and unlock()), the thread calls unlock().","(""Thread"", ""The thread executes code within the critical section, indicating a relationship between the thread and the critical section."", ""Critical Section""); (""Thread"", ""The thread calls the unlock() method after completing its work in the critical section, establishing a relationship between the thread and the unlock method."", ""unlock()""); (""Critical Section"", ""The critical section is defined by the lock() method, which protects the code within it."", ""lock()"")"
"Executing unlock() sets isLocked back to false, and notifies (awakens) one of the threads waiting in the wait() call in the lock() method, if any.","(""unlock"", ""The unlock() method sets the isLocked state back to false."", ""isLocked""); (""unlock"", ""The unlock() method notifies one of the threads waiting in the wait() call."", ""wait"")"
"Notice how both outer() and inner() are declared synchronized, which in Java is equivalent to a synchronized(this) block.","(""outer"", ""Both methods are declared synchronized, indicating a relationship in their synchronization context."", ""inner""); (""outer"", ""The outer method is defined within the Java programming language."", ""Java"")"
"If a thread calls outer() there is no problem calling inner() from inside outer(), since both methods (or blocks) are synchronized on the same monitor object (""this"").","(""outer"", ""The method outer() can call the method inner() without issues because both are synchronized on the same monitor object."", ""inner""); (""outer"", ""The method outer() is synchronized on the monitor object 'this'."", ""this"")"
"However, even if synchronized blocks are reentrant, the Lock class shown earlier is not reentrant.",NULL
"If we rewrite the Reentrant class like below, the thread calling outer() will be blocked inside the lock.lock() in the inner() method.","(""Reentrant"", ""The Reentrant class contains a method called lock which is used for synchronization."", ""lock""); (""lock"", ""The lock method is called within the inner method to manage thread access."", ""inner""); (""outer"", ""The outer method is blocked by the lock method when called from the Reentrant class."", ""lock"")"
Inside the inner() method the thread will again try to lock the Lock instance.,NULL
"This will fail (meaning the thread will be blocked), since the Lock instance was locked already in the outer() method.",NULL
"The reason the thread will be blocked the second time it calls lock() without having called unlock() in between, is apparent when we look at the lock() implementation:",NULL
It is the condition inside the while loop (spin lock) that determines if a thread is allowed to exit the lock() method or not.,"(""while loop"", ""The while loop condition determines the behavior of the lock method regarding thread exit."", ""lock""); (""spin lock"", ""The spin lock is a type of locking mechanism that is related to the lock method."", ""lock"")"
To make the Lock class reentrant we need to make a small change:,NULL
"If either the lock is unlocked (isLocked = false) or the calling thread is the thread that locked the Lock instance, the while loop will not execute, and the thread calling lock() will be allowed to exit the method.","(""Lock"", ""The method lock() is associated with the Lock class as it is a method that operates on instances of the Lock class."", ""lock()"")"
"Otherwise, a single call to unlock() will unlock the lock, even if the lock has been locked multiple times.",NULL
"We don't want the lock to be unlocked until the thread that locked it, has executed the same amount of unlock() calls as lock() calls.","(""Thread"", ""The thread is responsible for locking and unlocking the lock."", ""Lock""); (""Lock"", ""The unlock method is used to release the lock held by the thread."", ""unlock"")"
"When guarding a critical section with a Lock, and the critical section may throw exceptions, it is important to call the unlock() method from inside a finally-clause.",NULL
"If unlock() was not called from inside a finally-clause, and an exception was thrown from the critical section, the Lock would remain locked forever, causing all threads calling lock() on that Lock instance to halt indefinately.","(""unlock()"", ""The method unlock() is associated with the class Lock as it is used to unlock the Lock instance."", ""Lock"")"
"If you click a button that starts a long task, and the thread executing the task is the thread updating the windows, buttons etc., then the application will appear unresponsive while the task executes.","(""Button"", ""A button initiates a long task when clicked."", ""Task""); (""Thread"", ""The thread executes the long task."", ""Task""); (""Thread"", ""The thread updates the application while executing the task."", ""Application"")"
"Imagine then, that one of the clients sends a request that takes a long time to process - e.g.",NULL
"Notice how the lock() method first synchronizes on ""this"", then synchronizes on the monitorObject member.","(""lock"", ""The lock() method synchronizes on 'this' as part of its operation."", ""this"")"
"If isLocked is true however, the thread calling lock() is parked waiting in the monitorObject.wait() call.","(""lock"", ""The method lock() is called when isLocked is true."", ""isLocked"")"
"The problem with this is, that the call to monitorObject.wait() only releases the synchronization monitor on the monitorObject member, and not the synchronization monitor associated with ""this"".",NULL
When the thread that locked the Lock in the first place tries to unlock it by calling unlock() it will be blocked trying to enter the synchronized(this) block in the unlock() method.,"(""Lock"", ""The unlock method is called on the Lock class to unlock it."", ""unlock"")"
It will remain blocked until the thread waiting in lock() leaves the synchronized(this) block.,"(""Thread"", ""The thread is waiting in the lock() method."", ""lock"")"
"But the thread waiting in the lock() method will not leave that block until the isLocked is set to false, and a monitorObject.notify() is executed, as it happens in unlock().","(""lock"", ""The lock method's execution depends on the isLocked variable being set to false."", ""isLocked""); (""lock"", ""The lock method involves the monitorObject for notifying when the lock is released."", ""monitorObject"")"
"Put shortly, the thread waiting in lock() needs an unlock() call to execute successfully for it to exit lock() and the synchronized blocks inside it.","(""lock"", ""The method lock() requires the method unlock() to be called for successful execution."", ""unlock"")"
"But, no thread can actually execute unlock() until the thread waiting in lock() leaves the outer synchronized block.",NULL
This result is that any thread calling either lock() or unlock() will become blocked indefinately.,NULL
"That you would not call wait() and notify() on an internal monitor object, but rather on the This is probably true.","(""wait"", ""wait() is a method that should be called on an internal monitor object."", ""internal monitor object"")"
"When doing so you want each thread to call wait() on each their own queue object, so that you can notify the threads one at a time.","(""Thread"", ""The Thread class has a method called wait() that is invoked by each thread."", ""wait"")"
"At first glance this implementation may look fine, but notice how the lock() method calls queueObject.wait(); from inside two synchronized blocks.","(""lock"", ""The lock() method interacts with the queueObject by calling its wait() method."", ""queueObject"")"
"When a thread calls queueObject.wait()it releases the lock on the QueueObject instance, but not the lock associated with ""this"".",NULL
"Notice too, that the unlock() method is declared synchronized which equals a synchronized(this) block.",NULL
"This means, that if a thread is waiting inside lock() the monitor object associated with ""this"" will be locked by the waiting thread.","(""Thread"", ""A thread can call the lock() method to acquire a lock."", ""Lock"")"
"All threads calling unlock() will remain blocked indefinately, waiting for the waiting thread to release the lock on ""this"".",NULL
"But this will never happen, since this only happens if a thread succeeds in sending a signal to the waiting thread, and this can only be sent by executing the unlock() method.","(""Thread"", ""A thread can send a signal to another waiting thread."", ""Signal"")"
"For instance, the different implementations of the java.util.concurrent.BlockingQueue interface are all blocking data structures.",NULL
"Other threads will read the value of the volatile from main memory every time, instead of from e.g.",NULL
"Thus, this code may still lead to race conditions if performed by more than one thread: volatile myVar = 0; ... int temp = myVar; temp++; myVar = temp; First the value of the volatile variable myVar is read from main memory into a temp variable.",NULL
"If two threads execute this code and both of them read the value of myVar, add one to it and write the value back to main memory, then you risk that instead of 2 being added to the myVar variable, only 1 will be added (e.g.",NULL
"Here is a single writer counter which does not use synchronization but is still concurrent: public class SingleWriterCounter { private volatile long count = 0; /** * Only one thread may ever call this method, * or it will lead to race conditions.",NULL
"I mean, only the same, single thread is ever allowed to call inc().",NULL
"Here is a simple double writer counter class that shows how that could look: public class DoubleWriterCounter { private volatile long countA = 0; private volatile long countB = 0; /** * Only one (and the same from thereon) thread may ever call this method, * or it will lead to race conditions.","(""DoubleWriterCounter"", ""countA is a method within the DoubleWriterCounter class that tracks a specific count."", ""countA"")"
"*/ public void incA() { this.countA++; } /** * Only one (and the same from thereon) thread may ever call this method, * or it will lead to race conditions.",NULL
"*/ public void incB() { this.countB++; } /** * Many reading threads may call this method */ public long countA() { return this.countA; } /** * Many reading threads may call this method */ public long countB() { return this.countB; } } As you can see, the DoubleWriterCounter now contains two volatile variables, and two pairs of incrementation and read methods.","(""DoubleWriterCounter"", ""incB is a method defined within the DoubleWriterCounter class that increments the countB variable."", ""incB""); (""DoubleWriterCounter"", ""countA is a method defined within the DoubleWriterCounter class that returns the value of the countA variable."", ""countA"")"
"Only a single thread may ever call incA(), and only a single thread may ever call incB().",NULL
This is how such exclusive access could look using a synchronized block in Java: public class SynchronizedCounter { long count = 0; public void inc() { synchronized(this) { count++; } } public long count() { synchronized(this) { return this.count; } } } Notice how the inc() and count() methods both contain a synchronized block.,"(""SynchronizedCounter"", ""The inc() method is defined within the SynchronizedCounter class."", ""inc""); (""SynchronizedCounter"", ""The count() method is defined within the SynchronizedCounter class."", ""count"")"
This is what we want to avoid - synchronized blocks and wait() - notify() calls etc.,NULL
What is interesting about this version is the implementation of the inc() method.,NULL
"Instead it contains these lines: boolean updated = false; while(!updated){ long prevCount = this.count.get(); updated = this.count.compareAndSet(prevCount, prevCount + 1); } These lines are not an atomic operation.","(""Count"", ""The method compareAndSet is used to update the count in the Count class."", ""compareAndSet"")"
"That means, that it is possible for two different threads to call the inc() method and execute the long prevCount = this.count.get() statement, and thus both obtain the previous count for the counter.",NULL
The compareAndSet() method is typically supported by compare-and-swap instructions directly in the CPU.,"(""compareAndSet"", ""The compareAndSet() method is typically supported by compare-and-swap instructions."", ""compare-and-swap"")"
"Since compareAndSet() is an atomic operation, the threads will execute this method sequentially (one at a time).",NULL
"If no other thread has called inc() in the meantime, the second iteration will succeed in updating the AtomicLong to 22.",NULL
Instead Java provides the AtomicStampedReference class which can swap a reference and a stamp atomically using a compare-and-swap operation.,NULL
"import java.util.concurrent.atomic.AtomicBoolean; import java.util.concurrent.atomic.AtomicStampedReference; public class NonblockingTemplate { public static class IntendedModification { public AtomicBoolean completed = new AtomicBoolean(false); } private AtomicStampedReference<IntendedModification> ongoingMod = new AtomicStampedReference<IntendedModification>(null, 0); //declare the state of the data structure here.","(""NonblockingTemplate"", ""NonblockingTemplate contains the nested class IntendedModification."", ""IntendedModification""); (""IntendedModification"", ""IntendedModification has a field of type AtomicBoolean named completed."", ""AtomicBoolean""); (""NonblockingTemplate"", ""NonblockingTemplate has a field of type AtomicStampedReference named ongoingMod."", ""AtomicStampedReference"")"
"public void modify() { while(!attemptModifyASR()); } public boolean attemptModifyASR(){ boolean modified = false; IntendedModification currentlyOngoingMod = ongoingMod.getReference(); int stamp = ongoingMod.getStamp(); if(currentlyOngoingMod == null){ //copy data structure state - for use //in intended modification //prepare intended modification IntendedModification newMod = new IntendedModification(); boolean modSubmitted = ongoingMod.compareAndSet(null, newMod, stamp, stamp + 1); if(modSubmitted){ //complete modification via a series of compare-and-swap operations.","(""modify"", ""modify calls attemptModifyASR as part of its execution flow."", ""attemptModifyASR""); (""attemptModifyASR"", ""attemptModifyASR creates a new instance of IntendedModification during its execution."", ""IntendedModification"")"
"Multiple threads can access the same instance of this counter, as long as only one thread calls inc().",NULL
Here is a simple double writer counter class that shows how that could look:,NULL
Notice how the inc() and count() methods both contain a synchronized block.,NULL
Here is how the same counter class could look using an AtomicLong instead:,NULL
"The check-then-act pattern means, that two or more threads check a given condition, for instance if a Map contains a given value, and then go on to act based on that information, e.g.","(""CheckThenActPattern"", ""The check-then-act pattern involves multiple threads checking a condition."", ""Thread"")"
"Imagine if two threads, A and B, are executing the add method on the same instance of the Counter class.","(""Counter"", ""The add method is a function defined within the Counter class."", ""add"")"
The code in the add() method is not executed as a single atomic instruction by the Java virtual machine.,NULL
"Instead of 5, the value left in this.count will be the value written by the last thread to write its value.",NULL
The code in the add() method in the example earlier contains a critical section.,NULL
"If two or more threads call the checkThenAct() method on the same CheckThenActExample object, then two or more threads may execute the if-statement at the same time, evaluate sharedMap.containsKey(""key"") to true, and thus move into the body code block of the if-statement.","(""checkThenAct()"", ""The method checkThenAct() is called on the CheckThenActExample object."", ""CheckThenActExample"")"
Thread synchronization can also be achieved using other synchronization constructs like locks or atomic variables like java.util.concurrent.atomic.AtomicInteger.,"(""Thread synchronization"", ""Thread synchronization can be achieved using AtomicInteger as a synchronization construct."", ""AtomicInteger""); (""Thread synchronization"", ""Thread synchronization can be achieved using locks as a synchronization construct."", ""locks""); (""Thread synchronization"", ""Thread synchronization can be achieved using atomic variables as a synchronization construct."", ""atomic variables"")"
Notice how the add() method adds values to two different sum member variables.,NULL
Now two threads can execute the add() method at the same time.,NULL
This way threads will have to wait less for each other to execute the add() method.,NULL
Java 5 comes with read / write lock implementations in the java.util.concurrent package.,"(""Java 5"", ""Java 5 includes implementations in the java.util.concurrent package."", ""java.util.concurrent"")"
The rules for read access are implemented in the lockRead() method.,NULL
The rules for write access are implemented in the lockWrite() method.,NULL
It is worth noting that both unlockRead() and unlockWrite() calls notifyAll() rather than notify().,"(""unlockWrite"", ""unlockWrite() calls notifyAll()"", ""notifyAll"")"
"If a thread awakened by notify() was a read access thread, it would be put back to waiting because there are threads waiting for write access.","(""Thread"", ""The notify() method is used to awaken a thread."", ""notify()""); (""read access thread"", ""A read access thread is a type of Thread."", ""Thread"")"
By calling noftifyAll() all waiting threads are awakened and check if they can get the desired access.,NULL
"If multiple threads are waiting for read access and none for write access, and unlockWrite() is called, all threads waiting for read access are granted read access at once - not one by one.",NULL
Here is how the lockRead() and unlockRead() methods looks after that change:,NULL
Here is how the lockWrite() and unlockWrite() methods look after that change:,NULL
To achieve this the writeLock() method should be changed a bit.,NULL
Here is how the canGrantReadAccess() method will look with that change:,NULL
"When guarding a critical section with a ReadWriteLock, and the critical section may throw exceptions, it is important to call the readUnlock() and writeUnlock() methods from inside a finally-clause.","(""ReadWriteLock"", ""The readUnlock method is used to unlock a read lock on the ReadWriteLock class."", ""readUnlock"")"
"If unlockWrite() was not called from inside a finally-clause, and an exception was thrown from the critical section, the ReadWriteLock would remain write locked forever, causing all threads calling lockRead() or lockWrite() on that ReadWriteLock instance to halt indefinately.","(""unlockWrite"", ""unlockWrite() is a method that interacts with the ReadWriteLock class to manage write locks."", ""ReadWriteLock""); (""lockRead"", ""lockRead() is a method that interacts with the ReadWriteLock class to manage read locks."", ""ReadWriteLock"")"
"The only thing that could unlock the ReadWriteLockagain would be if the ReadWriteLock is reentrant, and the thread that had it locked when the exception was thrown, later succeeds in locking it, executing the critical section and calling unlockWrite() again afterwards.",NULL
Calling unlockWrite() from a finally-clause is a much more robust solution.,NULL
"If a thread calls lock() twice without calling unlock() in between, the second call to lock() will block.","(""Thread"", ""A thread can call the lock() method to acquire a lock."", ""lock"")"
Java 5 comes with semaphore implementations in the java.util.concurrent package so you don't have to implement your own semaphores.,"(""Java 5"", ""Java 5 includes semaphore implementations in the java.util.concurrent package."", ""java.util.concurrent"")"
"You can read more about it in the java.util.concurrent.Semaphore text, in my java.util.concurrent tutorial.",NULL
The take() method sends a signal which is stored internally in the Semaphore.,NULL
"When received the signal flag is cleared again, and the release() method exited.",NULL
You will call take() instead of notify() and release() instead of wait().,"(""take"", ""take() is suggested as a replacement for notify()"", ""notify"")"
"If the call to take() happens before the call to release() the thread calling release() will still know that take() was called, because the signal is stored internally in the signal variable.","(""take"", ""The method take() is called before the method release(), indicating a sequence of operations between them."", ""release"")"
The names take() and release() may seem a bit odd when using a semaphore for signaling.,"(""take"", ""The method take() is used in the context of a semaphore for signaling."", ""semaphore"")"
The Semaphore implementation in the previous section does not count the number of signals sent to it by take() method calls.,NULL
Notice how the take() method now blocks if the number of signals is equal to the upper bound.,NULL
"Not until a thread has called release() will the thread calling take() be allowed to deliver its signal, if the BoundedSemaphore has reached its upper signal limit.","(""BoundedSemaphore"", ""release() is a method that is associated with the BoundedSemaphore class."", ""release"")"
"To do so, set the upper bound to 1, and have the call to take() and release() guard the critical section.",NULL
In contrast to the signaling use case the methods take() and release() are now called by the same thread.,NULL
"Since only one thread is allowed to take the semaphore, all other threads calling take() will be blocked until release() is called.","(""Semaphore"", ""The take method is used to acquire the semaphore, which blocks other threads until it is released."", ""take"")"
The call to release() will never block since there has always been a call to take() first.,NULL
The relase() method is called from inside a finally-block to make sure it is called even if an exception is thrown from the critical section.,NULL
In a classic multi-threaded architecture you will typically assign each task to a separate thread for execution.,"(""MultiThreadedArchitecture"", ""A multi-threaded architecture typically involves assigning tasks to separate threads for execution."", ""Task"")"
A classic multi-threaded architecture can also sometimes lead to congestion when multiple threads try to access the same data structure at the same time.,NULL
The alternative to a classic multithreaded architecture is a single-threaded or same-threaded.,NULL
"This kind of thread loop is both used in server applications (web services, services etc.)","(""Thread Loop"", ""Thread Loop is used in server applications."", ""Server Applications""); (""Thread Loop"", ""Thread Loop is used in web services."", ""Web Services"")"
"For instance, the task executor could keep the tasks in different lists internally, and e.g.",NULL
"If a one-off task is waiting for some asynchronous operation to finish, e.g.",NULL
"Imagine that isLocked is false, and two threads call lock() at the same time.",NULL
"Notice how the synchronized(queueObject) with its queueObject.wait() call is nested inside the synchronized(this) block, resulting in the nested monitor lockout problem.","(""synchronized"", ""synchronized method is using queueObject as a parameter for its operation."", ""queueObject""); (""synchronized"", ""synchronized method is nested inside the synchronized(this) block."", ""this"")"
"Note: Only the lock() method is shown, since it is the only method I have changed.",NULL
The first synchronized(this) block checks the condition by setting mustWait = isLocked || waitingThreads.get(0) != queueObject.,"(""Synchronized"", ""The synchronized block checks the condition by setting mustWait based on the isLocked state and the first waiting thread."", ""MustWait""); (""Synchronized"", ""The synchronized block uses isLocked to determine if mustWait should be set."", ""IsLocked"")"
Imagine what will happen if two threads call lock() at the same time when the lock is unlocked.,NULL
Imagine that the FairLock instance is locked when a thread calls lock().,NULL
"Then imagine that the thread calling lock() is preempted, and the thread that locked the lock calls unlock().",NULL
"If you look at the unlock() implementation shown earlier, you will notice that it calls queueObject.notify().","(""unlock"", ""The method unlock() calls the method notify() on the class queueObject."", ""queueObject"")"
"But, since the thread waiting in lock() has not yet called queueObject.wait(), the call to queueObject.notify() passes into oblivion.","(""lock"", ""The method lock() is related to the class queueObject as it is used in the context of thread synchronization with the queueObject."", ""queueObject"")"
"When the thread calling lock() right after calls queueObject.wait() it will remain blocked until some other thread calls unlock(), which may never happen.","(""queueObject"", ""The method lock() is called by the thread that also calls wait() on the queueObject, indicating a relationship between the queueObject and the lock method."", ""lock"")"
The missed signals problems is the reason that the FairLock implementation shown in the text Starvation and Fairness has turned the QueueObject class into a semaphore with two methods: doWait() and doNotify().,"(""FairLock"", ""FairLock is implemented in the context of the Starvation and Fairness package."", ""Starvation and Fairness""); (""FairLock"", ""FairLock implementation has turned the QueueObject class into a semaphore."", ""QueueObject""); (""QueueObject"", ""QueueObject class has a method doWait()."", ""doWait"")"
"That way the signal is not missed, even if doNotify() is called before doWait().",NULL
The notify() method makes no guarantee about what thread is awakened if multiple thread have called wait() on the object notify() is called on.,"(""Notify"", ""The notify() method is called on an object, which is an instance of the Object class."", ""Object"")"
"If more than one thread call the doSynchronized() method, some of them will be blocked until the first thread granted access has left the method.",NULL
Instead the critical section is guarded by the lock.lock() and lock.unlock() calls.,"(""Lock"", ""lock is a method of the Lock class"", ""lock"")"
A simple implementation of the Lock class could look like this:,NULL
"If you look at the Synchronizer class above and look into this Lock implementation you will notice that threads are now blocked trying to access the lock() method, if more than one thread calls lock() simultanously.","(""Synchronizer"", ""The Synchronizer class is mentioned in relation to the Lock implementation, indicating a connection between the two classes."", ""Lock"")"
"Second, if the lock is locked, the threads are blocked in the wait() call inside the while(isLocked) loop in the lock() method.","(""lock"", ""The wait() method is called when the lock is locked, indicating a relationship between the lock and the wait method."", ""wait"")"
"Remember that a thread calling wait() releases the synchronization lock on the Lock instance, so threads waiting to enter lock() can now do so.","(""Lock"", ""The wait() method is associated with the Lock class as it releases the synchronization lock on the Lock instance."", ""wait"")"
The result is that multiple threads can end up having called wait() inside lock().,NULL
"If you look back at the doSynchronized() method you will notice that the comment between lock() and unlock() states, that the code in between these two calls take a ""long"" time to execute.","(""doSynchronized"", ""The doSynchronized method calls the lock method before executing a block of code."", ""lock"")"
Let us further assume that this code takes long time to execute compared to entering the lock() method and calling wait() because the lock is locked.,NULL
"This means that the majority of the time waited to be able to lock the lock and enter the critical section is spent waiting in the wait() call inside the lock() method, not being blocked trying to enter the lock() method.","(""Lock"", ""The wait() method is called within the context of the Lock class to manage access to the critical section."", ""wait"")"
Nor does wait() make any guarantees about what thread is awakened when notify() is called.,NULL
"So, the current version of the Lock class makes no different guarantees with respect to fairness than synchronized version of doSynchronized().",NULL
The current version of the Lock class calls its own wait() method.,NULL
"If instead each thread calls wait() on a separate object, so that only one thread has called wait() on each object, the Lock class can decide which of these objects to call notify() on, thereby effectively selecting exactly what thread to awaken.","(""Lock"", ""The Lock class can decide which object to call wait() on, allowing for controlled thread awakening."", ""wait"")"
Below is shown the previous Lock class turned into a fair lock called FairLock.,NULL
You will notice that the implementation has changed a bit with respect to synchronization and wait() / notify() compared to the Lock class shown earlier.,"(""Lock"", ""The wait() method is mentioned in the context of synchronization related to the Lock class."", ""wait"")"
"Exactly how I arrived at this design beginning from the previous Lock class is a longer story involving several incremental design steps, each fixing the problem of the previous step: Nested Monitor Lockout, Slipped Conditions, and Missed Signals.",NULL
"What is important is, that every thread calling lock() is now queued, and only the first thread in the queue is allowed to lock the FairLock instance, if it is unlocked.",NULL
First you might notice that the lock() method is no longer declared synchronized.,NULL
FairLock creates a new instance of QueueObject and enqueue it for each thread calling lock().,"(""FairLock"", ""FairLock creates a new instance of QueueObject."", ""QueueObject"")"
"The thread calling unlock() will take the top QueueObject in the queue and call doNotify() on it, to awaken the thread waiting on that object.","(""Thread"", ""The Thread interacts with the QueueObject by calling methods on it, specifically doNotify()."", ""QueueObject""); (""Thread"", ""The Thread calls the unlock() method to manage the state of the QueueObject."", ""unlock()"")"
The doWait() and doNotify() methods store the signal internally in the QueueObject.,"(""doWait"", ""doWait() method stores the signal internally in the QueueObject."", ""QueueObject"")"
"This is done to avoid missed signals caused by a thread being preempted just before calling queueObject.doWait(), by another thread which calls unlock() and thereby queueObject.doNotify().","(""queueObject"", ""doWait is a method of the queueObject class."", ""doWait""); (""queueObject"", ""doNotify is a method of the queueObject class."", ""doNotify""); (""unlock"", ""unlock is called before doWait to avoid missed signals."", ""doWait"")"
"The queueObject.doWait() call is placed outside the synchronized(this) block to avoid nested monitor lockout, so another thread can actually call unlock() when no thread is executing inside the synchronized(this) block in lock() method.","(""queueObject"", ""doWait is a method of the queueObject class."", ""doWait""); (""synchronized"", ""synchronized is a method that is called within the context of the lock method."", ""lock"")"
"Finally, notice how the queueObject.doWait() is called inside a try - catch block.",NULL
"In case an InterruptedException is thrown the thread leaves the lock() method, and we need to dequeue it.","(""InterruptedException"", ""The InterruptedException is related to the lock method as it indicates an exception that causes the thread to leave the lock method."", ""lock"")"
If you compare the Lock and FairLock classes you will notice that there is somewhat more going on inside the lock() and unlock() in the FairLock class.,"(""Lock"", ""Both classes are being compared in terms of their implementation of the lock() and unlock() methods."", ""FairLock""); (""FairLock"", ""The lock() method is a member of the FairLock class."", ""lock"")"
Threads waiting on an object (called wait() on it) remain waiting indefinitely,"(""Threads"", ""Threads are waiting on the object by calling the wait() method."", ""wait()"")"
"In a desktop app the foreground thread (UI thread) could be responding to the user events - a.g. opening a file, or downloading a file, or saving a file etc.","(""DesktopApp"", ""The foreground thread is a component of the desktop app that handles user interactions."", ""ForegroundThread""); (""ForegroundThread"", ""The UI thread is a specific type of foreground thread responsible for managing user interface events."", ""UIThread""); (""UIThread"", ""The UI thread responds to user events such as opening, downloading, or saving files."", ""UserEvents""); (""UIThread"", ""The UI thread can invoke the method to open a file as part of responding to user events."", ""OpenFile""); (""UIThread"", ""The UI thread can invoke the method to download a file as part of responding to user events."", ""DownloadFile"")"
"Each thread consumes a certain amount of computer resources, such as memory (RAM), so if you have too many threads active at the same time, the total amount of resources (e.g.",NULL
RAM) that is consumed may cause the computer to slow down - e.g.,NULL
"Java comes with built in thread pools in the java.util.concurrent package, so you don't have to implement your own thread pool.","(""Java"", ""Java is a programming language that includes the java.util.concurrent package for concurrency."", ""java.util.concurrent"")"
You can read more about it in my text on the java.util.concurrent.ExecutorService.,NULL
"Below here is the PoolThreadRunnable class which implements the Runnable interface, so it can be executed by a Java thread:",NULL
"A ThreadPool class which is the public interface to the thread pool, and a PoolThread class which implements the threads that execute the tasks.",NULL
To execute a task the method ThreadPool.execute(Runnable r) is called with a Runnable implementation as parameter.,"(""ThreadPool"", ""The method execute is called on the ThreadPool class to perform a task."", ""execute"")"
Then each thread in the pool is stopped by calling doStop() on each thread.,NULL
Notice how the execute() method will throw an IllegalStateException if execute() is called after stop() has been called.,"(""execute"", ""The execute() method throws an IllegalStateException when called after stop() has been executed."", ""IllegalStateException"")"
"This makes sure that a thread blocked in a wait() call inside the taskQueue.dequeue() call breaks out of the wait() call, and leaves the dequeue() method call with an InterruptedException thrown.","(""taskQueue"", ""taskQueue is the class that contains the dequeue method which is called to remove an item from the queue."", ""dequeue""); (""dequeue"", ""dequeue method calls wait to block the thread until an item is available in the queue."", ""wait"")"
"This exception is caught in the PoolThread.run() method, reported, and then the isStopped variable is checked.","(""PoolThread"", ""The run method is a method of the PoolThread class."", ""run"")"
"Since isStopped is now true, the PoolThread.run() will exit and the thread dies.",NULL
"Notice how the add() method returns a new ImmutableValue instance with the result of the add operation, rather than adding the value to itself.",NULL
Notice how it is possible to change that reference through both the setValue() and add() methods.,NULL
"Therefore, even if the Calculator class uses an immutable object internally, it is not itself immutable, and therefore not thread safe.","(""Calculator"", ""The Calculator class uses an immutable object internally."", ""immutable"")"
"In other words: The ImmutableValue class is thread safe, but the use of it is not.",NULL
"To make the Calculator class thread safe you could have declared the getValue(), setValue(), and add() methods synchronized.","(""Calculator"", ""The getValue method is part of the Calculator class and is mentioned in the context of making it thread safe."", ""getValue""); (""Calculator"", ""The setValue method is part of the Calculator class and is mentioned in the context of making it thread safe."", ""setValue"")"
"The LocalObject instance in this example is not returned from the method, nor is it passed to any other objects that are accessible from outside the someMethod() method.",NULL
Each thread executing the someMethod() method will create its own LocalObject instance and assign it to the localObject reference.,"(""someMethod"", ""The someMethod() method creates an instance of the LocalObject class."", ""LocalObject"")"
"Even if the LocalObject instance is passed as parameter to other methods in the same class, or in other classes, the use of it is thread safe.","(""LocalObject"", ""LocalObject is passed as a parameter to other methods in the same class or in other classes."", ""method"")"
If two threads call the add() method simultaneously on the same NotThreadSafe instance then it leads to race conditions.,NULL
"Therefore, when they call the add() method on the NotThreadSafe instance it leads to race condition.",NULL
"However, if two threads call the add() method simultaneously on different instances then it does not lead to race condition.","(""add"", ""The add() method is called by multiple threads, indicating a relationship between the method and the class of threads."", ""threads"")"
"In other words, it is waiting for a signal from thread A which causes hasDataToProcess() to return true.",NULL
Notice how the while loop keeps executing until hasDataToProcess() returns true.,NULL
"The class java.lang.Object defines three methods, wait(), notify(), and notifyAll(), to facilitate this.","(""Java.lang.Object"", ""The class java.lang.Object defines the method wait() as part of its functionality."", ""wait()""); (""Java.lang.Object"", ""The class java.lang.Object defines the method notify() as part of its functionality."", ""notify()"")"
A thread that calls wait() on any object becomes inactive until another thread calls notify() on that object.,"(""Thread"", ""A thread interacts with an object by calling wait() and notify() methods on it."", ""Object"")"
In order to call either wait() or notify the calling thread must first obtain the lock on that object.,"(""wait"", ""The method wait() requires the lock on the object to be obtained before it can be called."", ""lock""); (""notify"", ""The method notify() requires the lock on the object to be obtained before it can be called."", ""lock"")"
"In other words, the calling thread must call wait() or notify() from inside a synchronized block.","(""Thread"", ""The calling thread must call wait() from inside a synchronized block."", ""wait"")"
Here is a modified version of MySignal called MyWaitNotify that uses wait() and notify().,"(""MyWaitNotify"", ""MyWaitNotify is a modified version of MySignal"", ""MySignal""); (""MyWaitNotify"", ""MyWaitNotify uses the method wait()"", ""wait()"")"
"The waiting thread would call doWait(), and the notifying thread would call doNotify().",NULL
"When a thread calls notify() on an object, one of the threads waiting on that object are awakened and allowed to execute.","(""Thread"", ""A thread can call the notify() method on an object."", ""notify""); (""Object"", ""The notify() method is called on an object."", ""notify"")"
There is also a notifyAll() method that will wake all threads waiting on a given object.,NULL
As you can see both the waiting and notifying thread calls wait() and notify() from within a synchronized block.,"(""Wait"", ""The wait() method is called within a synchronized block to ensure thread safety."", ""Synchronized Block"")"
"A thread cannot call wait(), notify() or notifyAll() without holding the lock on the object the method is called on.","(""Thread"", ""A thread can invoke the wait() method when it holds the lock on the object."", ""wait""); (""Thread"", ""A thread can invoke the notify() method when it holds the lock on the object."", ""notify""); (""Thread"", ""A thread can invoke the notifyAll() method when it holds the lock on the object."", ""notifyAll""); (""wait"", ""The wait() method requires the thread to hold the lock on the object."", ""Lock""); (""notify"", ""The notify() method requires the thread to hold the lock on the object."", ""Lock"")"
Will the waiting thread not block the notifying thread from ever entering the synchronized block in doNotify()?,"(""Thread"", ""The waiting thread is related to the doNotify method as it is mentioned in the context of thread synchronization."", ""doNotify"")"
Once a thread calls wait() it releases the lock it holds on the monitor object.,"(""Thread"", ""A thread calls the wait() method to release the lock it holds."", ""wait()"")"
"This allows other threads to call wait() or notify() too, since these methods must be called from inside a synchronized block.","(""Wait"", ""The wait() method must be called from inside a synchronized block."", ""Synchronized Block"")"
Once a thread is awakened it cannot exit the wait() call until the thread calling notify() has left its synchronized block.,"(""Thread"", ""A thread cannot exit the wait() call until the notify() method is called by another thread."", ""wait""); (""Thread"", ""The notify() method is called by a thread to wake up another thread that is waiting."", ""notify""); (""wait"", ""The wait() call must be made within a synchronized block."", ""synchronized block"")"
"In other words: The awakened thread must reobtain the lock on the monitor object before it can exit the wait() call, because the wait call is nested inside a synchronized block.","(""Thread"", ""The Thread must reobtain the lock on the Monitor Object to exit the wait() call."", ""Monitor Object"")"
"If multiple threads are awakened using notifyAll() only one awakened thread at a time can exit the wait() method, since each thread must obtain the lock on the monitor object in turn before exiting wait().","(""NotifyAll"", ""NotifyAll is a method that can be called to wake up threads that are waiting on the wait() method."", ""Wait"")"
The methods notify() and notifyAll() do not save the method calls to them in case no threads are waiting when they are called.,NULL
"Therefore, if a thread calls notify() before the thread to signal has called wait(), the signal will be missed by the waiting thread.","(""Thread"", ""A thread can call the notify() method to signal another thread."", ""Notify"")"
To avoid losing signals they should be stored inside the signal class.,NULL
Notice how the doNotify() method now sets the wasSignalled variable to true before calling notify().,"(""doNotify"", ""The doNotify method sets the wasSignalled variable to true."", ""wasSignalled"")"
"Also, notice how the doWait() method now checks the wasSignalled variable before calling wait().",NULL
In fact it only calls wait() if no signal was received in between the previous doWait() call and this.,NULL
For inexplicable reasons it is possible for threads to wake up even if notify() and notifyAll() has not been called.,"(""Thread"", ""The Thread class can invoke the notify method to wake up threads."", ""notify"")"
If a spurious wakeup occurs in the MyWaitNofity2 class's doWait() method the waiting thread may continue processing without having received a proper signal to do so!,NULL
Notice how the wait() call is now nested inside a while loop instead of an if-statement.,NULL
"The while loop is also a nice solution if you have multiple threads waiting, which are all awakened using notifyAll(), but only one of them should be allowed to continue.",NULL
"Only one thread at a time will be able to obtain the lock on the monitor object, meaning only one thread can exit the wait() call and clear the wasSignalled flag.","(""Thread"", ""A thread can obtain a lock on the monitor object, indicating a relationship between threads and the monitor."", ""Monitor""); (""Thread"", ""A thread can call the wait() method to wait for a condition to be signaled."", ""wait"")"
"Once this thread then exits the synchronized block in the doWait() method, the other threads can exit the wait() call and check the wasSignalled member variable inside the while loop.","(""Thread"", ""The doWait method is called by the Thread to manage its waiting state."", ""doWait""); (""Thread"", ""The wait method is called by the Thread to pause its execution."", ""wait"")"
"An earlier version of this text had an edition of the MyWaitNotify example class which used a constant string ( """" ) as monitor object.",NULL
"The problem with calling wait() and notify() on the empty string, or any other constant string is, that the JVM/Compiler internally translates constant strings into the same object.","(""wait"", ""The method wait() is called within the context of the JVM, which manages the execution of Java programs."", ""JVM""); (""notify"", ""The method notify() is called within the context of the JVM, which manages the execution of Java programs."", ""JVM""); (""wait"", ""The method wait() is translated by the Compiler during the execution of Java programs."", ""Compiler"")"
This also means that threads calling doWait() on the first MyWaitNotify instance risk being awakened by doNotify() calls on the second MyWaitNotify instance.,"(""doWait"", ""The doWait method is called on one instance of MyWaitNotify, while doNotify is called on another instance, indicating a relationship between the two methods in the context of thread synchronization."", ""doNotify"")"
"Remember, that even if the 4 threads call wait() and notify() on the same shared string instance, the signals from the doWait() and doNotify() calls are stored individually in the two MyWaitNotify instances.","(""MyWaitNotify"", ""wait is a method that can be called on MyWaitNotify instances."", ""wait""); (""MyWaitNotify"", ""notify is a method that can be called on MyWaitNotify instances."", ""notify""); (""MyWaitNotify"", ""doWait is a method that can be called on MyWaitNotify instances."", ""doWait"")"
"A doNotify() call on the MyWaitNotify 1 may wake threads waiting in MyWaitNotify 2, but the signal will only be stored in MyWaitNotify 1.","(""doNotify()"", ""doNotify() is a method that may wake threads waiting in MyWaitNotify 2."", ""MyWaitNotify 1"")"
"After all, if doNotify() is called on the second MyWaitNotify instance all that can really happen is that Thread A and B are awakened by mistake.","(""doNotify"", ""doNotify() is a method that is called on the MyWaitNotify instance."", ""MyWaitNotify"")"
"This awakened thread (A or B) will check its signal in the while loop, and go back to waiting because doNotify() was not called on the first MyWaitNotify instance, in which they are waiting.",NULL
"The problem is, that since the doNotify() call only calls notify() and not notifyAll(), only one thread is awakened even if 4 threads are waiting on the same string instance (the empty string).","(""doNotify"", ""doNotify calls notify, indicating a direct relationship between the two methods."", ""notify"")"
"If the doNotify() method had called notifyAll() instead of notify(), all waiting threads had been awakened and checked for signals in turn.","(""doNotify"", ""doNotify() method is related to notifyAll() because it is suggested that doNotify() should have called notifyAll() instead of notify()."", ""notifyAll""); (""doNotify"", ""doNotify() method is related to notify() as it is the method that was originally called in the context of the statement."", ""notify"")"
"Thread A and B would have gone back to waiting, but one of either C or D would have noticed the signal and left the doWait() method call.","(""Thread A"", ""Thread A and Thread B are mentioned together as entities that would have gone back to waiting."", ""Thread B""); (""C"", ""C or D would have noticed the signal, indicating a relationship between them in the context of the scenario."", ""D""); (""C"", ""C is involved in the context where doWait() is called."", ""doWait()"")"
"The other of C and D would go back to waiting, because the thread discovering the signal clears it on the way out of doWait().","(""C"", ""C and D are mentioned together in the context of waiting for a signal."", ""D""); (""doWait()"", ""doWait() is a method that is related to the behavior of class C."", ""C"")"
"You may be tempted then to always call notifyAll() instead notify(), but this is a bad idea performance wise.",NULL
"For instance, each MyWaitNotify3 (example from earlier sections) instance has its own MonitorObject instance rather than using the empty string for wait() / notify() calls.","(""MyWaitNotify3"", ""MyWaitNotify3 instances have their own MonitorObject instances for synchronization purposes."", ""MonitorObject""); (""MyWaitNotify3"", ""MyWaitNotify3 uses wait() method for synchronization."", ""wait"")"
"The AtomicBoolean class provides you with a boolean variable which can be read and written atomically, and which also contains advanced atomic operations like compareAndSet().",NULL
"The AtomicBoolean class is located in the java.util.concurrent.atomic package, so the full class name is java.util.concurrent.atomic.AtomicBoolean .",NULL
You can get the value of an AtomicBoolean using the get() method.,NULL
You can set the value of an AtomicBoolean using the set() method.,NULL
You can swap the value of an AtomicBoolean using the getAndSet() method.,NULL
"The getAndSet() method returns the AtomicBoolean's current value, and sets a new value for it.",NULL
"The method compareAndSet() allows you to compare the current value of the AtomicBoolean to an expected value, and if current value is equal to the expected value, a new value can be set on the AtomicBoolean.",NULL
"The compareAndSet() method is atomic, so only a single thread can execute it at the same time.",NULL
"Thus, the compareAndSet() method can be used to implemented simple synchronizers like locks.",NULL
"The AtomicInteger class provides you with a int variable which can be read and written atomically, and which also contains advanced atomic operations like compareAndSet().",NULL
"The AtomicInteger class is located in the java.util.concurrent.atomic package, so the full class name is java.util.concurrent.atomic.AtomicInteger .",NULL
You can get the value of an AtomicInteger instance via the get() method.,NULL
You can set the value of an AtomicInteger instance via the set() method.,NULL
The AtomicInteger class contains a few methods you can use to add a value to the AtomicInteger and get its value returned.,"(""AtomicInteger"", ""The add method is used to add a value to the AtomicInteger."", ""add"")"
"The first method, addAndGet() adds a number to the AtomicInteger and returns its value after the addition.",NULL
"The second method, getAndAdd() also adds a number to the AtomicInteger but returns the value the AtomicInteger had before the value was added.",NULL
The methods getAndIncrement() and incrementAndGet() works like getAndAdd() and addAndGet() but just add 1 to the value of the AtomicInteger.,"(""getAndIncrement"", ""Both methods perform similar operations on the value of AtomicInteger, specifically adding 1 to it."", ""incrementAndGet""); (""getAndAdd"", ""Both methods perform similar operations on the value of AtomicInteger, specifically adding a specified value to it."", ""addAndGet""); (""getAndIncrement"", ""getAndIncrement is a specific case of getAndAdd that adds 1 to the value."", ""getAndAdd"")"
The AtomicInteger class also contains a few methods for subtracting values from the AtomicInteger value atomically.,"(""AtomicInteger"", ""The subtracting method is a part of the AtomicInteger class, which allows for atomic operations on its value."", ""subtracting"")"
The decrementAndGet() subtracts 1 from the AtomicInteger value and returns its value after the subtraction.,NULL
The getAndDecrement() also subtracts 1 from the AtomicInteger value but returns the value the AtomicInteger had before the subtraction.,NULL
The Java AtomicIntegerArray class (java.util.concurrent.atomic.AtomicIntegerArray) represents an array of int .,NULL
You can get the value of a given element using the get() method on the AtomicIntegerArray.,NULL
Here is an example showing how calling the get() method looks:,NULL
You can set the value of a given element using the set() method on the AtomicIntegerArray.,NULL
Here is an example showing how calling the set() method looks:,NULL
"The compareAndSet() method is used to compare the value of a given element with a specified value, and if the two values are equal, set a new value for that element.","(""compareAndSet"", ""The compareAndSet() method compares the value of a given element with a specified value."", ""value"")"
Only one thread at a time can execute the compareAndSet() method.,NULL
"The compareAndSet() method returns a boolean with the value true if the element had a new value set, and false if not (if the element did not have the expected value).",NULL
Calling addAndGet() is also an atomic operation (like all operations on the AtomicIntegerArray).,NULL
"The getAndAdd() method does the same as the addAndGet() method, except the getAndAdd() method returns the value of the element before a value is added to it.",NULL
The incrementAndGet() method increments (adds 1) to the value of a given element and returns the new value of that element.,NULL
"The getAndIncrement() method does the same as the incrementAndGet() method, except the getAndIncrement() method returns the value of the element before it is incremented.",NULL
The decrementAndGet() method decrements (subtracts 1) to the value of a given element and returns the new value of that element.,NULL
"The getAndDecrement() method does the same as the decrementAndGet() method, except the getAndDecrement() method returns the value of the element before it is decremented.",NULL
You should check out the JavaDoc for the AtomicIntegerArray class to learn more about those methods.,NULL
"The AtomicLong class provides you with a long variable which can be read and written atomically, and which also contains advanced atomic operations like compareAndSet().",NULL
"The AtomicLong class is located in the java.util.concurrent.atomic package, so the full class name is java.util.concurrent.atomic.AtomicLong .",NULL
You can get the value of an AtomicLong instance via the get() method.,NULL
You can set the value of an AtomicLong instance via the set() method.,NULL
The AtomicLong class contains a few methods you can use to add a value to the AtomicLong and get its value returned.,"(""AtomicLong"", ""The add method is used to add a value to the AtomicLong class."", ""add"")"
"The first method, addAndGet() adds a number to the AtomicLong and returns its value after the addition.",NULL
"The second method, getAndAdd() also adds a number to the AtomicLong but returns the value the AtomicLong had before the value was added.",NULL
The methods getAndIncrement() and incrementAndGet() works like getAndAdd() and addAndGet() but just add 1 to the value of the AtomicLong.,"(""getAndIncrement"", ""Both methods perform similar operations on the value of AtomicLong, specifically adding 1 to it."", ""incrementAndGet""); (""getAndAdd"", ""Both methods perform similar operations on the value of AtomicLong, specifically adding a specified value to it."", ""addAndGet""); (""getAndIncrement"", ""Both methods are related as they perform addition operations on the value of AtomicLong."", ""getAndAdd"")"
The AtomicLong class also contains a few methods for subtracting values from the AtomicLong value atomically.,"(""AtomicLong"", ""The AtomicLong class contains methods for subtracting values."", ""subtracting"")"
The decrementAndGet() subtracts 1 from the AtomicLong value and returns its value after the subtraction.,NULL
The getAndDecrement() also subtracts 1 from the AtomicLong value but returns the value the AtomicLong had before the subtraction.,NULL
The Java AtomicLongArray class (java.util.concurrent.atomic.AtomicLongArray) represents an array of long .,NULL
You can get the value of a given element using the get() method on the AtomicLongArray.,NULL
You can set the value of a given element using the set() method on the AtomicLongArray.,NULL
Calling addAndGet() is also an atomic operation (like all operations on the AtomicLongArray).,NULL
You should check out the JavaDoc for the AtomicLongArray class to learn more about those methods.,NULL
The AtomicReference class provides an object reference variable which can be read and written atomically.,NULL
By atomic is meant that multiple threads attempting to change the same AtomicReference (e.g.,NULL
"AtomicReference even has an advanced compareAndSet() method which lets you compare the reference to an expected value (reference) and if they are equal, set a new reference inside the AtomicReference object.",NULL
You can get the reference stored in an AtomicReference using the AtomicReference's get() method.,NULL
If you have an untyped AtomicReference then the get() method returns an Object reference.,NULL
If you have a typed AtomicReference then get() returns a reference to the type you declared on the AtomicReference variable when you created it.,NULL
Notice how it is necessary to cast the reference returned by get() to a String because get() returns an Object reference when the AtomicReference is untyped.,"(""get"", ""get() is a method that operates on the AtomicReference class."", ""AtomicReference""); (""get"", ""get() returns a reference that needs to be cast to a String."", ""String"")"
Notice how it is no longer necessary to cast the referenced returned by get() because the compiler knows it will return a String reference.,NULL
You can set the reference stored in an AtomicReference instance using its set() method.,NULL
In an untyped AtomicReference instance the set() method takes an Object reference as parameter.,NULL
In a typed AtomicReference the set() method takes whatever type as parameter you declared as its type when you declared the AtomicReference.,NULL
There is no difference to see in the use of the set() method for an untyped or typed reference.,NULL
"The compareAndSet() method can compare the reference stored in the AtomicReference instance with an expected reference, and if they two references are the same (not equal as in equals() but same as in ==), then a new reference can be set on the AtomicReference instance.",NULL
If compareAndSet() sets a new reference in the AtomicReference the compareAndSet() method returns true.,"(""compareAndSet"", ""The compareAndSet() method operates on the AtomicReference class to set a new reference."", ""AtomicReference"")"
"Then it calls comparesAndSet() two times to compare the stored reference to the initial reference, and set a new reference if the stored reference is equal to the initial reference.","(""comparesAndSet"", ""The method comparesAndSet() is used to compare the stored reference to the initial reference."", ""initial reference"")"
"The second time the stored reference is the new reference just set in the call to compareAndSet() before, so the stored reference is of course not equal to the initial reference.",NULL
"Thus, a new reference is not set on the AtomicReference and the compareAndSet() method returns false.",NULL
The AtomicReferenceArray in the java.util.concurrent.atomic package is an array of object references which can be updated atomically.,NULL
"The second constructor takes a E[] array as parameter, where E is the type (class) of the object references.",NULL
The get() method returns the value of the element with the given index.,"(""get"", ""The get() method is designed to return the value of an element."", ""value""); (""get"", ""The get() method operates on an element."", ""element"")"
"If the AtomicReferenceArray has a generic type, the get() method returns objects of that type.",NULL
"For instance, if the generic type is String, then you can call get() like this:",NULL
The set() method sets the value of an element with a specific index.,NULL
The index and value is passed as parameters to the set() method.,NULL
"The compareAndSet() method of the AtomicReferenceArray can compare the current reference stored in a given element with an expected reference, and if the references are the same, swap the current reference with a new reference.",NULL
You should check out the JavaDoc for the AtomicReferenceArray class to learn more about those methods.,NULL
The AtomicStampedReference class provides an object reference variable which can be read and written atomically.,NULL
"The reference and stamp can be swapped using a single atomic compare-and-swap operation, via the compareAndSet() method.","(""compareAndSet"", ""The compareAndSet() method is used to perform an atomic operation involving the reference entity."", ""reference"")"
You can get the reference stored in an AtomicStampedReference using the AtomicStampedReference's getReference() method.,NULL
If you have an untyped AtomicStampedReference then the getReference() method returns an Object reference.,NULL
If you have a typed AtomicStampedReference then getReference() returns a reference to the type you declared on the AtomicStampedReference variable when you created it.,NULL
Notice how it is necessary to cast the reference returned by getReference() to a String because getReference() returns an Object reference when the AtomicStampedReference is untyped.,"(""getReference"", ""getReference() returns an Object reference that needs to be cast to a String."", ""String"")"
Notice how it is no longer necessary to cast the referenced returned by getReference() because the compiler knows it will return a String reference.,NULL
The AtomicStampedReference also contains a getStamp() method which can be used to obtain the internally stored stamp.,NULL
"You can obtain both reference and stamp from an AtomicStampedReference in a single, atomic operation using the get() method.",NULL
The get() method returns the reference as return value from the method.,NULL
The stamp is inserted into an int[] array that is passed as parameter to the get() method.,"(""Stamp"", ""The stamp is inserted into an int[] array."", ""IntArray"")"
You can set the reference stored in an AtomicStampedReference instance using its set() method.,NULL
In an untyped AtomicStampedReference instance the set() method takes an Object reference as first parameter.,NULL
In a typed AtomicStampedReference the set() method takes whatever type as parameter you declared as its type when you declared the AtomicStampedReference.,NULL
"The compareAndSet() method can compare the reference stored in the AtomicStampedReference instance with an expected reference, and the stored stamp with an expected stamp, and if they two references and stamps are the same (not equal as in equals() but same as in ==), then a new reference can be set on the AtomicStampedReference instance.",NULL
If compareAndSet() sets a new reference in the AtomicStampedReference the compareAndSet() method returns true.,NULL
This example first creates an AtomicStampedReference and then uses compareAndSet() to swap the reference and stamp.,NULL
After the first compareAndSet() call the example attempts to swap the reference and stamp two times without success.,NULL
"The first time the initialRef is passed as expected reference, but the internally stored reference is newRef at this time, so the compareAndSet() call fails.","(""initialRef"", ""initialRef is passed as expected reference to the compareAndSet() method."", ""compareAndSet"")"
"The second time the initialStamp is passed as the expected stamp, but the internally stored stamp is newStamp at this time, so the compareAndSet() call fails.","(""initialStamp"", ""initialStamp is passed as the expected stamp in the compareAndSet() call"", ""compareAndSet"")"
"The final compareAndSet() call will succeed, because the expected reference is newRef and the expected stamp is newStamp.","(""compareAndSet"", ""The compareAndSet() method is called with newRef as the expected reference."", ""newRef"")"
Thread 1 can copy the reference and stamp out of the AtomicStampedReference atomically using get().,NULL
"If another thread changes the reference from A to B and then back to A, then the stamp will have changed (provided threads update the stamp sensibly - e.g increment it).","(""A"", ""A and B are classes that can be referenced by threads."", ""B"")"
"The BlockingDeque interface in the java.util.concurrent class represents a deque which is thread safe to put into, and take instances from.",NULL
"The BlockingDeque class is a Deque which blocks threads tring to insert or remove elements from the deque, in case it is either not possible to insert or remove elements from the deque.",NULL
The java.util.concurrent package has the following implementations of the BlockingDeque interface:,NULL
The java.util.concurrent.ConcurrentMap interface represents a Map which is capable of handling concurrent access (puts and gets) to it.,NULL
"The ConcurrentMap has a few extra atomic methods in addition to the methods it inherits from its superinterface, java.util.Map.","(""ConcurrentMap"", ""ConcurrentMap inherits methods from its superinterface, java.util.Map."", ""java.util.Map"")"
The java.util.concurrent package contains the following implementations of the ConcurrentMap interface:,NULL
"The ConcurrentHashMap is very similar to the java.util.HashTable class, except that ConcurrentHashMap offers better concurrency than HashTable does.","(""ConcurrentHashMap"", ""ConcurrentHashMap is very similar to HashTable."", ""HashTable"")"
"The java.util.concurrent.ConcurrentNavigableMap class is a java.util.NavigableMap with support for concurrent access, and which has concurrent access enabled for its submaps.",NULL
"The ""submaps"" are the maps returned by various methods like headMap(), subMap() and tailMap().","(""submaps"", ""submaps are returned by the headMap() method"", ""headMap()""); (""submaps"", ""submaps are returned by the subMap() method"", ""subMap()"")"
Here is an example illustrating the use of the headMap() method.,NULL
Here is an example illustrating the use of the tailMap() method:,NULL
"The subMap() method returns a view of the original map which contains all keys from (including), to (excluding) two keys given as parameters to the method.",NULL
A java.util.concurrent.CountDownLatch is a concurrency construct that allows one or more threads to wait for a given set of operations to complete.,NULL
Threads waiting for this count to reach zero can call one of the await() methods.,NULL
"After the Decrementer has called countDown() 3 times on the CountDownLatch, the waiting Waiter is released from the await() call.","(""Decrementer"", ""Decrementer calls countDown() method on CountDownLatch."", ""CountDownLatch""); (""CountDownLatch"", ""CountDownLatch releases Waiter after countDown() is called."", ""Waiter"")"
The java.util.concurrent.CyclicBarrier class is a synchronization mechanism that can synchronize threads progressing through some algorithm.,NULL
The threads wait for each other by calling the await() method on the CyclicBarrier.,NULL
The value returned by the getDelay() method should be the delay remaining before this element can be released.,NULL
"If 0 or a negative value is returned, the delay will be considered expired, and the element released at the next take() etc.","(""Delay"", ""The Delay class is responsible for managing the expiration of the Element when a negative value is returned."", ""Element"")"
The TimeUnit instance passed to the getDelay() method is an Enum that tells which time unit the delay should be returned in.,"(""getDelay()"", ""The getDelay() method takes a TimeUnit instance as a parameter."", ""TimeUnit"")"
"The Delayed interface also extends the java.lang.Comparable interface, as you can see, which means that Delayed objects can be compared to each other.",NULL
You will have to create your own implementation of the Delayed interface to use the DelayQueue class.,NULL
The java.util.concurrent.Exchanger class represents a kind of rendezvous point where two threads can exchange objects.,NULL
Exchanging objects is done via one of the two exchange() methods.,NULL
"The Java BlockingQueue interface, java.util.concurrent.BlockingQueue, represents a queue which is thread safe to put elements into, and take elements out of from.",NULL
The java.util.concurrent package has the following implementations of the BlockingQueue interface:,NULL
"First, the BlockingQueueExample class which starts a Producer and a Consumer in separate threads.","(""BlockingQueueExample"", ""The BlockingQueueExample class starts a Producer in a separate thread."", ""Producer"")"
"It just takes out the objects from the queue, and prints them to System.out.",NULL
The Java BlockingQueue add() method will add the element passed as parameter to this method if the BlockingQueue has space for it internally.,"(""add()"", ""The add() method is a method of the BlockingQueue class that adds an element to the queue."", ""BlockingQueue"")"
"If the BlockingQueue does not have space internally for this new element, the add() method throws an IllegalStateException.","(""BlockingQueue"", ""The add() method is associated with the BlockingQueue class and is used to add elements to it."", ""add()"")"
The BlockingQueue offer() method will add the element passed as parameter to this method if the BlockingQueue has space for it internally.,NULL
"If the BlockingQueue does not have space internally for this new element, the offer() method return false.",NULL
The BlockingQueue offer() method exists in a version which takes a time out as parameter.,NULL
"This version of the offer() method will add the element passed as parameter if the BlockingQueue has space for it internally, or space becomes available.",NULL
"If the BlockingQueue does not have or get space internally for this new element within the time out, this version of the offer() method returns false.",NULL
The BlockingQueue put() method inserts the element into the BlockingQueue if it has space for it internally.,NULL
"If the BlockingQueue does not have space for the new element, the put() method will block the thread calling the put() method until the BlockingQueue as space internally for the new element.",NULL
The Java BlockingQueue take() method will remove the first element in the BlockingQueue.,NULL
"If the BlockingQueue does not contain any elements, the take() method will block the thread calling take() until an element is inserted into the BlockingQueue.",NULL
The BlockingQueue poll() method will remove the first element in the BlockingQueue.,NULL
"If the BlockingQueue does not contain any elements, the poll() method will return null.",NULL
"If the BlockingQueue does not contain any elements, this version of the poll() method will wait for an element to become available for the given amount of time passed to it as parameter.",NULL
The remove() method will use the o.equals(element) to decide if the object o passed as parameter matches a given element in the BlockingQueue.,"(""remove"", ""The remove() method uses the o.equals(element) to determine if the object o matches a given element."", ""o""); (""remove"", ""The remove() method checks if the object o matches the given element."", ""element"")"
"The remove() method will return true if an element was removed, and false if not.","(""remove"", ""The remove() method will return true if an element was removed."", ""true"")"
The BlockingQueue peek() method will return the first element of the BlockingQueue without removing it.,NULL
"If the BlockingQueue does not contain any elements, the peek() method will return null.",NULL
The BlockingQueue element() method will return the first element of the BlockingQueue without removing it.,NULL
"If the BlockingQueue does not contain any elements, the element() method will throw a NoSuchElementException.","(""element"", ""The element() method is associated with the BlockingQueue class as it operates on its elements."", ""BlockingQueue"")"
The BlockingQueue contains(Object o) method will return true if the BlockingQueue contains an object matching the object passed as parameter to the contains() method.,"(""BlockingQueue"", ""The contains method is a method of the BlockingQueue class that checks for the presence of an object."", ""contains"")"
"The Objects.equals(o, element) statement is used to check if the parameter object o matches a given element in the BlockingQueue.",NULL
The BlockingQueue size() method returns the number of elements stored in BlockingQueue.,NULL
The BlockingQueue remainingCapacity() method returns the remaining (unused) capacity of the BlockingQueue.,NULL
"The Java Callable interface, java.util.concurrent.Callable, represents an asynchronous task which can be executed by a separate thread.",NULL
The call() method is called in order to execute the asynchronous task.,NULL
The call() method can also thrown an Exception in case the task fails during execution.,NULL
The result of that is that the call() method will return a String.,NULL
The call() implementation just returns a String representation of the current time in milliseconds.,NULL
"A Java Callable is different from a Runnable in that the Runnable interface's run() method does not return a value, and it cannot throw checked exceptions (only RuntimeExceptions).","(""Callable"", ""Callable is different from Runnable in that Runnable's run() method does not return a value."", ""Runnable"")"
"Additionally, a Runnable was originally designed for long running concurrent execution, e.g.",NULL
"Java 5 added a new Java package to the Java platform, the java.util.concurrent package.",NULL
This package contains a set of classes that makes it easier to develop concurrent (multithreaded) applications in Java.,NULL
"Before this package was added, you would have to program your utility classes yourself.",NULL
"In this tutorial I will take you through the new java.util.concurrent classes, one by one, so you can learn how to use them.",NULL
Here is a list of the topics covered in this java.util.concurrent trail.,NULL
"If you disagree with anything I write here about the java.util.concurrent utilities, or just have comments, questions, etc, feel free to send me an email.",NULL
"The Java ExecutorService interface, java.util.concurrent.ExecutorService, represents an asynchronous execution mechanism which is capable of executing tasks concurrently in the background.",NULL
First an ExecutorService is created using the Executors newFixedThreadPool() factory method.,"(""ExecutorService"", ""ExecutorService is created using the Executors class to manage a pool of threads."", ""Executors"")"
"Second, an anonymous implementation of the Runnable interface is passed to the execute() method.",NULL
"In fact, the implementation of the ExecutorService interface present in the java.util.concurrent package is a thread pool implementation.",NULL
"However, you can use the Executors factory class to create ExecutorService instances too.",NULL
"The Java ExecutorService execute(Runnable) method takes a java.lang.Runnable object, and executes it asynchronously.","(""ExecutorService"", ""The execute method is a method of the ExecutorService class."", ""execute"")"
The submit() method returns a Java Future object which can be used to check when the Runnable has completed.,"(""submit"", ""The submit() method returns a Java Future object."", ""Future"")"
"The invokeAny() method takes a collection of Callable objects, or subinterfaces of Callable.",NULL
"If one Callable finishes, so that a result is returned from invokeAny(), then the rest of the Callable instances are cancelled.",NULL
The invokeAll() method invokes all of the Callable objects you pass to it in the collection passed as parameter.,"(""invokeAll"", ""The invokeAll() method is designed to invoke all Callable objects."", ""Callable"")"
The invokeAll() returns a list of Future objects via which you can obtain the results of the executions of each Callable.,"(""invokeAll"", ""invokeAll() returns a list of Future objects"", ""Future"")"
The main difference between the Runnable run() method and the Callable call() method is that the call() method can return an Object from the method call.,"(""run()"", ""Both methods are part of different classes (Runnable and Callable) that serve similar purposes in executing code but have different return capabilities."", ""call()"")"
"Another difference between call() and run() is that call() can throw an exception, whereas run() cannot (except for unchecked exceptions - subclasses of RuntimeException).",NULL
You can cancel a task (Runnable or Callable) submitted to a Java ExecutorService by calling the cancel() method on the Future returned when the task is submitted.,"(""Future"", ""The Future is returned by the ExecutorService when a task is submitted."", ""ExecutorService""); (""Runnable"", ""Runnable is a type of task that can be submitted to the ExecutorService."", ""ExecutorService""); (""Callable"", ""Callable is a type of task that can be submitted to the ExecutorService."", ""ExecutorService"")"
Here is an example of cancelling a task by calling the Future.cancel() method:,NULL
"If your application is started via a main() method and your main thread exits your application, the application will keep running if you have an active ExexutorService in your application.",NULL
To terminate the threads inside the ExecutorService you call its shutdown() method.,NULL
"All tasks submitted to the ExecutorService before shutdown() is called, are executed.",NULL
"If you want to shut down the ExecutorService immediately, you can call the shutdownNow() method.",NULL
"The ExecutorService awaitTermination() method will block the thread calling it until either the ExecutorService has shutdown completely, or until a given time out occurs.","(""awaitTermination"", ""awaitTermination() is a method of the ExecutorService class."", ""ExecutorService"")"
The awaitTermination() method is typically called after calling shutdown() or shutdownNow().,NULL
"The ForkJoinPool located in the java.util.concurrent package, so the full class name is java.util.concurrent.ForkJoinPool.",NULL
These two types of tasks are represented by the RecursiveAction and RecursiveTask classes.,NULL
"If the workLoad is above a certain threshold, the work is split into subtasks which are also scheduled for execution (via the .fork() method of the subtasks.","(""workLoad"", ""The workLoad determines when the work is split into subtasks."", ""subtasks"")"
The class MyRecursiveTask extends RecursiveTask<Long> which means that the result returned from the task is a Long .,"(""MyRecursiveTask"", ""MyRecursiveTask extends RecursiveTask, indicating that MyRecursiveTask is a subclass of RecursiveTask."", ""RecursiveTask"")"
"The MyRecursiveTask example also breaks the work down into subtasks, and schedules these subtasks for execution using their fork() method.",NULL
"Additionally, this example then receives the result returned by each subtask by calling the join() method of each subtask.",NULL
Notice how you get the final result out from the ForkJoinPool.invoke() method call.,NULL
"A Java Future, java.util.concurrent.Future, represents the result of an asynchronous computation.",NULL
"To obtain the result, you call one of the two get() methods on the Future.",NULL
"The get() methods both return an Object, but the return type can also be a generic return type (meaning an object of a specific class, and not just an Object).","(""get"", ""The get() method returns an Object."", ""Object"")"
Here is an example of obtaining the result from a Java Future via its get() method:,NULL
"If you call the get() method before the asynchronous task has completed, the get() method will block until the result is ready.",NULL
There is a version of the get() method which can time out after an amount of time has passed which you can specify via method parameters.,NULL
You can cancel the asynchronous task represented by a Java Future instance by calling the Future cancel() method.,NULL
Here is an example of canceling a task via the Java Future cancel() method:,NULL
You can check if the asynchronous task is done (and a result available) by calling the Future isDone() method.,NULL
Here is an example of calling the Java Future isDone() method:,NULL
"The Java Lock interface, java.util.concurrent.locks.Lock, represents a concurrent lock which can be used to guard against race conditions inside critical sections.",NULL
You must create an instance of a class that implements the Lock interface.,NULL
The java.util.concurrent.locks package has the following implementations of the Lock interface:,NULL
In the following sections I will explain how to use the ReentrantLock class as a Lock.,NULL
"To create an instance of the ReentrantLock class you simply use the new operator, like this:",NULL
To lock the Lock instance you must call its lock() method.,NULL
To unlock the Lock instance you must call its unlock() method.,NULL
Any other thread calling lock() will be blocked until the thread that locked the lock calls unlock().,"(""Lock"", ""The method lock() is associated with the class Lock, as it is a method that operates on instances of the Lock class."", ""lock"")"
"Finally unlock() is called, and the Lock is now unlocked so other threads can lock it.",NULL
"If you look at the example in the previous section, imagine what happens if an exception is thrown between the call to lock.lock() and lock.unlock() .",NULL
"The exception would interrupt the program flow, and the call to lock.unlock() would never be executed.",NULL
"To better understand how using a Lock looks different from using a synchronized block, I have created two simple concurrent Counter classes which protects their internal count in different ways.","(""Lock"", ""Lock is used to illustrate a different concurrency control mechanism compared to the synchronized block in the Counter classes."", ""Counter"")"
"The first class uses a synchronized block, and the second class uses a Java Lock:","(""FirstClass"", ""The first class uses a synchronized block."", ""SynchronizedBlock"")"
Notice that the CounterLock class is longer than the CounterSynchronized class.,NULL
"Notice how the calculate() method both locks the Calculator instance's Lock before performing any calculations, and also call the add() and subtract() methods which also locks the lock.","(""calculate"", ""The calculate() method is a part of the Calculator class."", ""Calculator""); (""add"", ""The add() method is called within the context of the Calculator class."", ""Calculator""); (""subtract"", ""The subtract() method is called within the context of the Calculator class."", ""Calculator""); (""calculate"", ""The calculate() method locks the Lock before performing calculations."", ""Lock""); (""add"", ""The add() method also locks the Lock before performing its operation."", ""Lock"")"
The ReentrantLock class has a constructor that takes a boolean parameter specifying whether the ReentrantLock should provide fairness or not to waiting threads.,"(""ReentrantLock"", ""The constructor is a method of the ReentrantLock class that initializes its instances."", ""constructor"")"
"Please note, that the method tryLock() (covered later in this Java Lock tutorial) with no parameters does not respect the fairness mode of the ReentrantLock.",NULL
"If the Lock instance is already locked, the thread calling lock() is blocked until the Lock is unlocked.",NULL
The lockInterruptibly() method locks the Lock unless the thread calling the method has been interrupted.,NULL
"The tryLock(long timeout, TimeUnit timeUnit) works like the tryLock() method, except it waits up the given timeout before giving up trying to lock the Lock.","(""tryLock"", ""The tryLock method takes a long timeout parameter which specifies the maximum time to wait for the lock."", ""timeout""); (""tryLock"", ""The tryLock method uses TimeUnit to define the time unit of the timeout parameter."", ""TimeUnit"")"
The Java ReentrantLock getHoldCount() method returns the number of times a given thread has locked this Lock instance.,"(""getHoldCount"", ""The getHoldCount method is a method of the ReentrantLock class."", ""ReentrantLock"")"
The ReentrantLock getQueueLength() method returns the number of threads waiting to lock the Lock.,"(""getQueueLength"", ""getQueueLength() is a method of the ReentrantLock class."", ""ReentrantLock"")"
"The ReentrantLock hasQueuedThreads() method returns true if any threads are queued up waiting to lock this Lock, and false if not.","(""hasQueuedThreads()"", ""is a method of the ReentrantLock class that checks for queued threads."", ""ReentrantLock"")"
"The ReentrantLock isFair() method returns true if this Lock guarantees fairness among threads waiting to lock it, and false if not.",NULL
"The ReentrantLock isHeldByCurrentThread() method returns true if the Lock is held (locked) by the thread calling isHeldByCurrentThread(), and false if not.",NULL
"The ReentrantLock isLocked() method returns true if the Lock is currently locked, and false if not.",NULL
"If no upper bound is specified, Integer.MAX_VALUE is used as the upper bound.",NULL
All elements inserted into the PriorityBlockingQueue must implement the java.lang.Comparable interface.,NULL
Notice that the PriorityBlockingQueue does not enforce any specific behaviour for elements that have equal priority (compare() == 0).,NULL
"The java.util.concurrent.ScheduledExecutorService is an ExecutorService which can schedule tasks to run after a delay, or to execute repeatedly with a fixed interval of time in between each execution.","(""ScheduledExecutorService"", ""ScheduledExecutorService is a type of ExecutorService."", ""ExecutorService"")"
Then an anonymous implementation of the Callable interface is created and passed to the schedule() method.,NULL
"Since ScheduledExecutorService is an interface, you will have to use its implementation in the java.util.concurrent package, in order to use it.",NULL
"However, you can use the Executors factory class to create ScheduledExecutorService instances too.",NULL
"This method works like the method version taking a Callable as parameter, except a Runnable cannot return a value, so the ScheduledFuture.get() method returns null when the task is finished.","(""ScheduledFuture"", ""The get method is a method of the ScheduledFuture class that retrieves the result of a scheduled task."", ""get"")"
This method works very much like scheduleAtFixedRate() except that the period is interpreted differently.,NULL
"In the scheduleAtFixedRate() method the period is interpreted as a delay between the start of the previous execution, until the start of the next execution.",NULL
You shut down a ScheduledExecutorService using the shutdown() or shutdownNow() methods which are inherited from the ExecutorService interface.,"(""ScheduledExecutorService"", ""ScheduledExecutorService can be shut down using the shutdown method."", ""shutdown""); (""ScheduledExecutorService"", ""ScheduledExecutorService can be shut down using the shutdownNow method."", ""shutdownNow""); (""shutdown"", ""shutdown method is inherited from the ExecutorService interface."", ""ExecutorService"")"
For each call to acquire() a permit is taken by the calling thread.,"(""acquire"", ""The method acquire() takes a permit for each call."", ""permit"")"
For each call to release() a permit is returned to the semaphore.,NULL
"Thus, at most N threads can pass the acquire() method without any release() calls, where N is the number of permits the semaphore was initialized with.","(""acquire"", ""The acquire() method is related to the semaphore class as it is a method that operates on semaphore instances."", ""semaphore""); (""release"", ""The release() method is related to the semaphore class as it is a method that operates on semaphore instances."", ""semaphore"")"
"If you use a semaphore to send signals between threads, then you would typically have one thread call the acquire() method, and the other thread to call the release() method.","(""Semaphore"", ""The acquire method is typically called by a thread to gain access to the semaphore."", ""acquire"")"
"If no permits are available, the acquire() call will block until a permit is released by another thread.",NULL
"Similarly, a release() calls is blocked if no more permits can be released into this semaphore.",NULL
"For instance, if acquire was called after Thread 1 had inserted an object in a shared list, and Thread 2 had called release() just before taking an object from that list, you had essentially created a blocking queue.","(""acquire"", ""acquire is a method that can be called in the context of a Thread."", ""Thread""); (""release"", ""release is a method that can be called in the context of a Thread."", ""Thread"")"
"That is, there is no guarantee that the first thread to call acquire() is also the first thread to obtain a permit.",NULL
"If you want to enforce fairness, the Semaphore class has a constructor that takes a boolean telling if the semaphore should enforce fairness.",NULL
Calling this class a queue is a bit of an overstatement.,NULL
"However, unless you need to specify all these parameters explicitly for your ThreadPoolExecutor, it is often easier to use one of the factory methods in the java.util.concurrent.Executors class, as shown in the ExecutorService text.","(""Executors"", ""Executors is a class that provides factory methods for creating ThreadPoolExecutor instances."", ""ThreadPoolExecutor"")"
"A Java Certificate class instance contains name plus other details of the entity it identifies, plus possibly a digital signature from a Certificate Authority (CA).",NULL
"The Java Certificate class is an abstract class, so while you may use Certificate as variable type, your variable will always point to a subclass of Certificate.",NULL
The Java Certificate class has one subclass - the X509Certificate class.,NULL
This class represents an X.509 certificate which is used as identity certificate in HTTPS and TLS.,"(""X.509 Certificate"", ""The X.509 Certificate is used as an identity certificate in HTTPS."", ""HTTPS"")"
The Java Certificate getEncoded() method returns an encoded version of the Certificate as a byte array.,NULL
"For instance, if the Certificate is an X509Certificate the returned byte array will contain an X.590 (ASN.1 DER) encoded version of the Certificate instance.","(""Certificate"", ""Certificate is an instance of X509Certificate."", ""X509Certificate""); (""X509Certificate"", ""The byte array is returned when the Certificate is an X509Certificate."", ""byte array"")"
The Java Certificate getPublicKey() method returns the PublicKey of this Certificate instance.,"(""getPublicKey()"", ""The getPublicKey() method is a method of the Java Certificate class that returns the PublicKey of the Certificate instance."", ""Java Certificate"")"
The Java Certificate getType() method returns the type of the Certificate instance.,NULL
The Java CertificateFactory class (java.security.cert.CertificateFactory) is capable of creating Java Certificate instances from binary certificate encodings like X.509 (ASN.1 DER).,"(""Java CertificateFactory"", ""Java CertificateFactory is a class that is part of the java.security.cert package."", ""java.security.cert.CertificateFactory"")"
"To read more about the Java Certificate class, see the Java Certificate tutorial.",NULL
See the Java CertPath tutorial for more information about the CertPath class.,NULL
This example creates a CertificateFactory instance capable of creating X.509 certificate instances (X509Certificate - a subclass of Certificate).,"(""CertificateFactory"", ""CertificateFactory is capable of creating instances of X.509 certificates, which are represented by the X509Certificate class."", ""X509Certificate"")"
You create a CertPath instance by calling the CertificateFactory generateCertPath() method.,"(""generateCertPath"", ""The generateCertPath() method is used to create an instance of the CertPath class."", ""CertPath"")"
"The Java CertPath class (java.security.cert.CertPath represents a chain of cryptographic identity certificates (Java Certificate objects), where each certificate is the digital signer of the next certificate in the chain.",NULL
The Java CertPath class is typically used to verify an identity certificate along with the certificates of the Certificate Authorities (CAs) that signed the certificate.,NULL
Once you have a Java CertPath instance you can obtain the Certificate instances the CertPath consists of by calling the CertPath getCertificates() method.,NULL
The CertPath getType() method returns a string telling what type of certificates (e.g.,NULL
Here is an example of obtaining the CertPath type via getType():,NULL
That is why the Java class is called Cipher and not e.g.,NULL
This Java Cipher tutorial will explain how the Cipher class of the Java Cryptography API works.,NULL
Before you can use a Java Cipher you just create an instance of the Cipher class.,NULL
You create a Cipher instance by calling its getInstance() method with a parameter telling what type of encryption algorithm you want to use.,NULL
There are several overridden versions of both update() and doFinal() which takes different parameters.,NULL
"If you have to encrypt or decrypt a single block of data, just call the doFinal() with the data to encrypt or decrypt.",NULL
"If you have to encrypt or decrypt multiple blocks of data, e.g.","(""Data"", ""Encrypt is a method that operates on blocks of data."", ""Encrypt"")"
"multiple blocks from a large file, you call the update() once for each block of data, and finish with a call to doFinal() with the last data block.",NULL
"The reason a call to doFinal() is needed for the last block of data is, that some encryption algorithms need to pad the the data to fit a certain cipher block size (e.g.","(""doFinal"", ""doFinal() is a method that is used in the context of encryption algorithms."", ""encryption algorithms"")"
"Hence the calls to update() for intermediate blocks of data, and the call to doFinal() for the last block of data.",NULL
"When decrypting multiple blocks of data you also call the Cipher update() method for intermediate data blocks, and the doFinal() method for the last block.","(""Cipher"", ""The update method is called on the Cipher class to process intermediate data blocks during decryption."", ""update"")"
The Java Cipher class encryption and decryption methods can encrypt or decrypt part of the data stored in a byte array.,"(""Cipher"", ""The Cipher class contains the encryption method for data processing."", ""encryption""); (""Cipher"", ""The Cipher class contains the decryption method for data processing."", ""decryption""); (""encryption"", ""The encryption method operates on data stored in a byte array."", ""byte array"")"
You simply pass an offset and length to the update() and / or doFinal() method.,NULL
You can encrypt or decrypt data into an existing byte array by passing the destination byte array as parameter to the update() and / or doFinal() method.,"(""update"", ""The update method operates on the destination byte array by taking it as a parameter."", ""byte array"")"
If you want to set a different offset for the dest byte array there is a version of update() and doFinal() which takes an offset parameter extra.,NULL
Here is an example of calling the doFinal() method with an offset into the dest array:,NULL
"When you call the doFinal() method on a Cipher instance, the Cipher instance is returned to the state it had just after initialization.",NULL
Notice the call to update() and then doFinal() for these two blocks of data.,NULL
This is done with the doFinal() call with the third data block.,NULL
After this doFinal() call you can encrypt yet another block of data with the same Java Cipher instance.,NULL
JCA is structured around some central general purpose classes and interfaces.,NULL
"Thus, you may use a Cipher class to encrypt and decrypt some data, but the concrete cipher implementation (encryption algorithm) depends on the concrete provider used.","(""Cipher"", ""The Cipher class is used to perform encryption and decryption, which involves the encryption algorithm method."", ""encryption algorithm"")"
The most commonly used of these classes are covered throughout the rest of this Java Cryptography tutorial.,NULL
The Provider (java.security.Provider) class is a central class in the Java cryptography API.,NULL
"The Cipher class is explained in more detail in the text on the Java Cipher class, but I will give a brief introduction to the Cipher class in the following sections.",NULL
"The Cipher.getInstance(...) method take a String identifying which encryption algorithm to use, as well as a few other configurations of the algorithm.","(""getInstance"", ""getInstance is a method of the Cipher class that identifies which encryption algorithm to use."", ""Cipher""); (""getInstance"", ""getInstance method takes a String as an argument to identify the encryption algorithm."", ""String"")"
"To initialize a Cipher instance to decrypt data you have to use the Cipher.DECRYPT_MODE, like this:",NULL
You do so by calling the Cipher update() or doFinal() methods.,"(""Cipher"", ""The update() method is a method of the Cipher class."", ""update()"")"
The update() method is used if you are encrypting or decrypting part of a bigger chunk of data.,NULL
"The doFinal() method is called when you are encrypting the last part of the big chunk of data, or if the block you pass to doFinal() represents the complete data block to encrypt.",NULL
Here is an example of encrypting some data with the doFinal() method,NULL
To decrypt data you would have passed cipher text (encrypted data) into the doFinal() or doUpdate() method instead.,"(""doFinal"", ""The doFinal method is used to process the cipher text for decryption."", ""cipher text"")"
"The example in the previous section about the Cipher class used a very simple, hardcoded key.",NULL
You can use the Java KeyGenerator class to generate more random encryption keys.,NULL
"The resulting SecretKey instance can be passed to the Cipher.init() method, like this:","(""SecretKey"", ""The SecretKey instance is passed to the init method of the Cipher class."", ""init"")"
To generate an asymmetric key pair you can use the KeyPairGenerator (java.security.KeyPairGenerator).,NULL
The KeyStore class is quite advanced so it is described in more detail in its own Java KeyStore Tutorial.,NULL
You can use the Java MessageDigest (java.security.MessageDigest) to calculate message digests.,NULL
In order to calculate a message digest of some data you call the update() or digest() method.,NULL
"The update() method can be called multiple times, and the message digest is updated internally.",NULL
"When you have passed all the data you want to include in the message digest, you call digest() and get the resulting message digest data out.",NULL
Here is an example of calling update() several times followed by a digest() call:,NULL
You can also call digest() a single time passing all the data to calculate the message digest from.,NULL
The Java Mac class is used to create a MAC from a message.,NULL
"The Mac class is described in more detail in the Java Mac tutorial, but below is a short introduction.",NULL
"You create a Java Mac instance by calling the Mac.getInstance() method, passing as parameter the name of the algorithm to use.","(""Mac"", ""The getInstance method is called on the Mac class to create a Java Mac instance."", ""getInstance"")"
Once the Mac instance is initialized you can calculate a MAC from data by calling the update() and doFinal() method.,"(""Mac Instance"", ""The update method is called to calculate a MAC from data after the Mac instance is initialized."", ""update"")"
"If you have all the data to calculate the MAC for, you can call the doFinal() method immediately.",NULL
"If you only have the access to the data in separate blocks, call update() multiple times with the data, and finish off with a call to doFinal().",NULL
You do so by calling the initSign(...) method passing the private key to use to sign the data.,NULL
You do so by calling update() passing the data to sign as parameter.,NULL
You can call the update() method several times with more data to include when creating the signature.,NULL
When all the data has been passed to the update() method you call the sign() method to obtain the digital signature.,NULL
This is done by calling the initVerify(...) method passing as parameter the public key to use to verify the signature.,NULL
"Once initialized into verification mode, you call the update() method with the data the signature is signing, and finish with a call to verify() which returns true or false depending on whether the signature could be verified or not.",NULL
Here is a full example of both creating and verifying a digital signature with the Signature class:,NULL
The Java KeyGenerator class (javax.crypto.KeyGenerator) is used to generate symmetric encryption keys.,NULL
Before you can use the Java KeyGenerator class you must create a KeyGenerator instance.,NULL
You create a KeyGenerator instance by calling the static method getInstance() passing as parameter the name of the encryption algorithm to create a key for.,"(""getInstance"", ""getInstance is a static method used to create an instance of KeyGenerator."", ""KeyGenerator"")"
Initializing a KeyGenerator instance is done by calling its init() method.,NULL
"The KeyGenerator init() method takes two parameters: The bit size of the keys to generate, and a SecureRandom that is used during key generation.","(""init"", ""init is a method of the KeyGenerator class."", ""KeyGenerator"")"
Generating a key is done by calling the KeyGenerator generateKey() method.,NULL
You can access the PublicKey of a KeyPair by calling its getPublic() method.,"(""KeyPair"", ""KeyPair contains a PublicKey."", ""PublicKey"")"
You can access the PrivateKey of a KeyPair by calling the getPrivate() method.,"(""getPrivate"", ""The getPrivate() method is used to access the PrivateKey of a KeyPair."", ""KeyPair"")"
The Java KeyPairGenerator class (java.security.KeyPairGenerator) is used to generate asymmetric encryption / decryption key pairs.,NULL
Creating a KeyPairGenerator instance is done by calling the method getInstance() method.,NULL
The getInstance() method takes the name of the encryption algorithm to generate the key pair for.,NULL
To generate a KeyPair with a KeyPairGenerator you call the generateKeyPair() method.,"(""KeyPairGenerator"", ""KeyPairGenerator contains the method to generate a KeyPair."", ""generateKeyPair()"")"
This makes the KeyStore class a useful mechanism to handle encryption keys securely.,NULL
You can create a Java KeyStore instance by calling its getInstance() method.,NULL
It is also possible to create other types of KeyStore instance by passing a different parameter to the getInstance() method.,NULL
That is why the KeyStore class assumes that you must read its data in before you can use it.,NULL
Loading the KeyStore data from a file or other storage is done by calling the KeyStore load() method.,NULL
This example loads the KeyStore file located in the keystore.ks file.,NULL
You can get the keys of a Java KeyStore instance via its getEntry() method.,NULL
"Thus, to access a key you must pass the key alias and password to the getEntry() method.","(""getEntry"", ""The getEntry() method requires the key alias as an input parameter."", ""key alias"")"
"If you know that the key entry you want to access is a private key, you can cast the KeyStore.Entry instance to a KeyStore.PrivateKeyEntry.","(""KeyStore"", ""KeyStore.Entry is an instance of the KeyStore class."", ""Entry"")"
"After casting to a KeyStore.PrivateKeyEntry you can access the private key, certificate and certificate chain via these methods:","(""KeyStore"", ""KeyStore contains PrivateKeyEntry as a type of entry."", ""PrivateKeyEntry""); (""PrivateKeyEntry"", ""PrivateKeyEntry provides access to the private key."", ""private key""); (""PrivateKeyEntry"", ""PrivateKeyEntry provides access to the certificate."", ""certificate"")"
"Sometimes you may want to store a KeyStore to some storage (disk, database etc.)",NULL
"To execute it, open a command line (cmd, console, shell etc.).","(""Command Line"", ""Cmd is a method used to execute commands in the Command Line."", ""Cmd""); (""Command Line"", ""Console is a type of Command Line interface."", ""Console"")"
This Keytool -delete command will remove the KeyStore entry with the alias testkey from the KeyStore stored in the file keystore.jks .,"(""Keytool"", ""Keytool is a command associated with the Keytool class that performs the delete operation."", ""delete""); (""delete"", ""The delete method is used to remove an entry from the KeyStore."", ""KeyStore""); (""testkey"", ""testkey is the alias of the KeyStore entry being removed."", ""KeyStore"")"
"Once generated, the certificate request should be sent to the CA you want to create a certificate for you (e.g.",NULL
"This command will generate a certificate request for the key stored with alias testkey in the keystore file keystore.jks, and write the certificate request into the file named certreq.certreq .","(""CertificateRequest"", ""The CertificateRequest method generates a request for the key associated with the testkey alias."", ""testkey""); (""CertificateRequest"", ""The CertificateRequest method uses the keystore.jks file to store the key."", ""keystore.jks"")"
The Java Mac (javax.crypto.Mac class can create a Message Authentication Code (MAC) from binary data.,"(""Java Mac"", ""Java Mac is a class that includes the javax.crypto.Mac class."", ""javax.crypto.Mac""); (""javax.crypto.Mac"", ""javax.crypto.Mac class can create a Message Authentication Code (MAC)."", ""Message Authentication Code"")"
Before you can use the Java Mac class you must create a Mac instance.,NULL
The String parameter passed to the Mac getInstance() method contains the name of the MAC algorithm to use.,"(""Mac"", ""The Mac class has a method called getInstance() that is used to retrieve an instance of the MAC algorithm."", ""getInstance()"")"
You initialize the Mac instance by calling its init() method passing as parameter the secret key to be used by the Mac instance.,NULL
To calculate a MAC value you call the Mac update() or doFinal() method.,"(""Mac"", ""The update method is called on the Mac class to calculate a MAC value."", ""update"")"
"If you only have a single block of data to calculate the MAC for, you can call doFinal() directly, like this:",NULL
"If you have multiple blocks of data to calculate the MAC for, e.g.",NULL
"if you are reading a file block by block, then you must call the update() method with each block, and finish with a call to doFinal().",NULL
The Java MessageDigest class represents a cryptographic hash function which can calculate a message digest from binary data.,NULL
This tutorial only explains how to use the Java Cryptography API representation of a message digest in the MessageDigest class.,NULL
To create a Java MessageDigest instance you call the static getInstance() method of the MessageDigest class.,NULL
The text parameter passed to the getInstance() method is the name of the concrete message digest algorithm to use.,NULL
"If you have a single block of data to calculate a message digest from, use the digest() method.",NULL
"If you have multiple blocks of data to include in the same message digest, call the update() method and finish off with a call to digest().",NULL
The Java Signature class (java.security.Signature) can create a digital signature for binary data.,NULL
Before you can use the Java Signature class you must create a Signature instance.,NULL
You create a Signature instance by calling the static getInstance() method.,NULL
The String passed as parameter to the getInstance() method is the name of the digital signature algorithm to use.,"(""getInstance"", ""The getInstance() method takes a String parameter that specifies the digital signature algorithm."", ""String"")"
"You create a digital signature by calling the update() method one or more times, finishing with a call to sign().",NULL
Therefore I have put together this little trail on Java's date and time classes.,"(""Java"", ""Java's date class is part of the Java programming language."", ""date""); (""Java"", ""Java's time class is part of the Java programming language."", ""time"")"
Hopefully that will help you get an overview of Java's date and time classes.,"(""Java"", ""Java is a programming language that includes date classes."", ""date""); (""Java"", ""Java is a programming language that includes time classes."", ""time"")"
I also hope it may clear up some of the confusion Sun has created with Java's many date and time classes.,NULL
"Actually, the Java date time API has been changed (cleaned up) in Java 8 with the introduction of a whole new set of classes.","(""Java Date Time API"", ""Java Date Time API was changed with the introduction of Java 8."", ""Java 8"")"
The new Java date time API is located in the Java package java.time which is part of the standard Java 8 class library.,"(""java.time"", ""java.time is a package within the Java package"", ""Java""); (""Java 8"", ""java.time is part of the Java 8 class library"", ""java.time"")"
You will see this new date and time representation in many of the classes in the new Java date time API.,NULL
The java.time package also contains a set of subpackages which contain more utilities etc.,NULL
"For instance the java.time.chrono contains classes to work with Japanese, Thai, Taiwanese and Islamic calendars.","(""java.time.chrono"", ""The package java.time.chrono contains classes to work with the Japanese calendar."", ""Japanese""); (""java.time.chrono"", ""The package java.time.chrono contains classes to work with the Thai calendar."", ""Thai""); (""java.time.chrono"", ""The package java.time.chrono contains classes to work with the Taiwanese calendar."", ""Taiwanese"")"
The java.time.format package contains classes used to parse and format dates from and to strings.,"(""java.time.format"", ""The java.time.format package contains classes used to parse and format dates and strings."", ""classes""); (""classes"", ""Classes are used to parse and format dates."", ""dates"")"
The core of the Java 8 date time API consists of the following classes:,NULL
Java 7 has the following date and time classes and methods.,NULL
"Each of these classes are also explained in their own pages, later.",NULL
If you need to do simple timing the System.currentTimeMillis() method will do just fine.,NULL
"If you just need an object to hold a date, for instance as a property in a simple domain model object, you can use the java.util.Date class.",NULL
"If you need to read and write the date and time to a database, use the java.sql.Date and java.sql.Timestamp classes.","(""Date"", ""Both Date and Timestamp are classes used for handling date and time in the java.sql package."", ""Timestamp""); (""Date"", ""Date is a class that belongs to the java.sql package."", ""sql"")"
"If you need to do date calculations like adding days or months to another date, or check what weekday (monday, tuesday etc.)","(""DateCalculations"", ""AddDays is a method used for performing date calculations."", ""AddDays""); (""DateCalculations"", ""AddMonths is a method used for performing date calculations."", ""AddMonths"")"
"a given date is, or convert dates and times between time zones, use the java.util.Calendar and java.util.GregorianCalendar classes.","(""Calendar"", ""Calendar is a class that belongs to the java.util package."", ""java.util"")"
The Java DateTimeFormatter class is used to parse and format dates represented with the classes in the Java 8 date time API.,"(""DateTimeFormatter"", ""DateTimeFormatter is part of the Java package."", ""Java"")"
The DateTimeFormatter is located in the java.time.format package so the fully qualified class name is java.time.format.DateTimeFormatter.,NULL
The DateTimeFormatter class contains a set of predefined (constant) instances which can parse and format dates from standard date formats.,NULL
You can read about them in the JavaDoc for the DateTimeFormatter class.,NULL
Once you have an instance of a DateTimeFormatter you can format a date using its format() method.,NULL
A Duration object (java.time.Duration) represents a period of time between two Instant objects.,NULL
The Duration class was added to the Java date time API from Java 8.,"(""Duration"", ""The Duration class is part of the Java date time API."", ""Java Date Time API"")"
Creating a Duration object is done using one of the Duration class factory methods.,NULL
Here is an example of how to create a Duration object using the between() method:,NULL
This is somewhat different from what we are used to with System.getCurrentTimeMillis() where a moment in time (or a period between two moments) is represented as a number of milliseconds.,NULL
The toNanos() is different from the getNano() in that the getNano() only returns the part of the Duration which is less than one second.,NULL
The toNanos() method returns the full time interval converted to nanoseconds.,NULL
You might be asking yourself if there is not a toSeconds() method.,NULL
You can obtain the seconds part of the Duration using the getSeconds() method as explained earlier.,NULL
The Duration class contains a set of methods you can use to perform calculations based on a Duration object.,"(""Duration"", ""The Duration class contains a set of methods that can be used with Duration objects."", ""methods"")"
The Instant class in the Java date time API (java.time.Instant) represents a specific moment on the time line.,NULL
"Time is measured using 86.400 seconds per day, moving forward from the origin.","(""Time"", ""Time is measured using seconds."", ""seconds""); (""seconds"", ""Seconds are a unit of measurement for time, which is measured per day."", ""day"")"
You create an Instant instance using one of the Instant class factory methods.,NULL
"For instance, to create an Instant which represents this exact moment of now, call Instant.now(), like this:",NULL
The Instant class also has several methods which can be used to make calculations relative to an Instant.,NULL
The LocalDate class in the Java 8 date time API represents a local date which is a date without time zone information.,NULL
"The LocalDate Java class is located in the java.time package, so its fully qualified class name is java.time.LocalDate.",NULL
Here is an example of creating a LocalDate using the now() method:,NULL
"The LocalDate's of() method creates a LocalDate instance representing a specific day of a specific month of a specific year, but without time zone information.",NULL
Notice how the getMonth() and getDayOfWeek() methods return an enum instead of an int.,"(""getMonth"", ""getMonth() method returns an enum"", ""enum"")"
From these enums you can obtain their information as int values by calling their getValue() methods.,NULL
You can perform a set of simple date calculations with the LocalDate class using one or more of the following methods:,NULL
The LocalDateTime class in the Java 8 date time API (java.time.LocalDateTime) represents a local date and time without any time zone information.,NULL
You could view the LocalDateTime as a combination of the LocalDate and LocalTime classes of the Java 8 date time API.,"(""LocalDateTime"", ""LocalDateTime is a combination of LocalDate and LocalTime classes."", ""LocalDate""); (""LocalDateTime"", ""LocalDateTime is a combination of LocalDate and LocalTime classes."", ""LocalTime""); (""LocalDate"", ""LocalDate is part of the Java 8 date time API."", ""Java 8 date time API"")"
Here is an example that shows how to create a LocalDateTime object via the now() method:,NULL
"The parameters to the of() method are year, month, day (of month), hours, minutes, seconds and nanoseconds.","(""of"", ""The of() method takes year as one of its parameters."", ""year""); (""of"", ""The of() method takes month as one of its parameters."", ""month""); (""of"", ""The of() method takes day as one of its parameters."", ""day""); (""of"", ""The of() method takes hours as one of its parameters."", ""hours""); (""of"", ""The of() method takes minutes as one of its parameters."", ""minutes""); (""of"", ""The of() method takes seconds as one of its parameters."", ""seconds"")"
Via the methods that return an enum you can get an int representation of the enum by calling the getValue() of the enum .,NULL
The LocalTime class in the Java 8 date time API represents a specific time of day without any time zone information.,NULL
"The LocalTime class is immutable, so all calculations on LocalTime objects return a new LocalTime instance.",NULL
"There are also other versions of the of() method that only takes hours and minutes, or hours, minutes and seconds as parameters.","(""of"", ""The of() method takes hours as a parameter."", ""hours""); (""of"", ""The of() method takes minutes as a parameter."", ""minutes"")"
The LocalTime class contains a set of methods that enable you to perform local time calculations.,NULL
The static method System.currentTimeMillis() returns the time since January 1st 1970 in milliseconds.,"(""System"", ""System is the class that contains the method currentTimeMillis."", ""currentTimeMillis"")"
"The returned long value can be used to initialize java.util.Date, java.sql.Date, java.sql.Timestamp and java.util.GregorianCalendar objects.","(""Date"", ""Date is part of the java.util package."", ""java.util""); (""Timestamp"", ""Timestamp is part of the java.sql package."", ""java.sql"")"
The granularity of the System.currentTimeMillis() method is larger than 1 millisecond.,NULL
Measuring time in Java is easiest to do with the System.currentTimeMillis() method.,NULL
The variable totalTime will now contain the total time it took to execute the callOperationToTime() method.,NULL
"Because System.currentTimeMillis() does not return the time that accurately, it is a good idea to execute the operation to measure more than once.",NULL
"Another good reason to repeat the operation to measure a lot of times is to allow the Java virtual machine to load the classes containing the code, JIT-compile it, and perhaps even optimize it.","(""Java Virtual Machine"", ""The Java Virtual Machine is responsible for loading classes and executing methods, including JIT compilation."", ""JIT-compile"")"
"The calculations listed earlier in this text are rather trivial yet tedious to do, and could be encapsulated in a Timer class.",NULL
The ZonedDateTime class in the Java 8 date time API represents a date and time with time zone information.,NULL
The first way is to call the now() method of the ZonedDateTime class.,NULL
Here is an example of creating a ZonedDateTime object using the now() method:,NULL
Another way to create a ZonedDateTime object is to use the of() method which can create a ZonedDateTime object from a concrete date and time.,NULL
Here is an example of creating a ZonedDateTime object using the of() method:,NULL
From the enums you can return an int representation of their value using their getValue() methods.,NULL
The ZonedDateTime class contains a set of methods used for date time calculations.,NULL
The time zones are represented by the ZoneId class as shown in the earlier example.,NULL
The parameter passed to the of() method is the ID of the time zone to create a ZoneId for.,NULL
"You can find the UTC offset for the desired time zone and create an ID matching it by combining ""UTC"" with the offset (e.g.","(""UTC Offset"", ""The UTC Offset is associated with a specific Time Zone."", ""Time Zone""); (""UTC Offset"", ""An ID is created by combining 'UTC' with the UTC Offset."", ""ID"")"
"If you need to set a date on a java.sql.PreparedStatement or get a date from a java.sql.ResultSet, you will interact with java.sql.Date.","(""PreparedStatement"", ""PreparedStatement can set a date using the Date class."", ""Date""); (""ResultSet"", ""ResultSet can get a date using the Date class."", ""Date""); (""PreparedStatement"", ""PreparedStatement is part of the java.sql package."", ""java.sql""); (""ResultSet"", ""ResultSet is part of the java.sql package."", ""java.sql"")"
"Actually, java.sql.Date extends java.util.Date, so anything you can do with a java.util.Date you can also do with a java.sql.Date.","(""java.sql.Date"", ""java.sql.Date extends java.util.Date, indicating an inheritance relationship."", ""java.util.Date"")"
"The biggest difference between java.sql.Date and java.util.Date is that the java.sql.Date only keeps the date, not the time, of the date it represents.",NULL
"So, for instance, if you create a java.sql.Date using the date and time 2009-12-24 23:20, then the time (23:20) would be cut off.",NULL
"If you need to keep the time, use a java.sql.Timestamp instead.",NULL
"If you need to set a date + time on a java.sql.PreparedStatement or get a date + time from a java.sql.ResultSet, you will interact with java.sql.Timestamp.","(""PreparedStatement"", ""PreparedStatement can be used to set a date + time using Timestamp."", ""Timestamp"")"
"Actually, java.sql.Timestamp extends java.util.Date, so anything you can do with a java.util.Date you can also do with a java.sql.Timestamp.","(""Timestamp"", ""Timestamp extends Date, indicating that Timestamp is a subclass of Date."", ""Date""); (""java.sql"", ""Timestamp is part of the java.sql package."", ""Timestamp"")"
"The biggest difference between java.sql.Date and java.sql.Timestamp is that the java.sql.Date only keeps the date, not the time, of the date it represents.",NULL
One difference in the java.sql.Timestamp from its superclass java.util.Date is its ability to hold the nanoseconds of a date too.,NULL
You can get and set the nanoseconds using the getNanos() and setNanos().,NULL
Java's java.util.Calendar class is used to do date and time arithmetic.,NULL
"Whenever you have something slightly more advanced than just representing a date and time, this is the class to use.",NULL
"Java only comes with a Gregorian calendar implementation, the java.util.GregorianCalendar class.",NULL
"The Calendar class has a couple of methods you can use to access the year, month, day, hour, minutes, seconds, milliseconds and time zone of a given date.","(""Calendar"", ""The Calendar class contains a method to access the year of a given date."", ""year""); (""Calendar"", ""The Calendar class contains a method to access the month of a given date."", ""month""); (""Calendar"", ""The Calendar class contains a method to access the day of a given date."", ""day""); (""Calendar"", ""The Calendar class contains a method to access the hour of a given date."", ""hour""); (""Calendar"", ""The Calendar class contains a method to access the minutes of a given date."", ""minutes""); (""Calendar"", ""The Calendar class contains a method to access the seconds of a given date."", ""seconds""); (""Calendar"", ""The Calendar class contains a method to access the milliseconds of a given date."", ""milliseconds"")"
The Calendar class has a corresponding set() method so you can set these fields too.,NULL
"The add() method is really handy when doing date arithmetics like adding or subtracting years, months, days, hours etc.",NULL
"To subtract from the fields call the add() method with negative values, like this:",NULL
There are a few minor traps in the Calendar class that you should be aware of to avoid unnecessary headaches.,NULL
The MONTH field of the Calendar class does not go from 1 to 12 like they do when we write dates otherwise.,NULL
"That means that 1 = sunday, 2 = monday, ..., 7 = saturday.",NULL
If you need to do heavy or complex date and time calculations it is a good idea to read the class documentation for java.util.Calendar in the official JavaDoc's.,NULL
The class documentation contains more detail about the specific behaviour of the class.,NULL
Today most of the methods in the class are deprecated in favor of the java.util.Calendar class.,"(""methods"", ""The methods are part of the class that is being deprecated in favor of the java.util.Calendar class."", ""Calendar"")"
You can still use the java.util.Date class to represent a date though.,NULL
"You can access the date and time contained in a java.util.Date instance using the getTime() method, like this:","(""Date"", ""getTime() is a method that operates on an instance of the Date class."", ""getTime"")"
"You can also create a java.util.Date from a time in milliseconds, like this:",NULL
You can compare java.util.Date instance because the class implements the java.lang.Comparable interface.,NULL
"The comparison follows the rules for the Comparable interface, meaning the compareTo() method returns:",NULL
"The Java TimeZone class is a class that represents time zones, and is helpful when doing calendar arithmetics across time zones.",NULL
The java.util.TimeZone class is used in conjunction with the java.util.Calendar class.,NULL
Note: In the Java 8 date time API the time zones are represented by the java.time.ZoneId class.,NULL
But you only need to use the ZoneId class if you are using the Java 8 date time classes (like the ZonedDateTime class).,"(""ZoneId"", ""Both are classes related to date and time in Java 8."", ""ZonedDateTime""); (""Java 8"", ""ZoneId is used in the context of Java 8 date time classes."", ""ZoneId"")"
If you use a Calendar (from the Java 7 and earlier date time API) you can still use the java.util.TimeZone class.,NULL
The first method (TimeZone.getDefault()) returns the default time zone for the system (computer) this program is running on.,"(""TimeZone"", ""TimeZone is the class that contains the method getDefault which returns the default time zone."", ""getDefault"")"
"The second method (TimeZone.getTimeZone(""Europe/Copenhagen"")) returns the TimeZone corresponding to the given time zone ID (in this example ""Europe/Copenhagen"").","(""getTimeZone"", ""getTimeZone is a method of the TimeZone class that retrieves a TimeZone object based on a given time zone ID."", ""TimeZone"")"
"The getOffset() method returns the offset in milliseconds for the given time zone to UTC, at the given time.",NULL
The Calendar class is capable of converting the date and time between time zones.,NULL
"Here is a list of the available time zone ids in the TimeZone class, printed as returned by TimeZone.getAvailableIDs().",NULL
"It is possible to both parse dates from strings, and format dates to strings, using Java's java.text.SimpleDateFormat class.",NULL
It is also possible to parse and format dates using the newer Java DateTimeFormatter which is able to parse and format dates from and to the newer date time classes added in Java 8.,"(""DateTimeFormatter"", ""DateTimeFormatter is a class in Java that formats and parses dates."", ""Java""); (""Java 8"", ""Java 8 introduced new date time classes."", ""date time classes"")"
"Even though both classes for parsing and formatting dates are covered in more detail in their own texts, I will show you a few examples of how to use them below.",NULL
Here is an example of how to format and parse a date using the SimpleDateFormat class.,NULL
The string passed as parameter to the SimpleDateFormat class is a pattern that tells how the instance is to parse and format dates.,NULL
"For a full list, see the official JavaDoc for the SimpleDateFormat class.",NULL
Another way to format dates is to use the DateTimeFormatter which works with the newer date time classes added in Java 8.,NULL
In the example above we use the DateTimeFormatter.BASIC_ISO_DATE instance which is configured to parse and format dates using the ISO date time format.,NULL
"Exceptions are regular Java classes that extends java.lang.Exception, or any of the other built-in exception classes.","(""Exceptions"", ""Exceptions is a regular Java class that extends java.lang.Exception."", ""java.lang.Exception"")"
"If a method declares that it throws an exception A, then it is also legal to throw subclasses of A.","(""Method"", ""The method is related to the Exception class because it declares that it throws an exception of type A."", ""Exception"")"
"In the example above the ""System.out.println(result);"" statement will not get executed if an exception is thrown fromt the divide method.",NULL
"In the example above the ""System.out.println(""Division attempt done"");"" statement will always get executed.",NULL
Here is how the callDivide() method would look in that case.,NULL
"Thus the ""System.out.println(result);"" method will not get executed if an exception is thrown from the divide method.",NULL
"If the reader.read() method call throws an IOException, the following System.out.println((char) i ); is not executed.","(""Reader"", ""The reader.read() method call can throw an IOException."", ""IOException""); (""System"", ""System.out.println is a method that outputs to the console."", ""println"")"
"Neither is the last reader.close() or the System.out.println(""--- File End ---""); statements.","(""Reader"", ""Reader is a class that may be used in conjunction with System for input/output operations."", ""System""); (""System"", ""System is a class that contains the out method for output operations."", ""out"")"
Instead the program skips directly to the catch(IOException e){ ... } catch clause.,NULL
"If an exception is thrown from the reader.read() method then program execution is halted, and the exception is passed up the call stack to the method that called openFile().",NULL
"If the calling method also just throws the method on, the calling method is also interrupted at the openFile() method call, and the exception passed on up the call stack.",NULL
That is why the previous example had the reader.close() method call in the finally block wrapped in a try-catch block:,"(""reader"", ""The close method is called on the reader class instance."", ""close""); (""close"", ""The close method call is wrapped in the finally block."", ""finally"")"
"That way the System.out.println(""--- File End ---""); method call will always be executed.",NULL
Notice how the two exception class names in the first catch block are separated by the pipe character |.,NULL
The pipe character between exception class names is how you declare multiple exceptions to be caught by the same catch clause.,NULL
If storeDataFromUrl() wants to call readDataFromUrl() it has only two choices.,NULL
Notice how the readDataFromUrl() method no longer declares that it throws BadUrlException.,NULL
"The storeDataFromUrl() method can still choose to catch the exception but it no longer has to, and it no longer has to declare that it propagates the exception.",NULL
As you can see the readNumberFromUrl() needs to declare throwing both the BadUrlException and the BadNumberException that are thrown from the readDataFromUrl() and converData() methods.,"(""readNumberFromUrl"", ""The method readNumberFromUrl() needs to declare throwing BadUrlException."", ""BadUrlException""); (""readNumberFromUrl"", ""The method readNumberFromUrl() needs to declare throwing BadNumberException."", ""BadNumberException""); (""readDataFromUrl"", ""BadUrlException is thrown from the method readDataFromUrl()."", ""BadUrlException""); (""readDataFromUrl"", ""BadNumberException is thrown from the method readDataFromUrl()."", ""BadNumberException""); (""converData"", ""BadUrlException is thrown from the method converData()."", ""BadUrlException"")"
Imagine how many exceptions would need to be declared at the top level methods of an application with thousands of classes.,NULL
As you can see the readNumberFromUrl() method now only declares throwing ApplicationException.,NULL
Notice how the readNumberFromUrl() method does not declare throwing the ApplicationException even if it throws it.,NULL
All exceptions thrown in the application must be a subclass of the base exception.,NULL
As you know a method throwing Exception may also throw any subclass of Exception.,NULL
They are subclasses of the ApplicationException so they will get propagated up the call stack.,NULL
Argument 5 (Pro Unchecked Exceptions) Checked exceptions declared on methods become part of a the class or interface contract.,NULL
The only requirement is that the new exceptions thrown are subclasses of the base exception.,NULL
Anders Hejlsberg on checked vs. unchecked exceptions http://www.artima.com/intv/handcuffs.html James Gosling on checked exceptions http://www.artima.com/intv/solid.html Bill Venners on Exceptions http://www.artima.com/interfacedesign/exceptions.html Bruce Eckel on checked exceptions http://www.artima.com/intv/typingP.html Designing with Exceptions (Bill Venners - www.artima.com) http://www.artima.com/designtechniques/desexcept.html Effective Java (Joshua Bloch - Addison Wesley 2001) Daniel Pietraru - in favor of checked exceptions Exceptional Java - Checked exceptions are priceless茂驴�?For everything else there is the RuntimeException,"(""Anders Hejlsberg"", ""Anders Hejlsberg is associated with the topic of checked exceptions."", ""checked exceptions""); (""James Gosling"", ""James Gosling is associated with the topic of checked exceptions."", ""checked exceptions""); (""Bill Venners"", ""Bill Venners is associated with the topic of Exceptions."", ""Exceptions""); (""Bruce Eckel"", ""Bruce Eckel is associated with the topic of checked exceptions."", ""checked exceptions""); (""Designing with Exceptions"", ""Designing with Exceptions is authored by Bill Venners."", ""Bill Venners""); (""Effective Java"", ""Effective Java is authored by Joshua Bloch."", ""Joshua Bloch""); (""Daniel Pietraru"", ""Daniel Pietraru is in favor of checked exceptions."", ""checked exceptions"")"
Checked exceptions declared on methods become part of a the class or interface contract.,"(""CheckedExceptions"", ""Checked exceptions are declared on methods, indicating a relationship between the exceptions and the methods."", ""Methods""); (""Methods"", ""Methods become part of the class contract when checked exceptions are declared."", ""Class"")"
As you can see the method1() throws an EnrichableException which is a superclass for enrichable exceptions.,NULL
"Notice how method2() calls the addInfo() method on the caught EnrichableException, and rethrow it afterwards.","(""method2"", ""method2() calls the addInfo() method on the caught EnrichableException"", ""addInfo""); (""addInfo"", ""addInfo() method is called on the caught EnrichableException"", ""EnrichableException"")"
"Notice how method1() adds the code ""ERROR1"" to the thrown EnrichableException to uniquely identify that error cause.",NULL
But notice too that method1() is called from both method2() and method3().,"(""method1"", ""method1() is called from method2()"", ""method2"")"
"Though the error may seem the same to method1() no matter which of method2() and method3() that called it, this may important to know for the developer investigating the error.","(""method1"", ""method1() is called by method2()"", ""method2"")"
Here is an example where the addInfo() method has been changed to accommodate this:,NULL
Two new parameters have been added to the addInfo() method and the constructor of the EnrichableException.,NULL
An error identification for an exception thrown by method1() when called from method2() will now look like this:,NULL
When method1() is called from method3() the error identification will look like this:,NULL
As you can see it is now possible to distinguish an exception thrown from method1() via method2() from the same exception thrown from method1() via method3().,"(""method1"", ""method2 is used to distinguish an exception thrown from method1()"", ""method2"")"
"Here is an example where method1() catches a non-enrichable exception and wraps it in an enrichable exception, and throws the enrichable exception:","(""method1"", ""method1() catches and wraps the non-enrichable exception in an enrichable exception"", ""enrichable exception"")"
Exceptions caught in the program will be passed to the handleException() which will decide what concrete exception to throw instead.,NULL
If the EnrichableException is unchecked it is not necessary to declare it in the handleException() method.,NULL
You may need to change the class definition to suit your own needs.,NULL
"If an exception is thrown from within the try block, and another exception is thrown from the input.close() call in the finally block, both exceptions are preserved in the MyException instance, and propagated up the call stack.",NULL
"RuntimeExceptions thrown from the try-block are not preserved, if the input.close() call also throws an exception.","(""RuntimeExceptions"", ""RuntimeExceptions are thrown from the try-block."", ""try-block"")"
Notice how the process() method calls the doProcess() method inside the try-catch block.,NULL
"You will use the template by subclassing it, and overriding the doProcess() method.",NULL
"This example creates an anonymous subclass of the InputStreamProcessingTemplate class, instantiates an instance of the subclass, and calls its process() method.",NULL
"You will typically also get more help from your IDE's code completion when writing it, because the IDE will recognize both the doProcess() and process() methods.",NULL
Instead of subclassing the InputStreamProcessingTempate you could rewrite it to take an instance of an InputStreamProcessor interface.,NULL
"This is the InputStreamProcessor, which is called from inside the try block (processor.process(input)).","(""InputStreamProcessor"", ""The InputStreamProcessor class calls the process method."", ""process"")"
"It doesn't look much different from the previous usage, except the call to the InputStreamProcessingTemplate.process() method is now closer to the top of the code.",NULL
Notice how the call to the template's process() method is now a static method call.,NULL
"The advantage of exception hierarchies is that if you decide to catch (using try-catch) a certain exception in the hierarchy, then you will automatically also catch all subclasses of that exception too.",NULL
"In the example with FileNotFoundException, if you catch IOException which is the superclass of FileNotFoundException, you will also catch FileNotFoundException.",NULL
"But, multiple catch blocks can also be used in the case where all the exceptions thrown inside the try-block are the same type or subclasses of that type.",NULL
"The fact that FileNotFoundException is a subclass of IOException gives us the choice of either treating all IOExceptions the same, or catch some of IOExceptions subclasses individually, as is done in the code example above.",NULL
"If the catch(FileNotFoundException e) block is removed any FileNotFoundException will be caught by the catch(IOException e) block, since FileNotFoundException is a subclass of IOException.",NULL
"If a method can throw either a certain exception A, or any subclasses of A (Asub), then it is enough to declare in the method declaration that the method throws A.","(""method"", ""The method can throw the exception A."", ""A"")"
It is then allowed to throw subclasses of A from the method too.,NULL
"You are allowed to declare the subclasses in the throws clause of the method, even if you don't really need to.",NULL
"As long as the superclass of any declared exception is also declared thrown, it doesn't have any effect on the code to include the throwing of the subclass.","(""Superclass"", ""The superclass of the declared exception is related to the exception itself as it defines the hierarchy of exceptions."", ""Exception"")"
"It is still possible to handle the two exceptions with each their own catch-block as shown earlier, even if only the superclass is declared thrown.","(""Exception"", ""An Exception can be handled using a catch-block."", ""catch-block"")"
"If you need more granularity on the exceptions thrown, for instance because you think the exceptions may be handled differently, then add new exceptions as subclasses of your API or application base exception.","(""API"", ""The API can have new exceptions added as subclasses of the Application Base Exception."", ""Application Base Exception"")"
"In Mr. Persister we could add a ConnectionOpenException, QueryException, UpdateException, CommitException, and ConnectionCloseException as subclasses of PersistenceException.","(""ConnectionOpenException"", ""ConnectionOpenException is a subclass of PersistenceException."", ""PersistenceException""); (""QueryException"", ""QueryException is a subclass of PersistenceException."", ""PersistenceException""); (""UpdateException"", ""UpdateException is a subclass of PersistenceException."", ""PersistenceException""); (""CommitException"", ""CommitException is a subclass of PersistenceException."", ""PersistenceException"")"
Summary In this text we have seen that exception hierarchies can be created by subclassing exception classes.,NULL
"It is a good idea to create a base exception for your API or application, and have all other exceptions subclass this base exception.",NULL
Individual subclasses makes it possible (but not obligatory) to catch and handle these individual exceptions differently.,NULL
In this text we have seen that exception hierarchies can be created by subclassing exception classes.,NULL
Exception wrapping is a standard feature in Java since JDK 1.4.,NULL
They also have a getCause() method that will return the wrapped exception.,NULL
"When a request is successfully processed, you can write the whole execution context object to a log file, as a single, coherent structure (e.g.","(""Request"", ""A request is processed to create an execution context object."", ""ExecutionContext"")"
"It's implemented as a single class called ExecutionContext, which keeps all calls to it internally in a list.",NULL
Notice how each method ( level1() to level3() ) calls the ExecutionContext.,"(""level1()"", ""level1() calls ExecutionContext"", ""ExecutionContext""); (""level2()"", ""level2() calls ExecutionContext"", ""ExecutionContext"")"
"Therefore, I have developed an ExecutionContextTree class, which can contain this information.",NULL
"The pre() call creates a new node, and attaches it to the parent node (if any).","(""pre"", ""The pre() method creates a new node."", ""node"")"
"Any calls to pre() after this one, will result in new nodes being attached to the newly created node.",NULL
The post() call removes the node as the current parent in the execution tree.,NULL
The next call to pre() will now attach a node to the parent of the node just removed as parent node.,"(""pre"", ""The method pre() is called to attach a node to the parent node."", ""node"")"
"As you can see, the pre() and post() calls are very often insert at the start and end of a method call.","(""pre"", ""pre() is often called at the start of a method call"", ""method call"")"
"If the input.close() call fails, and an IOException is thrown, then it is caught, wrapped and rethrown.","(""Input"", ""The method input.close() is related to the IOException as it may throw this exception if it fails."", ""IOException"")"
All classes implementing this interface can be used inside the try-with-resources construct.,NULL
The Java try-with-resources construct does not just work with Java's built-in classes.,NULL
"You can also implement the java.lang.AutoCloseable interface in your own classes, and use them with the try-with-resources construct.","(""AutoCloseable"", ""AutoCloseable is part of the java.lang package."", ""java.lang"")"
Any class that implements this interface can be used with the Java try-with-resources construct.,NULL
Here is the output printed to System.out when the method myAutoClosable() is called:,NULL
"If an exception is thrown both from inside the try-with-resources block, and when a resource is closed (when close() is called), the exception thrown inside the try block will be propagated up the call stack.","(""Exception"", ""An exception is thrown from inside the try-with-resources block."", ""TryWithResources"")"
"In that case, the exception thrown when attempted closed will be propagated up the call stack to the main() method where the try-catch block will catch it.",NULL
"In that case, the Throwable array returned from e.getSuppessed() will be an empty array (size of 0).",NULL
"In case the parameter to resourceOne.doOp() was changed to true also, the doOp() method would throw an exception.","(""resourceOne"", ""resourceOne is the class that contains the doOp method."", ""doOp"")"
"In that case, it is this exception that is propagated up the call stack to the main() method.",NULL
The exception thrown when attempting to close the resource would be available inside the Throwable array returned by e.getSuppressed().,NULL
"However, in the example above I have forced both resources to throw an exception when attempted closed, and the first resource to throw an exception when used (when doOp() is called).",NULL
The two exceptions thrown when attempting to close the resources are available in the Throwable array returned by e.getSuppressed().,NULL
"In case an exception is thrown when attempting to close one of the resources, these exceptions will be available from the exception's getSuppressed() method inside the catch block.","(""Exception"", ""The getSuppressed method is a method of the Exception class that retrieves suppressed exceptions."", ""getSuppressed"")"
"In the example above, the AutoClosableResource is configured to throw an exception both when doOp() is called, and when it is attempted closed (via close()).","(""AutoClosableResource"", ""The method doOp() is called on the class AutoClosableResource."", ""doOp"")"
"The exception thrown from doOp() is caught in the catch block, its getSuppressed() method returns an array with the exception thrown when the resource was attempted closed.","(""doOp"", ""doOp() throws an exception when the resource is attempted to be closed."", ""exception""); (""getSuppressed"", ""getSuppressed() returns the exception that was thrown."", ""exception"")"
"The getSuppressed() method of that exception will return an empty array, since no exceptions where suppressed.","(""getSuppressed"", ""The getSuppressed() method is associated with the exception class as it operates on instances of this class."", ""exception"")"
The Throwable class has a method named addSuppressed() which takes a Throwable object as parameter.,NULL
"Using the addSuppressed() method it is possible to add suppressed exceptions to another exception, in case you need that.",NULL
"To understand why, look at the following method which reads a file and prints it to the System.out:",NULL
"The InputStream's close() method may throw an exception too, if closing it fails.",NULL
You will have to code your own exception class in order to make exception enrichment possible.,NULL
"However, the ExceptionHandler can throw all the unchecked exceptions it wants (RuntimeException and subclasses of it).",NULL
"In contrast, inside a DAO class you will most likely not be able to interact with the user to correct the error.",NULL
In this example the validate() method throws an exception as soon as an validation error is found.,"(""validate"", ""The validate() method is responsible for throwing an exception when a validation error occurs."", ""exception"")"
"Notice how it is not necessary to cast the object obtained from the List.get() method call, as is normally necessary.",NULL
Notice how it is not necessary to cast the object returned from the iterator.next() next call.,NULL
"Adding and getting elements to a generic Map is done using the put() and get() methods, just like you have always done:","(""Map"", ""The put() method is used to add elements to the Map class."", ""put()"")"
Also notice how it is not necessary to cast the String instance returned by the get() method.,NULL
Most often you iterate the key Set and access the values for each key via the Map.get() method.,NULL
"Adding elements to a generic Set is done using the add() method, just like you have always done:",NULL
Generics is not restricted to the predefined classes in the Java API's.,NULL
The <T> is a type token that signals that this class can have a type set when instantiated.,NULL
Notice how it is not necessary to cast the object returned from the factory.createInstance() method.,"(""factory"", ""The createInstance method is a function of the factory class that returns an object."", ""createInstance"")"
Notice how we can call the addAndReturn() method using both String's and Integer's and their corresponding collections.,"(""addAndReturn"", ""The addAndReturn() method can be called using String's collection."", ""String""); (""addAndReturn"", ""The addAndReturn() method can be called using Integer's collection."", ""Integer""); (""String"", ""String is a type that can be used with collections."", ""collections"")"
"Java Generic's wildcards is a mechanism in Java Generics aimed at making it possible to cast a collection of a certain class, e.g A, to a collection of a subclass or superclass of A.","(""wildcards"", ""wildcards is a mechanism in Java Generics aimed at making it possible to cast a collection of a certain class."", ""Java Generics"")"
"In listA you can insert objects that are either instances of A, or subclasses of A (B and C).","(""listA"", ""listA can contain instances or subclasses of A, which includes B and C."", ""A""); (""B"", ""B is a subclass of A."", ""A"")"
When you then try to take objects out of listB you could risk to get non-B objects out (e.g.,NULL
Thus you could insert non-B objects into a list declared to hold B (or B subclass) instances.,NULL
"Imagine you have a method that processes the elements of a List, e.g.",NULL
The processElements() method can now be called with any generic List as parameter.,NULL
"When you know that the instances in the collection are of instances of A or subclasses of A, it is safe to read the instances of the collection and cast them to A instances.",NULL
"You can now call the processElements() method with either a List<A>, List<B> or List<C>.","(""processElements"", ""The processElements method can be called with a List<A> as an argument."", ""List<A>""); (""processElements"", ""The processElements method can be called with a List<B> as an argument."", ""List<B>"")"
"super A> means that the list is typed to either the A class, or a superclass of A.",NULL
"When you know that the list is typed to either A, or a superclass of A, it is safe to insert instances of A or subclasses of A (e.g.",NULL
"All of the elements inserted here are either A instances, or instances of A's superclass.",NULL
"Since both B and C extend A, if A had a superclass, B and C would also be instances of that superclass.","(""B"", ""B extends A, indicating that B is a subclass of A."", ""A""); (""C"", ""C extends A, indicating that C is a subclass of A."", ""A"")"
"You can now call insertElements() with either a List<A>, or a List typed to a superclass of A.","(""insertElements"", ""insertElements() is a method that can be called with a List type as an argument."", ""List"")"
"The insertElements() method cannot read from the list though, except if it casts the read objects to Object.",NULL
"The elements already present in the list when insertElements() is called could be of any type that is either an A or superclass of A, but it is not possible to know exactly which class it is.","(""insertElements"", ""insertElements() is a method that can handle elements of type A or its superclasses"", ""A"")"
"However, since any class eventually subclass Object you can read objects from the list if you cast them to Object.",NULL
Here are a few examples of calls to the getInstance() method:,NULL
As you can see the return type changes depending on what class object you pass in as parameter to the method.,NULL
It is possible to use your own collection type classes with the new for-loop.,NULL
And here is the corresponding implementation skeleton of the MyIterator class:,NULL
Generics add a way to specify concrete types to general purpose classes and methods that operated on Object before.,"(""Generics"", ""Generics provide a way to specify types for general purpose classes."", ""classes""); (""Generics"", ""Generics allow methods to operate on specified types instead of just Object."", ""methods"")"
"Note: Java generics can be used with other classes than the collection classes, but it is easiest to show the basics of Java generics using collections.",NULL
"When you just write a diamond operator as generic type, the Java compiler will assume that the class instantiated is to have the same type as the variable it is assigned to.","(""Java"", ""The Java compiler is responsible for compiling Java code, which includes handling classes like Java."" "", ""compiler"")"
This for-loop is shorter than original while-loop where you would iterate the collections Iterator and call Iterator.next() to obtain the next instance.,"(""For-loop"", ""The for-loop is a shorter alternative to the original while-loop for iterating over collections."", ""While-loop""); (""Iterator"", ""The for-loop uses the Iterator to iterate through collections."", ""For-loop"")"
It is of course possible to use Generics for other classes than the Java collections.,NULL
"Using Java generics in your own classes is described in more detail in the tutorials about generic classes, generic methods and using class objects as type literals.","(""Java Generics"", ""Java generics are used in the context of generic classes."", ""Generic Classes""); (""Java Generics"", ""Java generics are also applicable to generic methods."", ""Generic Methods"")"
The java.text.DateFormat class is used to format dates as strings according to a specific Locale.,NULL
You create a DateFormat using the getDateInstance() and getTimeInstance() method of the DateFormat class.,"(""getDateInstance"", ""getDateInstance() is a method of the DateFormat class."", ""DateFormat"")"
The date format parameter can be chosen among the following constants in the DateFormat class:,NULL
"In order to format only time and not the date itself, you need a time instance of the DateFormat class.",NULL
The java.text.DecimalFormat class is used to format numbers using a formatting pattern you specify yourself.,NULL
This text explains how to use the DecimalFormat class to format different types of numbers.,NULL
You can change this pattern later using the applyPattern() or applyLocalizedPattern() method.,NULL
The applyPattern() method simply applies a new pattern to the DecimalFormat instance as if it were created with that pattern.,NULL
The applyLocalizedPattern() does the same as applyPattern() except it interpretes the characters in the pattern according to the Locale the DecimalFormat was created with.,"(""applyLocalizedPattern"", ""applyLocalizedPattern() does the same as applyPattern()"", ""applyPattern"")"
You format a number using the format() method of the DecimalFormat instance.,NULL
"For a full explanation of what these methods do, see the JavaDoc for the DecimalFormatSymbols class.",NULL
The DecimalFormat class has a method called setGroupingSize() which sets how many digits of the integer part to group.,NULL
"The java.text.BreakIterator class is used to find character, word and sentence boundaries across different languages.",NULL
You create an instance that can recognize one of the above boundaries using the corresponding factory method in the BreakIterator class.,NULL
"A character instance of the BreakIterator class finds character boundaries for user characters, not unicode characters.",NULL
"This example creates a BreakIterator targeted at the British language, and sets the text to find character breaks in using the setText() method.",NULL
"Again, here the first() and next() methods return the unicode index of the found word boundary.","(""first"", ""The first() method returns the unicode index of the found word boundary."", ""unicode index"")"
"Notice how the isWord() method uses the Character.isLetterOrDigit() method to determine if a character is a letter or digit, or something else (like semicolon, quote etc.).","(""isWord"", ""The isWord() method uses the Character class to access its isLetterOrDigit() method."", ""Character"")"
"The Character.isLetterOrDigit() checks according to the unicode characters if a character is a letter or digit - and thus not just in the english language, but also in other languages.","(""Character"", ""The method isLetterOrDigit() belongs to the class Character."", ""isLetterOrDigit"")"
Java has some methods in the java.lang.Character class that are useful in internationalization of Java applications.,"(""Character"", ""The methods are part of the Character class in Java."", ""methods"")"
"To safely check if a character is a letter, number or space character you need to use the methods in java.lang.Character to do so.","(""methods"", ""The methods are used to check if a character is a letter, number, or space character in the Character class."", ""Character"")"
The Character class also has a getType() method which returns the type of a certain character.,NULL
The returned type is an int which matches a set of predefined constants in the Character class.,NULL
Look in the JavaDoc for the Character class for more constants.,NULL
The Character class also has a method that enables you to determine if the value of a given int defines a character in unicode.,"(""Character"", ""The Character class has a method that enables you to determine if a value defines a character."", ""method"")"
"Thus, simply using the String.compareTo() method may not work for all languages.",NULL
"To sort a collection of strings according to the rules of a certain Locale, you use a java.text.Collator instance created for that specific Locale.",NULL
To compare two strings using the Collator instance you call the compare() method.,NULL
The compare() method returns an int with the same meaning as the String.compareTo() method:,NULL
A 0 means that the two strings have the same order - e.g.,NULL
There are more rules you can use with the RuleBasedCollator class.,NULL
You normalize a string using the static normalize() method of the java.text.Normalizer class.,"(""Normalizer"", ""The normalize() method is a static method of the Normalizer class."", ""normalize"")"
The first parameter to the normalize() method is the text to normalize.,NULL
You can use the String class to convert a byte array to a String instance.,"(""String"", ""The String class is used to convert a byte array to a String instance."", ""byte array"")"
You can convert the text of a String to another format using the getBytes() method.,NULL
The Reader and Writer classes are stream oriented classes that enable a Java application to read and write streams of characters.,"(""Reader"", ""Both Reader and Writer are classes that are stream oriented and enable reading and writing of character streams."", ""Writer""); (""Reader"", ""Reader is a class used within a Java application."", ""Java"")"
This is done using the second constructor paramter in the InputStreamReader class.,NULL
"Input is everything that your application receives from its users, either directly through the user interface, sent to it via service calls (e.g.","(""Input"", ""Input is received by the application from users."", ""application""); (""application"", ""The application interacts with users through the user interface."", ""user interface"")"
"The internationalization layer should convert from whatever character encoding the input comes in (ascii, UTF-8 etc.)","(""Internationalization Layer"", ""The internationalization layer is responsible for converting character encodings."", ""Character Encoding""); (""Character Encoding"", ""ASCII is a type of character encoding."", ""ASCII"")"
Java has a set of built-in classes that can help you handle internationalization of your application.,NULL
Each of these classes are covered in more detail in later texts in this trail.,NULL
In Java you can convert between time zones using the java.util.Calendar class.,NULL
"Please not, that the Calendar.getTimeInMillis() always returns the time in UTC, regardless of the time zone set on the Calendar instance.",NULL
"As you saw in the example, you get the time zone from the java.util.TimeZone class.",NULL
You can obtain a list of the available time zone ID's using the TimeZone.getAvailableIDs() .,NULL
"This examples obtains all the available time zone ID's, and then prints them to System.out.","(""TimeZone"", ""TimeZone is used to obtain time zone IDs which are printed to System.out."", ""System"")"
"I have described the java.util.TimeZone class in more detail in my Java Date Time tutorial, in the TimeZone class.",NULL
"This Java internationalization tutorial is ""work in progress"", so if you spot a a missing description of a feature etc., please be patient.",NULL
"The Java Locale class, java.util.Locale, is used to represent a ""geographical, political or cultural"" region to localize a given text, number, date or operation to.",NULL
The Locale class cannot do any internationalization or localization by itself.,"(""Locale"", ""The Locale class is mentioned in the context of internationalization, indicating a relationship between the class and the concept of internationalization."", ""internationalization"")"
"The Locale class complies with the BCP 47 (IETF BCP 47, ""Tags for Identifying Languages"") standard.",NULL
"The Locale class also has support for the LDML (UTS#35 ""Unicode Locale Data Markup Language"") standard, which is a BCP 47-compatible extension for locale data exchange.","(""Locale"", ""The Locale class supports the LDML standard, indicating a relationship between the class and the package for locale data exchange."", ""LDML"")"
"Language codes are case insensitive, but the Locale class always use lowercase versions of the language codes.",NULL
"Script codes are case insensitive, but the Locale class always uses a version with the first letter in uppercase, and the rest in lowercase.",NULL
"The country code is a 2 character code following the ISO 3166 standard, or a UN M.49 numeric area code.","(""Country Code"", ""The country code is defined by the ISO 3166 standard."", ""ISO 3166"")"
"The country code is case insensitive, but the Locale class uses an uppercase version of the country code.",NULL
See the JavaDoc for the Locale class for more detail about variant.,NULL
"For instance, what calendar to use when displaying dates (Gregorian, Arab, Japanese etc.).","(""Calendar"", ""Gregorian is a type of calendar used for displaying dates."", ""Gregorian""); (""Calendar"", ""Arab is a type of calendar used for displaying dates."", ""Arab"")"
See the JavaDoc for the Locale class for more detail about extensions.,NULL
Creating a java.util.Locale instance can be done in four different ways:,NULL
The java.util.Locale class contains a set of constants that represent the most commonly used languages in the world.,NULL
You can also create a java.util.Locale instance by using one of its constructors.,NULL
From Java 7 you can use the Locale.Builder class to build a Locale instance.,NULL
The factory method Locale.forLanguageTag() can also be used to create a Locale instance.,NULL
The ResourceBundle class is covered in more detail in the text about the ResourceBundle class.,NULL
"Finally, I may want to show how a given application works to a person who doesn't speak the language that my application is localized to (e.g.",NULL
"English or Danish), so I may want to temporarily change language to e.g.",NULL
The java.text.NumberFormat class is used to format numbers according to a specific Locale.,NULL
Formatting a number using a NumberFormatter is done using the format() method.,NULL
"Notice that numbers like 100.00 might be formatted without the decimals, as 100.",NULL
Formatting a number as a currency is still done using the format() method.,NULL
"You can also set the Currency object to use for formatting a number as a currency, using the setCurrency() method on the NumberFormat class.","(""setCurrency"", ""setCurrency() is a method that belongs to the NumberFormat class."", ""NumberFormat"")"
Formatting a number as a percentage is also done using the format() method.,NULL
You can set the rounding mode using the setRoundingMode() method of the NumberFormat class.,NULL
"Had the NumberFormat instance been created using a UK Locale instance, the number had been parsed to 10000, because the comma would have been interpreted as a integer separator (e.g.",NULL
"The Java ResourceBundle class, java.util.ResourceBundle, is used to store texts and components that are locale sensitive.",NULL
"A user's locale is represented by the Java Locale class, by the way.",NULL
This text takes a closer look at the ResourceBundle class and its subclasses.,NULL
The PropertyResourceBundle class stores localized texts in standard Java property files.,NULL
Then you pass that Locale instance to the ResourceBundle.getBundle() method along with the name of the resource bundle to load.,"(""Locale"", ""The Locale instance is passed to the getBundle method to load the resource bundle."", ""getBundle"")"
Finally you can access the localized values in the ResourceBundle via its different getString() and getObject() etc.,"(""ResourceBundle"", ""getString() is a method that retrieves localized values from the ResourceBundle."", ""getString"")"
"You are never actually creating a ResourceBundle instance, but an instance of one of its two subclasses.",NULL
"First the ResourceBundle class will look for a ListResourceBundle, and then for a PropertyResourceBundle.","(""ResourceBundle"", ""ResourceBundle class looks for ListResourceBundle as part of its functionality."", ""ListResourceBundle"")"
"It does so by matching the name of the requested resource bundle (first parameter in the getBundle() method) against the class names of a ListResourceBundle first, and if none found, against a property file resource bundle.","(""getBundle"", ""The getBundle() method is used to match the requested resource bundle against the class names of ListResourceBundle."", ""ListResourceBundle"")"
For this example to work you should put a standard Java property file named MyBundle.properties in a Java package named i18n.,NULL
"Make sure this property file is available on your class path when you run the above code, meaning the property file should be located among the classes of your application, and in the i18n package.","(""Property File"", ""The property file is required to be available on the class path of the application."", ""Application"")"
The name of a resource bundle is like a class name.,NULL
"Thus, i18n.MyBundle means a property file named MyBundle.properties in the package (directory) i18n.","(""MyBundle"", ""MyBundle is represented by the property file MyBundle.properties."", ""MyBundle.properties"")"
"In case no property file is available for the language (Locale) passed to the ResourceBundle.getBundle() method, and the system has no default Locale set (e.g.",NULL
You can also use a set of classes to contain your resources.,NULL
"Like with the property files, you create a set of classes with a bundle base name and language suffixes.",NULL
Here is an example implementation of the default bundle class file:,NULL
"You can also obtain a set of all keys contained in the ResourceBundle using the keySet() method, like this:",NULL
The java.text.SimpleDateFormat class is used to both parse and format dates according to a formatting pattern you specify yourself.,NULL
This text explains how to use the SimpleDateFormat class to format dates.,NULL
Once you have created a SimpleDateFormat instance you can format dates using its format() method.,NULL
The Date instance passed to the format() method is a java.util.Date instance.,"(""Date"", ""The Date instance is passed to the format() method."", ""format"")"
"The Java SimpleDateFormat class is also capable of formatting a Date object into a StringBuffer, instead of returning an individual String with the date formatted.","(""SimpleDateFormat"", ""The SimpleDateFormat class formats a Date object."", ""Date"")"
"The SimpleDateFormat class does this via a version of the format() method that takes the Date, StringBuffer and a FieldPosition instance as parameters.","(""SimpleDateFormat"", ""The SimpleDateFormat class uses the format() method to format dates."", ""format""); (""format"", ""The format() method takes a Date as a parameter."", ""Date""); (""format"", ""The format() method takes a StringBuffer as a parameter."", ""StringBuffer"")"
It seems the format() method appends the formatted String to the end of the StringBuffer no matter what the int value passed to the FieldPosition constructor is.,"(""format"", ""The format() method appends the formatted String to the end of the StringBuffer."", ""StringBuffer"")"
You can parse a String into a java.util.Date instance using the parse() method of the SimpleDateFormat instance.,"(""parse"", ""The parse() method is a method of the SimpleDateFormat class."", ""SimpleDateFormat"")"
"For instance, you can write either yy for a 2-character version of the year (e.g.",NULL
"12), or you can write yyyy for a 4-character version of the year (e.g.",NULL
"For more information about the patterns accepted, see the JavaDoc for the SimpleDateFormat class.",NULL
"The indices in this array must start from one, to be indexable by the Calendar.SUNDAY, Calendar.MONDAY etc.","(""Calendar"", ""SUNDAY is a method associated with the Calendar class."", ""SUNDAY"")"
See the JavaDoc for the java.text.DateFormatSymbols class for more details about these methods and symbols.,NULL
You can set the time zone of a SimpleDateFormat using its setTimeZone() method.,NULL
The setTimeZone() method takes an Java TimeZone instance (java.util.TimeZone) as parameter.,"(""setTimeZone"", ""setTimeZone() method takes a TimeZone instance as a parameter"", ""TimeZone"")"
"Of these ISO time zone formats, the Java SimpleDateFormat class only supports the second format (+hhmm), or the format ending with the Z character.",NULL
"This is to make the SimpleDateFormat class treat them as literal characters to be inserted, instead of trying to interpret them as representing some part of the date.",NULL
"The Java BufferedInputStream class, java.io.BufferedInputStream, provides transparent reading of chunks of bytes and buffering for a Java InputStream, including any subclasses of InputStream.","(""BufferedInputStream"", ""BufferedInputStream is a subclass of InputStream."", ""InputStream"")"
"The BufferedInputStream creates a byte array internally, and attempts to fill the array by calling the InputStream.read(byte[]) methods on the underlying InputStream.","(""BufferedInputStream"", ""BufferedInputStream uses InputStream to read data through its read method."", ""InputStream""); (""InputStream"", ""InputStream has a method called read that is used to read bytes."", ""read"")"
An interesting aspect to note about the BufferedInputStream is that is supports the mark() and reset() methods inherited from the InputStream.,"(""BufferedInputStream"", ""BufferedInputStream supports the mark() method inherited from InputStream."", ""mark""); (""BufferedInputStream"", ""BufferedInputStream supports the reset() method inherited from InputStream."", ""reset""); (""mark"", ""mark() method is inherited from InputStream."", ""InputStream"")"
"In general you can call the markSupported() method to find out if mark() and reset() are supported on a given InputStream or not, but the BufferedInputStream supports them.","(""BufferedInputStream"", ""BufferedInputStream is a class that supports the markSupported() method."", ""markSupported""); (""BufferedInputStream"", ""BufferedInputStream is a subclass of InputStream."", ""InputStream""); (""markSupported"", ""markSupported() method is related to mark() method as they are both used for stream marking."", ""mark"")"
You close a BufferedInputStream by calling the close() method inherited from InputStream.,"(""BufferedInputStream"", ""BufferedInputStream can be closed by calling the close() method."", ""close"")"
Notice how the while loop continues until a -1 value is read from the BufferedInputStream read() method.,NULL
"After that, the while loop exits, and the BufferedInputStream close() method is called.",NULL
"If an exception is thrown while reading data from the BufferedInputStream, the close() method is never called.",NULL
Proper exception handling for use of Java IO classes is also explained in my tutorial on Java IO Exception Handling.,NULL
"The setSource() method actually returns a reference to the ReusableBufferedInputStream, so you can actually create a ReusableBufferedInputStream and set the source in a single instruction:",NULL
"Note, that this implementation only overrides the read() method of the InputStream class that it extends.",NULL
"The Java BufferedOutputStream class, java.io.BufferedOutputStream, is used to capture bytes written to the BufferedOutputStream in a buffer, and write the whole buffer in one batch to an underlying Java OutputStream for increased performance.",NULL
The only difference is that you may need to call flush() if you need to be absolutely sure that the data written until now is flushed out of the buffer and onto the network or disk.,"(""flush"", ""flush() is a method that ensures data is written from the buffer."", ""buffer""); (""buffer"", ""data from the buffer can be sent to the network."", ""network"")"
To write data to a Java BufferedOutputStream you can use its write() method.,NULL
The write() method takes an int which contains the byte value of the byte to write.,NULL
Here is an example of writing data to a Java BufferedOutputStream using its write() method:,NULL
"Since the Java BufferedOutputStream is a subclass of OutputStream, you can write arrays of bytes to the BufferedOutputStream too, instead of just a single byte at a time.",NULL
If you want to make sure that all written data is written to disk without having to close the BufferedOutputStream you can call its flush() method.,NULL
"Calling flush() will make sure that all data which has been written to the BufferedOutputStream so far, is fully written to the underlying OutputStream too, plus flush() will also have been called on the underlying OutputStream.","(""BufferedOutputStream"", ""BufferedOutputStream writes data to the underlying OutputStream."", ""OutputStream""); (""flush()"", ""flush() is a method that ensures data is fully written from BufferedOutputStream to OutputStream."", ""BufferedOutputStream"")"
Here is an example of calling the Java BufferedOutputStream flush() method:,NULL
"The concrete implementations of hasMoreData() and getMoreData() are left out, but they are not really super important to understand the principle of this example.",NULL
"What matters is, that once the while loop ends, and you are done writing data to the BufferedOutputStream, its close() method is called, which closes the BufferedOutputStream .",NULL
"In case the write() method throws an exception, the close() method will never get called.",NULL
"Once the try block is exited, the close() method of the BufferedOutputStream is called automatically, because the BufferedOutputStream was declared inside the parentheses of the try block.",NULL
"Even if an exception is thrown from inside the try block, the close() method is still called before the exception is propagated up the call stack.",NULL
"The Java BufferedReader class, java.io.BufferedReader, provides buffering for your Java Reader instances.","(""BufferedReader"", ""BufferedReader is part of the java.io package."", ""java.io.BufferedReader"")"
"The Java BufferedReader class is a subclass of the Java Reader class, so you can use a BufferedReader anywhere a Reader is required.",NULL
Each character returned from read() is thus returned from this internal array.,NULL
The readLine() method will return a textual line (all text until at line break is found) read from the BufferedReader.,NULL
"If there is no more data to read from the underlying Reader, then the BufferedReader's readLine() method will return null .",NULL
The read() method of a Java BufferedReader returns an int which contains the char value of the next character read.,NULL
"If the read() method returns -1, there is no more data to read in the BufferedReader, and it can be closed.",NULL
"If not, it processes that char and continues reading until -1 is returned from the BufferedReader read() method.",NULL
"As mentioned earlier, the BufferedReader will actually read an array of characters from the underlying Reader and return these characters one by one, rather than forwarding every read() call to the underlying Reader.",NULL
"The Java BufferedReader class also has a read() method that takes a char array as parameter, as well as a start offset and length.",NULL
The char array is where the read() method will read the characters into.,NULL
The offset parameter is where in the char array the read() method should start reading into.,"(""offset parameter"", ""The offset parameter indicates the starting point for the read() method to begin reading."", ""read()"")"
The length parameter is how many characters the read() method should read into the char array from the offset and forward.,NULL
The Java BufferedReader has a special read method named readLine() which reads a full line of text from the BufferedReader's internal buffer.,NULL
"If there are no more lines to read from the BufferedReader, the readLine() method returns null.",NULL
The Java BufferedReader class has a method named skip() which can be used to skip over a number of characters in the input that you do not want to read.,NULL
You pass the number of characters to skip as parameter to the skip() method.,NULL
Notice how there is no longer any explicit close() method call.,NULL
"The setSource() method actually returns a reference to the ReusableBufferedReader, so you can actually create a ReusableBufferedReader and set the source in a single instruction:",NULL
"Note, that this implementation only overrides the read() and read(char[] dest, int offset, int length) methods of the Reader class that it extends.","(""Reader"", ""The read method is overridden in the Reader class."", ""read"")"
"The Java BufferedWriter is a Java Writer subclass, so it can be used anywhere a Writer is required.",NULL
The BufferedWriter adds one extra method though: The newLine() method which can write a new-line character to the underlying Writer.,"(""BufferedWriter"", ""BufferedWriter has an extra method called newLine()"", ""newLine"")"
"In addition, you may need to call flush() if you need to be absolutely sure that the characters written until now is flushed out of the buffer and onto the network or disk.",NULL
"Since the BufferedWriter collects the characters written internally in a buffer before writing them to the underlying Writer, the speedup is not as noticeable as with other Writer classes (that do not use buffering).",NULL
The Java BufferedWriter's flush() method flushes all data written to the BufferedWriter to the underlying data destination.,"(""BufferedWriter"", ""The flush() method is a method of the BufferedWriter class that flushes data."", ""flush"")"
"By calling flush() you can assure that any buffered data will be flushed (written) to disk (or network, or whatever else the destination of your BufferedWriter has).",NULL
Here is an example of flushing data written to a Java BufferedWriter by calling its flush() method:,NULL
"The Java ByteArrayInputStream class, java.io.ByteArrayInputStream, of the Java IO API enables you to read data from byte arrays as streams of bytes.","(""ByteArrayInputStream"", ""ByteArrayInputStream is a class that is part of the java.io package."", ""java.io.ByteArrayInputStream"")"
"In other words, the ByteArrayInputStream class can turn a byte array into an InputStream.",NULL
"The ByteArrayInputStream class is a subclass of the InputStream class, so you can use a ByteArrayInputStream as an InputStream.",NULL
The ByteArrayInputStream also has a set of additional methods that are specific to the ByteArrayInputStream class.,NULL
To use a Java ByteArrayInputStream you must first create an instance of the ByteArrayInputStream class.,NULL
"You read bytes from a Java ByteArrayInputStream just like you would from a regular InputStream, via its read() method.","(""ByteArrayInputStream"", ""ByteArrayInputStream is a subclass of InputStream, indicating a relationship between the two classes."", ""InputStream"")"
"The read() will return the next byte from the byte array, or -1 if the end of the byte array (or byte array section) has been reached.",NULL
The Java ByteArrayInputStream available() method tells you how many bytes are still available in the ByteArrayInputStream.,"(""available"", ""The available() method is a method of the ByteArrayInputStream class."", ""ByteArrayInputStream"")"
The mark() method of the ByteArrayInputStream class sets an internal mark at the current byte position - meaning right after the previous byte read.,NULL
"The mark() method takes a parameter telling how many bytes can be read past this mark, before this mark becomes invalid.",NULL
Here is an example of setting a mark in a ByteArrayInputStream via its mark() method:,NULL
The reset() method of the ByteArrayInputStream resets how far it has read into the byte array.,NULL
The Java ByteArrayInputStream skip() method enables you to skip over a number of bytes from the underlying byte array.,NULL
Here is an example of skipping over a number of bytes using the ByteArrayInputStream skip() method:,NULL
Notice how the while loop continues until a -1 value is read from the ByteArrayInputStream read() method.,NULL
"After that, the while loop exits, and the ByteArrayInputStream close() method is called.",NULL
"If an exception is thrown while reading data from the ByteArrayInputStream, the close() method is never called.",NULL
"The Java ByteArrayOutputStream class, java.io.ByteArrayOutputStream of the Java IO API enables you to capture data written to a stream in a byte array.",NULL
You write your data to the ByteArrayOutputStream and when you are done you call the its toByteArray() method to obtain all the written data in a byte array.,NULL
"Since the Java ByteArrayOutputStream class is a subclass of the Java OutputStream class, you write bytes to it using the same write methods that OutputStream has:","(""ByteArrayOutputStream"", ""ByteArrayOutputStream is a subclass of OutputStream"", ""OutputStream"")"
"Once you have finished writing to the ByteArrayOutputStream you can obtain all the bytes written as a Java byte array, using the ByteArrayOutputStream toByteArray() method.",NULL
Being a subclass of OutputStream the ByteArrayOutputStream also has a close() method.,"(""ByteArrayOutputStream"", ""ByteArrayOutputStream is a subclass of OutputStream"", ""OutputStream"")"
But calling the close() method has no effect on the ByteArrayOutputStream.,NULL
"The Java DataInputStream class, java.io.DataInputStream, enables you to read Java primitives (int, float, long etc.)",NULL
"The Java DataInputStream class is a subclass of InputStream, so DataInputStream also has the basic read methods that enable you to read a single byte or an array of bytes from the underlying InputStream, in case you need that.","(""DataInputStream"", ""DataInputStream is a subclass of InputStream."", ""InputStream""); (""DataInputStream"", ""DataInputStream has the basic read methods."", ""read"")"
"As mentioned earlier, the DataInputStream class is often used together with a DataOutputStream.",NULL
You can read a Java boolean from the DataInputStream using its readBoolean() method.,NULL
Here is an example of reading a boolean from a Java DataInputStream using readBoolean():,NULL
You can read a Java byte from the DataInputStream using its readByte() method.,NULL
Here is an example of reading a byte from a Java DataInputStream using readByte():,NULL
You can read a Java unsigned byte (only positive values) from the DataInputStream using its readUnsignedByte() method.,NULL
Here is an example of reading an unsigned byte from a Java DataInputStream using readUnsignedByte():,NULL
You can read a Java char from the DataInputStream using its readChar() method.,NULL
Here is an example of reading a char from a Java DataInputStream using readChar():,NULL
You can read a Java double from the DataInputStream using its readDouble() method.,NULL
Here is an example of reading a double from a Java DataInputStream using readDouble():,NULL
You can read a Java float from the DataInputStream using its readFloat() method.,NULL
Here is an example of reading a float from a Java DataInputStream using readFloat():,NULL
You can read a Java short from the DataInputStream using its readShort() method.,NULL
Here is an example of reading a short from a Java DataInputStream using readShort():,NULL
You can read a Java unsigned short (only positive values) from the DataInputStream using its readUnsignedShort() method.,NULL
Here is an example of reading an unsigned short from a Java DataInputStream using readUnsignedShort():,NULL
You can read a Java int from the DataInputStream using its readInt() method.,NULL
Here is an example of reading an int from a Java DataInputStream using readInt():,NULL
You can read a Java long from the DataInputStream using its readLong() method.,NULL
Here is an example of reading an int from a Java DataInputStream using readLong():,NULL
You can read a Java String from the DataInputStream using its readUTF() method.,"(""DataInputStream"", ""The readUTF method is a method of the DataInputStream class used to read a Java String."", ""readUTF"")"
Here is an example of reading a String from a Java DataInputStream using readUTF():,"(""DataInputStream"", ""readUTF() is a method of the DataInputStream class used to read a String."", ""readUTF"")"
"The Java File class, java.io.File in the Java IO API gives you access to the underlying file system.",NULL
Note: The Java File class only gives you access to the file and directory meta data.,NULL
Note: If you are want to Java NIO (Java's non-blocking IO API) you will have to use the java.nio.FileChannel class instead.,NULL
"Both Java File and FileChannel works, but in case you want a pure Java NIO solution use the Java NIO FileChannel class.",NULL
"Before you can do anything with the file system or File class, you must create a Java File instance.","(""File"", ""File is a class that is part of the Java package."", ""Java"")"
The Java File class also has a few other constructors you can use to instantiate File instances in different ways.,NULL
You can check if a file referenced by a Java File object exists using the File exists() method.,"(""File"", ""The exists() method is a method of the File class used to check if a file exists."", ""exists"")"
You can use the Java File class to create directories if they don't already exists.,NULL
The File class contains the method mkdir() and mkdirs() for that purpose.,"(""File"", ""The File class contains the method mkdir()."", ""mkdir()"")"
The mkdir() method creates a single directory if it does not already exist.,NULL
Here is an example of creating a single directory via the Java File class:,NULL
"The mkdir() returns true if the directory was created, and false if not.","(""mkdir"", ""The mkdir() method returns true if the directory was created."", ""true"")"
The mkdirs() will create all directories that are missing in the path the File object represents.,NULL
Here is an example of creating multiple directories via the Java File class:,NULL
"The mkdirs() method will return true if all the directories were created, and false if not.","(""mkdirs"", ""The mkdirs() method returns true if all directories were created."", ""true"")"
The Java File class enables you to read the length in bytes of a file.,NULL
"To read the length of a file, call the File length() method.",NULL
Here is an example of reading the length of a file via the Java File length() method:,NULL
"To rename (or move) a file, call the method renameTo() on the File class.",NULL
"As briefly mentioned earlier, the renameTo() method can also be used to move a file to a different directory.","(""renameTo"", ""The renameTo() method is used to move a file."", ""file"")"
The new file name passed to the renameTo() method does not have to be in the same directory as the file was already residing in.,NULL
"The renameTo() method returns boolean (true or false), indicating whether the renaming was successful.",NULL
"The Java File renameTo() method also works for directories, by the way.",NULL
"The delete() method returns boolean (true or false), indicating whether the deletion was successful.",NULL
"The Java File delete() method also works for directories, meaning you can also delete directories with it.","(""File"", ""The delete() method is a method of the File class."", ""delete()"")"
The Java File delete() method can only delete a directory if the directory is empty.,"(""File"", ""The delete() method is a method of the File class."", ""delete()"")"
"You can check if a File object points to a file or directory, by calling its isDirectory() method.",NULL
You can obtain a list of all the files in a directory by calling either the Java File list() method or the listFiles() method.,"(""File"", ""The list() method is a method of the File class."", ""list"")"
The list() method returns an array of String's with the file and / or directory names of directory the File object points to.,"(""list"", ""The list() method returns an array of String's."", ""String"")"
The listFiles() returns an array of File objects representing the files and / or directories in the directory the File points to.,NULL
Here is an example of listing all files in a directory via the Java File list() and listFiles() methods:,"(""File"", ""list is a method of the File class that retrieves an array of files in a directory."", ""list"")"
"The Java FileInputStream class, java.io.FileInputStream, makes it possible to read the contents of a file as a stream of bytes.",NULL
"Note also, that since FileInputStream is a subclass of InputStream, we can cast the created FileInputStream to an InputStream everywhere we want to, as we do in the example above.",NULL
The FileInputStream class has a three different constructors you can use to create a FileInputStream instance.,NULL
"Actually, in my experience Java will also understand if you use a / as directory separator on Windows (e.g.",NULL
The read() method of a FileInputStream returns an int which contains the byte value of the byte read.,NULL
"If the read() method returns -1, there is no more data to read in the FileInputStream, and it can be closed.",NULL
You use the read() method just like the read() method of an InputStream.,NULL
Being an InputStream the FileInputStream also has two read() methods which can read data into a byte array.,"(""FileInputStream"", ""FileInputStream is a subclass of InputStream"", ""InputStream"")"
"These methods are inherited from the Java InputStream class, by the way.",NULL
"If all bytes have been read from the FileInputStream, these read() methods will return -1.",NULL
Therefore it is necessary to inspect the value returned from these read() method calls.,NULL
The doSomethingWithData() method implementation has been left out of this example to keep it short.,NULL
"Notice, that a BufferedInputStream is an InputStream subclass and can be used in any place where an InputStream can be used.",NULL
You close a FileInputStream by calling the close() method inherited from InputStream.,"(""FileInputStream"", ""The close() method is called on the FileInputStream to close it."", ""close"")"
Notice how the while loop continues until a -1 value is read from the FileInputStream read() method.,NULL
"After that, the while loop exits, and the FileInputStream close() method is called.",NULL
"If an exception is thrown while reading data from the FileInputStream, the close() method is never called.",NULL
"The Java FileOutputStream class, java.io.FileOutputStream, makes it possible to write a file as a stream of bytes.",NULL
The Java FileOutputStream class is a subclass of Java OutputStream meaning you can use a FileOutputStream as an OutputStream.,NULL
The Java FileOutputStream class contains a set of different useful constructors.,NULL
To write data to a Java FileOutputStream you can use its write() method.,NULL
Here is an example of writing data to a Java FileOutputStream using its write() method:,NULL
"Since the Java FileOutputStream is a subclass of OutputStream, you can write arrays of bytes to the FileOutputStream too, instead of just a single byte at a time.",NULL
If you want to make sure that all written data is written to disk without having to close the FileOutputStream you can call its flush() method.,NULL
"Calling flush() will make sure that all data which has been written to the FileOutputStream so far, is fully written to disk too.",NULL
Here is an example of calling the Java FileOutputStream flush() method:,NULL
Here is an example of closing a Java FileOutputStream by calling its close() method:,"(""FileOutputStream"", ""The close() method is called on the FileOutputStream class to close the stream."", ""close"")"
"Unfortunately, if an exception is thrown during the write() call in the example above, that exception will cause the program flow to break before the close() method is called.","(""Exception"", ""The Exception is thrown during the write() call, indicating a failure in the method execution."", ""write"")"
"In other words, the FileOutputStream close() will be called automatically for you.",NULL
You can convert a FileOutputStream to a character based Writer using the Java OutputStreamWriter class.,"(""FileOutputStream"", ""FileOutputStream can be converted to a character based Writer using the OutputStreamWriter class."", ""OutputStreamWriter"")"
"The Java FileReader class, java.io.FileReader makes it possible to read the contents of a file as a stream of characters.",NULL
"The Java FileReader is a subclass of the Java Reader class, so it has many of the same methods.","(""FileReader"", ""FileReader is a subclass of Reader, indicating an inheritance relationship."", ""Reader"")"
The read() method of the Java FileReader returns an int which contains the char value of the character read.,NULL
"If the read() method returns -1, there is no more data to read in the FileReader, and it can be closed.",NULL
"Notice, that a BufferedReader is a Reader subclass and can be used in any place where an Reader can be used.",NULL
Notice how there is no longer any explicit close() method call to the FileReader instance.,NULL
"The Java FileWriter class, java.io.FileWriter, makes it possible to write characters to a file.",NULL
"The Java FileWriter class is a subclass of the Java Writer class, by the way.",NULL
The Java FileWriter's flush() method flushes all data written to the FileWriter to the underlying file.,NULL
By calling flush() you can assure that any buffered data will be flushed (written) to disk.,NULL
Here is an example of flushing data written to a Java FileWriter by calling its flush() method:,NULL
Notice how there is no longer any explicit close() method call to the FileWriter instance.,NULL
"The Java InputStream class, java.io.InputStream, represents an ordered stream of bytes.",NULL
The Java InputStream class is the base class (superclass) of all input streams in the Java IO API.,NULL
"Each subclass of InputStream typically has a very specific use, but can be used as an InputStream.",NULL
FileInputStream is a subclass of InputStream so it is safe to assign an instance of FileInputStream to an InputStream variable (the inputstream variable).,NULL
The read() method of an InputStream returns an int which contains the byte value of the byte read.,NULL
"If the read() method returns -1, the end of stream has been reached, meaning there is no more data to read in the InputStream.",NULL
The InputStream class also contains two read() methods which can read data from the InputStream's source into a byte array.,"(""InputStream"", ""The InputStream class contains a read() method."", ""read"")"
"Inside the while loop the doSomethingWithData() method is called, passing along the data byte array as well as how many bytes were read into the array as parameters.","(""doSomethingWithData"", ""The doSomethingWithData method is called with the data byte array as a parameter."", ""data byte array"")"
The Java InputStream class contains a method called readAllBytes() (since Java 9).,NULL
Here is an example of reading all bytes from a Java InputStream via readAllBytes():,NULL
The InputStream class has two methods called mark() and reset() which subclasses of InputStream may or may not support.,"(""InputStream"", ""mark() is a method of the InputStream class."", ""mark"")"
"If an InputStream subclass supports the mark() and reset() methods, then that subclass should override the markSupported() to return true.","(""InputStream"", ""InputStream subclass supports the mark() method"", ""mark""); (""InputStream"", ""InputStream subclass supports the reset() method"", ""reset"")"
If the markSupported() method returns false then mark() and reset() are not supported.,"(""markSupported"", ""markSupported() method indicates that mark() is not supported if it returns false."", ""mark"")"
The mark() sets a mark internally in the InputStream which marks the point in the stream to which data has been read so far.,NULL
"If the code using the InputStream wants to go back to the point in the stream where the mark was set, the code calls reset() on the InputStream.",NULL
The methods mark() and reset() methods are typically used when implementing parsers.,NULL
Notice how the while loop continues until a -1 value is read from the InputStream read() method.,NULL
"After that, the while loop exits, and the InputStream close() method is called.",NULL
"If an exception is thrown while reading data from the InputStream, the close() method is never called.",NULL
"The Java InputStreamReader class, java.io.InputStreamReader, wraps a Java InputStream, thereby turning the byte based InputStream into a character based Reader.","(""InputStreamReader"", ""InputStreamReader wraps InputStream to convert byte stream to character stream"", ""InputStream""); (""InputStreamReader"", ""InputStreamReader is a type of Reader"", ""Reader"")"
The Java InputStreamReader class is thus a subclass of the Java Reader class.,NULL
You can get the character encoding used by a Java InputStreamReader instance via its getEncoding() method.,NULL
The read() method of an InputStreamReader returns an int which contains the char value of the char read.,NULL
"If the read() method returns -1, the end of stream has been reached, meaning there is no more data to read in the InputStreamReader.",NULL
"As you can see, the while loop keeps running until a -1 is read from the InputStreamReader read() method.",NULL
"Once all the data is written to it, simply call the method toByteArray() or toCharArray, and all the data written is returned in array form.","(""toByteArray"", ""The method toByteArray() returns the data written in array form."", ""data"")"
The Java CharArrayReader class (java.io.CharArrayReader) enables you to read the contents of a char array as a character stream.,NULL
"The Java CharArrayReader is handy when you have data in a char array, but need to pass that data to some component which can only read from a Reader (or a Reader subclass).",NULL
Closing a CharArrayReader can be done using the close() method like this:,NULL
Notice that there is no explicit close() call on the CharArrayReader.,NULL
The Java CharArrayWriter class (java.io.CharArrayWriter) makes it possible to write characters via the Writer methods (CharArrayWriter is a subclass of Writer) and convert the written characters into a char array.,"(""CharArrayWriter"", ""CharArrayWriter is a subclass of Writer"", ""Writer"")"
"The Java CharArrayWriter class is handy when you have a component that can only write characters to a Writer, but you need the characters as a char array.",NULL
"Simply pass that component a CharArrayWriter and when all characters are written to it, call toCharArray() on the CharArrayWriter.",NULL
"Third, the written characters are obtained as a char array by calling the toCharArray() method on the CharArrayWriter.",NULL
Notice how there is no longer any explicit close() method call to the CharArrayWriter instance.,NULL
The Java DataOutputStream class enables you to write Java primitives to OutputStream's instead of only bytes.,NULL
"As mentioned earlier, the DataOutputStream class is often used together with a DataInputStream.",NULL
But what happens if an exception is thrown from inside the doSomethingWithData() method?,NULL
"Well, to catch that situation you will have to wrap the call to close() in a try-catch block too, like this:",NULL
"But, what happens if an exception is also thrown from the input.close() method?",NULL
"Separate pages will describe each of these methods or classes in more detail, including examples of their usage etc.",NULL
The Java IO API contains the following classes which are relevant to working with files in Java:,NULL
"These classes are explained in more detail in their own texts, but the sections below will give a brief introduction to these classes.",NULL
"These two classes lets you read a file one byte or character at a time from the start to the end of the file, or read the bytes into an array of byte or char, again from start towards the end of the file.",NULL
"As I have already mentioned, you can get random access to files with Java IO via the RandomAccessFile class.",NULL
Both file and directory information is available via the File class.,NULL
The FilterInputStream is a base class for implementing your own filtering input streams.,NULL
"It is intended to be a base class for your own subclasses, but in my opinion you might as well just subclass InputStream directly.",NULL
I cannot see that this class actually adds or changes any behaviour in InputStream except that it takes an InputStream in its constructor.,NULL
The FilterOutputStream is a base class for implementing your own filtering output streams.,NULL
I cannot see that this class actually adds or changes any behaviour in OutputStream except that it takes an OutputStream in its constructor.,NULL
"If you choose to extend this class you might as well extend the OutputStream class directly, and avoid the extra class in the hierarchy.",NULL
The FilterReader is a base class for implementing your own filtering readers.,NULL
"Like with FilterInputStream, I see no sensible purpose for this class.",NULL
I cannot see that this class actually adds or changes any behaviour in Reader except that it takes a Reader in its constructor.,NULL
"If you choose to extend this class you might as well extend the Reader class directly, and avoid the extra class in the hierarchy.",NULL
The FilterWriter is a base class for implementing your own filtering Writer's.,NULL
"Like with FilterOutputStream, I see no sensible purpose for this class.",NULL
I cannot see that this class actually adds or changes any behaviour in Writer except that it takes a Writer in its constructor.,NULL
"If you choose to extend this class you might as well extend the Writer class directly, and avoid the extra class in the hierarchy.",NULL
Some of the classes in the Java IO API are designed to help you parse input.,NULL
The purpose was rather to give you above quick list of classes related to parsing of input data.,NULL
If you have to parse data you will often end up writing your own classes that use some of the classes in this list.,NULL
The Java LineNumberReader class (java.io.LineNumberReader is a BufferedReader that keeps track of line numbers of the read characters.,"(""LineNumberReader"", ""LineNumberReader is a subclass of BufferedReader that extends its functionality."", ""BufferedReader"")"
You can get the current line number from the LineNumberReader by calling the getLineNumber() method.,NULL
"You can also set the current line number, should you need to, by calling the setLineNumber() method.",NULL
Since FileOutputStream is a subclass of OutputStream this should be no problem.,NULL
In this example the process() method cannot see if the InputStream it gets as parameter comes from the file system or the network (the example only shows the file system version).,"(""process"", ""The process() method takes InputStream as a parameter."", ""InputStream""); (""InputStream"", ""InputStream can come from the file system."", ""file system"")"
The Java ObjectInputStream class (java.io.ObjectInputStream) enables you to read Java objects from an InputStream instead of just raw bytes.,NULL
"For this ObjectInputStream example to work the object you read must be an instance of MyClass, and must have been serialized into the file ""object.data"" via an ObjectOutputStream.","(""ObjectInputStream"", ""ObjectInputStream is used to read an instance of MyClass that has been serialized."", ""MyClass"")"
Before you can serialize and de-serialize objects the class of the object must implement java.io.Serializable.,NULL
"After that the ObjectInputStream is also closed, and the values read into the Person object are printed to System.out.","(""ObjectInputStream"", ""ObjectInputStream is used to read values into the Person object."", ""Person"")"
The Java ObjectOutputStream class (java.io.ObjectOutputStream) enables you to write Java objects to an OutputStream instead of just raw bytes.,NULL
In this text I will try to give you an overview of the classes in the Java IO (java.io) package.,"(""Java IO"", ""Java IO is a package that contains classes related to input and output operations in Java."", ""java.io"")"
"More specifically, I will try to group the classes after their purpose.",NULL
"This grouping should make it easier for you in the future, to determine the purpose of a class, or find the class you need for a specific purpose.",NULL
"Java IO contains many subclasses of the InputStream, OutputStream, Reader and Writer classes.","(""Java IO"", ""Java IO contains many subclasses of the InputStream class."", ""InputStream""); (""Java IO"", ""Java IO contains many subclasses of the OutputStream class."", ""OutputStream""); (""Java IO"", ""Java IO contains many subclasses of the Reader class."", ""Reader"")"
"The reason is, that all of these subclasses are addressing various different purposes.",NULL
These purposes are nice to know about when reading through the Java IO classes.,NULL
They make it somewhat easier to understand what the classes are targeting.,NULL
"Having discussed sources, destinations, input, output and the various IO purposes targeted by the Java IO classes, here is a table listing most (if not all) Java IO classes divided by input, output, being byte based or character based, and any more specific purpose they may be addressing, like buffering, parsing etc.","(""Java IO classes"", ""Java IO classes are designed to handle various input operations."", ""input""); (""Java IO classes"", ""Java IO classes are designed to handle various output operations."", ""output""); (""Java IO classes"", ""Java IO classes may implement buffering techniques for efficient data handling."", ""buffering"")"
The PipedInputStream class makes it possible to read the contents of a pipe as a stream of bytes.,NULL
The read() method of a PipedInputStream returns an int which contains the byte value of the byte read.,NULL
"If the read() method returns -1, there is no more data to read in the stream, and it can be closed.",NULL
"Since PipedInputStream is a subclass of InputStream, PipedInputStream has the same basic methods and use patterns as an InputStream.","(""PipedInputStream"", ""PipedInputStream is a subclass of InputStream, indicating an inheritance relationship."", ""InputStream"")"
The PipedOutputStream class makes it possible to write to a Java pipe as a stream of bytes.,NULL
The write() method of a PipedOutputStream takes an int which contains the byte value of the byte to write.,NULL
"Since PipedOutputStream is a subclass of OutputStream, PipedOutputStream has the same basic methods and use patterns as an OutputStream.","(""PipedOutputStream"", ""PipedOutputStream is a subclass of OutputStream, indicating an inheritance relationship."", ""OutputStream"")"
The Java PipedReader class (java.io.PipedReader) makes it possible to read the contents of a pipe as a stream of characters.,NULL
The read() method of a Java PipedReader returns an int which contains the char value of the character read.,NULL
"If the read() method returns -1, there is no more data to read in the PipedReader, and it can be closed.",NULL
Notice how there is no longer any explicit close() method call to the PipedReader instance.,NULL
The Java PipedWriter class (java.io.PipedWriter) makes it possible to write to a Java pipe as a stream of characters.,NULL
The write() method of a PipedWriter takes an int which contains the byte value of the byte to write.,NULL
"There are also versions of the write() method that take a String, char array etc.","(""write"", ""The write() method can take a String as an argument."", ""String"")"
Notice how there is no longer any explicit close() method call to the PipedWriter instance.,NULL
Creating a pipe using Java IO is done via the PipedOutputStream and PipedInputStream classes.,NULL
You can also connect the two pipe streams using their connect() methods.,NULL
Both PipedInputStream and PipedOutputStream has a connect() method that can connect one to the other.,"(""PipedInputStream"", ""PipedInputStream has a connect() method that can connect one to the other."", ""connect()"")"
"The read() and write() calls on the streams are blocking, meaning if you try to use the same thread to both read and write, this may result in the thread deadlocking itself.","(""read"", ""The read() method operates on the streams class."", ""streams"")"
The Java PrintStream class (java.io.PrintStream) enables you to write formatted data to an underlying OutputStream.,NULL
"The PrintStream class can format primitive types like int, long etc.","(""PrintStream"", ""PrintStream class can format the int primitive type."", ""int"")"
You may be familiar with these two well-known PrintStream instances in Java: System.out and System.err .,"(""PrintStream"", ""System.out is an instance of the PrintStream class."", ""System.out"")"
"The Java PrintStream class contains the powerful format() and printf() methods (they do exactly the same, but the name ""printf"" is more familiar to C-programmers).","(""PrintStream"", ""The format() method is a method contained within the PrintStream class."", ""format""); (""PrintStream"", ""The printf() method is a method contained within the PrintStream class."", ""printf"")"
The Java PrintWriter class (java.io.PrintWriter) enables you to write formatted data to an underlying Writer.,NULL
The PrintWriter class has all the same methods as the PrintStream except for the methods to write raw bytes.,"(""PrintWriter"", ""The PrintWriter class has all the same methods as the PrintStream, indicating a relationship of similarity in functionality."", ""PrintStream""); (""PrintWriter"", ""The PrintWriter class has methods that are similar to those of the PrintStream class."", ""methods"")"
Being a Writer subclass the PrintWriter is intended to write text.,NULL
"Third, the example calls the advanced printf() method of the PrintWriter which can insert formatted numbers into a text string.",NULL
"In that way the PrintWriter is a bit different from other Writer subclasses which tend to have mostly constructors that can take other Writer instances as parameters (except for a few, like OutputStreamWriter).","(""PrintWriter"", ""PrintWriter is a subclass of Writer."", ""Writer"")"
The Java PrintWriter class contains the powerful format() and printf() methods.,"(""PrintWriter"", ""The format() method is a method of the PrintWriter class."", ""format"")"
"The format() and printf() methods allow you to mix text and data in very advanced ways, using a formatting string.",NULL
The Java Reader (java.io.Reader) and Java Writer class (java.io.Writer) in Java IO work much like the InputStream and OutputStream with the exception that Reader and Writer are character based.,"(""Java Reader"", ""Both are classes in Java IO that handle character-based input and output."", ""Java Writer""); (""Java Reader"", ""Java Reader works similarly to InputStream but is character-based."", ""InputStream""); (""Java Writer"", ""Java Writer works similarly to OutputStream but is character-based."", ""OutputStream""); (""java.io.Reader"", ""Java Reader is an implementation of the Reader class in the java.io package."", ""Java Reader"")"
The Java Reader is the base class of all Reader's in the Java IO API.,"(""Java Reader"", ""Java Reader is the base class of all Reader's in the Java IO API."", ""Reader"")"
The Java Writer class is the base class of all Writers in the Java IO API.,NULL
Before you can use the SequenceInputStream you must import it in your Java class.,NULL
"This import statement should be at the top of your Java class, right under the package declaration.",NULL
"The FileInputStream extends the InputStream class, so they can be used with the SequenceInputStream.","(""FileInputStream"", ""FileInputStream extends InputStream class"", ""InputStream"")"
"When there is no more data to read from the second InputStream, the SequenceInputStream read() method will return -1, just like any other InputStream does.","(""read()"", ""The read() method is a method of the SequenceInputStream class."", ""SequenceInputStream"")"
The Java Serializable interface (java.io.Serializable is a marker interface your classes must implement if they are to be serialized and deserialized.,NULL
"Therefore, a class implementing Serializable does not have to implement any specific methods.",NULL
Implementing Serializable thus just tells the Java serialization classes that this class is intended for object serialization.,NULL
Here is an example of a class that implements the Java Serializable interface:,NULL
"As you can see, the Person class implements the Serializable interface, but does not actually implement any methods.",NULL
"In addition to implementing the Serializable interface, a class intended for serialization should also contain a private static final long variable named serialVersionUID.","(""Serializable"", ""Serializable is an interface that the class implements."", ""class"")"
"Here is the Person class from before, with a serialVersionUID variable added:",NULL
"The serialVersionUID variable is used by Java's object serialization API to determine if a deserialized object was serialized (written) with the same version of the class, as it is now attempting to deserialize it into.","(""serialVersionUID"", ""The serialVersionUID variable is used in the context of Java's object serialization to ensure version compatibility during deserialization."", ""Java""); (""object serialization API"", ""The object serialization API is a part of Java that handles the serialization and deserialization of objects."", ""Java"")"
Now the serialized Person object may not correspond to the new version of the Person class.,NULL
To detect such problems a class implementing Serializable should contain a serialVersionUID field.,NULL
"If you make big changes to the class, you should also change its serialVersionUID value.",NULL
"These other object serialization mechanisms typically do not require your Java classes to implement Serializable, by the way.",NULL
"They are typically using Java Reflection to inspect your class, so implementing the Serializable interface would be superflous - it would not add any useful information.",NULL
The class java.io.InputStream is the base class for all Java IO input streams.,NULL
"If you are writing a component that needs to read input from a stream, try to make our component depend on an InputStream, rather than any of it's subclasses (e.g.",NULL
"Doing so makes your code able to work with all types of input streams, instead of only the concrete subclass.",NULL
Otherwise your code will not be able to call the unread() method on the PushbackInputStream.,NULL
You typically read data from an InputStream by calling the read() method.,NULL
The read() method returns a int containing the byte value of the byte read.,NULL
"If there is no more data to be read, the read() method typically returns -1;",NULL
The class java.io.OutputStream is the base class of all Java IO output streams.,NULL
"If you are writing a component that needs to write output to a stream, try to make sure that component depends on an OutputStream and not one of its subclasses.",NULL
You can even write your own stream classes to wrap the standard stream classes that comes with Java.,NULL
The Java StringReader class enables you to turn an ordinary String into a Reader.,NULL
Closing a Java StringReader can be done using the close() method like this:,NULL
Notice that there is no explicit close() call on the StringReader.,NULL
The Java StringWriter class (java.io.StringWriter) enables you to obtain the characters written to a Writer as a String.,NULL
Third the characters written to the StringWriter are obtained via the two methods toString() and getBuffer().,"(""StringWriter"", ""toString() is a method that operates on the StringWriter class."", ""toString"")"
The method toString() returns the characters written to the StringWriter as a String.,"(""toString"", ""The method toString() returns characters written to the StringWriter."", ""StringWriter"")"
The method getBuffer() returns the StringBuffer used by the StringWriter to build the string from the written characters.,"(""getBuffer"", ""The method getBuffer() returns an instance of StringBuffer."", ""StringBuffer"")"
Notice how there is no longer any explicit close() method call to the StringWriter instance.,NULL
The Java IO API is located in the Java IO package (java.io).,NULL
If you look at the Java IO classes in the java.io package the vast amount of choices can be rather confusing.,NULL
"The purpose of this tutorial is to try to give you an overview of how all these classes are grouped, and the purpose behind them, so you don't have to wonder whether you chose the right class, or whether a class already exists for your purpose.",NULL
"That tutorial gives you a quick overview of the central concepts in the Java IO API, and an overview of all the central classes in the Java IO API.","(""tutorial"", ""The tutorial provides an overview of the Java IO API."", ""Java IO API""); (""central concepts"", ""The central concepts are part of the Java IO API."", ""Java IO API"")"
The java.io package doesn't actually address all types of input and output.,NULL
"Those types of input are covered elsewhere, for instance by the JFC classes in the Swing project, or the Servlet and HTTP packages in the Java Enterprise Edition.","(""JFC"", ""JFC classes are part of the Swing project, indicating a relationship between them."", ""Swing""); (""Servlet"", ""Servlet is a class used in the Java Enterprise Edition, indicating a relationship between them."", ""Java Enterprise Edition"")"
"However, the Java IO package does not contain classes to open network sockets which are necessary for network communication.","(""Java IO"", ""The Java IO package does not contain classes necessary for network communication."", ""classes"")"
"Once you have opened a socket (network connection) though, you read and write data to and from it via Java IO's InputStream and OutputStream classes.","(""Socket"", ""InputStream is used to read data from a socket connection."", ""InputStream"")"
"It contains classes that does much of the same as the Java IO and Java Networking APIs, but Java NIO can work in non-blocking mode.","(""Java NIO"", ""Java NIO contains classes that perform similar functions as Java IO."", ""Java IO"")"
The tutorial trail called Java How To's and Utilities also contain a few Java IO utilities - e.g.,NULL
"Here is a table listing most (if not all) Java IO classes divided by input, output, being byte based or character based, and any more specific purpose they may be addressing, like buffering, parsing etc.","(""Java IO"", ""Java IO classes include input as a category of functionality."", ""input""); (""Java IO"", ""Java IO classes include output as a category of functionality."", ""output""); (""Java IO"", ""Java IO classes are categorized into byte based functionality."", ""byte based""); (""Java IO"", ""Java IO classes are categorized into character based functionality."", ""character based""); (""input"", ""Input classes may utilize buffering methods for efficiency."", ""buffering"")"
"The Java OutputStream class, java.io.OutputStream, is the base class of all output streams in the Java IO API.",NULL
Subclasses of OutputStream include the Java BufferedOutputStream and the Java FileOutputStream among others.,"(""BufferedOutputStream"", ""BufferedOutputStream is a subclass of OutputStream"", ""OutputStream"")"
Here are some of the well-known subclasses of the Java OutputStream class:,NULL
The write() method of an OutputStream takes an int which contains the byte value of the byte to write.,NULL
This OutputStream write() example first creates a FileOutputStream to which the data will be written.,"(""OutputStream"", ""OutputStream has a method called write() that allows data to be written."", ""write()"")"
The condition to exit the while loop is the return value of the method hasMoreData().,NULL
"The implementation of hasMoreData() is not shown, but imagine that it returns true if there is more data to write, and false if not.","(""hasMoreData"", ""The method hasMoreData() is described to return true if there is more data to write."", ""true"")"
"Inside the while loop the example calls the method getMoreData() to get the next data to write to the OutputStream, and then writes that data to the OutputStream.",NULL
The Java OutputStream's flush() method flushes all data written to the OutputStream to the underlying data destination.,NULL
"By calling flush() you can assure that any buffered data will be flushed (written) to disk (or network, or whatever else the destination of your OutputStream has).",NULL
Here is an example of flushing data written to a Java OutputStream by calling its flush() method:,NULL
"What matters is, that once the while loop ends, and you are done writing data to the OutputStream, its close() method is called, which closes the OutputStream .",NULL
"Once the try block is exited, the close() method of the OutputStream is called automatically, because the OutputStream was declared inside the parentheses of the try block.",NULL
You can convert a OutputStream to a character based Writer using the Java OutputStreamWriter class.,"(""OutputStreamWriter"", ""OutputStreamWriter is used to convert an OutputStream to a character based Writer."", ""OutputStream"")"
"The Java OutputStreamWriter class, java.io.OutputStreamWriter, is intended to wrap an Java OutputStream and thereby turning the byte based output stream into a character based Writer.",NULL
"The Java OutputStreamWriter is useful if you need to write characters to a file, encoded as e.g.",NULL
The Java OutputStreamWriter is a subclass of the Java Writer class.,NULL
"The Java OutputStreamWriter also has alternative constructors that allow you to specify the character set (ISO-Latin1, UTF-8, UTF-16 etc.)",NULL
The Java OutputStreamWriter's flush() method flushes all data written to the OutputStreamWriter to the underlying data destination.,NULL
"By calling flush() you can assure that any buffered data will be flushed (written) to disk (or network, or whatever else the destination of your OutputStreamWriter has).",NULL
Here is an example of flushing data written to a Java OutputStreamWriter by calling its flush() method:,NULL
These bytes will then be read again the next time you call read().,NULL
"The Java PushbackInputStream is a subclass of the Java InputStream so it inherits its public methods - read(), close() etc.","(""Java PushbackInputStream"", ""Java PushbackInputStream is a subclass of Java InputStream, indicating an inheritance relationship."", ""Java InputStream""); (""Java InputStream"", ""Java InputStream has a public method read()."", ""read()"")"
The call to read() reads a byte just like from an InputStream.,NULL
The call to unread() pushes a byte back into the PushbackInputStream.,NULL
The next time read() is called the pushed back bytes will be read first.,NULL
"If you push back multiple bytes into the PushbackInputStream, the latest byte pushed back will be returned first from read(), just like on a stack.",NULL
"You read bytes from the Java PushbackInputStream via its read() method, just like you do from a regular InputStream .","(""Java PushbackInputStream"", ""The read() method is a function of the Java PushbackInputStream class."", ""read()"")"
"Notice, that once the PushbackInputStream has no more bytes to read, from its underlying PushbackInputStream, the read() method will return -1.",NULL
To push a byte back into the Java PushbackInputStream you use the unread() method.,NULL
"This example first reads a byte from the PushbackInputStream, then pushes it back into the PushbackInputStream, and then reads that byte back again with the final read() call.","(""PushbackInputStream"", ""The method 'read' operates on the class 'PushbackInputStream' to read a byte."", ""read"")"
"The Java PushbackReader class, java.io.PushbackReader, is intended to be used when you parse data from a Reader.",NULL
These characters will then be read again the next time you call read().,NULL
The call to read() reads a character from the PushbackReader just like from any other Reader.,"(""read"", ""The method read() is called on the PushbackReader to read a character."", ""PushbackReader"")"
The call to unread() pushes a character back into the PushbackReader.,NULL
The next time read() is called the pushed back characters will be read first.,NULL
"If you push back multiple characters into the PushbackReader, the latest pushed back character will be returned first from the read() method, just like with a stack.",NULL
You read characters from a Java PushbackReader just like you do from a Java Reader - because PushbackReader is a Java Reader subclass.,NULL
"In other words, you use its read() method which is inherited from the Reader class.",NULL
Here is an example of reading characters from a Java PushbackReader via its read() method:,NULL
"The read() returns an int which you will have to cast to a char yourself, as shown in the example above.","(""read"", ""The read() method returns an int."", ""int"")"
When there are no characters available in the PushbackReader the read() method will return the int value -1.,NULL
To push a character back into a Java PushbackReader you must call its unread() method.,NULL
"This way the nextToken() method can ""sample"" the first character of the next token, and based on that decide what kind of token it is, and what read method to call for that kind of token.","(""nextToken"", ""The nextToken method samples the first character of the next token to determine its type."", ""token"")"
"For the readSingleTokenWord() however, it is necessary, as the character read is the first character of the token's value.",NULL
"The implementations of the readDoubleQuotedToken(), readSingleQuotedToken() and readSingleWordToken() have been left out to keep the example short.",NULL
"Just imagine they read a token enclosed by double quotes (""), single quotes (') or a token which ends with a non-word character (e.g.","(""Token"", ""A Token can be enclosed by double quotes."", ""Double Quotes""); (""Token"", ""A Token can be enclosed by single quotes."", ""Single Quotes"")"
The Java RandomAccessFile class in the Java IO API allows you to move navigate a file and read from it or write to it as you please.,NULL
Before you can work with the RandomAccessFile class you must instantiate it.,NULL
You can obtain the current position of a Java RandomAccessFile using its getFilePointer() method.,NULL
Here is an example of obtaining the current position of a RandomAccessFile using its getFilePointer() method:,NULL
Reading a byte from a Java RandomAccessFile is done using its read() method.,NULL
The read() method reads the byte located a the position in the file currently pointed to by the file pointer in the RandomAccessFile instance.,NULL
Here is a thing the JavaDoc forgets to mention: The read() method increments the file pointer to point to the next byte in the file after the byte just read!,NULL
This means that you can continue to call read() without having to manually move the file pointer.,NULL
This example reads a sequence of bytes into the dest byte array passed as parameter to the read() method.,"(""dest"", ""The dest byte array is passed as a parameter to the read() method."", ""read"")"
The read() method will start reading in the file from the current file position of the RandomAccessFile.,NULL
"The read() method will start writing data into the byte array starting from the array position provided by the offset parameter, and at most the number of bytes provided by the length parameter.","(""read"", ""The read() method writes data into the byte array."", ""byte array""); (""read"", ""The read() method uses the offset parameter to determine the starting position in the byte array."", ""offset"")"
You can write a single byte to a RandomAccessFile using its write() method which takes an int as parameter.,NULL
"Remember, calling this write() method will advance the file position of the RandomAccessFile by 1.",NULL
Writing to a RandomAccessFile can be done using one it its many write() methods.,NULL
Just like with the read() method the write() method advances the file pointer after being called.,NULL
The RandomAccessFile has a close() method which must be called when you are done using the RandomAccessFile instance.,NULL
You can see example of calls to close() in the examples above.,NULL
"The Java Reader class, java.io.Reader, is the base class for all Reader subclasses in the Java IO API.","(""Java Reader"", ""Java Reader is the base class for all Reader subclasses in the Java IO API."", ""java.io.Reader""); (""java.io.Reader"", ""java.io.Reader is the base class for all Reader subclasses."", ""Reader subclasses"")"
"This is done when you instantiate the Reader (actually, when you instantiate one of its subclasses).",NULL
You will normally use a Reader subclass rather than a Reader directly.,NULL
Here is an example of creating a Java FileReader which is a subclass of Java Reader:,NULL
The read() method of a Java Reader returns an int which contains the char value of the next character read.,NULL
"If the read() method returns -1, there is no more data to read in the Reader, and it can be closed.",NULL
"If not, it processes that char and continues reading until -1 is returned from the Reader read() method.",NULL
"The Java Reader class also has a read() method that takes a char array as parameter, as well as a start offset and length.","(""Java Reader"", ""The read() method is a part of the Java Reader class."", ""read"")"
The Java Reader class has a method named skip() which can be used to skip over a number of characters in the input that you do not want to read.,NULL
The Java StreamTokenizer class (java.io.StreamTokenizer) can tokenize the characters read from a Reader into tokens.,NULL
You do so by calling the nextToken() method of the StreamTokenizer inside a loop.,NULL
"After each call to nextToken() the StreamTokenizer has several fields you can read to see what kind of token was read, it's value etc.",NULL
"Java has 3 streams called System.in, System.out, and System.err which are commonly used to provide input to, and output from Java applications.","(""Java"", ""Java applications commonly use System.in for input."", ""System.in""); (""Java"", ""Java applications commonly use System.out for output."", ""System.out"")"
Most commonly used is probably System.out for writing output to the console from console programs (command line applications).,NULL
"System.in, System.out and System.err are initialized by the Java runtime when a Java VM starts up, so you don't have to instantiate any streams yourself (although you can exchange them at runtime).","(""System.in"", ""System.in is initialized by the Java runtime when a Java VM starts up."", ""Java VM""); (""System.out"", ""System.out is initialized by the Java runtime when a Java VM starts up."", ""Java VM"")"
System.in is an InputStream which is typically connected to keyboard input of console programs.,NULL
"In other words, if you start a Java application from the command line, and you type something on the keyboard while the CLI console (or terminal) has focus, the keyboard input can typically be read via System.in from inside that Java application.","(""System"", ""System.in is a method used to read keyboard input in Java applications."", ""in"")"
"However, it is only keyboard input directed to that Java application (the console / terminnal that started the application) which can be read via System.in.","(""System"", ""System.in is a method used within the Java application context."", ""Java"")"
Keyboard input for other applications cannot be read via System.in .,NULL
"System.in is not used as often since data is commonly passed to a command line Java application via command line arguments, files, or possibly via network connections if the application is designed for that.",NULL
System.out normally outputs the data you write to it to the CLI console / terminal.,"(""System"", ""System is a class that contains the method out for outputting data."", ""out"")"
System.out is often used from console-only programs like command line tools as a way to display the result of their execution to the user.,"(""System.out"", ""System.out is used in console-only programs to display results."", ""console-only programs"")"
System.err works like System.out except it is normally only used to output error texts.,NULL
"Some programs (like Eclipse) will show the output to System.err in red text, to make it more obvious that it is error text.",NULL
"Even if the 3 System streams are static members of the java.lang.System class, and are pre-instantiated at JVM startup, you can change what streams to use for each of them.",NULL
"Just set a new InputStream for System.in or a new OutputStream for System.out or System.err, and all further data will be read / written to the new stream.","(""InputStream"", ""InputStream is a class that can be set to read data from System.in."", ""System""); (""OutputStream"", ""OutputStream is a class that can be set to write data to System.out or System.err."", ""System""); (""in"", ""System.in is a standard input stream associated with the InputStream class."", ""System""); (""out"", ""System.out is a standard output stream associated with the OutputStream class."", ""System"")"
"To set a new System stream, use one of th emethods System.setIn(), System.setOut() or System.setErr().","(""System"", ""System is the class that contains the method setIn."", ""setIn""); (""System"", ""System is the class that contains the method setOut."", ""setOut"")"
"Now all data written to System.out should be redirected into the file ""c:\\data\\system.out.txt"".",NULL
"Keep in mind though, that you should make sure to flush System.out and close the file before the JVM shuts down, to be sure that all data written to System.out is actually flushed to the file.","(""System.out"", ""System.out is a method that is used within the context of the JVM."", ""JVM"")"
The Java Writer class (java.io.Writer) is the base class for all Writer subclasses in the Java IO API.,NULL
"The Java Writer subclasses can normally handle UTF-8 and UTF-16 encoding for you, so you don't have to worry about that.","(""Java Writer"", ""Java Writer subclasses can handle UTF-8 encoding."", ""UTF-8"")"
You will normally use a Writer subclass rather than a Writer directly.,NULL
The Java Writer's flush() method flushes all data written to the Writer to the underlying data destination.,NULL
"By calling flush() you can assure that any buffered data will be flushed (written) to disk (or network, or whatever else the destination of your Writer has).",NULL
Here is an example of flushing data written to a Java Writer by calling its flush() method:,NULL
"The concrete implementations of hasMoreCharacters() and getNextCharacter() are left out, but they are not really super important to understand the principle of this example.",NULL
"What matters is, that once the while loop ends, and you are done writing data to the Writer, its close() method is called, which closes the Writer .",NULL
"Once the try block is exited, the close() method of the Writer is called automatically, because the Writer was declared inside the parentheses of the try block.",NULL
"The SQL dialect used by the various different databases will vary slightly, so to be 100% database independent, you SQL must also be 100% database independent (i.e.",NULL
The Java String parameter passed to the Class forName() method is the name of the JDBC driver class for the given JDBC driver.,"(""forName()"", ""The forName() method is used to obtain the Class object associated with the specified class name."", ""Class""); (""String"", ""The String parameter is passed to the forName() method."", ""forName()""); (""JDBC driver class"", ""The JDBC driver class is the name of the class that is being referenced."", ""Class"")"
You will have to find the right class name for the JDBC driver you are using.,NULL
"Typically, each database has its own JDBC driver, so you will have to look up what the JDBC driver class name is (if you are using pre Java 6).",NULL
"First you add the SQL statements to be executed in the batch, using the addBatch() method.",NULL
The int[] array returned by the executeBatch() method is an array of int telling how many records were affected by each executed SQL statement in the batch.,"(""executeBatch()"", ""The executeBatch() method returns an int[] array."", ""int[]"")"
"Second, each set of parameter values are inserted into the preparedStatement, and the addBatch() method is called.",NULL
"Third, the executeBatch() method is called, which executes all the batch updates.",NULL
"By the way, imagine that the used Person class looks like this:",NULL
A java.sql.CallableStatement is used to call stored procedures in a database.,NULL
"A stored procedure is like a function or method in a class, except it lives inside the database.","(""StoredProcedure"", ""A stored procedure is compared to a function, indicating they are similar types of methods."", ""Function""); (""StoredProcedure"", ""A stored procedure is described as being like a method, suggesting a relationship in functionality."", ""Method""); (""Method"", ""Methods are defined within classes, establishing a relationship between them."", ""Class"")"
You create an instance of a CallableStatement by calling the prepareCall() method on a connection object.,"(""prepareCall"", ""The prepareCall method is used to create an instance of the CallableStatement class."", ""CallableStatement"")"
"If the stored procedure returns a ResultSet, and you need a non-default ResultSet (e.g.",NULL
The executeQuery() method is used if the stored procedure returns a ResultSet.,NULL
"If the stored procedure just updates the database, you can call the executeUpdate() method instead, like this:",NULL
"The JDBC Connection class, java.sql.Connection, represents a database connection to a relational database.","(""JDBC Connection"", ""JDBC Connection is represented by the java.sql.Connection class."", ""java.sql.Connection"")"
Each JDBC driver has a primary driver class that initializes the driver when it is loaded.,NULL
You open a JDBC Connection by call the java.sql.DriverManager class method getConnection().,"(""DriverManager"", ""The method getConnection() is a method of the DriverManager class."", ""getConnection"")"
This is how calling getConnection() only with the URL as parameter looks:,NULL
"The second variant of getConnection() takes both a database URL, a user name and a password as parameters.","(""getConnection"", ""getConnection() is a method that takes database URL as a parameter."", ""database URL""); (""getConnection"", ""getConnection() is a method that takes user name as a parameter."", ""user name"")"
Here is an example of calling that variant of getConnection() :,NULL
The third variant of getConnection() takes a database URL and a Properties object as parameter.,"(""getConnection"", ""getConnection() takes a Properties object as a parameter"", ""Properties"")"
"The JDBC Connection setAutoCommit() method is used to switch the connection into, or out of, auto commit mode.","(""JDBC Connection"", ""The setAutoCommit() method is a function of the JDBC Connection class that manages the auto commit mode."", ""setAutoCommit()"")"
"When not in auto commit mode, each database transaction must be explicitly committed by calling the Connection commit() method.",NULL
"Keep in mind, that if some of the operations in the transaction fail, you would most likely want to call the rollback() method instead of commit().",NULL
The Java JDBC Connection rollback() method rolls back the operations executed within the currently ongoing transaction.,NULL
Exactly how to handle the calls to commit() and / or rollback() is covered in the JDBC Transactions Tutorial.,"(""JDBC Transactions Tutorial"", ""The JDBC Transactions Tutorial covers how to handle calls to commit()."", ""commit"")"
Here is a simple example of calling the JDBC Connection rollback() method:,"(""Connection"", ""The rollback() method is a method of the Connection class in JDBC."", ""rollback"")"
Notice how rollback() is called within the catch-block of a try-catch block.,NULL
Here is an example of creating a JDBC Statement instance via the JDBC Connection createStatement() method:,"(""Connection"", ""The createStatement() method is a method of the Connection class used to create a JDBC Statement instance."", ""createStatement"")"
Here is an example of creating a JDBC PreparedStatement instance via the JDBC Connection prepareStatement() method:,"(""Connection"", ""The Connection class is used to create an instance of PreparedStatement via the prepareStatement() method."", ""PreparedStatement"")"
The JDBC Connection getMetaData() method returns a JDBC DatabaseMetaData object which can be used to introspect the database the JDBC Connection is connected to.,"(""getMetaData"", ""The getMetaData() method returns a DatabaseMetaData object."", ""DatabaseMetaData""); (""JDBC Connection"", ""The JDBC Connection class has a method called getMetaData()."", ""getMetaData"")"
Here is an example of creating a JDBC DatabaseMetaData object via the JDBC Connection getMetaData() method:,"(""Connection"", ""getMetaData() is a method of the Connection class that retrieves the DatabaseMetaData object."", ""getMetaData"")"
Through the java.sql.DatabaseMetaData interface you can obtain meta data about the database you have connected to.,NULL
"First you call the getTables() method, passing it 4 parameters which are all null.",NULL
The ResultSet returned from the getTables() method contains a list of table names matching the 4 given parameters (which were all null).,"(""getTables"", ""The getTables() method returns a ResultSet containing a list of table names."", ""ResultSet"")"
The ResultSet returned by the getColumns() method contains a list of columns for the given table.,"(""getColumns"", ""The getColumns() method returns an instance of the ResultSet class."", ""ResultSet"")"
The column type is an integer matching one of the type constants found in java.sql.Types,NULL
"First you call the getPrimaryKeys() method, passing 3 parameters to it.",NULL
The ResultSet returned by the getPrimaryKeys() method contains a list of columns which make up the primary key of the given table.,"(""getPrimaryKeys"", ""The getPrimaryKeys() method returns a ResultSet containing the primary key information for a table."", ""ResultSet""); (""ResultSet"", ""The ResultSet contains a list of columns that make up the primary key."", ""columns""); (""columns"", ""The columns are part of the primary key of the table."", ""primary key"")"
"A JDBC driver is a set of Java classes that implement the JDBC interfaces, targeting a specific database.","(""JDBC Driver"", ""A JDBC driver is composed of a set of Java classes that implement JDBC interfaces."", ""Java Classes""); (""Java Classes"", ""Java classes implement the JDBC interfaces."", ""JDBC Interfaces"")"
A JDBC driver is a collection of Java classes that enables you to connect to a certain database.,"(""JDBC Driver"", ""A JDBC driver is composed of a collection of Java classes."", ""Java Classes"")"
"This works for executing queries too, using the executeQuery() method, which returns a ResultSet.",NULL
"The ResultSet.next() method moves to the next row in the ResultSet, if there are anymore rows.",NULL
You need to call next() at least one time before you can read any data.,NULL
Before the first next() call the ResultSet is positioned before the first row.,NULL
"You can get column data for the current row by calling some of the getXXX() methods, where XXX is a primitive data type.","(""getXXX"", ""The method getXXX() is used to retrieve data for the current row."", ""current row"")"
The column name to get the value of is passed as parameter to any of these getXXX() method calls.,NULL
"You can get the index of a given column by calling the ResultSet.findColumn() method, like this:",NULL
The text about queries shows how the result of a query is returned as a java.sql.ResultSet.,NULL
"The next() method returns true if the ResultSet has a next record, and moves the ResultSet to point to the next record.",NULL
"If there were no more records, next() returns false, and you can no longer.",NULL
"Once the next() method has returned false, you should not call it anymore.",NULL
Here is an example of iterating a ResultSet using the next() method:,NULL
"As you can see, the next() method is actually called before the first record is accessed.",NULL
"Once next() has been called once, it points at the first record.",NULL
"Similarly, when next() is called and returns false, the ResultSet is actually pointing after the last record.",NULL
You do so by calling one or more of the many getXXX() methods.,NULL
"You pass the name of the column to get the value of, to the many getXXX() methods.",NULL
"There are a lot of getXXX() methods you can call, which return the value of the column as a certain data type, e.g.",NULL
Here is a list of quick examples of these getXXX() methods:,NULL
The getXXX() methods also come in versions that take a column index instead of a column name.,"(""getXXX"", ""The getXXX() method can take a column index as an argument."", ""column index"")"
"If you do not know the index of a certain column you can find the index of that column using the ResultSet.findColumn(String columnName) method, like this:",NULL
The DatabaseMetaData.supportsResultSetType(int type) method returns true or false depending on whether the given type is supported or not.,"(""DatabaseMetaData"", ""The supportsResultSetType method is a member of the DatabaseMetaData class."", ""supportsResultSetType"")"
The DatabaseMetaData.supportsResultSetConcurrency(int concurrency) method returns true or false depending on whether the given concurrency mode is supported or not.,"(""DatabaseMetaData"", ""The method supportsResultSetConcurrency is a method of the DatabaseMetaData class."", ""supportsResultSetConcurrency"")"
It is when updateRow() is called that the database is updated with the values of the row.,NULL
"If you call updateRow() inside a transaction, the data is not actually committed to the database until the transaction is committed.",NULL
"The row pointed to after calling moveToInsertRow() is a special row, a buffer, which you can use to build up the row until all column values has been set on the row.","(""moveToInsertRow"", ""moveToInsertRow() is a method that operates on the row class."", ""row"")"
"Once the row is ready to be inserted into the ResultSet, call the insertRow() method.",NULL
"If you need to insert another row, explicitly call moveToInsertRow() to signal this to the ResultSet.",NULL
The ResultSet holdability determines if a ResultSet is closed when the commit() method of the underlying connection is called.,NULL
The DatabaseMetaData.supportsResultSetHoldability(int holdability) returns true or false depending on whether the given holdability mode is supported or not.,"(""DatabaseMetaData"", ""DatabaseMetaData is the class that contains the method supportsResultSetHoldability."", ""supportsResultSetHoldability"")"
The CLOSE_CURSORS_OVER_COMMIT holdability means that all ResultSet instances are closed when connection.commit() method is called on the connection that created the ResultSet.,"(""CLOSE_CURSORS_OVER_COMMIT"", ""CLOSE_CURSORS_OVER_COMMIT holdability indicates that all ResultSet instances are closed when the commit method is called."", ""ResultSet""); (""ResultSet"", ""ResultSet instances are created by the connection."", ""connection"")"
The HOLD_CURSORS_OVER_COMMIT holdability means that the ResultSet is kept open when the connection.commit() method is called on the connection that created the ResultSet.,"(""HOLD_CURSORS_OVER_COMMIT"", ""HOLD_CURSORS_OVER_COMMIT holdability indicates the behavior of the ResultSet when the commit method is called."", ""ResultSet""); (""ResultSet"", ""The ResultSet is associated with the connection that created it."", ""connection"")"
"Thus, you can open a ResultSet, update rows in it, call connection.commit() and still keep the same ResultSet open for future transactions on the same rows.",NULL
"The Java JDBC Statement, java.sql.Statement, interface is used to execute SQL statements against a relational database.","(""JDBC Statement"", ""JDBC Statement is a class that represents the java.sql.Statement interface."", ""java.sql.Statement"")"
"You do so by calling its executeQuery() method, passing an SQL statement as parameter.",NULL
The Statement executeQuery() method returns a Java JDBC ResultSet which can be used to navigate the response of the query.,"(""Statement"", ""The executeQuery() method is a method of the Statement class."", ""executeQuery()""); (""executeQuery()"", ""The executeQuery() method returns a ResultSet."", ""ResultSet"")"
Here is an example of calling the Java JDBC Statement executeQuery() and navigating the returned ResultSet:,"(""Statement"", ""Statement class has a method called executeQuery() which is used to execute SQL queries."", ""executeQuery()"")"
"The rowsAffected returned by the statement.executeUpdate(sql) call, tells how many records in the database were affected by the SQL statement.","(""statement"", ""The executeUpdate method is called on the statement object to perform an update operation."", ""executeUpdate"")"
The classic example of when transactions are necessary is the example of bank accounts.,NULL
"But, instead of calling the executeQuery() method, you call the executeUpdate() method.",NULL
The executeUpdate() method is used for both of these types of updates.,NULL
"Again, the rowsAffected returned by the statement.executeUpdate(sql) call, tells how many records in the database were affected by the SQL statement.","(""rowsAffected"", ""rowsAffected is the result returned by the executeUpdate method, indicating the number of records affected by the SQL statement."", ""executeUpdate""); (""executeUpdate"", ""executeUpdate is a method called on the statement class to execute the SQL command."", ""statement"")"
"Once you have installed the Java SDK, test that you have it working by opening a command prompt (textual interface to your computer, ala Unix Shell, Windows CMD etc.)",NULL
"A Java abstract class is a class which cannot be instantiated, meaning you cannot create new instances of an abstract class.",NULL
The purpose of an abstract class is to function as a base for subclasses.,NULL
"This Java abstract class tutorial explains how abstract classes are created in Java, what rules apply to them.",NULL
This tutorial gets into the purpose of abstract classes in Java in more detail towards the end of this text.,NULL
In Java you declare that a class is abstract by adding the abstract keyword to the class declaration.,NULL
That is all there is to declaring an abstract class in Java.,NULL
"If you try to compile the code above the Java compiler will generate an error, saying that you cannot instantiate MyAbstractClass because it is an abstract class.",NULL
"If a class has an abstract method, the whole class must be declared abstract.",NULL
Not all methods in an abstract class have to be abstract methods.,NULL
An abstract class can have a mixture of abstract and non-abstract methods.,"(""AbstractClass"", ""An abstract class can contain abstract methods."", ""AbstractMethod"")"
Subclasses of an abstract class must implement (override) all abstract methods of its abstract superclass.,"(""AbstractClass"", ""An abstract class contains abstract methods that must be implemented by its subclasses."", ""AbstractMethod"")"
The non-abstract methods of the superclass are just inherited as they are.,NULL
Notice how MySubClass has to implement the abstract method abstractMethod() from its abstract superclass MyAbstractClass.,"(""MySubClass"", ""MySubClass implements the abstract method abstractMethod() from its abstract superclass."", ""abstractMethod"")"
"The only time a subclass of an abstract class is not forced to implement all abstract methods of its superclass, is if the subclass is also an abstract class.",NULL
The purpose of abstract classes is to function as base classes which can be extended by subclasses to create a full implementation.,NULL
"If the steps before and after the action are always the same, the 3-step process could be implemented in an abstract superclass with this Java code:","(""3-step process"", ""The 3-step process can be implemented in an abstract superclass, indicating a relationship where the process is a concept that can be defined in the superclass."" "", ""abstract superclass"")"
Subclasses of MyAbstractProcess can now extend MyAbstractProcess and just override the action() method.,NULL
"When the process() method of the subclass is called, the full process is executed, including the stepBefore() and stepAfter() of the abstract superclass, and the action() method of the subclass.","(""process"", ""The process() method is part of the subclass that executes the full process."", ""subclass""); (""stepBefore"", ""The stepBefore() method is part of the abstract superclass that is executed in the process."", ""abstractSuperclass""); (""stepAfter"", ""The stepAfter() method is part of the abstract superclass that is executed in the process."", ""abstractSuperclass"")"
"Of course, the MyAbstractProcess did not have to be an abstract class to function as a base class.",NULL
"However, by making the method to implement abstract, and thus the class too, you signal clearly to users of this class that this class should not be used as it is.",NULL
"Instead it should be used as a base class for a subclass, and that the abstract method should be implemented in the subclass.","(""BaseClass"", ""BaseClass is intended to be used as a base class for SubClass."", ""SubClass"")"
The above example did not have a default implementation for the action() method.,NULL
In some cases your superclass might actually have a default implementation for the method that subclasses are supposed to override.,"(""Superclass"", ""The superclass may provide a default implementation for the method that subclasses are expected to override."", ""Method"")"
"You can still make the superclass abstract though, even if it contains no abstract methods.",NULL
"Notice how the processURLData() is an abstract method, and that URLProcessorBase is an abstract class.",NULL
Subclasses of URLProcessorBase have to implement the processURLData() method because it is an abstract method.,NULL
Subclasses of URLProcessorBase abstract class can process data downloaded from URLs without worrying about opening and closing the network connection to the URL.,NULL
Subclasses only need to worry about processing the data from the InputStream passed to the processURLData() method.,NULL
This makes it easier to implement classes that processes data from URLs.,NULL
"Notice how the subclass only implements the processURLData() method, and nothing more.",NULL
The rest of the code is inherited from the URLProcessorBase superclass.,NULL
Here is an example of how to use the URLProcessorImpl class:,NULL
"The process() method is called, which is implemented in the URLProcessorBase superclass.",NULL
This method in turn calls the processURLData() in the URLProcessorImpl class.,NULL
The example I showed you above with the URLProcessorBase class is actually an example of the Template Method design pattern.,NULL
"The Template Method design pattern provides a partial implementation of some process, which subclasses can complete when extending the Template Method base class.",NULL
"A Java access modifier specifies which classes can access a given class and its fields, constructors and methods.","(""Java Access Modifier"", ""The Java access modifier determines which classes can access the specified class."", ""Class""); (""Java Access Modifier"", ""The Java access modifier specifies access to the fields of a class."", ""Fields""); (""Java Access Modifier"", ""The Java access modifier specifies access to the constructors of a class."", ""Constructors"")"
"Access modifiers can be specified separately for a class, its constructors, fields and methods.","(""Class"", ""Access modifiers can be specified for both the class and its constructors."", ""Constructors""); (""Class"", ""Access modifiers can be specified for both the class and its fields."", ""Fields""); (""Class"", ""Access modifiers can be specified for both the class and its methods."", ""Methods"")"
"Assigning an access modifier to a class, constructor, field or method is also sometimes referred to as ""marking"" that class, constructor, field or method as that which the access modifier specifies.","(""Class"", ""A method can be marked with an access modifier, similar to a class."", ""Method""); (""Class"", ""A constructor can be marked with an access modifier, similar to a class."", ""Constructor""); (""Class"", ""A field can be marked with an access modifier, similar to a class."", ""Field""); (""Constructor"", ""Both constructors and methods can be marked with access modifiers."", ""Method"")"
"If a method or variable is marked as private (has the private access modifier assigned to it), then only code inside the same class can access the variable, or call the method.","(""Class"", ""A method can only be called from within the same class if it is marked as private."", ""Method"")"
"Code inside subclasses cannot access the variable or method, nor can code from any external class.","(""subclasses"", ""Code inside subclasses cannot access the variable or method."", ""Code""); (""subclasses"", ""Code inside subclasses cannot access the variable or method."", ""variable""); (""subclasses"", ""Code inside subclasses cannot access the variable or method."", ""method"")"
"Marking a class with the private access modifier would mean that no other class could access it, which means that you could not really use the class at all.",NULL
"That means, that the member variable time inside the Clock class cannot be accessed from code outside the Clock class.",NULL
"In some cases the fields are truly private, meaning they are only used internally in the class.",NULL
In other cases the fields can be accessed via accessor methods (e.g.,NULL
In the above example the two methods getTime() and setTime() can access the time member variable.,"(""getTime"", ""The method getTime() accesses the time member variable."", ""time"")"
"If a constructor in a class is assigned the private Java access modifier, that means that the constructor cannot be called from anywhere outside the class.",NULL
"A private constructor can still get called from other constructors, or from static methods in the same class.","(""PrivateConstructor"", ""A private constructor can be called from other constructors."", ""OtherConstructors""); (""PrivateConstructor"", ""A private constructor can be called from static methods in the same class."", ""StaticMethods"")"
This version of the Clock class contains a private constructor and a public constructor.,"(""Clock"", ""The private constructor is a method defined within the Clock class."", ""private constructor"")"
The private constructor is called from the public constructor (the statement this();).,NULL
The private constructor is also called from the static method newClock().,NULL
The above example only serves to show you that a private constructor can be called from public constructors and from static methods inside the same class.,"(""PrivateConstructor"", ""A private constructor can be called from public constructors."", ""PublicConstructors""); (""PrivateConstructor"", ""A private constructor can be called from static methods inside the same class."", ""StaticMethods""); (""PublicConstructors"", ""Public constructors are defined within the class."", ""Class"")"
"The default access modifier means that code inside the class itself as well as code inside classes in the same package as this class, can access the class, field, constructor or method which the default access modifier is assigned to.","(""Class"", ""The class can access the method which the default access modifier is assigned to."", ""Method"")"
"Subclasses cannot access methods and member variables (fields) in the superclass, if they these methods and fields are marked with the default access modifier, unless the subclass is located in the same package as the superclass.","(""Subclasses"", ""Subclasses cannot access methods and member variables in the superclass if they are marked with the default access modifier."", ""superclass""); (""superclass"", ""Methods in the superclass can be accessed by subclasses if not marked with the default access modifier."", ""methods""); (""superclass"", ""Member variables in the superclass can be accessed by subclasses if not marked with the default access modifier."", ""member variables"")"
"The time field in the Clock class has no access modifier, which means that it is implicitly assigned the default / package access modifier.","(""Clock"", ""The time field is a member of the Clock class."", ""time"")"
"Therefore, the ClockReader class can read the time member variable of the Clock object, provided that ClockReader and Clock are located in the same Java package.","(""ClockReader"", ""ClockReader can read the time member variable of the Clock object."", ""Clock""); (""ClockReader"", ""ClockReader and Clock are located in the same Java package."", ""Java"")"
"The protected access modifier provides the same access as the default access modifier, with the addition that subclasses can access protected methods and member variables (fields) of the superclass.","(""Protected"", ""The protected access modifier provides the same access as the default access modifier."", ""Default""); (""Subclasses"", ""Subclasses can access protected methods and member variables of the superclass."", ""Protected"")"
This is true even if the subclass is not located in the same package as the superclass.,NULL
In the above example the subclass SmartClock has a method called getTimeInSeconds() which accesses the time variable of the superclass Clock.,"(""SmartClock"", ""SmartClock has a method called getTimeInSeconds()"", ""getTimeInSeconds"")"
"The Java access modifier public means that all code can access the class, field, constructor or method, regardless of where the accessing code is located.","(""public"", ""The public access modifier allows access to the class from any code."", ""class""); (""public"", ""The public access modifier allows access to the method from any code."", ""method""); (""public"", ""The public access modifier allows access to the field from any code."", ""field"")"
The accessing code can be in a different class and different package.,"(""AccessingCode"", ""The accessing code can be in a different class."", ""Class"")"
The time field in the Clock class is marked with the public Java access modifier.,NULL
"Therefore, the ClockReader class can access the time field in the Clock no matter what package the ClockReader is located in.","(""ClockReader"", ""ClockReader class can access the time field in the Clock."", ""Clock"")"
"It is important to keep in mind that the Java access modifier assigned to a Java class takes precedence over any access modifiers assigned to fields, constructors and methods of that class.","(""Java Class"", ""The access modifier assigned to a Java class takes precedence over any access modifiers assigned to its fields, constructors, and methods."", ""Access Modifier""); (""Java Class"", ""Fields are part of the Java class and are affected by the class's access modifier."", ""Fields""); (""Java Class"", ""Constructors are part of the Java class and are affected by the class's access modifier."", ""Constructors"")"
"If the class is marked with the default access modifier, then no other class outside the same Java package can access that class, including its constructors, fields and methods.","(""Class"", ""A class marked with the default access modifier cannot be accessed by classes outside the same Java package."", ""Java Package""); (""Class"", ""Constructors are part of the class and are affected by the access modifier."", ""Constructors""); (""Class"", ""Fields are part of the class and are affected by the access modifier."", ""Fields"")"
The Java access modifiers private and protected cannot be assigned to a class.,"(""Java"", ""The Java access modifier 'private' cannot be assigned to a class."", ""private"")"
Java interfaces are meant to specify fields and methods that are publicly available in classes that implement the interfaces.,"(""Java Interfaces"", ""Java interfaces specify methods that are publicly available."", ""Methods"")"
"When you create a subclass of some class, the methods in the subclass cannot have less accessible access modifiers assigned to them than they had in the superclass.","(""Subclass"", ""A subclass is a specific type of class that inherits from a superclass."", ""Class""); (""Subclass"", ""Methods in the subclass must maintain the same or greater access level as those in the superclass."", ""Method"")"
"For instance, if a method in the superclass is public then it must be public in the subclass too, in case the subclass overrides the method.","(""Method"", ""The method in the superclass must maintain its access level in the subclass if overridden."", ""Superclass"")"
If a method in the superclass is protected then it must be either protected or public in the subclass.,"(""Method"", ""The method in the superclass is related to the superclass as it defines the access level for methods in the subclass."", ""Superclass"")"
"For instance, if a method is assigned the default access modifier in the superclass, then it is allowed to assign the overridden method in the subclass the public access modifier.","(""Method"", ""The method in the superclass can have its access modifier overridden in the subclass."", ""Superclass"")"
"The build process includes generating source code, compiling the source, generating XML files (e.g.","(""BuildProcess"", ""The build process includes generating source code as part of its operations."", ""SourceCode"")"
"You can place Java annotations above classes, interfaces, methods, method parameters, fields and local variables.","(""Java"", ""Java annotations can be placed above classes, interfaces, methods, method parameters, fields, and local variables."", ""annotations""); (""annotations"", ""Annotations can be applied to classes."", ""classes""); (""annotations"", ""Annotations can be applied to interfaces."", ""interfaces""); (""annotations"", ""Annotations can be applied to methods."", ""methods""); (""annotations"", ""Annotations can be applied to method parameters."", ""method parameters""); (""annotations"", ""Annotations can be applied to fields."", ""fields"")"
"Here is a bigger example with annotations above both the class, fields, methods, parameters and local variables:","(""Example"", ""The class 'Example' contains methods that are annotated with 'Annotations'."", ""Annotations""); (""Example"", ""The class 'Example' has methods defined within it."", ""Methods""); (""Example"", ""The class 'Example' has fields that may be used by its methods."", ""Fields""); (""Example"", ""The class 'Example' may have methods that take 'Parameters' as input."", ""Parameters"")"
"If your code uses deprecated classes, methods or fields, the compiler will give you a warning.","(""Code"", ""The code is processed by the compiler which checks for deprecated elements."", ""Compiler"")"
"If the method does not match a method in the superclass, the compiler will give you an error.",NULL
"In case someone changed the name of the overridden method in the superclass, your subclass method would no longer override it.","(""Subclass"", ""The subclass is related to the superclass as it is attempting to override a method defined in the superclass."", ""Superclass"")"
"In case the method doTheThing() in MySuperClass changes signature so that the same method in the subclass no longer overrides it, the compiler will generate an error.",NULL
"Annotations are defined in their own file, just like a Java class or interface.","(""Annotations"", ""Annotations are defined in their own file, just like a Java class or interface."", ""Java"")"
"RetentionPolicy.CLASS means that the annotation is stored in the .class file, but not available at runtime.","(""RetentionPolicy"", ""RetentionPolicy.CLASS indicates the storage of the annotation in the .class file."", ""CLASS"")"
"RetentionPolicy.SOURCE means that the annotation is only available in the source code, and not in the .class files and not a runtime.",NULL
"The second line declares an array of references to objects of the class MyClass, which symbolizes a class you have created yourself.",NULL
Personally I prefer to locate the square brackets [] after the data type (e.g.,NULL
Java allows you to create an array of references to any type of object (to instances of any class).,"(""Java"", ""Java is a programming language that allows the creation of arrays."", ""array""); (""array"", ""An array can hold references to any type of object."", ""object"")"
Notice how the values to be inserted into the array are listed inside the { ... } block.,NULL
"Of course, if the insertIntoArray() method is located in a different class than the above code, you would need an object of that class in order to be able to call the method.",NULL
"Or, if the insertIntoArray() method was static, you would need to put the class name and a dot in front of the method name.",NULL
"This removeFromArray() method takes two parameters: The array to remove the element from, and the index of the element to remove.",NULL
"Of course, if the removeFromArray() method is located in a different class than the above code, you would need an object of that class in order to be able to call the method.",NULL
"Or, if the removeFromArray() method was static, you would need to put the class name and a dot in front of the method name.",NULL
The example first sets the minVal to Integer.MAX_VALUE which is the highest possible value an int can take.,NULL
"Java contains a special utility class that makes it easier for you to perform many often used array operations like copying and sorting arrays, filling in data, searching in arrays etc.","(""Java"", ""Java contains a special utility class that makes it easier for you to perform many often used array operations."", ""utility class""); (""utility class"", ""The utility class provides methods for performing array operations."", ""array operations""); (""utility class"", ""The utility class includes a method for copying arrays."", ""copying""); (""utility class"", ""The utility class includes a method for sorting arrays."", ""sorting""); (""utility class"", ""The utility class includes a method for filling in data in arrays."", ""filling in data"")"
The utility class is called Arrays and is located in the standard Java package java.util.,NULL
I will cover a few of the methods found in this class in the following sections.,NULL
"Remember, in order to use java.util.Arrays in your Java classes you must import it.",NULL
Here is how importing java.util.Arrays could look in a Java class of your own:,NULL
It is this statement that imports the class java.util.Arrays into your Java class.,NULL
The second method to copy a Java array is to use the Arrays.copyOf() method.,NULL
The third method to copy a Java array is to use the Arrays.copyOfRange() method.,NULL
"The Arrays.copyOfRange() method copies a range of an array, not necessarily the full array.","(""copyOfRange"", ""The copyOfRange method is a method of the Arrays class that operates on arrays."", ""Arrays"")"
Here is how copying a full array using Arrays.copyOfRange() in Java looks:,"(""Arrays"", ""copyOfRange is a method of the Arrays class used to copy a portion of an array."", ""copyOfRange"")"
You can convert an Java array of primitive types to a String using the Arrays.toString() method.,NULL
Here is an example of how to convert an array of int to a String using Arrays.toString():,NULL
You can sort the elements of an array using the Arrays.sort() method.,NULL
After the for loop the array is converted to a String using Arrays.toString() and printed out to the console (command line).,"(""Arrays"", ""The method toString is called on the class Arrays to convert the array to a String."", ""toString"")"
The Arrays.sort() example shown earlier only works for Java arrays of primitive data types.,"(""Arrays"", ""The method sort() is a function that operates on the class Arrays to sort its elements."", ""sort"")"
Here is first the class for the objects we want to sort:,NULL
The class Employee is a simple model of an employee (I have created the Employee class).,NULL
Here is first an example of sorting an array of Employee objects by their name using the Arrays.sort() method:,"(""Arrays"", ""The Arrays package provides the sort method for sorting arrays."", ""sort"")"
The array is of type Employee - the class I showed you earlier.,NULL
"As parameter to the Arrays.sort() method we pass the employee array, and a Comparator implementation which can determine the order of Employee objects.","(""Arrays.sort"", ""The Arrays.sort() method is used to sort the employee array."", ""employee array"")"
Anonymous implementations of interfaces are covered in my text about nested classes in Java.,"(""Anonymous Implementations"", ""Anonymous implementations are a type of implementation for interfaces."", ""Interfaces"")"
What is important to catch in this example is the implementation of the compare() method of the anonymous inner implementation of the Comparator interface.,NULL
In the example above we simply call the String.compare() method which does the comparison for us (compares the employee names).,NULL
"Here is the example from before, with a modified implementation of the compare() method of the anonymous implementation of the Comparator interface:",NULL
Notice how the compare() method returns the difference between the employee ids by subtracting one from the other.,NULL
"To compare the Employee objects in the array first by their name, and if that is the same, then by their employee id, the compare() implementation would look like this:",NULL
These Arrays.fill() methods can fill an array with a given value.,NULL
Here is an example of using Arrays.fill() to fill an int array:,NULL
"There is a version of the Arrays.fill() method which takes a from and to index, so only elements with indexes in this interval are filled with the given value.",NULL
"You can do so yourself, or via the Arrays.sort() method covered earlier in this text.",NULL
The binarySearch() method will return the index in the array in which the element was found.,NULL
"If all elements in the array are smaller than the sought value, then binarySearch() will return - length of the array - 1.",NULL
Therefore binarySearch() will return -length (-6) - 1 = -6 -1 = -7.,NULL
The Arrays.binarySearch() method also exists in a version where you just search part of the array.,"(""Arrays"", ""The binarySearch method is a member of the Arrays class."", ""binarySearch"")"
"This version of binarySearch() works just like the other version, except in the cases where no matching element is found.",NULL
"If no element is found matching within the index interval, then binarySearch() will still return the index of where the value should have been inserted.",NULL
"But, if all values in the interval are smaller than the sought value, binarySearch() will return -toIndex -1 , and not -array length - 1.","(""binarySearch"", ""binarySearch() method returns a value related to toIndex when all values are smaller than the sought value."", ""toIndex"")"
The java.util.Arrays class contains a set of methods called equals() which can be used to check if two Java arrays are equal.,"(""Arrays"", ""The equals() method is a method contained within the Arrays class."", ""equals()"")"
"Java classes are some of the core building blocks of Java applications, toolkits, frameworks, APIs etc.","(""Java Classes"", ""Java Classes are core building blocks used to create Java Applications."", ""Java Applications""); (""Java Classes"", ""Java Classes are used in the development of Toolkits."", ""Toolkits""); (""Java Classes"", ""Java Classes are utilized in building Frameworks."", ""Frameworks"")"
"A small Java application may consist of a single Java class with a main() method in, as covered in the Java main method tutorial.","(""Java Application"", ""A Java application may consist of a single Java class."", ""Java Class""); (""Java Class"", ""The main() method is part of the Java class."", ""main()"")"
"As your Java application grows, keeping all the code in the same class makes it harder and harder to keep an overview of the code.",NULL
Therefore it might be beneficial to start splitting the Java code up into multiple classes.,NULL
"A Java class is a single, coherent unit of Java code which belongs together.",NULL
A Java class may contain a mix of data (variables) and actions (methods).,NULL
Grouping variables and operations on these variables into Java classes makes it easier to structure your Java program when it gets too big to fit comfortably inside a single Java class.,"(""Grouping Variables"", ""Grouping variables are organized into Java classes to improve program structure."", ""Java Classes"")"
"Therefore, as the class grows, the file you are editing grows too, and becomes harder to keep an overview of in your head.",NULL
"Your Java application will typically have to contain at least a single Java class, but it may contain as many classes as you see fit to divide your application into.",NULL
"Java also comes with a lot of predefined classes for you, so you don't have to code every little function you might desire yourself.",NULL
"Fields are variables (data) that are local to the class, or instances (objects) of that class.","(""Fields"", ""Fields are variables that are local to the class or instances of that class."", ""class"")"
Methods are operations that the class or instances of that class can perform.,NULL
Nested classes are Java classes that are defined inside another class.,"(""Nested Classes"", ""Nested classes are defined inside Java classes."", ""Java Classes"")"
"Nested classes are typically intended to either be used only internally be the Java class that contains them, or to be used in connection with the class that contains them.",NULL
Nested classes are covered in more detail in my Java nested class tutorial.,NULL
"Sometimes you have classes that only contain fields (data), and sometimes you have classes that only contain methods (operations).",NULL
It depends on what the Java class is supposed to do.,NULL
All it takes to define a class in Java is this:,NULL
The above class definition should be put in its own file named MyClass.java.,NULL
"Java files should be named the same as the name of the class they contain, with the .java as file name extension.",NULL
Make sure you keep the same uppercase and lowercase characters from the class name in the file name too.,NULL
"Only put a single class definition in each Java file, unless your class contains inner classes of some kind.",NULL
"As mentioned earlier, a Java class can contain data in the shape of variables.",NULL
The next example shows a Java class which is to model a car.,NULL
A constructor is a special method that is called when an object of the given class is created (explained later).,NULL
The purpose of a constructor is to initialize the fields in the class.,NULL
Here is an example of a Java class with two constructors:,"(""ExampleClass"", ""ConstructorOne is a method of ExampleClass."", ""ConstructorOne"")"
"The constructors are the two methods that have the same name as the class, and which have no return type specified.","(""Constructors"", ""Constructors are defined as methods that share the same name as the class."", ""Methods"")"
"A Java method contains Java instructions that typically perform some operations on a field in the class, or on one of the parameters (also variables) values passed to the method when the method was called.","(""Java Method"", ""A Java method contains Java instructions that typically perform some operations."", ""Java Instructions""); (""Java Method"", ""A Java method typically performs operations on a field in the class."", ""Field""); (""Java Method"", ""A Java method operates on parameters passed to it when called."", ""Parameters"")"
"Here is the Java class, Car example from the previous section with a method added:",NULL
In the class definition above I have added a setColor() method.,NULL
"As mentioned earlier, you can define a nested class inside another Java class.",NULL
Here is an example of defining a nested class inside a Java class:,NULL
"In the example above, the outer class is called MyClass and the nested class is called MyNestedClass .",NULL
"Neither of the classes in this example has any fields or methods, but both the outer and nested class could have as many fields and methods as you see fit.","(""Classes"", ""The outer class is one of the classes mentioned in the example."", ""Outer Class""); (""Classes"", ""The nested class is another class mentioned in the example."", ""Nested Class""); (""Outer Class"", ""The outer class could have methods as stated in the text."", ""Methods"")"
You can read more about nested classes in my tutorial about nested classes in Java,NULL
A Java class is a template for how objects of that class looks.,NULL
"In other words, the Car class in the previous section is a template for how Car objects look.",NULL
"To create objects of a certain class, you use the new keyword.",NULL
"This example creates 3 Car variables, and assign a new instance of the Car class to each variable.",NULL
"Thus, the fields of different objects (even of the same class) can vary independently of each other.","(""Fields"", ""Fields are attributes of objects that can vary independently."", ""Objects"")"
"After creating the 3 Car objects, the setColor() method is called on each object.",NULL
"Creating an object of a certain class is also called ""instantiating"" an object.",NULL
"The object is thus also called an ""instance"" of the given class.",NULL
"For instance, each of the Car objects above are also called an instance of the Car class, or simply ""Car instances"".",NULL
What you have seen in this text only covers the very basics of Java classes.,NULL
"You need to learn about fields, constructors, methods nested classes, abstract classes, inheritance, access modifiers and interfaces too.","(""Methods"", ""Methods are used to manipulate or interact with fields in a class."", ""Fields""); (""Constructors"", ""Constructors initialize fields in a class."", ""Fields""); (""Inheritance"", ""Inheritance allows for the creation of subclasses from abstract classes."", ""Abstract Classes""); (""Access Modifiers"", ""Access modifiers control the visibility of methods in a class."", ""Methods"")"
"Here is a simple example that creates an object, which results in the class constructor being called:",NULL
The example shows a very simple Java class with a single constructor.,NULL
The second part of a Java constructor declaration is the name of the class the constructor belongs to.,NULL
Using the class name for the constructor signals to the Java compiler that this is a constructor.,NULL
The constructor parameters are declared inside the parentheses () after the class name part of the constructor .,NULL
"A class can have multiple constructors, as long as their signature (the parameters they take) are not the same.",NULL
"When a Java class contains multiple constructors, we say that the constructor is overloaded (comes in multiple versions).",NULL
"This is what constructor overloading means, that a Java class contains multiple constructors.",NULL
The keyword this in front of the field name (this.number) is not necessary.,NULL
"You don't have to define a constructor for a class, but if you don't define any constructor, the Java compiler will insert a default, no-argument constructor for you.",NULL
"Thus, once the class is compiled it will always at least have a no-argument constructor.",NULL
"If you do define a constructor for your class, then the Java compiler will not insert the default no-argument constructor into your class.",NULL
The parameters are passed to the constructor inside the parentheses after the class name on the right side of the equal sign.,NULL
"By default, if a parameter (or local variable) has the same name as a field in the same class, the parameter (or local variable) ""shadows"" for the field.","(""Parameter"", ""A parameter with the same name as a field in the same class shadows the field."", ""Field"")"
"Inside the constructor of the Employee class the firstName, lastName and birthYear identifiers now refer to the constructor parameters, not to the Employee fields with the same names.","(""Employee"", ""The firstName identifier in the Employee class constructor refers to the constructor parameter firstName."", ""firstName""); (""Employee"", ""The lastName identifier in the Employee class constructor refers to the constructor parameter lastName."", ""lastName"")"
"To signal to the Java compiler that you mean the fields of the Employee class and not the parameters, put the this keyword and a dot in front of the field name.",NULL
You call a constructor when you create a new instance of the class containing the constructor.,"(""Constructor"", ""A constructor is a method that is called when creating a new instance of the class."", ""Class"")"
"In case you want to pass parameters to the constructor, you include the parameters between the parentheses after the class name, like this:",NULL
The this keyword followed by parentheses and parameters means that another constructor in the same Java class is being called.,NULL
In this example it is the first constructor in the class that is being called.,NULL
"When a class extends another class it is also said to ""inherit"" from the class it extends.",NULL
"The class that extends is called the subclass, and the class being extended is called the superclass.",NULL
A class that extends another class does not inherit its constructors.,NULL
"However, the subclass must call a constructor in the superclass inside of its the subclass constructors!",NULL
"If a subclass calls another constructor within itself, then the called constructor must call the superclass constructor.","(""Subclass"", ""A subclass can call another constructor within itself."", ""Constructor"")"
It calls the constructor in the superclass using this Java statement:,NULL
Using the keyword super refers to the superclass of the class using the super keyword.,NULL
"When super keyword is followed by parentheses like it is here, it refers to a constructor in the superclass.","(""super"", ""The super keyword is used to refer to a constructor in the superclass."", ""constructor"")"
In this case it refers to the constructor in the Vehicle class.,NULL
The access modifier of a constructor determines what classes in your application that are allowed to call that constructor.,"(""Constructor"", ""The access modifier determines the accessibility of the constructor."", ""Access Modifier"")"
"For instance, if a constructor is declared protected then only classes in the same package, or subclasses of that class can call that constructor.","(""Constructor"", ""A protected constructor can only be called by classes in the same package or subclasses of that class."", ""Class"")"
"A class can have multiple constructors, and each constructor can have its own access modifier.","(""Class"", ""A class can have multiple constructors."", ""Constructor"")"
"Thus, some constructors may be available to all classes in your application, while other constructors are only available to classes in the same package, subclasses, or even only to the class itself (private constructors).","(""Constructors"", ""Constructors may be available to all classes in your application."", ""Classes""); (""Constructors"", ""Other constructors are only available to classes in the same package."", ""Package""); (""Constructors"", ""Some constructors are only available to subclasses."", ""Classes"")"
Here is an example of a Java class with a constructor that can throw an exception:,NULL
Making a constructor throw an exception can be a good idea if you want to prevent an object of the given class to be created in an invalid state.,"(""Constructor"", ""A constructor can throw an exception to prevent an object from being created in an invalid state."", ""Exception"")"
"A class can have fields, constructors and methods (plus more, but that is not important now).","(""Class"", ""A class can have fields."", ""Fields""); (""Class"", ""A class can have constructors."", ""Constructors"")"
"When you create an object, that object is of a certain class.",NULL
The class is like a template (or blueprint) telling how objects of that class should look.,NULL
"When you create an object, you say ""give me an object of this class"".",NULL
"If you think of a factory producing lots and lots of the same items, then the class would be the blueprint / manual of how the finished product should look, and the objects would be each of the finished products.",NULL
"If the factory produced cars, then the blueprint / design manual of the cars to produce corresponds to a Java class, and the physical cars produced corresponds to Java objects.",NULL
Here is a simple diagram illustrating the principle of objects being of a certain class.,NULL
The class determines what fields and methods the objects of that class have.,"(""Class"", ""The class determines what fields the objects of that class have."", ""Fields"")"
"The Car class does not contain any fields, constructors or methods.",NULL
The example primarily serves to show you an example of how a class declaration looks in Java code.,NULL
A field is a variable that belongs to a class or an object.,"(""Field"", ""A field is a variable that belongs to a class or an object."", ""Class""); (""Variable"", ""A field is a variable that belongs to a class or an object."", ""Field"")"
"For instance, a Car class could define the field brand which all Car objects would have.",NULL
Here is the Car class declaration from above with a field name brand added:,NULL
Constructors are a special kind of method that is executed when an object of that class is created.,"(""Constructors"", ""Constructors are a special kind of method."", ""method"")"
Here is the Car class from before with a constructor that initializes the brand field:,"(""Car"", ""The constructor is a method associated with the Car class that initializes its fields."", ""constructor"")"
"Here is the Car class from before with a single, simple method named getBrand added:",NULL
"When a class implements an interface, the class has to implement all the methods described in the interface.","(""Class"", ""A class implements an interface, indicating a relationship where the class adheres to the contract defined by the interface."", ""Interface"")"
"Packages provides a handy way of grouping related classes and interfaces, thus making modularization of your Java code easier.","(""Packages"", ""Packages groups related classes together for modularization."", ""classes"")"
"That these are primitive data types means that they are not objects, nor references to objects (classes and objects are explained in later texts in this Java tutorial).","(""Primitive Data Types"", ""Primitive data types are not objects, which are instances of classes."", ""Classes"")"
You can also create your own more complex data types by creating custom classes.,NULL
"More precisely, a Java enum type is a special kind of Java class.",NULL
Notice the enum keyword which is used in place of class or interface.,NULL
Replace the ... with the code to execute if the level variable matches the given Level constant value.,NULL
You can obtain an array of all the possible values of a Java enum type by calling its static values() method.,NULL
All enum types get a static values() method automatically by the Java compiler.,"(""Enum Types"", ""Enum types have a static values() method that is automatically generated."", ""Values"")"
An enum class automatically gets a toString() method in the class when compiled.,NULL
The toString() method returns a string value of the name of the given enum instance.,NULL
"Then the toString() method will get called behind the scenes, so the value that will be printed out is the textual name of the enum instance.",NULL
An enum class automatically gets a static valueOf() method in the class when compiled.,NULL
The valueOf() method can be used to obtain an instance of the enum class for a given String value.,NULL
The level variable will point to the Level.HIGH after executing this line.,NULL
It is possible for a Java enum class to have abstract methods too.,NULL
"If an enum class has an abstract method, then each instance of the enum class must implement it.",NULL
Notice the abstract method declaration at the bottom of the enum class.,NULL
It is the method getDescription() that comes from the interface MyInterface.,NULL
"Java enums extend the java.lang.Enum class implicitly, so your enum types cannot extend another class.",NULL
"The purpose of this exercise is to verify that you know how to create classes, how to create instance variables inside the classes, how to create an array of objects and how to iterate that array while referencing the objects in it.","(""Exercise"", ""The exercise involves creating classes."", ""Classes""); (""Classes"", ""Classes can have instance variables."", ""Instance Variables""); (""Classes"", ""Classes can be used to create an array of objects."", ""Array of Objects"")"
"For instance, in a class representing an employee, the Employee class might contain the following fields:",NULL
The access modifier determines which object classes that can access the field.,NULL
"In Java, static fields belongs to the class, not instances of the class.",NULL
"Thus, all instances of any class will access the same static field variable.",NULL
A non-static field value can be different for every object (instance) of a class.,NULL
The Java field access modifier determines whether the field can be accessed by classes other than the the class owning the field.,NULL
The private access modifier means that only code inside the class itself can access this Java field.,NULL
"The package access modifier means that only code inside the class itself, or other classes in the same package, can access the field.","(""Access Modifier"", ""The access modifier restricts access to the field within the class."", ""Class"")"
"The protected access modifier is like the package modifier, except subclasses of the class can also access the field, even if the subclass is not located in the same package.","(""Protected Access Modifier"", ""Both are access modifiers, but the protected access modifier allows subclasses to access fields even if they are not in the same package."", ""Package Modifier"")"
The public access modifier means that the field can be accessed by all classes in your application.,"(""Public Access Modifier"", ""The public access modifier allows the field to be accessed by all classes in the application."", ""Field"")"
You would probably not use all access modifiers in the same class.,NULL
"For simple, data carrying classes you may declare all fields public.",NULL
"Thus, no matter how many objects you create of that class, there will only exist one field located in the class, and the value of that field is the same, no matter from which object it is accessed.",NULL
"Static fields are located in the class, so you don't need an instance of the class to access static fields.",NULL
"Non-static Java fields, on the other hand, are located in the instances of the class.",NULL
Each instance of the class can have its own values for these fields.,NULL
To access a non-static field you need an instance of the class (an object) on which you can access it.,NULL
"That means, that even if the field belongs to objects (class instances), you cannot vary the value of the field from object to object.",NULL
"That way it only exists in the class, not in every object too.",NULL
"The first line creates a new Customer object (an instance of the Customer class), and stores it in a variable called customer.",NULL
A class is loaded the first time it is referenced in your program.,NULL
"Inside the parentheses () after the for keyword, are three statements separated by semicolon (;).",NULL
"In this example, only the first System.out.println() statement is executed inside the for loop.",NULL
The second System.out.println() statement is not executed until after the for loop is finished.,NULL
"Second, inside the isValid() method the String.equals() method is used to test for equality to a certain string value.","(""isValid"", ""isValid() method uses String class to perform operations"", ""String"")"
The isValid() method could actually have been written in a shorter way.,NULL
Now the isValid() method returns the value returned by the value.equals() method call.,"(""isValid"", ""isValid method returns the value returned by the value.equals() method call."", ""value"")"
Java inheritance refers to the ability in Java for one class to inherit from another class.,NULL
One class can extend another class and thereby inherit from that class.,NULL
"When one class inherits from another class in Java, the two classes take on certain roles.",NULL
The class that extends (inherits from another class) is the subclass and the class that is being extended (the class being inherited from) is the superclass .,NULL
"A subclass is a specialization of a superclass, and a superclass is a generalization of one or more subclasses.","(""Subclass"", ""A subclass is a specialization of a superclass."", ""Superclass"")"
"Inheritance can be an effective method to share code between classes that have some traits in common, yet allowing the classes to have some parts that are different.","(""Inheritance"", ""Inheritance is a method used to share code between classes."", ""code"")"
"Here is diagram illustrating a class called Vehicle, which has two subclasses called Car and Truck.","(""Vehicle"", ""Vehicle is a superclass of Car, indicating that Car is a subclass of Vehicle."", ""Car"")"
The Vehicle class can contain those fields and methods that all Vehicles need (e.g.,NULL
Note: Some people will claim that inheritance is a way to categorize your classes based on what they are.,NULL
"In practice, however, that is not how you determine which superclasses and subclasses your application needs to have.","(""Application"", ""An application needs to have superclasses to define its structure and behavior."", ""Superclasses"")"
Then it makes sense to have a common Vehicle superclass for the two classes.,NULL
"If you never process Car and Truck objects in the same way, there is no point in having a common superclass for them, except perhaps to share code between them (to avoid writing duplicate code).",NULL
Superclasses and subclasses form an inheritance structure which is also called a class hierarchy.,"(""Class Hierarchy"", ""Superclasses are part of the class hierarchy as they represent the higher-level entities in the inheritance structure."", ""Superclasses"")"
At the top of the class hierarchy you have the superclasses.,NULL
At the bottom of the class hierarchy you have the subclasses.,NULL
"A class hierarchy may have multiple levels, meaning multiple levels of superclasses and subclasses.","(""Class Hierarchy"", ""A class hierarchy consists of multiple levels that include superclasses."", ""Superclasses"")"
A subclass may itself be a superclass of other subclasses etc.,NULL
"When a class inherits from a superclass, it inherits parts of the superclass methods and fields.","(""Class"", ""A class inherits from a superclass."", ""Superclass""); (""Class"", ""A class inherits parts of the superclass methods."", ""Methods"")"
"When a subclass extends a superclass in Java, all protected and public fields and methods of the superclass are inherited by the subclass.",NULL
"By inherited is meant that these fields and methods are part of of the subclass, as if the subclass had declared them itself.","(""Subclass"", ""The subclass inherits fields as if it had declared them itself."", ""Fields"")"
protected and public fields can be called and referenced just like the methods declared directly in the subclass.,NULL
Fields and methods with default (package) access modifiers can be accessed by subclasses only if the subclass is located in the same package as the superclass.,"(""methods"", ""Methods can have default access modifiers that are defined within a package."", ""package"")"
Private fields and methods of the superclass can never be referenced directly by subclasses.,NULL
"They can, however, be referenced indirectly via methods reachable from the subclass (e.g default (package), protected and public methods).","(""Subclass"", ""The subclass can reference the default method indirectly."", ""Default""); (""Subclass"", ""The subclass can reference the protected method indirectly."", ""Protected"")"
"Constructors are not inherited by subclasses, but a subclass constructor must call a constructor in the superclass.","(""subclasses"", ""Subclasses do not inherit constructors, indicating a relationship where subclasses are related to the concept of constructors in object-oriented programming."", ""Constructors"")"
The Java inheritance mechanism only allows a Java class to inherit from a single superclass (singular inheritance).,NULL
"In some programming languages, like C++, it is possible for a subclass to inherit from multiple superclasses (multiple inheritance).",NULL
"the superclasses contain methods with the same names and parameters, multiple inheritance was left out in Java.",NULL
You declare that one class extends another class by using the extends keyword in the class definition.,NULL
"The Car class in this example extends the Vehicle class, meaning the Car class inherits from the Vehicle class.",NULL
"Because the Car class extends the Vehicle class, the protected field licensePlate from the Vehicle class is inherited by the Car class.","(""Car"", ""The Car class extends the Vehicle class, indicating an inheritance relationship."", ""Vehicle"")"
"The licensePlate field is not actually being referenced from the Car class in the code above, but it could if we wanted to.",NULL
In many cases it would have made sense to place the getLicensePlate() method in the Vehicle class where the licensePlate field is located.,"(""getLicensePlate()"", ""The getLicensePlate() method is suggested to be placed in the Vehicle class where the licensePlate field is located."", ""Vehicle"")"
I just placed the getLicensePlate() method in the Car class to show that it is possible.,NULL
It is possible to reference a subclass as an instance of one of its superclasses.,NULL
"For instance, using the class definitions from the example in the previous section it is possible to reference an instance of the Car class as an instance of the Vehicle class.",NULL
"Because the Car class extends (inherits from) the Vehicle class, it is also said to be a Vehicle.",NULL
Here is a Java code example: Car car = new Car(); Vehicle vehicle = car; First a Car instance is created.,"(""Car"", ""Car is a subclass of Vehicle, indicating an inheritance relationship."", ""Vehicle"")"
This is possible because the Car class inherits from the Vehicle class.,NULL
"As you can see, it is possible to use an instance of some subclass as if it were an instance of its superclass.",NULL
"That way, you don't need to know exactly what subclass the object is an instance of.",NULL
The process of referencing an object of class as a different type than the class itself is called type casting.,NULL
Upcasting and Downcasting You can always cast an object of a subclass to one of its superclasses.,"(""Upcasting"", ""Upcasting is the process of casting a subclass object to its superclass."", ""superclass"")"
This is referred to as upcasting (from a subclass type to a superclass type).,NULL
"It may also be possible to cast an object from a superclass type to a subclass type, but only if the object really is an instance of that subclass (or an instance of a subclass of that subclass).","(""Object"", ""An object can be an instance of a superclass type."", ""Superclass"")"
This is referred to as downcasting (from a superclass type to a subclass type).,"(""Downcasting"", ""Downcasting is a method that involves converting a superclass type to a subclass type."", ""Superclass"")"
"Thus, this example of downcasting is valid: Car car = new Car(); // upcast to Vehicle Vehicle vehicle = car; // downcast to car again Car car2 = (Car) vehicle; However, the following downcast example is not valid.","(""Car"", ""Car is a subclass of Vehicle, indicating an inheritance relationship."", ""Vehicle"")"
"Truck truck = new Truck(); // upcast to Vehicle Vehicle vehicle = truck; // downcast to car again Car car = (Car) vehicle; The Truck object can be upcast to a Vehicle object, but it cannot be downcast to a Car object later.","(""Truck"", ""The Truck object can be upcast to a Vehicle object."", ""Vehicle"")"
Overriding Methods In a subclass you can override (redefine) methods defined in the superclass.,"(""Subclass"", ""A subclass can redefine methods that are defined in the superclass."", ""Superclass""); (""Subclass"", ""The subclass can override methods."", ""Override"")"
Here is a Java method override example: public class Vehicle { String licensePlate = null; public void setLicensePlate(String licensePlate) { this.licensePlate = licensePlate; } } public class Car extends Vehicle { public void setLicensePlate(String license) { this.licensePlate = license.toLowerCase(); } } Notice how both the Vehicle class and the Car class defines a method called setLicensePlate().,"(""Vehicle"", ""Car class extends Vehicle class, inheriting its properties and methods."", ""Car""); (""Vehicle"", ""Vehicle class defines the method setLicensePlate()."", ""setLicensePlate"")"
"Now, whenever the setLicensePlate() method is called on a Car object, it is the method defined in the Car class that is called.","(""setLicensePlate"", ""setLicensePlate() is a method that operates on a Car object."", ""Car"")"
To override a method the method signature in the subclass must be the same as in the superclass.,"(""Subclass"", ""The method in the subclass must override the method in the superclass."", ""Method"")"
"That means that the method definition in the subclass must have exactly the same name and the same number and type of parameters, and the parameters must be listed in the exact same sequence as in the superclass.","(""Method Definition"", ""The method definition in the subclass must match the method definition in the superclass in name, parameters, and sequence."", ""Subclass"")"
Otherwise the method in the subclass will be considered a separate method.,NULL
"If the superclass calls a private method internally from some other method, it will continue to call that method from the superclass, even if you create a private method in the subclass with the same signature.","(""Superclass"", ""The superclass can call a private method defined within it, regardless of the existence of a similarly named private method in the subclass."", ""PrivateMethod"")"
"It would be nice if the compiler could tell you that the method being overridden no longer overrides a method in the superclass, right?",NULL
"You can call superclass implementations from any method in a subclass, like above.","(""Superclass"", ""Superclass implementations can be called from any method in a subclass."", ""Method"")"
"For instance, you could also have called super.setLicensePlate() from a method in the Car class called updateLicensePlate() which does not override the setLicensePlate() method.","(""updateLicensePlate"", ""The method updateLicensePlate() calls the method setLicensePlate() from the superclass."", ""setLicensePlate"")"
The instanceof instruction can determine whether a given object is an instance of some class.,"(""Instanceof"", ""The instanceof instruction is used to determine if an object is an instance of a class."", ""Object"")"
Here is a Java instanceof example: Car car = new Car(); boolean isCar = car instanceof Car; After this code has been executed the isCar variable will contain the value true.,"(""car"", ""The variable 'car' is an instance of the class 'Car' as indicated by the 'new Car()' instantiation."", ""Car"")"
The instanceof instruction can also be used determine if an object is a instance of a superclass of its class.,"(""instanceof"", ""The instanceof instruction is used to determine the type of an object, specifically if it is an instance of a class or its superclass."", ""object""); (""object"", ""An object can be an instance of a superclass, indicating a relationship between the object and its superclass."", ""superclass"")"
"Here is an instanceof example that checks if a Car object is an instance of Vehicle: Car car = new Car(); boolean isVehicle = car instanceof Vehicle; Assuming that the Car class extends (inherits from) the Vehicle class, the isVehicle variable will contain the value true after this code is executed.","(""Car"", ""The Car class extends (inherits from) the Vehicle class."", ""Vehicle"")"
A Car object is also a Vehicle object because Car is a subclass of Vehicle.,NULL
"Look at this instanceof example: Car car = new Car(); Vehicle vehicle = car; boolean isCar = vehicle instanceof Car; Even though the vehicle variable is of type Vehicle, the object it ends up pointing to in this example is a Car object.","(""Car"", ""Car is a subclass of Vehicle, indicating an inheritance relationship."", ""Vehicle""); (""car"", ""The variable car is an instance of the Car class."", ""Car"")"
"Here is the same instanceof example, but using a Truck object instead of a Car object: Truck truck = new Truck(); Vehicle vehicle = truck; boolean isCar = vehicle instanceof Car; After executing this code the isCar will contain the value false.","(""Truck"", ""Truck is a type of Vehicle, as indicated by the assignment 'Vehicle vehicle = truck;'."", ""Vehicle"")"
"Fields and Inheritance As mentioned earlier, in Java fields cannot be overridden in a subclass.","(""Fields"", ""Fields are a part of the concept of inheritance in Java."", ""Inheritance"")"
"If you define a field in a subclass with the same name as a field in the superclass, the field in the subclass will hide (shadow) the field in the superclass.",NULL
"If the subclass tries to access the field, it will access the field in the subclass.",NULL
"If, however, the subclass calls up into a method in the superclass, and that method accesses the field with the same name as in the subclass, it is the field in the superclass that is accessed.","(""Subclass"", ""The subclass calls up into a method in the superclass."", ""Method"")"
Both the Vehicle class and Car class has the methods setLicensePlate() and getLicensePlate().,"(""Vehicle"", ""The Vehicle class has the method setLicensePlate()"", ""setLicensePlate""); (""Vehicle"", ""The Vehicle class has the method getLicensePlate()"", ""getLicensePlate""); (""Car"", ""The Car class has the method setLicensePlate()"", ""setLicensePlate""); (""Car"", ""The Car class has the method getLicensePlate()"", ""getLicensePlate"")"
The methods in the Car class calls the corresponding methods in the Vehicle class.,NULL
"The result is, that eventually both set of methods access the licensePlate field in the Vehicle class.","(""methods"", ""The methods access the licensePlate field."", ""licensePlate"")"
"The updateLicensePlate() method in the Car class however, accesses the licensePlate field directly.","(""updateLicensePlate"", ""The updateLicensePlate method is defined in the Car class."", ""Car"")"
"Therefore, you will not get the same result if you call setLicensePlate() as when you call the updateLicense() method.",NULL
"Look at the following lines of Java code: Car car = new Car(); car.setLicensePlate(""123""); car.updateLicensePlate(""abc""); System.out.println(""license plate: "" + car.getLicensePlate()); This Java code will print out the text 123.","(""Car"", ""The method setLicensePlate is called on an instance of the Car class to set its license plate."", ""setLicensePlate""); (""Car"", ""The method updateLicensePlate is called on an instance of the Car class to update its license plate."", ""updateLicensePlate"")"
The updateLicensePlate() method sets the license plate value on the licensePlate field in the Car class.,"(""updateLicensePlate"", ""The updateLicensePlate method is a method defined in the Car class."", ""Car"")"
"The getLicensePlate() method, however, returns the value of the licensePlate field in the Vehicle class.","(""getLicensePlate"", ""The getLicensePlate() method is defined in the Vehicle class."", ""Vehicle"")"
"Therefore, the value 123 which is set as value for the licensePlate field in the Vehicle class via the setLicensePlate() method, is what is printed out.","(""Vehicle"", ""The setLicensePlate method is used to set the value for the licensePlate field in the Vehicle class."", ""setLicensePlate"")"
"In other words, constructors of a superclass are not inherited by subclasses.",NULL
Subclasses can still call the constructors in the superclass using the super() contruct.,"(""Subclasses"", ""Subclasses can call the constructors in the superclass using the super() construct."", ""super()"")"
"In fact, a subclass constructor is required to call one of the constructors in the superclass as the very first action inside the constructor body.",NULL
Here is how that looks: public class Vehicle { public Vehicle() { } } public class Car extends Vehicle{ public Car() { super(); //perform other initialization here } } Notice the call to super() inside the Car constructor.,"(""Car"", ""Car extends Vehicle, indicating that Car is a subclass of Vehicle."", ""Vehicle"")"
You may have seen Java classes where the subclass constructors did not seem to call the constructors in the superclass.,NULL
"However, the subclass constructors have still called superclass constructors in those case.",NULL
"Let me explain why: If a class does not have any explicit constructor defined, the Java compiler inserts an implicit no-arg constructor.","(""Class"", ""The Java compiler is responsible for inserting an implicit no-arg constructor if no explicit constructor is defined in the class."", ""Java Compiler"")"
"Therefore the following version of Vehicle is equivalent to the version shown just above: public class Vehicle { } Second, if a constructor does not explicitly call a constructor in the superclass, the Java compiler inserts an implicit call to the no-arg constructor in the superclass.","(""Vehicle"", ""The Vehicle class may have a constructor that is related to the superclass constructor behavior in Java."", ""constructor"")"
"That means that the following version of the Car class is actually equivalent to the version shown earlier: public class Car extends Vehicle{ public Car() { } } In fact, since the constructor is now empty, we could leave it out and the Java compiler would insert it, and insert an implicit call to the no-arg constructor in the superclass.","(""Car"", ""The Car class extends the Vehicle class, indicating an inheritance relationship."", ""Vehicle""); (""Car(){ }"", ""The method Car() is the constructor for the Car class."", ""Car"")"
"This is how the two classes would look then: public class Vehicle { } public class Car extends Vehicle{ } Even though no constructors are declared in these two classes, they both get a no-arg constructor, and the no-arg constructor in the Car class will call the no-arg constructor in the Vehicle class.","(""Car"", ""Car extends Vehicle indicates that Car is a subclass of Vehicle."", ""Vehicle"")"
"If the Vehicle class did not have a no-arg constructor, but had another constructor which takes parameters, the Java compiler would complain.",NULL
"The Car class would then be required to declare a constructor, and inside that constructor call the constructor in the Vehicle class.",NULL
Nested Classes and Inheritance The same Java inheritance rules apply to nested classes.,NULL
Nested classes with the default (package) access modifier are only accessible to subclasses if the subclass is located in the same package as the superclass.,"(""Nested Classes"", ""Nested classes are defined with the default access modifier, which controls their accessibility."", ""Default Access Modifier""); (""Subclasses"", ""Subclasses can access nested classes if they are in the same package as the superclass."", ""Superclass"")"
Nested classes with the protected or public access modifier are always inherited by subclasses.,NULL
Here is a nested class inheritance example: class MyClass { class MyNestedClass { } } public class MySubclass extends MyClass { public static void main(String[] args) { MySubclass subclass = new MySubclass(); MyNestedClass nested = subclass.new MyNestedClass(); } } Notice how it is possible to create an instance of the nested class MyNestedClass which is defined in the superclass (MyClass) via a reference to the subclass (MySubclass).,"(""MySubclass"", ""MySubclass extends MyClass, indicating inheritance."", ""MyClass""); (""MyNestedClass"", ""MyNestedClass is defined within MyClass, indicating a nested class relationship."", ""MyClass"")"
Here is now that looks: public final class MyClass { } A final class cannot be extended.,NULL
"In other words, you cannot inherit from a final class in Java.",NULL
Abstract Classes and Inheritance In Java a class can be declared abstract.,"(""Abstract Classes"", ""Abstract Classes can utilize inheritance in Java."", ""Inheritance"")"
I have explained abstract classes in more detail in my Java abstract classes tutorial.,NULL
An abstract class is a class that does not contain the full implementation of whatever the abstract class should do.,NULL
"In other words, you cannot create objects of an abstract class.",NULL
In Java abstract classes are intended to be extended to create a full implementation.,NULL
The Java inheritance rules are the same for abstract classes as for non-abstract classes.,"(""Java"", ""Java inheritance rules apply to both abstract and non-abstract classes."", ""inheritance rules"")"
You can always cast an object of a subclass to one of its superclasses.,NULL
In a subclass you can override (redefine) methods defined in the superclass.,"(""Subclass"", ""A subclass can override methods defined in the superclass, indicating a relationship between the subclass and superclass in terms of inheritance."", ""Superclass"")"
Notice how both the Vehicle class and the Car class defines a method called setLicensePlate().,"(""Vehicle"", ""The Vehicle class defines a method called setLicensePlate()"", ""setLicensePlate"")"
"If you override a method in a subclass, and the method is all of a sudden removed or renamed or have its signature changed in the superclass, the method in the subclass no longer overrides the method in the superclass.","(""Subclass"", ""The method in the subclass overrides the method in the superclass."", ""Method"")"
"If you override a method in a subclass, but still need to call the method defined in the superclass, you can do so using the super reference, like this:","(""Subclass"", ""A subclass can override a method defined in its superclass."", ""Superclass"")"
"In the above code example the method setLicensePlate() in the Car class, calls the setLicensePlate() method in the Vehicle class.","(""setLicensePlate"", ""The method setLicensePlate() in the Car class calls the setLicensePlate() method in the Vehicle class."", ""setLicensePlate"")"
"Assuming that the Car class extends (inherits from) the Vehicle class, the isVehicle variable will contain the value true after this code is executed.","(""Car"", ""The Car class extends (inherits from) the Vehicle class."", ""Vehicle"")"
"As mentioned earlier, in Java fields cannot be overridden in a subclass.",NULL
Here is Java inheritance example that illustrates how fields in subclasses shadow (hides) fields in superclasses:,"(""Java"", ""Java is an example of a programming language that uses inheritance, which is being illustrated in the example."", ""inheritance"")"
"If a class does not have any explicit constructor defined, the Java compiler inserts an implicit no-arg constructor.","(""Class"", ""The Java compiler is responsible for inserting an implicit no-arg constructor if no explicit constructor is defined in the class."", ""Java Compiler"")"
"Second, if a constructor does not explicitly call a constructor in the superclass, the Java compiler inserts an implicit call to the no-arg constructor in the superclass.","(""Constructor"", ""A constructor may call a constructor in the superclass, and if not, the Java compiler implicitly calls the no-arg constructor in the superclass."", ""Superclass""); (""Java Compiler"", ""The Java compiler inserts an implicit call to the no-arg constructor if a constructor does not explicitly call a superclass constructor."", ""No-Arg Constructor"")"
That means that the following version of the Car class is actually equivalent to the version shown earlier:,NULL
"In fact, since the constructor is now empty, we could leave it out and the Java compiler would insert it, and insert an implicit call to the no-arg constructor in the superclass.","(""Java Compiler"", ""The Java Compiler can insert the constructor if it is left out."", ""Constructor"")"
"Even though no constructors are declared in these two classes, they both get a no-arg constructor, and the no-arg constructor in the Car class will call the no-arg constructor in the Vehicle class.",NULL
Notice how it is possible to create an instance of the nested class MyNestedClass which is defined in the superclass (MyClass) via a reference to the subclass (MySubclass).,"(""MyNestedClass"", ""MyNestedClass is defined in the superclass MyClass."", ""MyClass"")"
"The Java instanceof operator can determine if a given Java object is an instance of a given class, superclass or interface.","(""instanceof"", ""The instanceof operator is a method used in Java to check the type of an object."", ""Java""); (""object"", ""An object can be an instance of a class."", ""class""); (""superclass"", ""A superclass is a class from which other classes can inherit."", ""class"")"
The Java instanceof operator is also referred to as a type comparison operator because it compares the type of a given instance (object) with a specific type (class or interface).,"(""instanceof"", ""The instanceof operator is a feature of the Java programming language."", ""Java""); (""type comparison operator"", ""The instanceof operator is referred to as a type comparison operator."", ""instanceof""); (""object"", ""An object is an instance of a class."", ""class"")"
"The expression map instanceof Object will evaluate to true if the map variable references an object that is an instance of class Object, or any subclass of class Object.",NULL
"Since all classes in Java inherit from Object, this expression will evaluate to true.",NULL
"As mentioned earlier, the Java instanceof operator will evaluate to true if you compare an object to the exact class of that object.","(""instanceof"", ""The instanceof operator is used to compare an object to the exact class of that object."", ""Java"")"
Here is a Java instanceof example showing a comparison of an object to its exact class:,"(""Java"", ""Java is a programming language that uses instanceof as a method for type comparison."", ""instanceof"")"
"As also mentioned earlier, the Java instanceof operator also evaluates to true when comparing an object against a superclass of the type of that object.","(""instanceof"", ""is a method used in Java to evaluate type relationships"", ""Java"")"
"Since HashMap is a subclass of Object - even if not a direct subclass, the expression map instanceof Object evaluates to true.",NULL
"Note, that it does not matter how high up in the inheritance hierarchy the compared type is superclass of the type of the object.","(""Inheritance"", ""Inheritance is a concept that relates to the hierarchy of classes in object-oriented programming."", ""Hierarchy""); (""Hierarchy"", ""Hierarchy refers to the organization of types in a structured manner."", ""Type"")"
"As long as the type compared to is a superclass somewhere up the inheritance hierarchy, instanceof will evaluate to true.",NULL
The Java instanceof operator also works when comparing an object against an interface instead of a class.,"(""Java"", ""The instanceof operator is a method used in Java to compare an object against a class or interface."", ""instanceof"")"
"Notice, that even if the map variable is of type HashMap, the instanceof operator returns true for the expression map instanceof Map because the HashMap class implements the Map interface.","(""HashMap"", ""HashMap class implements the Map interface"", ""Map"")"
"The Java instanceof operator also evaluates to true when comparing an object against a superinterface which the class of the object, or a superclass of the object implements.","(""instanceof"", ""The instanceof operator is used to evaluate the type of an object."", ""object""); (""object"", ""The class of the object can implement a superinterface."", ""superinterface"")"
"The TreeMap class implements SortedMap, and thus also indirectly the Map interface.","(""TreeMap"", ""The TreeMap class implements SortedMap."", ""SortedMap"")"
The Java instanceof operator always evaluates to false when a null variable is compared against any class or interface.,"(""instanceof"", ""The instanceof operator is used to check if an object is an instance of a specific class."", ""Java"")"
Here is a Java instanceof example illustrating the comparison of null against a class:,"(""Java"", ""Java is the programming language in which the instanceof method is used."", ""instanceof"")"
"That is because it is not the reference type that is compared against the target class or interface, but the actual type of the referenced object.","(""Reference Type"", ""The reference type is compared against the target class or interface."", ""Target Class""); (""Reference Type"", ""The actual type of the referenced object is being discussed in relation to the reference type."", ""Referenced Object"")"
"Since a Java String object can never be an instance of the Java Integer class, the Java compiler will catch this an give you an error.",NULL
That means that the actual class of the referenced object could be pretty much any class (since all classes are subclasses of Object).,NULL
"In short, we can avoid the explicit downcast of an object when comparing it against a subclass.",NULL
Notice the str variable after the String class name in the instanceof expression inside the if-statement.,NULL
"Since the right hand side of the expression is only evaluated if the left hand side evaluates to true, this cannot result in startsWith() being called on a non-String object.",NULL
"A question I get a lot is what the difference is between Java interfaces and abstract classes, and when to use each.",NULL
"Having answered this question by email multiple times, I decided to write this tutorial about Java interfaces vs abstract classes.",NULL
"In other words, to make the classes using the interface independent of the classes implementing the interface.",NULL
"Thus, you can exchange the implementation of the interface, without having to change the class using the interface.",NULL
Abstract classes are typically used as base classes for extension by subclasses.,NULL
"Some programming languages use abstract classes to achieve polymorphism, and to separate interface from implementation, but in Java you use interfaces for that.","(""Java"", ""Java is a programming language that uses polymorphism as a concept."", ""polymorphism""); (""Java"", ""Java uses interfaces to achieve separation from implementation."", ""interface"")"
"Remember, a Java class can only have 1 superclass, but it can implement multiple interfaces.","(""Java Class"", ""A Java class can only have one superclass."", ""Superclass"")"
"Thus, if a class already has a different superclass, it can implement an interface, but it cannot extend another abstract class.","(""Class"", ""A class can have a different superclass, indicating a relationship between class and superclass."", ""Superclass""); (""Class"", ""A class can implement an interface, indicating a relationship between class and interface."", ""Interface"")"
"If you also need to provide a base class or default implementation of the interface, add an abstract class (or normal class) that implements the interface.","(""Abstract Class"", ""An abstract class can implement the interface."", ""Interface"")"
"Here is an example showing a class referencing an interface, an abstract class implementing that interface, and a subclass extending the abstract class.","(""Example"", ""The Example class references the Interface."", ""Interface""); (""AbstractClass"", ""The AbstractClass implements the Interface."", ""Interface"")"
"Below are the code examples from the text on Java Abstract Classes, but with an interface added which is implemented by the abstract base class.",NULL
"Fourth, how to use the interface URLProcessor as variable type, even though it is the subclass UrlProcessorImpl that is instantiated.",NULL
Using both an interface and an abstract base class makes your code more flexible.,NULL
It possible to implement simple URL processors simply by subclassing the abstract base class.,NULL
"A Java interface is a bit like a Java class, except a Java interface can only contain method signatures and fields.","(""Java Interface"", ""A Java interface is similar to a Java class, indicating a relationship between the two concepts in object-oriented programming."", ""Java Class""); (""Java Interface"", ""A Java interface can contain method signatures, establishing a direct relationship between the interface and its method signatures."", ""method signatures"")"
"However, it is possible to provide default implememntations of a method in a Java interface, to make the implementation of the interface easier for classes implementing the interface.","(""Java Interface"", ""A Java interface can provide default implementations of a method."", ""Method"")"
"Just like with classes, a Java interface can be declared public or package scope (no access modifier).","(""Java Interface"", ""A Java interface can be declared with public access modifier."", ""public"")"
"As you can see, accessing a variable from an interface is very similar to accessing a static variable in a class.","(""Interface"", ""Accessing a variable from an interface is similar to accessing a static variable in a class."", ""Variable"")"
"The method, however, needs to be implemented by some class before you can access it.",NULL
"Before you can really use an interface, you must implement that interface in some Java class.",NULL
Here is a class that implements the MyInterface interface shown above:,NULL
This signals to the Java compiler that the MyInterfaceImpl class implements the MyInterface interface.,NULL
A class that implements an interface must implement all the methods declared in the interface.,"(""Class"", ""A class must implement all the methods declared in the interface."", ""Interface"")"
The class does not need to implement (declare) the variables of an interface.,NULL
Once a Java class implements an Java interface you can use an instance of that class as an instance of that interface.,NULL
Java allows this because the class MyInterfaceImpl implements the MyInterface interface.,NULL
You can then reference instances of the MyInterfaceImpl class as instances of the MyInterface interface.,NULL
"You must always create an instance of some class that implements the interface, and reference that instance as an instance of the interface.",NULL
In that case the class must implement all the methods declared in all the interfaces implemented.,"(""Class"", ""The class must implement all the methods declared in the interfaces it implements."", ""Methods"")"
"If the interfaces are not located in the same packages as the implementing class, you will also need to import the interfaces.","(""Implementing Class"", ""The implementing class must implement the interfaces, which may not be in the same package."", ""Interfaces"")"
Java interfaces are imported using the import instruction just like Java classes.,NULL
Here are the two Java interfaces implemented by the class above:,NULL
"If a Java class implements multiple Java interfaces, there is a risk that some of these interfaces may contain methods with the same signature (name + parameters).","(""Java Class"", ""A Java class can implement multiple Java interfaces."", ""Java Interfaces"")"
"Since a Java class can only implement at method with a given signature once, this could potentially lead to some problems.",NULL
"Especially if those constants are to be used by the classes implementing the interface, e.g.",NULL
It is up to the classes implementing the interface to specify an implementation.,NULL
"If the API just adds the method to the desired interface, all classes that implements the interface must implement that new method.","(""API"", ""The API adds the method to the desired interface."", ""method"")"
That is fine if all implementing classes are located within the API.,NULL
"But if some implementing classes are located in client code of the API (the code that uses the API), then that code breaks.",NULL
Look at this interface and imagine that it is part of e.g.,NULL
"If the developer of the API wants to add one more method to the ResourceLoader interface, then the FileLoader class will be broken when that project upgrades to the new version of the API.","(""FileLoader"", ""FileLoader class implements or interacts with the ResourceLoader interface."", ""ResourceLoader"")"
"A class can override the implementation of a default method simply by implementing that method explicitly, as is done normally when implementing a Java interface.","(""Class"", ""A class can override the implementation of a default method by implementing that method explicitly."", ""Method"")"
Any implementation in a class takes precedence over interface default method implementations.,"(""Implementation"", ""An implementation in a class takes precedence over interface default method implementations."", ""Class"")"
Calling a static method in an interface looks and works just like calling a static method in a class.,"(""StaticMethod"", ""A static method can be called in an interface, indicating a relationship between the method and the interface."", ""Interface"")"
Here is an example of calling the static print() method from the above MyInterface interface:,NULL
"It is possible for a Java interface to inherit from another Java interface, just like classes can inherit from other classes.",NULL
"That then means, that if a class implements MySubInterface, that class has to implement all methods defined in both MySubInterface and MySuperInterface.","(""class"", ""A class that implements MySubInterface must implement all methods defined in MySubInterface and MySuperInterface."", ""MySubInterface"")"
A class implementing an interface which inherits from multiple interfaces must implement all methods from the interface and its superinterfaces.,"(""Class"", ""A class implements an interface."", ""Interface""); (""Interface"", ""An interface defines methods that must be implemented."", ""Method"")"
"While it is normally possible for a class to implement multiple interfaces even if the interfaces contain methods with the same signature, this is not possible if one or more of these methods are default methods.","(""Class"", ""A class can implement multiple interfaces."", ""Interfaces""); (""Interfaces"", ""Interfaces contain methods with the same signature."", ""Methods"")"
"In other words, if two interfaces contain the same method signature (name + parameters) and one of the interfaces declare this method as a default method, a class cannot automatically implement both interfaces.",NULL
In both of the above situations the Java compiler requires that the class implementing the interface(s) explicitly implements the method which causes the problem.,"(""Java Compiler"", ""The Java Compiler requires that the class implementing the interface(s) explicitly implements the method."", ""Interface"")"
That way there is no doubt about which implementation the class will have.,NULL
The implementation in the class takes precedence over any default implementations.,NULL
"Basically, polymorphism means that an instance of an class (an object) can be used as if it were of different types.",NULL
"The classes above are all parts of a model representing different types of vehicles and drivers, with fields and methods.","(""Classes"", ""Classes are components of the model representing different types of vehicles and drivers."", ""Model""); (""Model"", ""The model represents different types of vehicles."", ""Vehicles""); (""Model"", ""The model represents different types of drivers."", ""Drivers"")"
That is the responsibility of these classes - to model these entities from real life.,NULL
"Please forget for a while, that implementing this functionality as methods directly on the objects may lead to a messy class hierarchy.","(""Functionality"", ""Functionality is implemented as methods."", ""Methods""); (""Methods"", ""Methods are directly on the objects."", ""Objects"")"
"Where in the above diagram would you put these three methods, so they are accessible on all classes?",NULL
"One way to solve this problem would be to create a common superclass for the Vehicle and Driver class, which has the storage and serialization methods.","(""superclass"", ""The superclass is intended to be a common parent class for both Vehicle and Driver."", ""Vehicle""); (""superclass"", ""The superclass is intended to be a common parent class for both Vehicle and Driver."", ""Driver""); (""Vehicle"", ""The Vehicle class would likely implement storage methods for its attributes."", ""storage methods"")"
"The class hierarchy would no longer model vehicles and drivers, but also be tied to the storage and serialization mechanisms used in your application.","(""Class Hierarchy"", ""The class hierarchy models vehicles."", ""Vehicles""); (""Class Hierarchy"", ""The class hierarchy models drivers."", ""Drivers""); (""Class Hierarchy"", ""The class hierarchy is tied to storage mechanisms."", ""Storage"")"
"A better solution would be to create some interfaces with the storage and serialization methods on, and let the classes implement these interfaces.","(""Interfaces"", ""Interfaces are designed to define methods that classes can implement, including storage methods."", ""Storage""); (""Interfaces"", ""Interfaces are designed to define methods that classes can implement, including serialization methods."", ""Serialization"")"
"When each class implements these two interfaces and their methods, you can access the methods of these interfaces by casting the objects to instances of the interface types.","(""Class"", ""A class implements the methods of the interface."", ""Interface"")"
"You don't need to know exactly what class a given object is of, as long as you know what interface it implements.","(""Object"", ""An object is related to an interface by implementing it."", ""Interface"")"
"As you can probably imagine by now, interfaces provide a cleaner way of implementing cross cutting functionality in classes than inheritance.",NULL
A generic Java interface is an interface which can be typed - meaning it can be specialized to work with a specific type (e.g.,NULL
This interface represents an interface which contains a single method called produce() which can produce a single object.,NULL
"Since the return value of produce() is Object, it can return any Java object.",NULL
The implementation of the produce() method returns a new Car object every time it is called.,NULL
"Notice how the object returned from the carProducer.produce() method call has to be cast to a Car instance, because the produce() method return type is Object.","(""carProducer"", ""carProducer is the package that contains the produce() method."", ""produce"")"
"Now when I implement the MyProducer interface in the CarProducer class, I have to include the generic type declaration too, like this:",NULL
"As you can see, since the generic type for the CarProducer instance is set to Car, it is no longer necessary to cast the object returned from the produce() method, since the original method declaration in the MyProducer interface states, that this method returns the same type as is specified in the generic type when used.","(""CarProducer"", ""CarProducer produces objects using the produce() method."", ""produce""); (""produce"", ""The produce() method is defined in the MyProducer interface."", ""MyProducer"")"
But - now it is actually possible to specify another generic type for a CarProducer instance than the type it actually returns from it's produce() method implementation.,NULL
"If you scroll up, you can see that the CarProducer.produce() implementation returns a Car object no matter what generic type you specify for it when you create it.","(""CarProducer"", ""The produce method is implemented in the CarProducer class."", ""produce"")"
"Instead, you can lock down the generic type of the MyProducer interface already when you implement it, in the CarProducer class.",NULL
"As you can see, it is still not necessary to cast the object returned by produce(), as the CarProducer implementation declares that to be a Car instance.","(""CarProducer"", ""CarProducer has a method called produce() that returns a Car instance."", ""produce"")"
A Java lambda expression is thus a function which can be created without belonging to any class.,NULL
Imagine you have a class called StateOwner which can register state event listeners.,NULL
The lambda expression is matched against the parameter type of the addStateListener() method's parameter.,NULL
"For instance, the interface type of the parameter can be inferred from the method declaration of the addStateListener() method (the single method on the StateChangeListener interface).",NULL
"In the example above, the compiler can infer their type from the onStateChange() method declaration.",NULL
"Thus, the type of the parameters oldState and newState are inferred from the method declaration of the onStateChange() method.","(""onStateChange"", ""oldState is a parameter of the onStateChange method."", ""oldState"")"
"In this case, these parameters have to match the parameters of the onStateChange() method of the StateChangeListener interface:",NULL
Here is an example class that creates a lambda which references a static variable from inside the lambda body:,"(""ExampleClass"", ""The ExampleClass creates a Lambda method that references a static variable."", ""Lambda"")"
The class primarily serves to show you that a lambda can access static variables.,"(""Class"", ""The class demonstrates the use of a lambda function."", ""Lambda"")"
"Since all the lambda body does is forward the string parameter to the System.out.println() method, we can replace the above lambda declaration with a method reference.",NULL
Whatever class or object that owns the referenced method comes before the double colons.,NULL
"Since the parameters of the Finder.find() and MyClass.doFind() methods match, it is possible to create a lambda expression that implements Finder.find() and references the MyClass.doFind() method.","(""Finder"", ""Finder.find() is a method of the Finder class."", ""find""); (""MyClass"", ""MyClass.doFind() is a method of the MyClass class."", ""doFind"")"
Here is an example of a Java lambda expression that calls String.indexOf() to search:,NULL
The convertToInt() method has the same signature as the deserialize() method of the Deserializer deserialize() method.,"(""convertToInt"", ""Both methods have the same signature, indicating a relationship in functionality or purpose."", ""deserialize"")"
"Because of that, we can create an instance of StringConverter and reference its convertToInt() method from a Java lambda expression, like this:",NULL
Finally it is possible to reference a constructor of a class.,NULL
"You do that by writing the class name followed by ::new, like this:",NULL
The create() method of this interface matches the signature of one of the constructors in the String class.,NULL
"In Java, all instructions (code) have to be located inside a Java class.",NULL
A class is a way of grouping data and instructions that belong together.,NULL
"Declaring a simple class without any variables, methods or any other instructions, looks like this in Java code:",NULL
This Java code needs to be located in a file with the same file name as the class and ending with the file suffix .java.,NULL
"Once the file is located in a file matching its class name and ending with .java, you can compile it with the Java compiler from the Java SDK, or from inside your Java IDE (which is much easier).","(""Java"", ""Java SDK is a package used for compiling Java classes."", ""Java SDK"")"
It is recommended that you locate your class in a Java package.,NULL
"If you locate a Java class inside a Java package, you have to specify the package name at the top of the Java file.",NULL
Here is how the class from earlier looks with a package declaration added:,NULL
Note: The file MyClass.java must now be located in the directory myjavacode and contain the package declaration package myjavacode; .,NULL
A Java program starts by executing the main method of some class.,"(""Java Program"", ""The main method is the entry point of a Java program, indicating that the Java program executes the main method."", ""main"")"
"You can choose the name of the class to execute, but not the name of the method.",NULL
Here is how the main method declaration looks when located inside the Java class declaration from earlier:,NULL
Just remember that a main() method declaration needs these three keywords.,NULL
"In the main() method example earlier I called the String array parameter args, and in the second example I called it stringArray.","(""main"", ""The main method uses the args parameter to accept command-line arguments."", ""args"")"
"You call the java command that comes with the JRE, and tells it what Java class to execute, and what arguments to pass to the main() method.","(""Java"", ""Java class to execute the main() method is specified."", ""main()"")"
The second and third arguments (-cp classes) tells the JVM in what directory the compiled Java classes are located (cp means class path).,"(""JVM"", ""The JVM uses the directory specified to locate the compiled Java classes."", ""Java classes"")"
In this case the compiled Java classes are located in a directory named classes.,NULL
The fourth argument is the name of the Java class the JVM is to execute.,NULL
"Notice how the class name also contains the name of the package the class is located in (the ""fully qualified class name"").",NULL
You can pass arguments from the command line to the main() method.,NULL
"When the JVM executes the main() method of the myjavacode.MyClass, the String array passed as parameter to the main() method will contain two Strings: ""Hello"" and ""World"".","(""main"", ""The main() method is defined within the MyClass class."", ""MyClass"")"
The main() method can access the arguments from the command line like this:,NULL
"If only a single Java class in your Java program contains a main() method, then the class containing the main() method is often referred to as the main class.","(""Java Class"", ""The main() method is contained within the Java class, indicating a direct relationship between the class and the method."", ""main() Method"")"
You can have as many classes as you want in your project with a main() method in.,NULL
You can still call the other main() methods from inside the main() method the Java Virtual Machine executes (you haven't seen how yet) and you can also start up multiple virtual machines which each execute a single main() method.,"(""main"", ""The main() method is executed by the Java Virtual Machine."", ""Java Virtual Machine"")"
Therefore Java also contains the Java Math class which contains methods for performing more advanced math calculations in Java.,NULL
This Java math tutorial will take a closer look at both Java's math operators as well as the Java Math class.,NULL
"The result of this division would be 12.5 , but since the two numbers are integers, the .5 fraction is cut off.",NULL
"Even though the result variable is now a floating point type (double), the final result is still just 12 instead of 12.5 .","(""Result"", ""The result variable is described as a floating point type."", ""Floating Point"")"
Now the result variable would end up with the value 12.5.,NULL
"The first System.out.println() statement correctly prints the value 0.0 , which is the start value of the the resultDbl3 variable.","(""System.out.println"", ""The method System.out.println() is used to print the value of the variable resultDbl3."", ""resultDbl3"")"
"Adding the value 0.01 to 0 a total of 100 times should result in the value 1.0, right?","(""Value"", ""The value is being added to the total."", ""Total"")"
The Java Math class provides more advanced mathematical calculations than what the basic Java math operators provide.,NULL
"The Math class contains methods for finding the maximum or minimum of two values, rounding values, logarithmic functions, square root, and trigonometric functions (sin, cos, tan etc.","(""Math"", ""The Math class contains the method for finding the maximum of two values."", ""maximum""); (""Math"", ""The Math class contains the method for finding the minimum of two values."", ""minimum""); (""Math"", ""The Math class contains the method for rounding values."", ""rounding""); (""Math"", ""The Math class contains methods for logarithmic functions."", ""logarithmic functions""); (""Math"", ""The Math class contains the method for calculating square root."", ""square root"")"
"The Math is located in the java.lang package, and not in the java.math package.","(""Math"", ""Math is located in the java.lang package."", ""java.lang"")"
"Thus, the fully qualified class name of the Math class is java.lang.Math .",NULL
"Since many of the functions of the Math class are independent from each other, each method will be explained in its own section below.",NULL
"The java.lang.Math contains a set of basic math functions for obtaining the absolute value, highest and lowest of two values, rounding of values, random values etc.","(""Math"", ""Math class contains the method for obtaining the absolute value."", ""absolute value""); (""Math"", ""Math class contains the method for obtaining the highest of two values."", ""highest""); (""Math"", ""Math class contains the method for obtaining the lowest of two values."", ""lowest""); (""Math"", ""Math class contains the method for rounding values."", ""rounding"")"
These basic math functions of the Java Math class will be covered in the following sections.,NULL
The Math.abs() function returns the absolute value of the parameter passed to it.,NULL
Which of these methods are called depends on the type of the parameter passed to the Math.abs() method.,NULL
The Math.ceil() function rounds a floating point value up to the nearest integer value.,NULL
After executing this Java code the ceil variable will contain the value 8.0 .,NULL
The Math.floor() function rounds a floating point value down to the nearest integer value.,NULL
After executing this Java code the floor variable will contain the value 7.0 .,NULL
"The Math.floorDiv() method divides one integer (int or long) by another, and rounds the result down to the nearest integer value.","(""Math.floorDiv"", ""The Math.floorDiv() method operates on integers."", ""integer""); (""Math.floorDiv"", ""The Math.floorDiv() method can divide int values."", ""int"")"
"The floorDiv() method rounds down to the nearest negative integer, instead of the rounding up that would occur with fraction truncation.",NULL
This shows the difference between the / division operator and Math.floorDiv() .,NULL
The Math.min() method returns the smallest of two values passed to it as parameter.,NULL
The Math.max() method returns the largest of two values passed to it as parameter.,NULL
The Math.round() method rounds a float or double to the nearest integer using normal math round rules (either up or down).,NULL
"After executing these two Java statements the roundedDown variable will contain the value 23.0 , and the roundedUp variable will contain the value 24.0.",NULL
The Math.random() method returns a random floating point number between 0 and 1.,"(""Math"", ""Math.random() is a method of the Math class."", ""random"")"
"100, multiply the value returned by Math.random() with the maximum number (e.g.",NULL
"If you need an integer value, use the round(), floor() or ceil() method.","(""round"", ""Both methods are used to obtain integer values from floating-point numbers."", ""floor""); (""round"", ""Both methods are used to obtain integer values from floating-point numbers."", ""ceil"")"
The Java Math class also contains a set of functions intended for exponential and logarithmic calculations.,NULL
The Math.exp() function returns e (Euler's number) raised to the power of the value provided as parameter.,NULL
The Math.log10 method works like the Math.log() method except is uses 10 as is base for calculating the logarithm instead of e (Euler's Number).,NULL
"In other words, the Math.pow() example calculate the values of 22 and 28 which are 4 and 256.","(""Math"", ""Math.pow() is a method of the Math class."", ""pow"")"
The Math.sqrt() method calculates the square root of the parameter given to it.,NULL
"If you are looking for a trigonometric function and you cannot find it here, check the JavaDoc for the Java Math class.",NULL
"The Math class just might have the function you are looking for, even if I have not described it here.",NULL
The Math.PI constant is a double with a value that is very close to the value of PI - the mathematical definition of PI.,"(""Math.PI"", ""Math.PI is a constant that represents the mathematical value of PI."", ""PI""); (""Math.PI"", ""Math.PI is a constant of type double."", ""double""); (""Math.PI"", ""Math.PI has a value that is very close to the value of PI."", ""value"")"
You will often need the Math.PI field when making trigonometric calculations.,NULL
The Math.sin() method calculates the sine value of some angle value in radians.,NULL
The Math.cos() method calculates the cosine value of some angle value in radians.,NULL
The Math.tan() method calculates the tangens value of some angle value in radians.,NULL
The Math.asin() method calculates the arc sine value of a value between 1 and -1.,NULL
The Math.acos() method calculates the arc cosine value of a value between 1 and -1.,NULL
The Math.atan() method calculates the arc tangens value of a value between 1 and -1.,NULL
The Math.sinh() method calculates the hyperbolic sine value of a value between 1 and -1.,NULL
The Math.cosh() method calculates the hyperbolic cosine value of a value between 1 and -1.,NULL
The Math.tanh() method calculates the hyperbolic tangens value of a value between 1 and -1.,NULL
Java methods are similar to what is called functions or procedures in other programming languages (e.g.,"(""Java Methods"", ""Java methods are similar to functions in other programming languages."", ""Functions"")"
The example above defines a method called writeText inside a class named MyClass.,NULL
You can use any primitive data type or built-in Java class as data type for parameters.,NULL
"When the above Java code is executed, the writeText() method will get executed, and the parameters will contain the values ""Hello"" and ""World"".","(""writeText"", ""The writeText() method uses the parameter 'Hello' during its execution."", ""Hello"")"
"But, instead of returning to where the method was called from, the execution is resumed inside the first catch() { } clause surrounding the method, targeted at that exception.",NULL
"Notice how the method callSum() creates a variable called theSum, and assigns it the value returned by the add(1, 3) method call.","(""callSum"", ""The method callSum() creates a variable called theSum."", ""theSum"")"
Before Java 9 and the Java Platform Module System you would have had to package all of the Java Platform APIs with your Java application because there was no official way of reliably checking what classes your Java application used.,"(""Java Platform APIs"", ""Java application needs to package Java Platform APIs for functionality."", ""Java application"")"
"Since the Java Platform APIs have grown quite large over the years, your application would get a large amount of Java classes included in its distribution, many of which your application would probably not be using.",NULL
The unused classes makes your application distributable bigger than it needs to be.,NULL
from a missing JAR file) would not be detected until the application actually tried to use the missing class.,"(""JAR"", ""The JAR file is related to the class because it contains the class that is missing."", ""class"")"
This would happen sometime at runtime - depending on when the application tried to use the missing class.,NULL
Having missing modules reported at application startup time is a big advantage compared to at runtime when trying to use the missing module / JAR / class.,"(""Application"", ""The application can report missing modules at startup."", ""Module""); (""Module"", ""Modules can be packaged as JAR files."", ""JAR"")"
"However, you should not use underscores (_) in module names (or package names, class names, method names, variable names etc.)","(""Module"", ""Module names are a type of package names."", ""Package""); (""Package"", ""Package names can include class names."", ""Class"")"
"Before Java 9 all Java classes for an application or API were nested directly inside a root class directory (which was added to the classpath), or directly inside a JAR file.","(""Java"", ""Java classes are used to create APIs in applications."", ""API"")"
The module root directory is used both for the source files and compiled classes of a Java module.,"(""Module Root Directory"", ""The module root directory contains the source files of a Java module."", ""Source Files"")"
Each Java module needs a Java module descriptor named module-info.java which has to be located in the corresponding module root directory.,"(""Java Module"", ""The Java module descriptor named module-info.java is associated with each Java module."", ""module-info.java"")"
Notice also how the module descriptor is suffixed .java and yet it uses a hyphen in the file name (module-info.java).,NULL
"Hyphens are not normally allowed in Java class names, but in module descriptor file names they are required!","(""Hyphens"", ""Hyphens are not normally allowed in Java class names."", ""Java"")"
This example module descriptor declares that it requires the standard Java module named javafx.graphics.,NULL
By split package is meant that the total content (classes) of the package is split between multiple modules.,NULL
"Inside that directory you will find a directory with the name of the module, and inside that directory you will find the compiled classes plus a compiled version of the module-info.java module descriptor named module-info.class.","(""module"", ""The module-info.java is a descriptor for the module, indicating its structure and dependencies."", ""module-info.java"")"
"In order to run the main class of a Java module you use the java command, like this:",NULL
The --module argument tells what module + main class to run.,NULL
Notice how the module name and main class name are separated by a slash (/) character.,NULL
You can still set the JAR main class when generating the module JAR file.,"(""JAR"", ""The JAR main class is a method that can be set when generating the JAR file."", ""main class"")"
Here is an example of setting the main class of a Java module JAR file:,NULL
You can now run the main class of this JAR file with a shortcut.,NULL
Here is how you run the main class from a Java module JAR file:,NULL
"If the Java module JAR file has a main class set (see a few sections earlier in this tutorial for how to do that), you can run the Java module main class with a little shorter command line.","(""Java Module"", ""The Java module has a main class that can be run."", ""Main Class"")"
Here is an example of running a Java module from a JAR file with a main class set:,"(""Java Module"", ""A Java Module can be run from a JAR File."", ""JAR File"")"
The --module argument specifies which module plus main class to run.,NULL
"From Java 9 and forward, all Java classes must be located in a module for the Java VM to use them.","(""Java"", ""Java classes must be located in a module for the Java VM to use them."", ""module"")"
"But what do you do with older Java libraries where you just have the compiled classes, or a JAR file?","(""Java"", ""Java libraries may consist of compiled classes, which are related to the Java entity."", ""libraries"")"
In Java 9 you can still use the -classpath argument to the Java VM when running an application.,NULL
"On the classpath you can include all your older Java classes, just like you have done before Java 9.","(""Classpath"", ""Classpath can include older Java classes."", ""Java"")"
All classes found on the classpath will be included in what Java calls the unnamed module.,"(""Classes"", ""Classes are found on the classpath."", ""Classpath"")"
"However, the classes in the unnamed module are only readable by other classes in the unnamed module - or from automatic modules (see next section).",NULL
No named module can read the classes of the unnamed module.,NULL
All classes in the unnamed module requires all modules found on the module path.,NULL
"That way, all classes in the unnamed module can read all classes exported by all the Java modules found on the module path.",NULL
"While you can include the third party library on the classpath and thus include it in the unnamed module, your own named modules cannot use it, because named modules cannot read classes from the unnamed module.","(""Third Party Library"", ""The third party library can be included in the classpath of the unnamed module."", ""Unnamed Module"")"
"An automatic module is made from a JAR file with Java classes that are not modularized, meaning the JAR file has no module descriptor.",NULL
When you place an ordinary JAR file on the module path (not the classpath) the Java VM will convert it to an automatic module at runtime.,"(""JAR"", ""The Java VM converts the JAR file to an automatic module at runtime."", ""Java VM"")"
"If your application contains multiple automatic modules, each automatic module can read the classes of all other automatic modules.",NULL
This is different from explicitly named modules (real Java modules) which cannot read classes in the unnamed module.,NULL
"An automatic module exports all its packages, so all named modules on the module path can use the classes of an automatic module.","(""Automatic Module"", ""An automatic module exports all its packages."", ""Packages"")"
"If a JAR file contains versioning in its file name, e.g.",NULL
"The service interface is typically located in a service interface Java module which only contains the service interface, plus any classes and interfaces related to the service interface.","(""Service Interface"", ""The service interface is typically located in a service interface Java module."", ""Java Module""); (""Java Module"", ""The Java module contains any classes related to the service interface."", ""Classes"")"
The com folder at the root level of the JAR file contains the compiled Java classes for pre Java 9 versions.,"(""com"", ""The com folder is located at the root level of the JAR file."", ""JAR"")"
Earlier versions of Java do not understand multi Java version JAR files so they use the classes found here.,"(""Java"", ""Java is a programming language that can create JAR files."", ""JAR"")"
The META-INF directory contains the MANIFEST.MF file and a directory named versions.,NULL
The MANIFEST.MF file needs a special entry that marks the JAR file as a multi version JAR file.,NULL
The versions directory which can contain the compiled classes for different versions of Java for your module.,NULL
"Upgrading utility libraries first to automatic modules, and later to full modules, starting at the bottom of the dependency hierarchy should assure that your libraries can still read each other during upgrade, plus be readable by the main applications on the classpath in the unnamed module or as an automatic or named module.","(""Utility Libraries"", ""Utility libraries can read each other and are readable by the main applications on the classpath."", ""Main Applications""); (""Main Applications"", ""Main applications are located on the classpath."", ""Classpath""); (""Unnamed Module"", ""The unnamed module is part of the classpath."", ""Classpath""); (""Automatic Module"", ""Automatic modules are included in the classpath."", ""Classpath"")"
In Java nested classes are classes that are defined inside another class.,NULL
"The purpose of a nested class is to clearly group the nested class with its surrounding class, signaling that these two classes are to be used together.",NULL
Or perhaps that the nested class is only to be used from inside its enclosing (owning) class.,NULL
"Java developers often refer to nested classes as inner classes, but inner classes (non-static nested classes) are only one out of several different types of nested classes in Java.","(""Java"", ""Java is the programming language that includes nested classes."", ""nested classes""); (""nested classes"", ""Inner classes are a specific type of nested class."", ""inner classes"")"
In Java nested classes are considered members of their enclosing class.,"(""nested classes"", ""nested classes are considered members of Java"", ""Java"")"
"Thus, a nested class can be declared public, package (no access modifier), protected and private (see access modifiers for more info).",NULL
Therefore nested classes in Java can also be inherited by subclasses as explained in my tutorial about Java inheritance.,"(""Java"", ""Java is a programming language that supports inheritance, which is a key concept in object-oriented programming."", ""inheritance"")"
You can create several different types of nested classes in Java.,NULL
All these types of nested classes will be covered in the following sections.,NULL
"In order to create an instance of the Nested class you must reference it by prefixing it with the Outer class name, like this:",NULL
In Java a static nested class is essentially a normal class that has just been nested inside another class.,NULL
"Being static, a static nested class can only access instance variables of the enclosing class via a reference to an instance of the enclosing class.",NULL
Inner classes are associated with an instance of the enclosing class.,NULL
"Thus, you must first create an instance of the enclosing class to create an instance of an inner class.",NULL
Here is how you create an instance of the Inner class:,NULL
Notice how you put new after the reference to the outer class in order to create an instance of the inner class.,NULL
"Non-static nested classes (inner classes) have access to the fields of the enclosing class, even if they are declared private.",NULL
Notice how the printText() method of the Inner class references the private text field of the Outer class.,"(""printText()"", ""The printText() method is defined within the Inner class."", ""Inner""); (""text"", ""The text field is a private field of the Outer class."", ""Outer"")"
"If a Java inner class declares fields or methods with the same names as field or methods in its enclosing class, the inner fields or methods are said to shadow over the outer fields or methods.","(""Java Inner Class"", ""The Java Inner Class can declare fields or methods that shadow those in the Enclosing Class."", ""Enclosing Class""); (""Java Inner Class"", ""The Fields in the Java Inner Class can shadow Fields in the Enclosing Class."", ""Fields"")"
In the above example both the Outer and Inner class contains a field named text.,"(""Outer"", ""Outer class contains a field named text."", ""text"")"
When the Inner class refers to text it refers to its own field.,NULL
"Java makes it possible though, for the Inner class to refer to the text field of the Outer class.",NULL
To do so it has to prefix the text field reference with Outer.this.,NULL
Now the Inner.printText() method will print both the Inner.text and Outer.text fields.,"(""printText"", ""The printText method is a method of the Inner class."", ""Inner""); (""text"", ""The Inner class has a field named text."", ""Inner"")"
Local classes in Java are like inner classes (non-static nested classes) that are defined inside a method or scope block ({ ... }) inside a method.,"(""Local Classes"", ""Local classes in Java are defined inside a method or scope block, which relates them to inner classes."", ""Inner Classes"")"
Local classes can only be accessed from inside the method or scope block in which they are defined.,"(""Local classes"", ""Local classes can only be accessed from inside the method or scope block in which they are defined."", ""method"")"
Local classes can access members (fields and methods) of its enclosing class just like regular inner classes.,"(""Local Classes"", ""Local classes can access members of its enclosing class."", ""Enclosing Class""); (""Enclosing Class"", ""Fields are members of the enclosing class."", ""Fields"")"
"Local classes can also access local variables inside the same method or scope block, provided these variables are declared final.","(""Local classes"", ""Local classes can access local variables inside the same method or scope block."", ""method""); (""Local classes"", ""Local classes can access local variables inside the same method or scope block."", ""local variables"")"
From Java 8 local classes can also access local variables and parameters of the method the local class is declared in.,"(""local classes"", ""Local classes can access local variables and parameters of the method they are declared in."", ""method""); (""local classes"", ""Local classes can access local variables of the method they are declared in."", ""local variables"")"
In that case the local class only has access to the static parts of the enclosing class.,NULL
"Local classes cannot contain all kinds of static declarations (constants are allowed - variables declared static final), because local classes are non-static in nature - even if declared inside a static method.","(""Local Classes"", ""Local classes cannot contain all kinds of static declarations due to their non-static nature."", ""Static Declarations""); (""Local Classes"", ""Local classes are allowed to contain constants, which are static final variables."", ""Constants"")"
The same shadowing rules apply for local classes as for inner classes.,"(""ShadowingRules"", ""The shadowing rules apply to local classes."", ""LocalClasses"")"
Anonymous classes in Java are nested classes without a class name.,NULL
"They are typically declared as either subclasses of an existing class, or as implementations of some interface.",NULL
Here is an example that declares an anonymous subclass of a superclass called SuperClass:,NULL
Running this Java code would result in Anonymous class doIt() being printed to System.out.,"(""Anonymous"", ""Anonymous class contains the method doIt()"", ""doIt()"")"
The anonymous class subclasses (extends) SuperClass and overrides the doIt() method.,"(""AnonymousClass"", ""AnonymousClass is a subclass of SuperClass"", ""SuperClass"")"
A Java anonymous class can also implement an interface instead of extending a class.,NULL
"As you can see, an anonymous class implementing an interface is pretty similar to an anonymous class extending another class.","(""AnonymousClass"", ""An anonymous class can implement an interface."", ""Interface"")"
"You can declare fields and methods inside an anonymous class, but you cannot declare a constructor.",NULL
"You can declare a static initializer for the anonymous class instead, though.",NULL
The same shadowing rules apply to anonymous classes as to inner classes.,NULL
The benefits of Java nested classes are that you can group classes together that belong together.,NULL
"You could do so already by putting them in the same package, but putting one class inside another makes an even stronger grouping.",NULL
A nested class is typically only used by or with its enclosing class.,NULL
"Sometimes a nested class is only visible to the enclosing class, is only used internally, and is thus never visible outside the enclosing class.",NULL
"Other times the nested class is visible outside its enclosing class, but can only be used in conjunction with the enclosing class.",NULL
"Inside the Cache class you might declare a CacheEntry class which can contain information about a specific cache entry (cached value, time inserted, number of times accessed etc.).",NULL
"Users of the Cache class may never see the CacheEntry class, if they have no need to obtain information about the CacheEntry itself, but only the cached value.",NULL
"However, the Cache class may choose to make the CacheEntry class visible to the outside world, so they can access more than just the cached value (for instance information about when the value was last refreshed etc.",NULL
The first Cache class hides its CacheEntry nested class while the second Cache class exposes it.,"(""Cache"", ""The first Cache class contains the CacheEntry nested class, indicating a relationship of encapsulation."", ""CacheEntry"")"
You instantiate an object of a certain class using the new keyword.,NULL
"This example declares a variable of the MyClass class (custom data type), and then creates a new MyClass instance and assigns a reference to this instance to myClassInstance variable.",NULL
"Inside the parantheses () after the for keyword, are three statements separated by semicolon (;).","(""for"", ""The 'for' method is used to iterate over the statements in the parentheses."", ""statements"")"
"Here is a simple example of a class that has two methods, where one method calls the other:","(""Class"", ""The class contains methods, indicating a relationship where the class defines the methods."", ""Method"")"
"Notice how printBoth() calls the print() method two times, each time with a different of the parameters passed to the printBoth() method.",NULL
The print() method is thus a reusable block of code that can be called from anywhere.,NULL
"When the print() method is finished executing, the program jumps back to after the line that called the print() method.",NULL
"Java packages are a mechanism to group Java classes that are related to each other, into the same ""group"" (package).",NULL
"When a Java project grows bigger, for instance an app or API, it is useful to split the code into multiple Java classes, and the classes into multiple Java packages.","(""Java Project"", ""A Java project can be divided into multiple Java classes to manage complexity."", ""Java Classes"")"
"When you divide classes into multiple Java packages, it becomes easier to figure out where a certain class you are looking for is.",NULL
All Java source and class files of classes belonging to the same package are located in the same directory.,"(""Java"", ""Java classes are organized into packages."", ""package""); (""source files"", ""Source files belong to a package."", ""package""); (""class files"", ""Class files are located in the same package."", ""package"")"
"Its a tree of packages, subpackages and classes inside these classes.","(""Packages"", ""Subpackages are part of the hierarchy within Packages."", ""Subpackages"")"
"I have expanded two of the sublevel Java packages, so you can see the classes inside.","(""sublevel"", ""sublevel is a type of Java package that contains classes"", ""Java"")"
"The classes are illustrated using a little blue circle with a C inside, in the screenshot above.",NULL
"Similarly, the fully qualified name of a Java class includes its package name.",NULL
"For instance, the full qualified name of the ""Page"" class, is:",NULL
"In order to put add Java classes to packages, you must do two things:",NULL
Put the class files into the directory matching the package you want to add it to.,NULL
"When you have put your Java source file into the correct directory (matching the package the class should belong to), you have to declare inside that class file, that it belongs to that Java package.","(""class"", ""The class is declared to belong to the specified Java package."", ""package"")"
"Not like Java classes, where the first letter is usually a capital letter.",NULL
"If the classes A and B are located in the same Java package, there is no problem with the code above.","(""A"", ""Class A is located in the same Java package as Class B, indicating a relationship between them."", ""Java package"")"
"If you need to use a lot of classes from a certain Java package, importing them one at a time results in a lot of import statements.",NULL
It is possible to import all classes of a package using the * character instead of a class name.,NULL
It is possible to use a class from another package without importing it with an import statement.,NULL
You can write the fully qualified class name instead of just the name of the class itself.,NULL
"The fully qualified class name consists of the full package path down to the subclass containing the class, and also including the class name itself.","(""PackagePath"", ""The fully qualified class name includes the full package path."", ""FullyQualifiedClassName""); (""Subclass"", ""The fully qualified class name includes the subclass containing the class."", ""FullyQualifiedClassName"")"
The fully qualified class name is also what you would write in an import statement.,NULL
"You could use this fully qualified class name to reference the TimeUtil class inside another class, like this:",NULL
"You might be wondering how you decide on what Java packages to create, and how to divide your classes into these packages.","(""Java"", ""Java packages are created to organize related classes."", ""packages"")"
"The first method is to divide classes after what ""layer"" of the application they belong to.",NULL
All classes involved in communication with the database would then be located in the database package.,NULL
The second method is to divide your classes based on what part of the application functionality they belong to.,NULL
"All classes involved in one way or another in the pension calculations would go into that package (or subpackages, if the number of classes in pension grow large).","(""Classes"", ""Classes involved in pension calculations are included in the package."", ""Package"")"
"The ""divide by application functionality"" method of dividing classes into Java packages tends to work better than ""divide by layer"", as your application grows in number of classes.","(""Divide By Application Functionality"", ""Both methods are related as they describe different approaches to organizing classes in Java packages."", ""Dividing Classes""); (""Dividing Classes"", ""Dividing classes is a method that involves organizing them into Java packages."", ""Java Packages"")"
"Instead of having a fixed number of layer packages which keep growing in number of classes, you get a growing number of application functionality packages with a smaller number of classes inside.","(""LayerPackages"", ""Layer packages are being replaced by application functionality packages that contain classes."", ""ApplicationFunctionalityPackages"")"
"These packages contain classes for all kinds of purposes that programmers often need, like reading and writing files from the local hard disk, sending and receiving data over networks and the internet, connecting to databases, and many, many other things.",NULL
"When you compile all the source code in the source, the compiler produces one .class file for each .java file.","(""Compiler"", ""The compiler produces a .class file for each .java file."", "".class"")"
It is the .class files that the Java Virtual Machine can execute.,NULL
Therefore it is normal to separate the .java files from the .class files.,NULL
This is normally done by instructing the compiler to write the .class files into a separate directory.,"(""compiler"", ""The compiler is responsible for writing .class files."", ""class"")"
"This directory is often called classes, but again, it is not a requirement, and it depends on what build tool or IDE etc.",NULL
The *.java means the compiler should compile all files in the given directory.,"(""Java"", ""Java is a programming language that the compiler processes."", ""Compiler"")"
"Once the compiler has done its job, the classes directory will contain the compiled .class files.","(""compiler"", ""The compiler processes the classes to produce compiled .class files."", ""classes"")"
The package structure (directory structure) from the source directory will be preserved under the class directory.,"(""Source Directory"", ""The package structure is derived from the source directory."", ""Package Structure"")"
You can run any one of these .class files which have a main() method in it.,NULL
"You can run the .class from inside your Java IDE, or from the command line.","(""class"", ""The class can be executed from within the Java IDE."", ""Java IDE"")"
The -cp classes flag tells the Java Virtual Machine that all your classes are located under the directory called classes.,NULL
The name of the class to run is the last argument in the above command - the myfirstapp.MyJavaApp part.,NULL
The JVM needs to know the fully qualified class name (all packages plus class name) to determine where the corresponding .class file is located.,"(""JVM"", ""The JVM requires the fully qualified class name to locate the corresponding .class file."", ""class name""); (""class name"", ""The fully qualified class name determines the location of the corresponding .class file."", ""class file"")"
When you run the the class your command line will look similar to this (including the output from the Java app):,NULL
A Java Record is a special kind of Java class which has a concise syntax for defining immutable data-only classes.,NULL
A Java Record consist of one or more data fields which corresponds to member variables in a regular Java class.,"(""Java Record"", ""A Java Record consists of one or more data fields."", ""data fields""); (""data fields"", ""Data fields correspond to member variables in a regular Java class."", ""member variables""); (""Java Record"", ""Java Record is a type of class in Java."", ""Java class"")"
"The Java compiler auto generates getter methods, toString(), hashcode() and equals() methods for these data fields, so you don't have to write that boilerplate code yourself.","(""Java Compiler"", ""The Java compiler auto generates getter methods."", ""getter methods""); (""Java Compiler"", ""The Java compiler auto generates toString() methods."", ""toString()""); (""Java Compiler"", ""The Java compiler auto generates hashcode() methods."", ""hashcode()"")"
"The Java compiler then generates the corresponding fields, getter methods and a hashCode() and equals() method.","(""Java Compiler"", ""The Java compiler generates the corresponding fields."", ""fields""); (""Java Compiler"", ""The Java compiler generates getter methods."", ""getter methods""); (""Java Compiler"", ""The Java compiler generates a hashCode() method."", ""hashCode()"")"
You use a Java Record just like you use other Java classes - by creating instances of the record type using the Java new keyword.,"(""Java Record"", ""Java Record is used similarly to other Java classes."", ""Java classes""); (""Java Record"", ""Java Record is a type of record that can be instantiated."", ""record type"")"
"Notice how the Java compiler has generated a brand() method, a licensePlate() method and a toString() method for us.","(""Brand"", ""Both methods are generated by the Java compiler."", ""LicensePlate""); (""Brand"", ""Both methods are generated by the Java compiler."", ""ToString"")"
"A Record type definition is final, meaning you cannot create subclasses (subrecords) of a Java Record type.",NULL
You can add instance methods to a Java Record definition - just like you can with a regular Java class.,NULL
Here is an example of the Vehicle Java Record definition from earlier sections with an instance method named brandAsLowerCase() added:,NULL
Notice how the brandAsLowerCase() method calls the auto-generated brand() method internally.,NULL
"That means, that even classes from different projects compiled separately, but which are used in the same application may share constant String objects.","(""Classes"", ""Classes from different projects can be compiled separately but may still be used together in the same application."", ""Projects""); (""Classes"", ""Classes are used in the same application."", ""Application"")"
"As you can see, a new StringBuilder is created, passing along the first String to its constructor, and the second String to its append() method, before finally calling the toString() method.","(""StringBuilder"", ""StringBuilder uses the append method to add a String."", ""append"")"
This code actually creates two objects: A StringBuilder instance and a new String instance returned from the toString() method.,"(""StringBuilder"", ""The toString() method is called on the StringBuilder instance to return a String instance."", ""toString"")"
"The bigger the result String grows, the longer it takes to copy the characters from it into a new StringBuilder, and again copy the characters from the StringBuilder into the temporary String created by the toString() method.","(""String"", ""String is being copied into StringBuilder for character manipulation."", ""StringBuilder"")"
You can obtain the length of a String using the length() method.,NULL
You do so using the substring() method of the String class.,NULL
The last character in the string has has the index String.length() - 1.,NULL
You can search for substrings in Strings using the indexOf() method.,NULL
The indexOf() method returns the index of where the first character in the first matching substring is found.,NULL
"If the substring is not found within the string, the indexOf() method returns -1;",NULL
There is a version of the indexOf() method that takes an index from which the search is to start.,NULL
The Java String class also has a lastIndexOf() method which finds the last occurrence of a substring.,NULL
"The Java String matches() method takes a regular expression as parameter, and returns true if the regular expression matches the string, and false if not.","(""String"", ""The matches() method is a method of the String class."", ""matches"")"
The equals() method tests if two Strings are exactly equal to each other.,NULL
The String class also has a method called equalsIgnoreCase() which compares two strings but ignores the case of the characters.,NULL
The startsWith() and endsWith() methods check if the String starts with a certain substring.,"(""startsWith"", ""The startsWith() method checks if the String starts with a certain substring."", ""String"")"
"The compareTo() method compares the String to another String and returns an int telling whether this String is smaller, equal to or larger than the other String.",NULL
"If the String is earlier in sorting order than the other String, compareTo() returns a negative number.",NULL
"If the String is equal in sorting order to the other String, compareTo() returns 0.",NULL
"If the String is after the other String in sorting order, the compareTo() metod returns a positive number.",NULL
You should be aware that the compareTo() method may not work correctly for Strings in different languages than English.,NULL
The Java String class contains a method called trim() which can trim a string object.,NULL
The trim() method can be very useful to trim text typed into input fields by a user.,NULL
The trim() method is an easy way to remove such extra white space characters.,NULL
The Java String class contains a method named replace() which can replace characters in a String.,NULL
The replace() method does not actually replace characters in the existing String.,NULL
"The replace() method will replace all character matching the character passed as first parameter to the method, with the second character passed as parameter to the replace() method.","(""replace"", ""The replace() method operates on characters that match the first parameter."", ""character"")"
The Java String replaceFirst() method returns a new String with the first match of the regular expression passed as first parameter with the string value of the second parameter.,NULL
The Java String replaceAll() method returns a new String with all matches of the regular expression passed as first parameter with the string value of the second parameter.,"(""replaceAll()"", ""replaceAll() is a method that operates on the String class to return a new String."", ""String"")"
The Java String class contains a split() method which can be used to split a String into an array of String objects.,"(""String"", ""The split() method is a method of the String class."", ""split"")"
The parameter passed to the split() method is actually a Java regular expression.,NULL
The String split() method exists in a version that takes a limit as a second parameter.,NULL
Here is a Java String split() example using the limit parameter:,"(""String"", ""The split method is a function that operates on the String class."", ""split"")"
The Java String class contains a set of overloaded static methods named valueOf() which can be used to convert a number to a String.,"(""String"", ""The valueOf() method is a static method of the String class used for converting a number to a String."", ""valueOf"")"
"Since all Java classes extends (inherits from) the Object class, all objects have a toString() method.",NULL
"Note: For the toString() method to return a sane String representation of the given object, the class of the object must have overridden the toString() method.",NULL
"If not, the default toString() method (inherited from the Object class) will get called.",NULL
The default toString() method does not provide that much useful information.,NULL
It is possible to get a character at a certain index in a String using the charAt() method.,NULL
You can also get the byte representation of the String method using the getBytes() method.,NULL
The first getBytes() call return a byte representation of the String using the default character set encoding on the machine.,NULL
The second getBytes() call return a UTF-8 byte representation of the String.,NULL
You can convert Strings to uppercase and lowercase using the methods toUpperCase() and toLowerCase().,"(""Strings"", ""Strings can be converted to uppercase using the method toUpperCase()"", ""toUpperCase"")"
From Java 13 the Java String class got a new method named formatted() which can be used to return a formatted version of the String formatted() is called on.,"(""Java String"", ""The formatted method is a new method added to the Java String class."", ""formatted"")"
"The formatted() method is only a preview feature that was added together with Java Text Blocks in Java 13, so we do not yet know if it will stay in.","(""formatted"", ""The formatted() method was added together with Java Text Blocks in Java 13."", ""Java Text Blocks"")"
Here is an example of using the Java String formatted() method:,NULL
The parameter values passed to formatted() will be inserted into the returned String at the %s location of the input String.,NULL
"From Java 13 the Java String class got a new method named stripIndent() which can be used to strip out indentation, similarly to how indentation is stripped out of Java Text Blocks.","(""Java String"", ""The method stripIndent() is a new method added to the Java String class."", ""stripIndent()"")"
"The stripIndent() method is a preview feature, so we don't know if it will stay in Java yet.",NULL
Here is an example of using the new Java String stripIndent() method:,NULL
From Java 13 the Java String class got a new method called translateEscapes() which can translate escape codes that exist inside a String in the same way the Java compiler translates them.,"(""Java String"", ""The translateEscapes method is a new method added to the Java String class in Java 13."", ""translateEscapes"")"
"For now, the translateEscapes() is a preview feature, so it is not yet sure that it will stay in Java.",NULL
Here is an example of using the Java String translateEscapes() method:,NULL
When calling the translateEscapes() method the \n part of the text will now be interpreted as a line break escape code.,NULL
The String class has several other useful methods than the ones described in this tutorial.,NULL
"The result of this is, that execution just ""falls through"" to the operation of the next case statement ( and the next etc.)",NULL
All Java code must reside inside a file with the extension .java .,NULL
"Below is an example .java file that contains all of the above elements, so you can see the basic syntax of a .java file:",NULL
The .java file should be located in a directory structure that matches the package name.,NULL
"Please note, that the code example does not actually use the Java HashMap class anywhere.",NULL
Of course you should not import classes you do not use in a real project.,NULL
"In Java a type is either a class, an abstract class an interface, an enum or an annotation.","(""Class"", ""Both are types of classes in Java."", ""Abstract Class""); (""Class"", ""Both are types of classes in Java."", ""Interface""); (""Class"", ""Both are types of classes in Java."", ""Enum""); (""Class"", ""Both are types of classes in Java."", ""Annotation""); (""Abstract Class"", ""Both are types of classes in Java."", ""Interface""); (""Abstract Class"", ""Both are types of classes in Java."", ""Enum""); (""Abstract Class"", ""Both are types of classes in Java."", ""Annotation""); (""Interface"", ""Both are types of classes in Java."", ""Enum""); (""Interface"", ""Both are types of classes in Java."", ""Annotation"")"
A type (class / interface / enum) can have more than one field.,NULL
The fifth line (or block of lines) is a class initializer block.,NULL
Inside this block you can put initialization code that is to be executed a instance of the class is created.,NULL
"Then they are executed already when the class is loaded, and only once because the class is only loaded in the Java Virtual Machine once.",NULL
"Constructors are similar to class initializers, except they can take parameters.",NULL
"A class can have more than one constructor, although this example just shows one.",NULL
When you create an instance of a class (an object) the object can have methods you can execute.,"(""Class"", ""A class is a blueprint for creating an object."", ""Object"")"
"A static method belongs to the class, not objects of the class.",NULL
That means that you can call a static method without having an object of the class the static method belongs to.,NULL
"In the example above, if case.equals(""uppercase"") evaluates to true then the ternary operator expression as a whole returns the String value JOHN.","(""case"", ""The method 'case' calls the method 'equals' to evaluate a condition."", ""equals""); (""equals"", ""The method 'equals' checks if the value is 'uppercase'."", ""uppercase""); (""ternary operator expression"", ""The ternary operator expression returns a String value based on the evaluation of 'equals'."", ""String"")"
"If case.equals(""uppercase"") evaluates to false then the ternary operator expression as a whole returns the String value john.","(""case"", ""case uses the equals method to compare its value to the string 'uppercase'"", ""equals""); (""equals"", ""equals method checks if case is equal to the class 'uppercase'"", ""uppercase""); (""ternary operator expression"", ""ternary operator expression returns a String value based on the evaluation of case.equals('uppercase')"", ""String"")"
"That means, that the String variable name will end up having the value JOHN or john depending on whether the expression case.equals(""uppercase"") evaluates to true or false.","(""name"", ""The variable 'name' is of type 'String'."", ""String""); (""JOHN"", ""The value 'JOHN' is assigned to the variable 'name'."", ""name""); (""case"", ""The variable 'case' is used to call the method 'equals'."", ""equals"")"
"As you can see, both of these code examples avoid calling object.getValue() if the object reference is null, but the first code example is a bit shorter and more elegant.",NULL
You can achieve the same functionality as the Java Math max() function using a Java ternary operator.,"(""Math"", ""The max() method is a function within the Math class in Java."", ""max"")"
Here is an example of achieving the Math.max() functionality using a Java ternary operator:,"(""Math"", ""Math.max() is a method that achieves a specific functionality."", ""max"")"
The Java ternary operator can also be used to achieve the same effect as the Java Math min() function.,"(""Java Ternary Operator"", ""The Java ternary operator can achieve the same effect as the min() function."", ""min()"")"
Here is an example of achieving the Math.min() functionality using a Java ternary operator:,NULL
The Java ternary operator can also be used to achieve the same effect as the Java Math abs() function.,"(""Java Ternary Operator"", ""The Java ternary operator can achieve the same effect as the Math abs() function."", ""abs"")"
Here is an example of achieving the Math.abs() functionality using a Java ternary operator:,"(""Math"", ""Math.abs() is a method that provides the absolute value of a number."", ""abs"")"
"If the input String is not equal to the empty String, the second ternary operator returns the value of Integer.parseInt(input) .","(""String"", ""String is a data type that can be converted to an Integer using the parseInt method."", ""Integer"")"
"This can be any kind of information ranging from texts, codes (e.g.","(""Information"", ""Information can include various types of data, including texts."", ""Texts"")"
"In the code example below, the main() method contains the declaration of a single integer variable named number.",NULL
"Non-static fields are also called instance variables, because they belong to instances (objects) of a class.","(""Class"", ""Instance variables are fields that belong to instances of a class."", ""Instance Variables"")"
A static field is a variable that belongs to a class.,"(""Static Field"", ""A static field is a variable that belongs to a class."", ""Class"")"
The second line assigns the floating point value 199.99 to the floating point variable named myFloat.,NULL
"In this example, only the first System.out.println() statement is executed inside the while loop.",NULL
The second System.out.println() statement is not executed until after the while loop is finished.,NULL
"This is typically done via a command line interface (CLI), like e.g.",NULL
On the command line you tell the JVM what Java class (bytecode) to execute.,NULL
Only the full Java SDK contains the Java compiler which turns your .java source files into byte code .class files.,"(""Java SDK"", ""The Java SDK includes the Java compiler as part of its components."", ""Java compiler""); (""Java compiler"", ""The Java compiler processes .java source files."", "".java"")"
"Additionally, some Java servers may need some of the tools in the JDK to e.g.",NULL
"The Java Code Conventions are a set of conventions for how to format your Java code, and how to name classes, variables, files etc.",NULL
JavaFX was inspired by Flex (Flash) and Silverlight for .NET (Microsoft).,"(""JavaFX"", ""JavaFX was inspired by Flex."", ""Flex""); (""JavaFX"", ""JavaFX was inspired by Silverlight."", ""Silverlight""); (""Silverlight"", ""Silverlight is associated with .NET."", "".NET"")"
In this tutorial I will show you how to make your first Java app with IntelliJ IDEA community edition (free) version 2019.3.3.,NULL
"How you do that depends on what operating system you are running (Windows, Mac, Linux etc.)","(""Operating System"", ""Windows is a type of operating system."", ""Windows""); (""Operating System"", ""Mac is a type of operating system."", ""Mac"")"
"A Java package is just a directory inside which you can put one or more Java files (class, interface, annotation, enum etc.",NULL
Now you must create a new class inside your newly created package.,NULL
"In the dialog that opens, type in a name for your new Java class.",NULL
"It is custom to have class names start with an uppercase character followed by lowercase characters, and a new uppercase character for each new word in the class name.","(""Class"", ""Class names are customarily required to start with an uppercase character."", ""Uppercase Character""); (""Class"", ""Class names are customarily required to have lowercase characters following the initial uppercase character."", ""Lowercase Characters"")"
"When you have typed in a name for your new Java class, click the ""OK"" button.",NULL
"Once you have created the new class, it will be empty.",NULL
The part inside the /* ... */ are comments and are not part of the executed Java code.,NULL
Before you can run your Java app you need to insert a main() method into the class.,NULL
Now your are ready to run your newly created Java class.,NULL
"You do so by right clicking the class source code in the editor, and choose ""Run..."", like this:",NULL
"When you click the ""Run..."" option, IntelliJ IDEA will first compile your Java class, and then run it.",NULL
"After you have executed the Java class main method, you will see an output at the bottom of the IntelliJ IDEA window similar to this:","(""Java Class"", ""The main method is a part of the Java class and is executed when the class runs."", ""main Method"")"
"Don't worry if you don't yet understand what a main() method is, or classes, or packages.","(""main"", ""The main() method is mentioned in the context of classes, indicating a relationship between them."", ""classes""); (""main"", ""The main() method is mentioned in the context of packages, indicating a relationship between them."", ""packages"")"
The most common way of using the Java Logging API is to create a Logger in each class that needs to log.,NULL
"This instance is typically made static and final, meaning all instances of that class use the same Logger instance.",NULL
"As you can see from this example, it is common practice to use the class name including package name as name for the Logger.",NULL
The name of the Logger to create is passed as string parameter to the Logger.getLogger() method.,NULL
"For instance, ordinary debug trace logging calls to entering() and exiting() would be called at the beginning and end of a method call.","(""ordinary debug trace logging calls"", ""ordinary debug trace logging calls are used to log the entering of a method."", ""entering"")"
The initialization of the configuration is taken care of by the java.util.logging.LogManager class.,NULL
You can use a Java class to configure the Java Logging API.,NULL
You do so by specifying the name of the class in the JVM parameter java.util.logging.config.class.,NULL
It is the constructor of that class that should load the configuration and apply it to the Logger's in the hierarchy.,NULL
"If no configuration class is specified, you can instead specify a configuration file (but no configuration class can be specified then!",NULL
"The Java Logging API has a default logging configuration file located at ""lib/logging.properties"", inside the JRE directory.","(""Java Logging API"", ""The Java Logging API uses the logging configuration file named logging.properties for its default logging configuration."", ""logging.properties"")"
You do so by setting the JVM property java.util.logging.config.file to point to this file.,NULL
You should double check the JavaDoc over time to see if any of this changes (e.g.,NULL
"If the isLoggable() method returns false, the LogRecord is not logged.",NULL
The Handler's in the Java Logging API use a java.util.logging.Formatter to format the LogRecord's before writing it to an external system.,"(""Handler"", ""The Handler uses a Formatter to format LogRecords."", ""Formatter""); (""Handler"", ""The Handler writes LogRecords to an external system."", ""LogRecord"")"
"The various Handler's in the Java Logging API use either of these two Formatter's by default, but you can also set your own custom Formatter subclass on a Handler.","(""Handler"", ""Handlers in the Java Logging API use Formatter's by default."", ""Formatter""); (""Handler"", ""Handler is part of the Java Logging API."", ""Java Logging API"")"
You can create your own Formatter by subclassing the java.util.logging.Formatter class.,NULL
The subclass must override the abstract format() method in the Formatter class.,NULL
The String returned by the format() is what is forwarded to the external system by the Handler.,"(""format()"", ""The format() method returns a String."", ""String"")"
The Formatter class also contains the convenience method formatMessage() which can be used to format the message using the ResourceBundle of the LogRecord.,"(""formatMessage"", ""formatMessage() is a method contained within the Formatter class."", ""Formatter""); (""formatMessage"", ""formatMessage() uses the ResourceBundle to format messages."", ""ResourceBundle"")"
By default the ConsoleHandler uses a SimpleFormatter to format the messages before writing them to System.err.,"(""ConsoleHandler"", ""ConsoleHandler uses SimpleFormatter to format messages."", ""SimpleFormatter"")"
"If no %g code has been specified and the file count of the FileHandler is greater than 1, then the generation number (file sequence number) will be appended to the end of the file name, after a dot (.)",NULL
You must set one using the method setOutputStream() before using the handler.,NULL
You can also call the push() method to force the LogRecord's in the buffer to be flushed to the target Handler.,"(""push"", ""The push() method is used to flush LogRecord's in the buffer to the target Handler."", ""LogRecord"")"
This class contains a constant for each of the above log levels.,NULL
When you create a Logger you pass a name to the Logger.getLogger() method.,NULL
(Note: These levels are different from the log levels of the messages logged.).,NULL
If you call getParent() on that Logger you will get the Logger with the name com.,"(""getParent()"", ""getParent() is a method that returns an instance of the Logger class."", ""Logger"")"
"... and call getParent() method, you will get the Logger with the name """".",NULL
"The third message is being logged three times: Once by the 1.2 Logger, once by the 1 Logger, and once by the root Logger.","(""Logger"", ""1.2 Logger is a method that logs messages through the Logger class."", ""1.2 Logger""); (""Logger"", ""1 Logger is a method that logs messages through the Logger class."", ""1 Logger"")"
"Notice though, that the message propagated up the hierarchy from the Logger named 1.2 is still logged by the middle Logger, and still forwarded up to the root Logger.","(""1.2"", ""The method 1.2 is associated with the Logger class as it is named after it and is part of its logging functionality."", ""Logger"")"
"Another peculiar result of the above code is, that the INFO message passed to the bottom Logger (named 1.2) is also ignored, and not propagated.","(""INFO"", ""INFO is a message that is passed to the Logger."", ""Logger"")"
"In order to enable all INFO messages to be logged from the bottom Logger (named 1.2), even if the middle Logger has a log level of WARNING, we add the following to the code (in bold):","(""Logger"", ""INFO is a log level that can be logged by the Logger."", ""INFO"")"
"The result of this code is that the INFO message logged on the bottom Logger (named 1.2) is now logged, but it is still not propagated up the hierarchy.",NULL
The java.util.Logger class is the main access point to the Java logging API.,NULL
The string passed as parameter to the getLogger() factory method is the name of the Logger to create.,NULL
"The two names ""myApp.user"" and ""myApp.admin"" are children of the ""myApp"" name.","(""user"", ""user is a child class of the myApp package"", ""myApp"")"
"The name ""myApp.admin.import.user"" is a branch of the name ""myApp.admin.import"", which is again a branch of the ""myApp.admin"" name.","(""myApp.admin.import.user"", ""myApp.admin.import.user is a branch of myApp.admin.import"", ""myApp.admin.import"")"
"You can obtain the name of a Logger using the getName() method, in case you need it.",NULL
"It is convention to use the class name of the class creating the Logger, including package name, as name for the Logger.","(""Logger"", ""Logger is created by the class that includes the package name."", ""class"")"
The log() group of methods will log a message at a certain log level.,"(""log"", ""log() is a method that belongs to the log() group of methods."", ""log()"")"
"As mentioned earlier, the number inside the token refers to the index of the object parameter to insert, in the object parameter array passed to the log() message.",NULL
"The logp() methods work like the log() methods, except each method take an extra two parameters: The sourceClass and sourceMethod parameter.","(""logp"", ""The logp() method works similarly to the log() method, indicating a relationship between these two methods."", ""log""); (""logp"", ""The logp() method takes sourceClass as a parameter, establishing a relationship."", ""sourceClass"")"
These two parameters are intended to tell from what class and method the log message originated.,"(""Parameters"", ""Parameters are intended to specify the class from which the log message originated."", ""Class"")"
"In other words, which class and method was the ""source"" of the log message.",NULL
"The logrb() methods work like the log() methods too, except they can obtain the log messages from a resource bundle.",NULL
This example looks up a message in the resource bundle named resources.myresources by the key key1.,NULL
"For instance, finest(), finer(), fine(), info(), warning() and severe() each corresponds to one of the log levels.","(""Finest"", ""Both are methods that correspond to log levels."", ""Finer""); (""Finest"", ""Both are methods that correspond to log levels."", ""Fine""); (""Finest"", ""Both are methods that correspond to log levels."", ""Info""); (""Finest"", ""Both are methods that correspond to log levels."", ""Warning""); (""Finest"", ""Both are methods that correspond to log levels."", ""Severe""); (""Finer"", ""Both are methods that correspond to log levels."", ""Fine""); (""Finer"", ""Both are methods that correspond to log levels."", ""Info""); (""Finer"", ""Both are methods that correspond to log levels."", ""Warning""); (""Finer"", ""Both are methods that correspond to log levels."", ""Severe""); (""Fine"", ""Both are methods that correspond to log levels."", ""Info""); (""Fine"", ""Both are methods that correspond to log levels."", ""Warning""); (""Fine"", ""Both are methods that correspond to log levels."", ""Severe""); (""Info"", ""Both are methods that correspond to log levels."", ""Warning""); (""Info"", ""Both are methods that correspond to log levels."", ""Severe"")"
Logging message using one of these methods corresponds to calling the log() method,NULL
You can add Handler's to the Logger using the addHandler() method.,"(""Logger"", ""The addHandler() method is used to add Handler's to the Logger."", ""addHandler"")"
"You can obtain all Handler's of a Logger using the getHandlers() method, like this:",NULL
"You set the Filter on a Logger using the setFilter() method, like this:","(""setFilter"", ""setFilter() is a method that operates on the Filter class."", ""Filter"")"
The class MyFilterImpl should be your own implementation of the Filter interface.,NULL
"You can obtain the Filter in use by calling the getFilter() method, like this:",NULL
"This example sets the minimum log level of messages to be forwarded, to Level.INFO.",NULL
You can obtain the log level of a Logger using the getLevel() method:,NULL
You can obtain the parent Logger of a given Logger using the getParent() method.,NULL
You can check if a Logger forwards log messages to its parent Logger using the method getUseParentHandlers().,NULL
The Logger class has a few more methods that I haven't covered here.,NULL
"The java.util.logging.LogManager manages the internal Logger hierarchy, and initiates the configuration of the Logger's, either through the configuration class or configuration file.","(""LogManager"", ""LogManager manages the internal Logger hierarchy."", ""Logger""); (""LogManager"", ""LogManager initiates the configuration of the Logger."", ""configuration"")"
"The first method on the LogManager simply re-reads the configuration from file (or class), in case these has changed.","(""LogManager"", ""LogManager contains the method that re-reads the configuration."", ""method"")"
You can also get access to an MXBean (Java Management Extensions) from the LogManager using the method getLoggingMXBean().,"(""LogManager"", ""LogManager provides the method getLoggingMXBean to access the MXBean."", ""getLoggingMXBean"")"
"The LogRecord contains the following getter methods, which can be used in e.g.",NULL
The getLevel() method returns the log level the message represented by this LogRecord was logged with.,NULL
The getLoggerName() method returns the name of the Logger that logged this LogRecord.,"(""getLoggerName"", ""The getLoggerName() method is associated with the Logger class as it returns the name of the Logger."", ""Logger"")"
The getMillis() method returns the time in milliseconds this LogRecord was recorded.,NULL
The getParameters() method returns the parameters to be inserted into the message of this LogRecord.,NULL
The getResourceBundle() method returns the ResourceBundle (if any) used to localize the message of this LogRecord.,"(""getResourceBundle"", ""The method getResourceBundle() returns an instance of ResourceBundle."", ""ResourceBundle"")"
The getResourceBundleName() method returns the name of the ResourceBundle (if any) used to localize the message of this LogRecord.,"(""getResourceBundleName"", ""The method returns the name of the ResourceBundle used to localize the message."", ""ResourceBundle"")"
The getSequenceNumber() method returns a sequence number generated internally in the LogRecord constructor when the LogRecord is created.,NULL
The getSourceClassName() returns the class name of the class logging the message represented by this LogRecord.,NULL
The getSourceMethodName() returns the method name of the method logging the message represented by this LogRecord.,NULL
The getThreadID() method returns the ID of the thread logging the message represented by this LogRecord.,NULL
The getThrown() method returns the Throwable that was marked thrown when logging the message represented by this LogRecord.,"(""getThrown"", ""The getThrown() method returns the Throwable that was marked thrown."", ""Throwable"")"
In this text I will try to give you an overview of the java.util.logging API.,NULL
This tutorial is about Javas built-in logging API in the java.util.logging package.,"(""Java"", ""Java is the programming language that includes the java.util.logging package."", ""java.util.logging"")"
"Note: This tutorial does not cover the other popular Java logging API's (Log4J, SLF4J, Apache Commons Logging, LogBack etc.).",NULL
"If you can choose your own logging API freely, you may choose one of these other, popular logging API's instead of java.util.logging.",NULL
"However, if you are running your web applications on Google App Engine, like I do, then you have to use the java.util.logging API.",NULL
Instances of this class are used together with UDP DatagramSockets and normal Socket's and ServerSocket's.,"(""Instances"", ""Instances of this class are used together with UDP DatagramSockets."", ""UDP DatagramSockets""); (""Instances"", ""Instances of this class are used together with normal Socket's."", ""Socket"")"
The InetAddress class has a lot of additional methods you can use.,NULL
"For instance, you can obtain the IP address as a byte array by calling getAddress() etc.",NULL
"To learn more about these methods, it is easier to read the JavaDoc for the InetAddress class though.",NULL
Java's JarURLConnection class is used to connect to a Java Jar file.,NULL
"Of course, sometimes this protocol is already have been decided for you, e.g.",NULL
Sending the header in a separate roundtrip (the first) can be smart if the server can do some initial pre-validation of e.g.,NULL
"In order to implement a Java server that listens for incoming connections from clients via TCP/IP, you need to use a java.net.ServerSocket .",NULL
"In case you prefer to use Java NIO instead of Java Networking (standard API), then you can also use a ServerSocketChannel instead of the java.net.ServerSocket.","(""Java NIO"", ""Java NIO is an alternative to Java Networking for network operations."", ""Java Networking"")"
In order to accept incoming connections you must call the ServerSocket.accept() method.,NULL
The accept() method returns a Socket which behaves like an ordinary Java Socket.,NULL
Only one incoming connection is opened for each call to the accept() method.,NULL
"Additionally, incoming connections can only be accepted while the thread running the server has called accept().",NULL
"In order to connect to a server over the internet (via TCP/IP) in Java, you need to create a java.net.Socket and connect it to the server.",NULL
This code example connects to the server with IP address 78.46.84.171 on port 80.,"(""Server"", ""The server connects using the specified IP address."", ""IP Address"")"
"Don't forget to call flush() when you really, really want the data sent across the internet to the server.",NULL
The getByName() method returns an InetAddress instance with the IP address matching the given host name.,"(""getByName"", ""The getByName() method returns an InetAddress instance."", ""InetAddress"")"
Receiving data via a DatagramSocket is done by first creating a DatagramPacket and then receiving data into it via the DatagramSocket's receive() method.,"(""DatagramSocket"", ""DatagramSocket is used to receive data into a DatagramPacket."", ""DatagramPacket"")"
"A real server program would probably call the receive() method in a loop, and pass all received DatagramPacket's to a pool of worker threads, just like a TCP server does with incoming connections (see Java Multithreaded Servers for more details).","(""receive"", ""The receive() method is used to handle DatagramPacket's in the server program."", ""DatagramPacket""); (""worker threads"", ""Worker threads are used in a similar manner to how a TCP server handles incoming connections."", ""TCP server"")"
The java.net package contains two interesting classes: The URL class and the URLConnection class.,"(""java.net"", ""The URL class is part of the java.net package."", ""URL"")"
These classes can be used to create client connections to web servers (HTTP servers).,"(""Classes"", ""Classes can be used to create client connections."", ""Client Connections"")"
"If you want to send an HTTP POST request instead, call the URLConnection.setDoOutput(true) method, like this:",NULL
The URL class can also be used to access files in the local file system.,NULL
"Thus the URL class can be a handy way to open a file, if you need your code to not know whether the file came from the network or local file system.",NULL
Here is an example of how to open a file in the local file system using the URL class:,NULL
"Notice how the only difference from accessing a file on a web server via HTTP is the the URL: ""file:/c:/data/test.txt"".","(""HTTP"", ""HTTP is a method used to access resources via a URL."", ""URL"")"
"Even though the Java Networking APIs enable you to open and close network connections via sockets, all communication happens via the Java IO classes InputStream and OutputStream.","(""Java Networking APIs"", ""The Java Networking APIs utilize InputStream for communication over network connections."", ""InputStream"")"
Alternatively you can use the networking classes in the Java NIO API.,NULL
"These classes are similar to the classes found in the Java Networking API, except the Java NIO API can work in non-blocking mode.",NULL
The first parameter to the open() method is a Path instance pointing to the file the AsynchronousFileChannel is to be associated with.,"(""open"", ""The open() method takes a Path instance as its first parameter."", ""Path"")"
In this example we used the StandardOpenOption.READ which means that the file will be opened for reading.,NULL
Each way to read data call one of the read() methods of the AsynchronousFileChannel.,NULL
The first way to read data from an AsynchronousFileChannel is to call the read() method that returns a Future.,"(""AsynchronousFileChannel"", ""The read() method is called on the AsynchronousFileChannel to read data."", ""read"")"
This version of the read() method takes ByteBuffer as first parameter.,NULL
"The read() method return immediately, even if the read operation has not finished.",NULL
You can check the when the read operation is finished by calling the isDone() method of the Future instance returned by the read() method.,"(""isDone"", ""is a method of the Future class that checks if the read operation is finished."", ""Future"")"
Here is a longer example showing how to use this version of the read() method:,NULL
"This example creates an AsynchronousFileChannel and then creates a ByteBuffer which is passed to the read() method as parameter, along with a position of 0.","(""AsynchronousFileChannel"", ""AsynchronousFileChannel creates a ByteBuffer instance."", ""ByteBuffer"")"
After calling read() the example loops until the isDone() method of the returned Future returns true.,"(""read"", ""The read() method is called, and it loops until the isDone() method returns true."", ""isDone"")"
Once the read operation has completed the data read into the ByteBuffer and then into a String and printed to System.out .,"(""ByteBuffer"", ""ByteBuffer is used to read data into a String."", ""String"")"
The second method of reading data from an AsynchronousFileChannel is to call the read() method version that takes a CompletionHandler as a parameter.,"(""read()"", ""The read() method is a method of the AsynchronousFileChannel class that reads data."", ""AsynchronousFileChannel"")"
Once the read operation finishes the CompletionHandler's completed() method will be called.,NULL
"As parameters to the completed() method are passed an Integer telling how many bytes were read, and the ""attachment"" which was passed to the read() method.","(""completed"", ""The completed() method takes an Integer as a parameter indicating the number of bytes read."", ""Integer""); (""completed"", ""The completed() method also takes an attachment as a parameter that was passed to the read() method."", ""attachment"")"
"If the read operation fails, the failed() method of the CompletionHandler will get called instead.",NULL
Each way to write data call one of the write() methods of the AsynchronousFileChannel.,NULL
If the file does not exist the write() method will throw a java.nio.file.NoSuchFileException .,"(""write"", ""The write() method throws NoSuchFileException when the file does not exist."", ""NoSuchFileException"")"
The CompletionHandler's completed() method will get called when the write operation completes.,"(""completed"", ""The completed() method belongs to the CompletionHandler class."", ""CompletionHandler"")"
"If the write fails for some reason, the failed() method will get called instead.",NULL
"Once you need to read the data, you need to switch the buffer from writing mode into reading mode using the flip() method call.",NULL
You can do this in two ways: By calling clear() or by calling compact().,NULL
The compact() method only clears the data which you have already read.,NULL
Here is an example that writes data into a Buffer via the put() method:,NULL
"There are many other versions of the put() method, allowing you to write data into the Buffer in many different ways.",NULL
The flip() method switches a Buffer from writing mode to reading mode.,NULL
"Calling flip() sets the position back to 0, and sets the limit to where position just was.","(""flip"", ""The method flip() modifies the position attribute by setting it back to 0."", ""position"")"
Here is an example that reads data from a Buffer using the get() method:,NULL
"There are many other versions of the get() method, allowing you to read data from the Buffer in many different ways.",NULL
"The Buffer.rewind() sets the position back to 0, so you can reread all the data in the buffer.",NULL
"The limit remains untouched, thus still marking how many elements (bytes, chars etc.)",NULL
You can do so either by calling clear() or by calling compact().,NULL
If you call clear() the position is set back to 0 and the limit to capacity.,"(""clear"", ""The method clear() resets the position to 0."", ""position""); (""clear"", ""The method clear() sets the limit to capacity."", ""limit"")"
"If there is any unread data in the Buffer when you call clear() that data will be ""forgotten"", meaning you no longer have any markers telling what data has been read, and what has not been read.",NULL
"If there is still unread data in the Buffer, and you want to read it later, but you need to do some writing first, call compact() instead of clear().","(""Buffer"", ""Buffer is a class that can be interacted with using the compact method to handle unread data."", ""compact"")"
compact() copies all unread data to the beginning of the Buffer.,NULL
"The limit property is still set to capacity, just like clear() does.",NULL
You can mark a given position in a Buffer by calling the Buffer.mark() method.,NULL
You can then later reset the position back to the marked position by calling the Buffer.reset() method.,NULL
It is possible to compare two buffers using equals() and compareTo().,NULL
The FileChannel class has a transferTo() and a transferFrom() method which does this for you.,"(""FileChannel"", ""The transferTo() method is a method of the FileChannel class."", ""transferTo"")"
The FileChannel.transferFrom() method transfers data from a source channel into the FileChannel.,NULL
The transferTo() method transfer from a FileChannel into some other channel.,NULL
The issue with SocketChannel is also present with the transferTo() method.,NULL
"You receive data from a DatagramChannel by calling its receive() method, like this:",NULL
The receive() method will copy the content of a received packet of data into the given Buffer.,NULL
"You can send data via a DatagramChannel by calling its send() method, like this:",NULL
"When connected you can also use the read() and write() method, as if you were using a traditional channel.",NULL
The Java NIO FileChannel class is NIO's an alternative to reading files with the standard Java IO API.,"(""FileChannel"", ""FileChannel is a class within the NIO package."", ""NIO"")"
To read data from a FileChannel you call one of the read() methods.,NULL
The int returned by the read() method tells how many bytes were written into the Buffer.,NULL
"Writing data to a FileChannel is done using the FileChannel.write() method, which takes a Buffer as parameter.","(""FileChannel"", ""FileChannel.write() is a method of the FileChannel class."", ""write"")"
There is no guarantee of how many bytes the write() method writes to the FileChannel.,NULL
Therefore we repeat the write() call until the Buffer has no further bytes to write.,NULL
You can obtain the current position of the FileChannel object by calling the position() method.,NULL
The size() method of the FileChannel object returns the file size of the file the channel is connected to.,NULL
The FileChannel.force() method flushes all unwritten data from the channel to the disk.,NULL
"An operating system may cache data in memory for performance reasons, so you are not guaranteed that data written to the channel is actually written to disk, until you call the force() method.",NULL
"The force() method takes a boolean as parameter, telling whether the file meta data (permission etc.)",NULL
The Java NIO Files class (java.nio.file.Files) provides several methods for manipulating files in the file system.,"(""Java NIO Files"", ""Java NIO Files is a class that is part of the java.nio.file.Files package."", ""java.nio.file.Files"")"
"The Files class contains many methods, so check the JavaDoc too, if you need a method that is not described here.",NULL
The Files class just might have a method for it still.,NULL
"The java.nio.file.Files class works with java.nio.file.Path instances, so you need to understand the Path class before you can work with the Files class.",NULL
The Files.exists() method checks if a given Path exists in the file system.,"(""Files"", ""The Files.exists() method operates on the Path class to check for its existence."", ""Path"")"
"Since Path instances may or may not point to paths that exist in the file system, you can use the Files.exists() method to determine if they do (in case you need to check that).","(""Path"", ""The exists method is used to check if Path instances point to valid paths in the file system."", ""exists"")"
"Second, the example calls the Files.exists() method with the Path instance as the first parameter.",NULL
This parameter is an array of options that influence how the Files.exists() determines if the path exists or not.,NULL
In this example above the array contains the LinkOption.NOFOLLOW_LINKS which means that the Files.exists() method should not follow symbolic links in the file system to determine if the path exists.,"(""LinkOption"", ""NOFOLLOW_LINKS is a constant in the LinkOption class that specifies not to follow symbolic links."", ""NOFOLLOW_LINKS"")"
The Files.createDirectory() method creates a new directory from a Path instance.,"(""createDirectory()"", ""The createDirectory() method is a method of the Files class."", ""Files"")"
Inside the try-catch block the Files.createDirectory() method is called with the path as parameter.,NULL
The Files.copy() method copies a file from one path to another.,"(""Files"", ""The Files class contains the copy method which is used to perform file copying."", ""copy"")"
"Then the example calls Files.copy(), passing the two Path instances as parameters.",NULL
It is possible to force the Files.copy() to overwrite an existing file.,NULL
Here an example showing how to overwrite an existing file using Files.copy():,NULL
This parameter instructs the copy() method to overwrite an existing file if the destination file already exists.,"(""copy"", ""The copy() method is related to the file class as it operates on files."", ""file"")"
The Java NIO Files class also contains a function for moving files from one path to another.,NULL
"Yes, the java.io.File class could also do that with its renameTo() method, but now you have the file move functionality in the java.nio.file.Files class too.","(""File"", ""The renameTo method is a method of the File class that allows renaming files."", ""renameTo"")"
This parameter tells the Files.move() method to overwrite any existing file at the destination path.,"(""Files.move"", ""The Files.move() method uses the parameter to determine whether to overwrite existing files."", ""parameter"")"
The Files.move() method may throw an IOException if moving the file fails.,"(""Files"", ""Files is the class that contains the move method."", ""move"")"
"For instance, if a file already exists at the destination path, and you have left out the StandardCopyOption.REPLACE_EXISTING option, or if the file to move does not exist etc.",NULL
If the Files.delete() fails to delete the file for some reason (e.g.,NULL
The Files.walkFileTree() method contains functionality for traversing a directory tree recursively.,"(""Files"", ""Files.walkFileTree() is a method that provides functionality for traversing a directory tree."", ""walkFileTree"")"
The walkFileTree() method takes a Path instance and a FileVisitor as parameters.,"(""walkFileTree"", ""The walkFileTree method takes a Path instance as a parameter."", ""Path"")"
"You have to implement the FileVisitor interface yourself, and pass an instance of your implementation to the walkFileTree() method.",NULL
"If you do not need to hook into all of these methods, you can extend the SimpleFileVisitor class, which contains default implementations of all methods in the FileVisitor interface.",NULL
The visitFile() mehtod is called for every file visited during the file walk.,NULL
The visitFileFailed() method is called in case visiting a file fails.,NULL
Here is a walkFileTree() that extends SimpleFileVisitor to look for a file named README.txt :,"(""WalkFileTree"", ""WalkFileTree is a method that extends the SimpleFileVisitor class."", ""SimpleFileVisitor"")"
The Files.walkFileTree() can also be used to delete a directory with all files and subdirectories inside it.,NULL
The Files.delete() method will only delete a directory if it is empty.,"(""Files"", ""Files.delete() is a method that performs the action of deleting."", ""delete""); (""delete"", ""The delete method is intended to delete a directory."", ""directory"")"
"By walking through all directories and deleting all files (inside visitFile()) in each directory, and afterwards delete the directory itself (inside postVisitDirectory()) you can delete a directory with all subdirectories and files.",NULL
"The java.nio.file.Files class contains many other useful functions, like functions for creating symbolic links, determining the file size, setting file permissions etc.",NULL
Check out the JavaDoc for the java.nio.file.Files class for more information about these methods.,"(""Files"", ""The Files class is part of the java.nio.file package."", ""java.nio.file"")"
And that is before the server has used any memory for processing the incoming messages (e.g.,NULL
"To keep the number of threads down, many servers use a design where the server keeps a pool of threads (e.g.","(""Server"", ""A server manages a pool of threads to optimize resource usage."", ""Thread"")"
When you call select() or selectNow() on the Selector it gives you only the SelectableChannel instances that actually has data to read.,"(""select()"", ""select() is a method that is called on the Selector class."", ""Selector""); (""selectNow()"", ""selectNow() is a method that is called on the Selector class."", ""Selector"")"
"A data block could potentially contain a partial message (less than a message), a full message, or more than a message, for instance 1.5 or 2.5 messsages.",NULL
The first way to implement a resizable buffer is to start with a small buffer of e.g.,NULL
"If a message cannot fit into the 4KB buffer, a larger buffer of e.g.",NULL
For 1.000.000 concurrent connections that results in 1.000.000 x 4KB = 4GB which is possible in most servers today (2015).,NULL
Another workaround is to time out messages which have not been received within e.g.,NULL
The fact that TLV encodings makes memory management easier is one of the reasons why HTTP 1.1 is such a terrible protocol.,NULL
That is one of the problems they are trying to fix in HTTP 2.0 where data is transported in LTV encoded frames.,NULL
This is also why we have designed our own network protocol for our VStack.co project that uses a TLV encoding.,NULL
Imagine if you have 1.000.000 connections which are mostly idle and all 1.000.000 connections were registered with the Selector.,NULL
"Then, when you call select() most of these Channel instances would be write-ready (they are mostly idle, remember?).",NULL
"Java NIO has more classes and components than these, but the Channel, Buffer and Selector forms the core of the API, in my opinion.",NULL
"The rest of the components, like Pipe and FileLock are merely utility classes to be used in conjunction with the three core components.",NULL
"There are a few interesting interfaces accompanying these classes too, but I'll keep them out of this Java NIO overview for simplicity's sake.",NULL
"The Path interface is located in the java.nio.file package, so the fully qualified name of the Java Path interface is java.nio.file.Path.",NULL
The java.nio.file.Path interface has nothing to do with the path environment variable.,NULL
"In many ways the java.nio.file.Path interface is similar to the java.io.File class, but there are some minor differences.",NULL
"In many cases though, you can replace the use of the File class with use of the Path interface.",NULL
In order to use a java.nio.file.Path instance you must create a Path instance.,NULL
You create a Path instance using a static method in the Paths class (java.nio.file.Paths) named Paths.get().,"(""Paths"", ""Paths is the class that contains the static method get() which creates a Path instance."", ""get""); (""get"", ""The method get() returns an instance of Path."", ""Path"")"
To use the Path interface and the Paths class we must first import them.,NULL
It is the call to the Paths.get() method that creates the Path instance.,"(""Paths"", ""Paths.get() is a method of the Paths class."", ""get"")"
"The Paths.get() method is a factory method for Path instances, in other words.",NULL
Creating an absolute path is done by calling the Paths.get() factory method with the absolute file as parameter.,"(""Paths"", ""Paths.get() is a factory method of the Paths class."", ""get"")"
The Java NIO Path class can also be used to work with relative paths.,NULL
The second example creates a Path instance which points to the path (file) d:\data\projects\a-project\myfile.txt .,NULL
If you use the .. code in the middle of a path string it will correspond to changing one directory up at that point in the path string.,NULL
The .. code after the a-project directory changes directory up the the parent directory projects and then the path references down into the another-project directory from there.,NULL
and .. codes also work in combination with the two-string Paths.get() method.,NULL
Here are two Java Paths.get() examples showing simple examples of that:,NULL
There are more ways that the Java NIO Path class can be used to work with relative paths.,NULL
The Java Path method relativize() can create a new Path which represents the second Path relative to the first Path.,"(""Java Path"", ""The Java Path class contains the method relativize() which creates a new Path."", ""relativize()"")"
"For instance, with the path /data and /data/subdata/subsubdata/myfile.txt"", the second path can be expressed as /subdata/subsubdata/myfile.txt relative to the first path.","(""Data"", ""Subdata is a part of the Data package, indicating a hierarchical structure in the file path."", ""Subdata""); (""Subdata"", ""Subsubdata is a part of the Subdata package, indicating a further hierarchical structure in the file path."", ""Subsubdata"")"
"If you add the relative path subdata/subsubdata/myfile.txt to the directory path /data, you get the full path /data/subdata/subsubdata/myfile.txt.","(""myfile.txt"", ""myfile.txt is located in the subdata directory"", ""subdata""); (""myfile.txt"", ""myfile.txt is located in the subsubdata directory"", ""subsubdata""); (""subdata"", ""subdata is a subdirectory of /data"", ""/data""); (""subsubdata"", ""subsubdata is a subdirectory of subdata"", ""subdata"")"
If you you add the relative path ../../.. to the full file path /data/subdata/subsubdata/myfile.txt then you get /data,"(""myfile.txt"", ""myfile.txt is located within the subdata directory"", ""subdata""); (""subdata"", ""subdata contains the subsubdata directory"", ""subsubdata"")"
The normalize() method of the Path interface can normalize a path.,NULL
"and .. codes in the middle of the path string, and resolves what path the path string refers to.",NULL
This Path example first creates a path string with a .. code in the middle.,NULL
"Then the example creates a Path instance from this path string, and prints that Path instance out (actually it prints Path.toString()).","(""Path"", ""Path.toString() is a method of the Path class that is called to print the Path instance."", ""toString"")"
"The example then calls normalize() on the created Path instance, which returns a new Path instance.","(""normalize"", ""The method normalize() is called on the Path instance."", ""Path"")"
"As you can see, the normalized path does not contain the a-project\.. part, as this is redundant.",NULL
"You write to a SinkChannel by calling it's write() method, like this:",NULL
To read from the source channel you call its read() method like this:,NULL
The int returned by the read() method tells how many bytes were read into the buffer.,"(""read"", ""The read() method returns an int that indicates how many bytes were read."", ""int"")"
"Notice how the buffers are first inserted into an array, then the array passed as parameter to the channel.read() method.","(""Array"", ""The array is passed as a parameter to the channel.read() method."", ""read"")"
The read() method then writes data from the channel in the sequence the buffers occur in the array.,"(""read"", ""The read() method operates on the channel to write data."", ""channel"")"
"In other words, if you have a header and a body, and the header is fixed size (e.g.",NULL
"The array of buffers are passed into the write() method, which writes the content of the buffers in the sequence they are encountered in the array.","(""array"", ""The write() method processes the array of buffers."", ""write"")"
"The Java NIO Selector is a component which can examine one or more Java NIO Channel instances, and determine which channels are ready for e.g.",NULL
"You create a Selector by calling the Selector.open() method, like this:",NULL
"As you saw in the previous section, when you register a Channel with a Selector the register() method returns a SelectionKey objects.","(""register"", ""The register() method is used to register a Channel with a Selector."", ""Channel""); (""register"", ""The register() method is used to register a Channel with a Selector."", ""Selector"")"
"You can also attach an object already while registering the Channel with the Selector, in the register() method.","(""Channel"", ""The Channel is registered with the Selector."", ""Selector"")"
Once you have register one or more channels with a Selector you can call one of the select() methods.,NULL
"In other words, if you are interested in channels that are ready for reading, you will receive the channels that are ready for reading from the select() methods.",NULL
select() blocks until at least one channel is ready for the events you registered for.,NULL
select(long timeout) does the same as select() except it blocks for a maximum of timeout milliseconds (the parameter).,NULL
The int returned by the select() methods tells how many channels are ready.,NULL
"That is, how many channels that became ready since last time you called select().",NULL
"If you call select() and it returns 1 because one channel has become ready, and you call select() one more time, and one more channel has become ready, it will return 1 again.",NULL
"If you have done nothing with the first channel that was ready, you now have 2 ready channels, but only one channel had become ready between each select() call.",NULL
"Once you have called one of the select() methods and its return value has indicated that one or more channels are ready, you can access the ready channels via the ""selected key set"", by calling the selectors selectedKeys() method.",NULL
When you register a channel with a Selector the Channel.register() method returns a SelectionKey object.,"(""Channel"", ""The Channel class is associated with the SelectionKey object returned by the Channel.register() method."", ""SelectionKey"")"
It is these keys you can access via the selectedKeySet() method.,NULL
"The channel returned by the SelectionKey.channel() method should be cast to the channel you need to work with, e.g a ServerSocketChannel or SocketChannel etc.","(""SelectionKey"", ""The channel is returned by the SelectionKey.channel() method."", ""channel""); (""channel"", ""The channel can be cast to a ServerSocketChannel."", ""ServerSocketChannel"")"
"A thread that has called the select() method which is blocked, can be made to leave the select() method, even if no channels are yet ready.",NULL
This is done by having a different thread call the Selector.wakeup() method on the Selector which the first thread has called select() on.,"(""Selector"", ""The wakeup() method is called on the Selector by a different thread."", ""wakeup"")"
"If a different thread calls wakeup() and no thread is currently blocked inside select(), the next thread that calls select() will ""wake up"" immediately.","(""Thread"", ""A thread can call the wakeup() method to wake up another thread that is blocked inside select()."", ""wakeup()"")"
When you are finished with the Selector you call its close() method.,NULL
Listening for incoming connections is done by calling the ServerSocketChannel.accept() method.,NULL
"When the accept() method returns, it returns a SocketChannel with an incoming connection.",NULL
"Since you are typically not interested in listening just for a single connection, you call the accept() inside a while-loop.",NULL
"In non-blocking mode the accept() method returns immediately, and may thus return null, if no incoming connection had arrived.",NULL
You close a SocketChannel after use by calling the SocketChannel.close() method.,NULL
To read data from a SocketChannel you call one of the read() methods.,NULL
The int returned by the read() method tells how many bytes were witten into the Buffer.,NULL
"Writing data to a SocketChannel is done using the SocketChannel.write() method, which takes a Buffer as parameter.","(""SocketChannel"", ""The write method is used to perform operations on the SocketChannel."", ""write"")"
There is no guarantee of how many bytes the write() method writes to the SocketChannel.,NULL
"When you do so, you can call connect(), read() and write() in asynchronous mode.","(""connect"", ""connect() is a method that can be called in asynchronous mode along with read()."", ""read""); (""connect"", ""connect() is a method that can be called in asynchronous mode along with write()."", ""write"")"
"If the SocketChannel is in non-blocking mode, and you call connect(), the method may return before a connection is established.",NULL
"To determine whether the connection is established, you can call the finishConnect() method, like this:",NULL
In non-blocking mode the write() method may return without having written anything.,NULL
Therefore you need to call the write() method in a loop.,NULL
In non-blocking mode the read() method may return without having read any data at all.,NULL
"Also, parts of the NIO APIs are actually blocking - e.g.",NULL
"A selector is an object that can monitor multiple channels for events (like: connection opened, data arrived etc.).",NULL
"That means, that when a thread invokes a read() or write(), that thread is blocked until there is some data to read, or the data is fully written.","(""Thread"", ""A thread invokes the read() method to read data."", ""read"")"
Rather than just read the data byte for byte from e.g.,NULL
"In other words, once the first reader.readLine() method returns, you know for sure that a full line of text has been read.",NULL
"The readLine() blocks until a full line is read, that's why.",NULL
"Similarly, when the second readLine() call returns, you know that this line contains the age etc.",NULL
"The bufferFull() method has to keep track of how much data is read into the buffer, and return either true or false, depending on whether the buffer is full.",NULL
"The bufferFull() method scans through the buffer, but must leave the buffer in the same state as before the bufferFull() method was called.",NULL
"Similarly, if you need to keep a lot of open connections to other computers, e.g.",NULL
"If you have fewer connections with very high bandwidth, sending a lot of data at a time, perhaps a classic IO server implementation might be the best fit.",NULL
Using Java Reflection you can access the annotations attached to Java classes at runtime.,NULL
"You can also specify METHOD or FIELD, or you can leave the target out alltogether so the annotation can be used for both classes, methods and fields.","(""METHOD"", ""METHOD and FIELD are mentioned as options that can be specified."", ""FIELD""); (""classes"", ""classes, methods, and fields are mentioned together as entities that can be annotated."", ""METHOD"")"
"You can access the annotations of a class, method or field at runtime.",NULL
"Notice how the Method.getParameterAnnotations() method returns a two-dimensional Annotation array, containing an array of annotations for each method parameter.","(""Method"", ""Method.getParameterAnnotations() is a method of the Method class that retrieves parameter annotations."", ""getParameterAnnotations""); (""getParameterAnnotations"", ""getParameterAnnotations() returns a two-dimensional array of Annotation objects."", ""Annotation"")"
This text will discuss how to both create arrays and get their class objects via Java Reflection.,NULL
Working with arrays via Java Reflection is done using the java.lang.reflect.Array class.,NULL
"Do not confuse this class with the java.util.Arrays class in the Java Collections suite, which contains utility methods for sorting arrays, converting them to collections etc.","(""Arrays"", ""The Arrays class is part of the Java Collections suite."", ""Java Collections"")"
Creating arrays via Java Reflection is done using the java.lang.reflect.Array class.,NULL
The first parameter int.class given to the Array.newInstance() method tells what type each element in the array should be of.,"(""Array"", ""Array.newInstance() is a method that creates a new instance of an array of a specified type."", ""newInstance"")"
"For instance, you can access the primitive int array class object like this:",NULL
The [ on the left means it is the class of an int array I am interested in.,NULL
"Notice the [L to the left of the class name, and the ; to the right.",NULL
"As a side note, you cannot obtain the class object of primitives using Class.forName().",NULL
I usually do something like this to obtain the class name for primitives as well as objects:,"(""Class"", ""Class is used to obtain the class name for primitives."", ""Primitives"")"
"The solution, or workaround as you might call it, is to create an empty array of the desired type and obtain the class object from that empty array.","(""Solution"", ""The solution is referred to as a workaround."", ""Workaround"")"
"This presents a single, uniform method to access the array class of arrays of any type.",NULL
"To make sure that the Class object really is an array, you can call the Class.isArray() method to check:",NULL
Once you have obtained the Class object for an array you can access its component type via the Class.getComponentType() method.,"(""Class"", ""The getComponentType method is a method of the Class object that allows access to the component type of an array."", ""getComponentType"")"
"For instance, the component type of an int[] array is the int.class Class object.","(""int"", ""The int class is related to the int[] array as it represents the component type of the array."", ""int[]"")"
The component type of a String[] array is the java.lang.String Class object.,NULL
"This example will print out the text ""java.lang.String"" which is the component type of the String array.",NULL
Inspecting classes is often the first thing you do when using Reflection.,NULL
For a full list you should consult the JavaDoc for java.lang.Class.,NULL
Before you can do any inspection on a class you need to obtain its java.lang.Class object.,NULL
"All types in Java including the primitive types (int, long, float etc.)","(""Java"", ""Java is a programming language that includes primitive types such as int."", ""int""); (""Java"", ""Java is a programming language that includes primitive types such as long."", ""long"")"
If you know the name of the class at compile time you can obtain a Class object like this:,NULL
"If you don't know the name at compile time, but have the class name as a string at runtime, you can do like this:",NULL
String className = ... //obtain class name as string at runtime Class class = Class.forName(className);,"(""className"", ""className is a variable of type String that holds the name of the class."", ""String"")"
When using the Class.forName() method you must supply the fully qualified class name.,NULL
The Class.forName() method may throw a ClassNotFoundException if the class cannot be found on the classpath at runtime.,"(""Class.forName()"", ""The Class.forName() method may throw a ClassNotFoundException if the class cannot be found on the classpath at runtime."", ""ClassNotFoundException"")"
The fully qualified class name (including package name) is obtained using the getName() method like this:,"(""getName"", ""The getName() method is used to obtain the fully qualified class name."", ""FullyQualifiedClassName"")"
"If you want the class name without the pacakge name you can obtain it using the getSimpleName() method, like this:",NULL
You can access the modifiers of a class via the Class object.,NULL
You can check the modifiers using these methods in the class java.lang.reflect.Modifier:,NULL
You can also access information specified for this package in the Manifest file of the JAR file this package is located in on the classpath.,"(""Manifest"", ""The Manifest file is part of the JAR file, indicating a relationship between them."", ""JAR""); (""JAR"", ""The JAR file is located on the classpath, establishing a connection between them."", ""classpath"")"
From the Class object you can access the superclass of the class.,NULL
"The superclass class object is a Class object like any other, so you can continue doing class reflection on that too.",NULL
It is possible to get a list of the interfaces implemented by a given class.,NULL
NOTE: Only the interfaces specifically declared implemented by a given class is returned.,NULL
"If a superclass of the class implements an interface, but the class doesn't specifically state that it also implements that interface, that interface will not be returned in the array.","(""Superclass"", ""A superclass can implement an interface that a class does not explicitly state it implements."", ""Class""); (""Class"", ""The class does not state that it implements the interface."", ""Interface"")"
"Even if the class in practice implements that interface, because the superclass does.","(""Class"", ""The class implements the interface in practice."", ""Interface"")"
To get a complete list of the interfaces implemented by a given class you will have to consult both the class and its superclasses recursively.,"(""Class"", ""The class implements the interfaces."", ""Interfaces"")"
You can access the fields (member variables) of a class like this:,NULL
You can access the class annotations of a class like this:,NULL
Using Java Reflection you can inspect the constructors of classes and instantiate objects at runtime.,"(""Java Reflection"", ""Java Reflection can be used to inspect the constructors of classes."", ""constructors""); (""constructors"", ""Constructors are associated with classes."", ""classes"")"
The Constructor[] array will have one Constructor instance for each public constructor declared in the class.,NULL
This example returns the public constructor of the given class which takes a String as parameter:,"(""Example"", ""The example demonstrates how to obtain the public constructor of the class."", ""Constructor"")"
"If no constructor matches the given constructor arguments, in this case String.class, a NoSuchMethodException is thrown.",NULL
"The Constructor.newInstance() method takes an optional amount of parameters, but you must supply exactly one parameter per argument in the constructor you are invoking.",NULL
"It is possible to load and reload classes at runtime in Java, though it is not as straightforward as one might have hoped.",NULL
This text will explain when and how you can load and reload classes in Java.,"(""Java"", ""Java is a programming language that allows the loading of classes."", ""load"")"
"You can argue whether Java's dynamic class loading features are really part of Java Reflection, or a part of the core Java platform.","(""Java"", ""Java's dynamic class loading features are part of Java Reflection."", ""Java Reflection"")"
All classes in a Java application are loaded using some subclass of java.lang.ClassLoader.,NULL
Loading classes dynamically must therefore also be done using a java.lang.ClassLoader subclass.,NULL
"When a class is loaded, all classes it references are loaded too.",NULL
"This class loading pattern happens recursively, until all classes needed are loaded.",NULL
Unreferenced classes are not loaded until the time they are referenced.,NULL
"If a ClassLoader is asked to load a class, it will ask its parent class loader to load it.",NULL
"If the parent class loader can't find the class, the child class loader then tries to load it itself.",NULL
The steps a given class loader uses when loading classes are:,NULL
When you implement a class loader that is capable of reloading classes you will need to deviate a bit from this sequence.,NULL
The classes to reload should not be requested loaded by the parent class loader.,NULL
All you need to do is to obtain a ClassLoader and call its loadClass() method.,NULL
Java's builtin Class loaders always checks if a class is already loaded before loading it.,NULL
Reloading the class is therefore not possible using Java's builtin class loaders.,NULL
To reload a class you will have to implement your own ClassLoader subclass.,NULL
Even with a custom subclass of ClassLoader you have a challenge.,NULL
"This method is final, and thus cannot be overridden in your ClassLoader subclass.",NULL
The resolve() method will not allow any given ClassLoader instance to link the same class twice.,NULL
"Therefore, everytime you want to reload a class you must use a new instance of your ClassLoader subclass.",NULL
"This is not impossible, but necessary to know when designing for class reloading.",NULL
As stated earlier you cannot reload a class using a ClassLoader that has already loaded that class once.,NULL
Therefore you will have to reload the class using a different ClassLoader instance.,NULL
"Every class loaded in a Java application is identified by its fully qualified name (package name + class name), and the ClassLoader instance that loaded it.","(""ClassLoader"", ""ClassLoader is responsible for loading classes in a Java application."", ""Java Application""); (""Java Application"", ""A Java application is identified by its fully qualified name which includes the package name."", ""package name"")"
"That means, that a class MyObject loaded by class loader A, is not the same class as the MyObject class loaded with class loader B.","(""MyObject"", ""The MyObject class loaded by class loader A is a distinct instance compared to the MyObject class loaded by class loader B."", ""class loader A"")"
"Notice how the MyObject class is referenced in the code, as the type of the object variable.",NULL
This causes the MyObject class to be loaded by the same class loader that loaded the class this code is residing in.,NULL
"If the myClassReloadingFactory object factory reloads the MyObject class using a different class loader than the class the above code resides in, you cannot cast the instance of the reloaded MyObject class to the MyObject type of the object variable.","(""MyClassReloadingFactory"", ""The MyClassReloadingFactory is responsible for reloading the MyObject class using a different class loader."", ""MyObject"")"
"Since the two MyObject classes were loaded with different class loaders, the are regarded as different classes, even if they have the same fully qualified class name.",NULL
Trying to cast an object of the one class to a reference of the other will result in a ClassCastException.,NULL
"Either of these two methods will work if the type of the variable, the interface or superclass, is not reloaded when the implementing class or subclass is reloaded.","(""Method"", ""The method works with the type of the variable."", ""Variable""); (""Implementing Class"", ""The implementing class is related to the interface it implements."", ""Interface""); (""Implementing Class"", ""The implementing class is a subclass of the superclass."", ""Superclass"")"
To make this work you will of course need to implement your class loader to let the interface or superclass be loaded by its parent.,"(""Class Loader"", ""The Class Loader is responsible for loading the Interface as part of its functionality."", ""Interface"")"
"When your class loader is asked to load the MyObject class, it will also be asked to load the MyObjectInterface class, or the MyObjectSuperclass class, since these are referenced from within the MyObject class.","(""MyObject"", ""MyObject class references MyObjectInterface class."", ""MyObjectInterface"")"
Your class loader must delegate the loading of those classes to the same class loader that loaded the class containing the interface or superclass typed variables.,"(""Class Loader"", ""The class loader is responsible for loading the classes mentioned in the text."", ""Classes""); (""Class Loader"", ""The class loader must delegate loading to the class containing the interface."", ""Interface"")"
Notice how it delegates class loading to its parent except for the one class it is intended to be able to reload.,NULL
"If the loading of this class is delegated to the parent class loader, it cannot be reloaded later.",NULL
"Remember, a class can only be loaded once by the same ClassLoader instance.",NULL
It is not a production ready template for your own class loaders.,NULL
"Your own class loaders should probably not be limited to a single class, but a collection of classes that you know you will need to reload.",NULL
"In addition, you should probably not hardcode the class paths either.",NULL
Here is the reflection.MyObject class that is loaded using the class loader.,NULL
Notice how it both extends a superclass and implements an interface.,NULL
The name of this class is why I refer to these dynamic interface implementations as dynamic proxies.,NULL
As mentioned earlier you must pass an InvocationHandler implementation to the Proxy.newProxyInstance() method.,"(""Proxy"", ""The newProxyInstance method is a method of the Proxy class that creates a new proxy instance."", ""newProxyInstance"")"
The proxy parameter passed to the invoke() method is the dynamic proxy object implementing the interface.,"(""invoke"", ""The invoke method uses the proxy parameter which is a dynamic proxy object."", ""proxy"")"
The Method object passed into the invoke() method represents the method called on the interface the dynamic proxy implements.,"(""Method"", ""The Method object is passed into the invoke() method."", ""invoke()""); (""invoke()"", ""The invoke() method is called on the interface."", ""interface"")"
"But now you can check via the mock if the DAO uses the connection properly, for instance if the connection.close() is called (or NOT called), if you expected that.","(""DAO"", ""DAO is expected to use the connection method properly."", ""connection"")"
Thus the factory interface and your class could look something like this:,NULL
"When the MyAction class calls methods on the IMyFactory instance injected into its constructor by the container, the method calls are translated into calls to the IContainer.instance() method, which is the method you use to obtain instances from the container.","(""MyAction"", ""MyAction calls methods on the IMyFactory instance injected into its constructor."", ""IMyFactory""); (""IMyFactory"", ""The IMyFactory instance is used to obtain instances from the IContainer."", ""IContainer""); (""IContainer"", ""The IContainer.instance() method is called to obtain instances from the container."", ""instance"")"
Using Java Reflection you can inspect the fields (member variables) of classes and get / set them at runtime.,"(""Java Reflection"", ""Java Reflection can be used to inspect the fields of classes."", ""fields"")"
The Field[] array will have one Field instance for each public field declared in the class.,"(""Field"", ""Field[] is an array that contains instances of Field for each public field in the class."", ""Field[]"")"
"If no field exists with the name given as parameter to the getField() method, a NoSuchFieldException is thrown.",NULL
"Once you have obtained a Field instance, you can get its field name using the Field.getName() method, like this:",NULL
"Once you have obtained a Field reference you can get and set its values using the Field.get() and Field.set()methods, like this:","(""Field"", ""Field.get() is a method used to retrieve values from a Field reference."", ""get"")"
The objectInstance parameter passed to the get and set method should be an instance of the class that owns the field.,"(""objectInstance"", ""The objectInstance parameter is passed to the get method."", ""get""); (""objectInstance"", ""The objectInstance parameter is passed to the set method."", ""set""); (""get"", ""The get method should be an instance of the class that owns the field."", ""class"")"
"In the above example an instance of MyObject is used, because the someField is an instance member of the MyObject class.",NULL
"It the field is a static field (public static ...) pass null as parameter to the get and set methods, instead of the objectInstance parameter passed above.","(""Field"", ""The field is accessed using the get method."", ""get""); (""Field"", ""The field is modified using the set method."", ""set""); (""get"", ""The get method uses the objectInstance parameter."", ""objectInstance"")"
When you write a class or interface you can specify that it should be paramerizable.,NULL
"Rather than create a list of Object you can parameterize java.util.List to create a list of say String, like this:","(""java.util.List"", ""java.util.List is a parameterized type that can hold objects of type Object"", ""Object"")"
"When inspecting a parameterizable type itself at runtime via reflection, like java.util.List, there is no way of knowing what type is has been parameterized to.",NULL
If you have obtained a java.lang.reflect.Method object it is possible to obtain information about its generic return type.,NULL
Here is an example class with a method having a parameterized return type:,NULL
In this class it is possible to obtain the generic return type of the getStringList() method.,NULL
"In other words, it is possible to detect that getStringList() returns a List<String> and not just a List.",NULL
"This piece of code will print out the text ""typeArgClass = java.lang.String"".",NULL
The Type[] array typeArguments array will contain one item - a Class instance representing the class java.lang.String.,"(""typeArguments"", ""The typeArguments array contains an item of Type which is a Class instance."", ""Type"")"
Here is an example class with a method taking a parameterized List as parameter:,"(""ExampleClass"", ""The method is defined within the ExampleClass."", ""MethodTakingParameterizedList"")"
The Type[] array parameterArgTypes array will contain one item - a Class instance representing the class java.lang.String.,"(""ArgTypes"", ""ArgTypes is an array parameter that contains instances of Class."", ""Class"")"
Fields are class member variables - either static or instance variables.,NULL
The Type[] array fieldArgTypes array will contain one item - a Class instance representing the class java.lang.String.,"(""fieldArgTypes"", ""fieldArgTypes contains an instance of Class"", ""Class"")"
Using Java Reflection you can inspect the methods of classes and invoke them at runtime.,"(""Java Reflection"", ""Java Reflection can be used to inspect the methods of classes."", ""methods"")"
This can be used to detect what getters and setters a given class has.,"(""Class"", ""A class can have multiple getters associated with it."", ""Getters"")"
"You cannot ask for getters and setters explicitly, so you will have to scan through all the methods of a class and check if each method is a getter or setter.",NULL
Here is a code example that finds getter and setters of a class:,"(""Class"", ""Getter is a method associated with the class."", ""Getter"")"
The Method[] array will have one Method instance for each public method declared in the class.,NULL
"This example returns the public method named ""doSomething"", in the given class which takes a String as parameter:",NULL
"If no method matches the given method name and arguments, in this case String.class, a NoSuchMethodException is thrown.",NULL
"In this example, if doSomething(String.class) is not static, you need to supply a valid MyObject instance instead of null;","(""doSomething"", ""doSomething is a method that takes a String class as a parameter"", ""String"")"
"The Method.invoke(Object target, Object ... parameters) method takes an optional amount of parameters, but you must supply exactly one parameter per argument in the method you are invoking.","(""Method"", ""invoke is a method of the Method class that takes parameters."", ""invoke""); (""invoke"", ""invoke method operates on an Object target."", ""Object"")"
This Java module reflection tutorial will explain how to access the Java Module a Java class belongs to via Java reflection.,"(""Java class"", ""The Java class belongs to the Java Module as part of the Java module system."", ""Java Module"")"
"Thus, each Java class belongs to a package, and the package belongs to a module.","(""Java Class"", ""Each Java class belongs to a package."", ""Package"")"
A Java module is represented by the Java reflection class java.lang.Module in the Java module java.base.,NULL
"Via this class you can interact with the Java Platform Module System to obtain information about a given module, or modify a module.",NULL
"You can obtain an instance of the Module class via a Class instance, like this:",NULL
You can check if a Module instance a represents a named module by calling the Module isNamed() method.,NULL
You can check if a Module is a named module via the Module isOpen() method.,NULL
Once you have access to a Module instance you can access its ModuleDescriptor via the getDescriptor() method.,"(""Module"", ""The Module class provides access to its ModuleDescriptor through the getDescriptor() method."", ""getDescriptor()"")"
Here is an example of accessing a Java Module's ModuleDescriptor via getDescriptor() :,"(""Java Module"", ""Java Module contains ModuleDescriptor as part of its structure."", ""ModuleDescriptor"")"
You can get the name of a named module from its module descriptor via the ModuleDescriptor name() method.,"(""ModuleDescriptor"", ""The name() method is a function of the ModuleDescriptor class that retrieves the name of a module."", ""name"")"
"You can read the list of packages exported by a Java module via Java reflection, via the ModuleDescriptor exports() method.","(""Java"", ""Java is a programming language that can utilize the ModuleDescriptor class for reflection."", ""ModuleDescriptor"")"
You can check if a Java module is an automatic module or not via the ModuleDescriptor isAutomatic() method.,"(""Java module"", ""The Java module is related to the ModuleDescriptor class as it is being checked for its module type."", ""ModuleDescriptor"")"
You can check if a Java module is an open module or not via the ModuleDescriptor isOpen() method.,"(""ModuleDescriptor"", ""The isOpen() method is a method of the ModuleDescriptor class."", ""isOpen"")"
You can read the module service dependencies via the ModuleDescriptor uses() method.,"(""ModuleDescriptor"", ""The uses() method is a function defined in the ModuleDescriptor class."", ""uses"")"
Despite the common belief it is actually possible to access private fields and methods of other classes via Java Reflection.,"(""Java Reflection"", ""Java Reflection allows access to private fields of other classes."", ""private fields"")"
To access a private field you will need to call the Class.getDeclaredField(String name) or Class.getDeclaredFields() method.,"(""Class"", ""The method getDeclaredField is called on the Class entity to access a private field."", ""getDeclaredField"")"
"The methods Class.getField(String name) and Class.getFields() methods only return public fields, so they won't work.","(""getField"", ""getField is a method of the Class class"", ""Class"")"
"Here is a simple example of a class with a private field, and below that the code to access that field via Java Reflection:",NULL
"This method only returns fields declared in that particular class, not fields declared in any superclasses.",NULL
"By calling Field.setAcessible(true) you turn off the access checks for this particular Field instance, for reflection only.",NULL
"To access a private method you will need to call the Class.getDeclaredMethod(String name, Class[] parameterTypes) or Class.getDeclaredMethods() method.","(""Class"", ""getDeclaredMethod is a method that can be called on the Class entity."", ""getDeclaredMethod"")"
"The methods Class.getMethod(String name, Class[] parameterTypes) and Class.getMethods() methods only return public methods, so they won't work.","(""getMethod"", ""getMethod is a method of the Class class"", ""Class"")"
"Here is a simple example of a class with a private method, and below that the code to access that method via Java Reflection:","(""Class"", ""The class contains a private method that can be accessed."", ""Method"")"
"This code example will print out the text ""returnValue = The Private Value"", which is the value returned by the method getPrivateString() when invoked on the PrivateObject instance created at the beginning of the code sample.","(""getPrivateString"", ""The method getPrivateString() is invoked on the instance of the class PrivateObject."", ""PrivateObject"")"
"This method only returns methods declared in that particular class, not methods declared in any superclasses.",NULL
"By calling Method.setAcessible(true) you turn off the access checks for this particular Method instance, for reflection only.",NULL
"Java Reflection makes it possible to inspect classes, interfaces, fields and methods at runtime, without knowing the names of the classes, methods etc.","(""Java Reflection"", ""Java Reflection allows inspection of classes at runtime."", ""classes""); (""Java Reflection"", ""Java Reflection allows inspection of interfaces at runtime."", ""interfaces""); (""Java Reflection"", ""Java Reflection allows inspection of fields at runtime."", ""fields"")"
"It will explain the basics of Java Reflection including how to work with arrays, annotations, generics and dynamic proxies, and do dynamic class loading and reloading.","(""Java Reflection"", ""Java Reflection explains how to work with arrays as part of its functionality."", ""arrays""); (""Java Reflection"", ""Java Reflection explains how to work with annotations as part of its functionality."", ""annotations""); (""Java Reflection"", ""Java Reflection explains how to work with generics as part of its functionality."", ""generics""); (""Java Reflection"", ""Java Reflection explains how to work with dynamic proxies as part of its functionality."", ""dynamic proxies""); (""Java Reflection"", ""Java Reflection includes dynamic class loading as part of its functionality."", ""dynamic class loading"")"
"It will also show you how to do more specific Java Reflection tasks, like reading all getter methods of a class, or accessing private fields and methods of a class.","(""Java Reflection"", ""Java Reflection is used to read all getter methods of a class."", ""getter methods""); (""Java Reflection"", ""Java Reflection allows accessing private fields and methods of a class."", ""private fields"")"
This example obtains the Class object from the class called MyObject.,NULL
"Using the class object the example gets a list of the methods in that class, iterates the methods and print out their names.",NULL
When using Java reflection the starting point is often a Class object representing some Java class you want to inspect via reflection.,NULL
"For instance, to obtain the Class object for a class named MyObject you could write:",NULL
Now you have a reference to the Class object for the MyObject class.,NULL
"Once you have a reference to the Class object representing some class, you can see what fields that class contains.",NULL
Here is an example of accessing fields of a Java class:,NULL
Using Java Reflection it is possible find out what constructors a given Java class contains and what parameters they take etc.,"(""Java Reflection"", ""Java Reflection is a feature of the Java programming language that allows inspection of classes and their members."", ""Java""); (""Java"", ""Java classes contain constructors that can be inspected using Java Reflection."", ""constructors"")"
You can also see what methods a given class has from its Class object.,NULL
Here is an example of accessing the methods a given class via Java reflection:,"(""Example"", ""The example demonstrates how to access methods of a class."", ""Methods""); (""Example"", ""The example is related to a specific class."", ""Class"")"
You can also use Java reflection to find out what getter and setter methods a class has.,"(""Java"", ""Java is a programming language that uses getter methods in its classes."", ""getter""); (""Java"", ""Java is a programming language that uses setter methods in its classes."", ""setter"")"
You can even access private fields and methods via Java reflection - even from outside the class that owns the private field or method.,"(""Java Reflection"", ""Java Reflection can access private fields."", ""private field""); (""Java Reflection"", ""Java Reflection can access private methods."", ""private method""); (""private field"", ""private field belongs to a class."", ""class"")"
"In case a Java class has annotations which are available at runtime, you can access them via Java reflection too.","(""Java Class"", ""A Java class can have annotations that can be accessed at runtime."", ""Annotations"")"
"For instance, you can determine what type of class the array is an array of.",NULL
"For instance, if you are introspecting a String array, you can detect that the element type is String by inspecting the array class.",NULL
"Java reflection has a special Proxy class that can implement a Java Interface dynamically at runtime, rather than at compile time.",NULL
In Java it is possible to dynamically load and also reload classes using a Java ClassLoader.,NULL
"The ClassLoader class is actually not part of the Java Reflection API, but since Java Reflection is often used to achieve ""dynamic"" behaviour (behavioral changes at runtime), and dynamic class loading and reloading kind of fits into this theme, I have decided to include that tutorial in my Java Reflection tutorial.","(""ClassLoader"", ""ClassLoader is mentioned in the context of Java Reflection, indicating a relationship between dynamic behavior and class loading."", ""Java Reflection API"")"
Dynamic class loading and reloading is explained in my Java Reflection - Dynamic Class Loading and Reloading tutorial.,NULL
The Java regex API is located in the java.util.regex package which has been part of standard Java (JSE) since Java 1.4.,"(""Java Regex API"", ""The Java regex API is located in the java.util.regex package."", ""java.util.regex""); (""java.util.regex"", ""The java.util.regex package is part of the Java programming language."", ""Java""); (""Java"", ""Java is part of the Java Standard Edition (JSE)."", ""JSE"")"
"Although Java regex has been part of standard Java since Java 1.4, this Java regex tutorial covers the Java regex API released with Java 8.","(""Java Regex"", ""Java Regex is a class that is part of the Java Regex API."", ""Java Regex API"")"
But first I will introduce the core classes of the Java regex API in the following section.,NULL
The Matcher class is used to match a given regular expression (Pattern instance) against a text multiple times.,NULL
Both the Pattern and Matcher classes are covered in detail in their own texts.,NULL
The third line uses the Pattern.matches() static method to check if the regular expression (pattern) matches the text.,"(""Pattern"", ""Pattern is the class that contains the static method matches() which checks for regex matching."", ""matches"")"
"If the regular expression matches the text, then Pattern.matches() returns true.",NULL
If the regular expression does not match the text Pattern.matches() returns false.,NULL
"The example does not actually check if the found http:// string is part of a valid URL, with domain name and suffix (.com, .net etc.).","(""URL"", ""A URL typically includes a domain name as part of its structure."", ""domain name""); (""domain name"", "".com is a common suffix for domain names."", "".com"")"
"Here is another Java regex example which uses the Matcher class to locate multiple occurrences of the substring ""is"" inside a text:",NULL
The special metacharacter meaning of an escaped metacharacter is ignored - only its actual literal value (e.g.,NULL
Java regular expressions support matching any of a specified set of characters using what is referred to as character classes.,"(""Java"", ""Java is a programming language that supports regular expressions."", ""regular expressions"")"
"The character class (set of characters to match) is enclosed in the square brackets - the [ae] part of the regular expression, in other words.",NULL
"The character class will match one of the enclosed characters regardless of which, but no mor than one.",NULL
"For instance, the character class [a-z] will match all characters between a lowercase a and a lowercase z, both a and z included.","(""Character"", ""The character class [a-z] defines a range of characters from a to z."", ""[a-z]"")"
You can have more than one character range within a character class.,NULL
"For instance, the character class [a-zA-Z] will match all letters between a and z or between A and Z .","(""Character"", ""The character class [a-zA-Z] is used to match all uppercase letters from A to Z."", ""A-Z"")"
"For instance, the character class [0-9] will match the characters between 0 and 9, both included.",NULL
"If you want to match the square brackets inside a character class, here is how that looks:",NULL
The character class contains the two square brackets escaped (\\[ and \\]).,NULL
You can match digits of a number with the predefined character class with the code \d.,"(""Character Class"", ""The character class is used to match the digits of a number."", ""Digits"")"
Matching non-digits can be done with the predefined character class [\D] (uppercase D).,"(""Matching Non-Digits"", ""The method 'Matching Non-Digits' utilizes the 'Character Class' to perform its function."", ""Character Class"")"
You can match word characters with the predefined character class with the code \w .,NULL
You can match non-word characters with the predefined character class [\W] (uppercase W).,NULL
Here is a regular expression example using the non-word character class:,NULL
The Java String class has a few regular expression methods too.,NULL
The Java String split() method splits the string into N substrings and returns a String array with these substrings.,"(""split"", ""The split() method is a method of the String class that operates on String objects."", ""String"")"
The split() method takes a regular expression as parameter and splits the string at all positions in the string where the regular expression matches a part of the string.,"(""split"", ""The split() method takes a regular expression as a parameter."", ""regular expression"")"
The Java Matcher class (java.util.regex.Matcher) is used to search through a text for multiple occurrences of a regular expression.,NULL
I will cover the core methods of the Java Matcher class in this tutorial.,NULL
"For a full list, see the official JavaDoc for the Matcher class.",NULL
Here is a quick Java Matcher example so you can get an idea of how the Matcher class works:,NULL
"The matches() returns true if the regular expression matches the text, and false if not.","(""matches"", ""The matches() method returns true if the regular expression matches the text."", ""true"")"
You can do a whole lot more with the Matcher class.,NULL
The Pattern class is covered separately in my Java Regex Pattern tutorial.,NULL
Creating a Matcher is done via the matcher() method in the Pattern class.,NULL
"The matches() method in the Matcher class matches the regular expression against the whole text passed to the Pattern.matcher() method, when the Matcher was created.","(""matches"", ""The matches() method is a function defined within the Matcher class."", ""Matcher""); (""matcher"", ""The matcher() method is a function defined within the Pattern class."", ""Pattern"")"
"If the regular expression matches the whole text, then the matches() method returns true.",NULL
You cannot use the matches() method to search for multiple occurrences of a regular expression in a text.,NULL
"For that, you need to use the find(), start() and end() methods.","(""find"", ""Both methods are used in the context of performing operations."", ""start""); (""find"", ""Both methods are used in the context of performing operations."", ""end"")"
The Matcher lookingAt() method works like the matches() method with one major difference.,NULL
"The lookingAt() method only matches the regular expression against the beginning of the text, whereas matches() matches the regular expression against the whole text.",NULL
"In other words, if the regular expression matches the beginning of a text but not the whole text, lookingAt() will return true, whereas matches() will return false.",NULL
Matching the regular expression against the beginning of the text (lookingAt()) will return true.,NULL
"Matching the regular expression against the whole text (matches()) will return false, because the text has more characters than the regular expression.",NULL
"The Matcher find() method searches for occurrences of the regular expressions in the text passed to the Pattern.matcher(text) method, when the Matcher was created.","(""find"", ""find() is a method of the Matcher class that searches for occurrences of regular expressions."", ""Matcher"")"
"If multiple matches can be found in the text, the find() method will find the first, and then for each subsequent call to find() it will move to the next match.",NULL
The methods start() and end() will give the indexes into the text where the found match starts and ends.,NULL
Actually end() returns the index of the character just after the end of the matching section.,NULL
"Thus, you can use the return values of start() and end() inside a String.substring() call.","(""start"", ""start() is a method that can be used with the String class."", ""String""); (""end"", ""end() is a method that can be used with the String class."", ""String"")"
The Matcher reset() method resets the matching state internally in the Matcher.,NULL
"In case you have started matching occurrences in a string via the find() method, the Matcher will internally keep a state about how far it has searched through the input text.",NULL
By calling reset() the matching will start from the beginning of the text again.,NULL
"Of course you could do this with the start() and end() methods, but it is easier to do so with the group functions.","(""start"", ""Both are methods that can be used to achieve a similar goal."", ""end""); (""group functions"", ""The group functions provide an easier alternative to using the start method."", ""start"")"
The Matcher replaceAll() and replaceFirst() methods can be used to replace parts of the string the Matcher is searching through.,"(""Matcher"", ""replaceAll is a method of the Matcher class that performs string replacement."", ""replaceAll"")"
"The Matcher appendReplacement() and appendTail() methods are used to replace string tokens in an input text, and append the resulting string to a StringBuffer.","(""appendReplacement"", ""appendReplacement is a method of the Matcher class."", ""Matcher""); (""appendTail"", ""appendTail is a method of the Matcher class."", ""Matcher""); (""appendReplacement"", ""appendReplacement modifies a StringBuffer by appending the resulting string."", ""StringBuffer"")"
"When you have found a match using the find() method, you can call the appendReplacement().",NULL
"The appendReplacement() method keeps track of what has been copied into the StringBuffer, so you can continue searching for matches using find() until no more matches are found in the input text.","(""appendReplacement"", ""The appendReplacement() method operates on the StringBuffer to keep track of copied content."", ""StringBuffer"")"
By calling appendTail() you can append these last characters to the StringBuffer too.,NULL
"Notice how appendReplacement() is called inside the while(matcher.find()) loop, and appendTail() is called just after the loop.","(""appendReplacement"", ""appendReplacement() is called inside the while(matcher.find()) loop"", ""matcher"")"
"The Java Pattern class (java.util.regex.Pattern), is the main access point of the Java regular expression API.",NULL
"Whenever you need to work with regular expressions in Java, you start with Java's Pattern class.",NULL
A regular expression is also sometimes referred to as a pattern (hence the name of the Java Pattern class).,NULL
You can use the Pattern.matches() method to quickly check if a text (String) matches a given regular expression.,"(""matches"", ""matches is a method of the Pattern class used for matching regular expressions."", ""Pattern"")"
Or you can compile a Pattern instance using Pattern.compile() which can be used multiple times to match the regular expression against multiple texts.,"(""Pattern"", ""The method compile() is used to create an instance of the class Pattern."", ""compile"")"
The easiest way to check if a regular expression pattern matches a text is to use the static Pattern.matches() method.,NULL
"This Pattern.matches() example searches the string referenced by the text variable for an occurrence of the word ""is"", allowing zero or more characters to be present before and after the word (the two .","(""Pattern"", ""Pattern class contains the matches method which is used to search for occurrences in a string."", ""matches"")"
"The Pattern.matches() method is fine if you just need to check a pattern against a text a single time, and the default settings of the Pattern class are appropriate.",NULL
"If you need to match for multiple occurrences, and even access the various matches, or just need non-default settings, you need to compile a Pattern instance using the Pattern.compile() method.",NULL
"If you need to match a text against a regular expression pattern more than one time, you need to create a Pattern instance using the Pattern.compile() method.",NULL
You can also use the Pattern.compile() method to compile a Pattern using special flags.,NULL
The Java Pattern class contains a list of flags (int constants) that you can use to make the Pattern matching behave in certain ways.,NULL
"For more information of the flags you can use with the Java Pattern class, see the JavaDoc for Pattern .",NULL
The Matcher class has a matches() method that tests whether the pattern matches the text.,NULL
"Too keep this text short, the Matcher covered in more detail in the text about the Java Matcher class.",NULL
"The split() method in the Pattern class can split a text into an array of String's, using the regular expression (the pattern) as delimiter.","(""split"", ""The split() method is a function defined in the Pattern class."", ""Pattern"")"
This Pattern.split() example splits the text in the text variable into 5 separate strings.,"(""Pattern"", ""Pattern is the class that contains the split method."", ""split""); (""split"", ""The split method operates on the text variable."", ""text"")"
Each of these strings are included in the String array returned by the split() method.,NULL
The pattern() method of the Pattern class simply returns the pattern string (regular expression) that the Pattern instance was compiled from.,NULL
Character classes are constructst that enable you to specify a match against multiple characters instead of just one.,NULL
"In other words, a character class matches a single character in the input text against multiple allowed characters in the character class.",NULL
Character classes are nested inside a pair of square brackets [].,NULL
"The character class [Jj] will match either a J or a j, and the rest of the expression will match the characters ohn in that exact sequence.",NULL
The Java regular expression syntax has a few predefined character classes you can use.,"(""Java"", ""Java is a programming language that supports regular expression syntax."", ""regular expression""); (""regular expression"", ""Regular expression syntax defines how to use regular expressions."", ""syntax"")"
"For instance, the \d character class matches any digit, the \s character class matches any white space character, and the \w character matches any word character.","(""\d"", ""Both are character classes that match specific types of characters in regular expressions."", ""\s""); (""\d"", ""Both are character classes that match specific types of characters in regular expressions."", ""\w"")"
"The predefined character classes do not have to be enclosed in square brackets, but you can if you want to combine them.",NULL
The predefined character classes are listed in a table later in this text.,NULL
"The Java GZIPInputStream class (java.util.zip.GZIPInputStream) can be used to decompress files that are compressed with the GZIP compression algorithm, for instance via the GZIPOutputStream class.","(""GZIPInputStream"", ""Both classes are related as they are part of the GZIP compression and decompression process in Java."", ""GZIPOutputStream""); (""GZIPInputStream"", ""GZIPInputStream is part of the java.util.zip package, which contains classes for ZIP file manipulation."", ""java.util.zip"")"
In the example above I passed it a FileInputStream connected to a file named myfile.zip.,NULL
When you are finished reading data from the GZIPInputStream you should close it using its close() method.,NULL
The Java GZIPOutputStream class (java.util.zip.GZIPOutStream) can be used to GZIP compress data and write it to an OutputStream.,NULL
This Java ZIP tutorial explains how the core classes of the Java ZIP API works.,NULL
The Java ZipFile class is used to work with ZIP files containing multiple files.,NULL
The Java GZIPInputStream and GZIPOutputStream classes are used to ZIP compress a single file.,NULL
The above classes will be covered in detail their own tutorials (see the side menu for links).,NULL
The Java ZipFile class (java.util.zip.ZipFile) can be used to read files from a ZIP file.,NULL
This tutorial will show you how to use the ZipFile class.,NULL
In order to use the Java ZipFile class you must first create a ZipFile instance.,NULL
"As you can see, the ZipFile class takes a single parameter in its constructor.",NULL
Each file in the ZIP file is represented by a ZipEntry (java.util.zip.ZipEntry).,NULL
To extract a file from the ZIP file you can call the method getEntry() method on the ZipFile class.,NULL
This example gets a ZipEntry representing the file file1.txt which is contained in the ZIP file.,"(""ZipEntry"", ""ZipEntry represents the file file1.txt."", ""file1.txt"")"
The InputStream obtained from the getInputStream() of the ZipFile class can be read like any other Java InputStream.,"(""getInputStream()"", ""The getInputStream() method returns an InputStream object."", ""InputStream"")"
You can list all entries contained in a ZipFile using the entries() method.,NULL
You can iterate the Enumeration returned by the entries() method like this:,NULL
The Zip Slip attack consists of adding entries to a ZipFile that contains relative file paths with one or more /.. sections in the path.,NULL
An entry in the ZipFile has the relative path ../../../../etc/hosts .,NULL
The final path of that entry becomes: /apps/myapp/data/unzipped-file/../../../../etc/hosts which is equivalent of /etc/hosts .,"(""Myapp"", ""Myapp is a package that contains data."", ""Data"")"
"Unzipping this file could potentially overwrite hour hosts file (on a Linux OS), enabling the attacker to point e.g.",NULL
"The Java examples in this tutorial were created with Java 8, and Acme4J Client v. 2.1 and Acme4J Utils v. 0.3.","(""Java"", ""Java is the programming language used to create the Acme4J Client package."", ""Acme4J Client"")"
Here is a Java class capable of creating a private key for use with Acme4J:,"(""Java Class"", ""The Java Class is capable of creating a private key."", ""private key"")"
Here is a class that can create a Let's Encrypt account:,NULL
It is the execute() method that starts the account creation process.,NULL
The fully qualified name for the Order class is org.shredzone.acme4j.Order .,NULL
Calling create() results in a request being sent to Let's Encrypt.,NULL
Once you have called the order.create() method a request is sent to Let's Encrypt.,"(""Order"", ""The order.create() method is a method associated with the Order class."", ""Create"")"
"The above example specifically looks for an HTTP authorization object, which is then triggered by calling challenge.trigger().",NULL
"Before the challenge is triggered, you must read the value from challenge.getAuthorization() and upload it in a file to your web server.","(""Challenge"", ""The method getAuthorization() is associated with the class Challenge as it is called on an instance of Challenge."", ""getAuthorization"")"
"... where ${domain} is the domain for which you are requesting the domain for (returned by challenge.getDomain() ), and ${token} is the value returned by challenge.getToken().","(""challenge"", ""The method getDomain() is called on the class challenge to retrieve the domain."", ""getDomain"")"
"If your code cannot access your web server to upload the challenge file before calling challenge.trigger(), you can run the code in your debugger, set a breakpoint before calling challenge.trigger(), pause the code at that breakpoint, read the token (file name) and authorization (file content) out of the challenge object, upload that to your web server, and then continue the code in the debugger.",NULL
That is what happens in the last part of the processAuth() method.,NULL
"First, the code above waits until the Order object has status Status.VALID.","(""Order"", ""The Order object is associated with the Status class to check its status."", ""Status"")"
The value of that Ant property will be inserted at the place of the ${...} code.,NULL
This example first defines a property named dir.build which has its value set to build.,NULL
"Second, this example defines a property named dir.build.classes which has its value set to ${dir.build}/classes .","(""Dir"", ""Dir is a property that is related to the build process."", ""Build"")"
"When Ant defines this property it will resolve the value of the referenced property dir.build, and insert its value where the property is reference.",NULL
"Thus, the second Ant property defined will have its final value set to build/classes because build is the value of the dir.build property referenced.","(""Ant"", ""The Ant class is related to the build method as it defines properties that influence the build process."", ""build"")"
"The echo task as defined here will print out the message ""This is version 1.2.3"" to the console.","(""EchoTask"", ""The EchoTask class defines a method that prints a message to the console."", ""PrintMessage"")"
"Just to recap, a ""Java build tool"" is a tool which can compile Java code, run the unit tests for it, package the compiled classes into a JAR file and many, many other things.",NULL
This Ant tutorial is based on Ant version 1.9.6 which is the newest version of Ant at the time of writing (august 2015).,NULL
"Inside the project directory you have just created, create an empty file named build.xml.",NULL
"By default Ant looks for a build script named build.xml in your project root directory, so you might as well call your Ant build script build.xml.",NULL
"You could use another name, but using build.xml makes your Ant commands shorter, and it makes it easier for other developers to find the Ant build script.",NULL
Open the build.xml file and insert the following text (XML) into it:,NULL
You can test this build file by opening a command prompt and change directory into the directory that contains the build.xml file and execute this command:,NULL
"This test was performed using Java 5, Butterfly Container 1.9.11-beta, and Guice 1.0.","(""Java"", ""Java is the programming language used to perform the test with the Butterfly Container package."", ""Butterfly Container"")"
"The test performs 10.000.000 instantiations of a TestProduct class using a no-arg constructor, for each DI mechanism.",NULL
Java is a statically typed language meaning that types (primtives and classes) cannot change at runtime.,"(""Java"", ""Java is a statically typed language, indicating that it has a method of being statically typed."", ""statically typed"")"
"It is not like you can all of a sudden let your Java class members, method parameters and variables be untyped.","(""Java Class"", ""Java class members can include method parameters."", ""method parameters"")"
"This is done at the beginning, by the method call BO.setDao(dao).","(""BO"", ""The method setDao is called on the class BO."", ""setDao"")"
"But, notice how no DI is used inside the BO.checkPersonIsValid() or the DAO.readPerson() methods.","(""BO"", ""The method checkPersonIsValid is a method defined in the BO class."", ""checkPersonIsValid"")"
I most likely never have to change implementation of the Person class.,NULL
In Java this will result in a class cast exception at runtime (or some similar type error exception).,NULL
"Each factory definition states how a given instance is to be created and configured, when calling the container.instance() method.","(""Factory"", ""The factory definition specifies how an instance is created."", ""Instance"")"
"The input parameters .hashcode() and .equals() methods determine if an input parameter has an instance associated with it already, or a new one needs to be created and associated with the input parameter for succeeding calls.",NULL
As you can see the constructor call was chained with a call to the setValue() method.,NULL
"Notice how the length() method is called on the ""value"" parameter.",NULL
"If the setValue() method in the example above returns void, the factory will return the SomeObject instance the method was called on.",NULL
The factory defined by this script will return a SomeObject instance that has had the two methods setValue() and setValue2() invoked on it.,"(""SomeObject"", ""setValue is a method invoked on SomeObject"", ""setValue"")"
"Here is a list of classes and primitives that parameters can be converted to, automatically:",NULL
Sometimes a constructor or method call in a factory definition matches more than one constructor or method in the owning class.,"(""Factory"", ""A factory definition can contain a constructor call that matches a constructor in the owning class."", ""Constructor""); (""Factory"", ""A factory definition can contain a method call that matches a method in the owning class."", ""Method""); (""Owning Class"", ""The owning class contains constructors that can be matched by the factory definition."", ""Constructor"")"
You can cast to any type or class available on the classpath.,NULL
"To call a static method instead of a constructor when creating an instance of some class, simply write as you would in Java:",NULL
Note: The container uses java.util.ArrayList and java.util.HashSet as the List and Set implementations.,"(""ArrayList"", ""ArrayList is a class that is part of the java.util package."", ""java.util"")"
From version 2.5.9 Butterfly Container Script provides a shortcut to configuring Map instances.,NULL
First an instance of SomeObject is created and then the setValue() method is called on it.,NULL
Below is an example that register the newly created instance with a static method in the MyClass class.,NULL
You can inject instances of classes created locally in a factory definition.,NULL
"Notice how the setNewValue() method is called on the instance obtained from the bean1 factory, before it is injected into OtherObject's constructor.","(""setNewValue"", ""The setNewValue() method is called on the instance obtained from the bean1 factory."", ""bean1"")"
"Thus, the setFurtherValue() method of the someObject singleton is called for each instance of bean2 created, even if the method call is redundant.","(""setFurtherValue"", ""setFurtherValue() is a method of the someObject class"", ""someObject"")"
"Notice how the bean2 definition obtains an instance from the bean1 factory, and calls the setValue() method on it before returning it.","(""bean2"", ""bean2 obtains an instance from the bean1 factory"", ""bean1"")"
"Input parameters can be given to the container.instance() method, like this:",NULL
"The container cannot determine the type of input parameters until runtime, when the container.instance() method is called.",NULL
Therefore it is only possible to call methods that exists in java.lang.Object on input parameters.,"(""Object"", ""Object is a class that exists within the java.lang package."", ""java.lang"")"
"Your application will ask the container for an object, and the container will make sure that all dependencies (config parameters, collaborating objects, texts etc.)","(""Application"", ""The application requests an object from the container."", ""Container""); (""Container"", ""The container provides the requested object."", ""Object"")"
"Rather than having to design integration mechanisms yourself, and decide on configuration formats etc., you can have the dependency injection container do all that for you.",NULL
"The ""connectionTimeout"" factory is defined as a singleton returning whatever value the CONNECTION_TIMEOUT constant is set to in the Constants class.","(""connectionTimeout"", ""The connectionTimeout method is defined in relation to the Constants class, as it returns a value based on a constant defined within that class."", ""Constants"")"
The simplest way to add a function is to create a static method in a Java class that performs the logic for the function.,NULL
Sometimes you may need to create an instance of some class and call a method on that instance.,NULL
The beanB factory will call the beanA factory with the parameter returned from the static default() method.,"(""beanB"", ""The beanB factory calls the beanA factory."", ""beanA"")"
"If input parameter 0 passed to the beanB factory is null, then the default() method will return the default value ""default value"".",NULL
"If you need to call the default() method more than once you can simplify the script a bit by mapping the default method to a factory, and then call this factory whenever the function is needed.",NULL
"The default() method has been mapped to a factory called ""default"".",NULL
This default factory is then called from the beanB factory instead of calling the static default() method directly.,"(""beanB"", ""The beanB factory calls the default() method indirectly through the default factory."", ""default()"")"
"There is no package and class name to disturb you when reading the script, and whenever you need the default function all you need to write is ""default(a, b)"", instead of ""com.myapp.util.Util.default(a, b)"".","(""default"", ""The method 'default' is part of the class 'Util'."", ""Util"")"
Defining the static max() method as a factory (and thereby a function) is done like this:,NULL
"This little script defines the ""max"" factory as a call to the static max() method with input parameter 0 and 1 passed to the max() method.",NULL
"The max factory will call the max() method and return the value that is largest of either the input parameter 0 passed to the beanA factory, or the hard coded value 1.","(""Max Factory"", ""The max factory calls the max() method to determine the largest value."", ""max"")"
"This example uses the java.text.SimpleDateFormat class and defines its instance method parse() as a function called ""toDate"".","(""SimpleDateFormat"", ""parse() is an instance method of the SimpleDateFormat class."", ""parse"")"
Second the toDate factory is defined as a call to the toDateFactory and then a call to the parse() method on the instance returned from the toDateFactory.,"(""toDate"", ""toDate is defined as a call to the toDateFactory"", ""toDateFactory"")"
The toDate factory takes a single parameter which is the string to parse into a java.util.Date instance.,NULL
"It is possible to extend Butterfly Container Script (BCS) with custom instantiation modes, if the standard modes (new instance, singleton etc.)","(""Butterfly Container Script"", ""Butterfly Container Script can be extended with custom instantiation modes."", ""custom instantiation modes"")"
"By calling the set() method with the current request as parameter, the request is associated with the thread calling the set() method.","(""set"", ""The set() method is called with the current request as a parameter."", ""request"")"
By calling the get() method the request object associated with the calling thread can be obtained.,"(""get"", ""The get() method is used to obtain the request object."", ""request"")"
"The ""request"" factory is defined as a call to the get() method on the product returned from the ""requestCache"" factory.","(""request"", ""The 'request' factory is defined as a call to the 'get()' method."", ""get"")"
"In other words, as a call to the get() method on the HttpRequestCache singleton.",NULL
"The ""session"" factory is defined as a call to the getSession() method of the product returned by the ""request"" factory.","(""Session"", ""The getSession method is called on the Session class to obtain a session factory."", ""getSession"")"
"In other words, as a call to the getSession() method on the request object obtained from the HttpRequestCache singleton, which is the request object associated with the calling thread.","(""getSession()"", ""getSession() is a method called on the request object."", ""request"")"
In order to make the the request and session factories return the correct objects you must first call the HttpRequestCache's set() method.,NULL
"Another disadvantage is that all instantiation modes (singleton, thread singleton, flyweight etc.)","(""Instantiation Modes"", ""Singleton is one of the instantiation modes mentioned."", ""Singleton""); (""Instantiation Modes"", ""Thread Singleton is one of the instantiation modes mentioned."", ""Thread Singleton"")"
"If you use an anonymous subclass of JavaFactory, inserted instead of ""new MyFactory()"", the JavaFactoryBuilder cannot access the ""otherFactory"" field, even if it is public.","(""JavaFactory"", ""JavaFactoryBuilder cannot access the 'otherFactory' field when using an anonymous subclass of JavaFactory."", ""JavaFactoryBuilder"")"
"Inner classes will do just fine too, as long as they are declared ""public static"".",NULL
"This method takes 3 parameters: The name of the factory, the return type of the factory, and a subclass of JavaFactory which implements the factory.","(""method"", ""The method is related to JavaFactory as it takes a subclass of JavaFactory as a parameter."", ""JavaFactory"")"
"The name is used when calling the container.instance(""name"") method to obtain an instance from the factory.","(""Container"", ""The instance method is called on the Container class to obtain an instance."", ""instance"")"
JavaFactoryBuilder has a method that omits the return type and instead extracts that information from the return type of the JavaFactory subclass's instance method.,"(""JavaFactoryBuilder"", ""JavaFactoryBuilder is related to JavaFactory as it is a builder for JavaFactory instances."", ""JavaFactory"")"
Notice how no return type is passed in the addFactory() call.,NULL
Also notice how the return type of the instance() method is now MyObject.,NULL
By declaring a field of type IGlobalFactory in the JavaFactory subclass the JavaFactoryBuilder knows that the factory depends on another factory.,"(""JavaFactory"", ""The JavaFactoryBuilder knows that the JavaFactory depends on IGlobalFactory for its functionality."", ""JavaFactoryBuilder"")"
"You can add as many factories as you want, using the addFactory() method.",NULL
The ScriptFactoryBuilder has a addFactories() method that takes an InputStream as parameter instead of a String.,"(""addFactories"", ""The addFactories() method takes an InputStream as a parameter."", ""InputStream"")"
"Using this method you can load a container script from disk, over a network, from the classpath and also from inside a Jar file.","(""Method"", ""The method is used to load a container script from various sources."", ""Container Script""); (""Method"", ""The method can load a container script from disk."", ""Disk""); (""Method"", ""The method can load a container script over a network."", ""Network""); (""Method"", ""The method can load a container script from the classpath."", ""Classpath"")"
"To configure the container using a script contained in a file located on the classpath (including inside a Jar file), you can do like this:","(""Script"", ""The script is used to configure the container."", ""Container"")"
"The init() method creates all singletons, starts services and other stuff that need to be done before the instances in the container can be used.","(""init"", ""The init() method is responsible for creating singletons."", ""singletons""); (""init"", ""The init() method starts services as part of its functionality."", ""services""); (""init"", ""The init() method prepares the instances to be used in the container."", ""instances"")"
The instance() method needs the name of the object factory to get an instance from.,NULL
You can put as many input parameters into the instance() call as you like.,NULL
The input parameters are defined as an optional parameter (Object ... parameters).,NULL
"When the dispose() method is called, the dispose life cycle phase is executed for all factories in the container, before the method call returns.","(""dispose"", ""The dispose() method is related to all factories as it executes the dispose life cycle phase for them."", ""factories"")"
A thread calling get() will only get the object it had set itself by calling set().,"(""Thread"", ""A thread is invoking the get() method to retrieve an object."", ""get"")"
"Then the value obtained from the container.instance(""myThreadLocal"") call will be the value the calling thread associated with itself, by calling MyClass.threadLocal.set().","(""MyClass"", ""MyClass.threadLocal is a method that is called to set the value associated with the calling thread."", ""threadLocal"")"
ThreadLocal's can be used to associate a java.util.Locale with the calling thread.,NULL
"Basically what you will do is call a ThreadLocal.set() method with the Locale to associate with the calling thread, before calling container.instance().","(""ThreadLocal"", ""ThreadLocal has a method called set that is used to associate a Locale with the calling thread."", ""set""); (""set"", ""The set method is called with a Locale as an argument to associate it with the calling thread."", ""Locale"")"
"Notice how the Locale is not obtained by the ThreadLocal.get() method, but via the static method getLocale().",NULL
"The getLocale() method functions as a cast from Object to its return value Locale, enabling the container to determine the type of the returned object (Locale).",NULL
"Notice how the HttpServletRequest and HttpServletResponse are not obtained by the ThreadLocal.get() method, but via the static methods getRequest() and getResponse().","(""getRequest"", ""getRequest() is a static method that retrieves an instance of HttpServletRequest."", ""HttpServletRequest""); (""getResponse"", ""getResponse() is a static method that retrieves an instance of HttpServletResponse."", ""HttpServletResponse""); (""ThreadLocal"", ""ThreadLocal.get() method is mentioned in contrast to the static method getRequest()."", ""getRequest"")"
"The getRequest() method functions as a cast from Object to its return value HttpServletRequest, enabling the container to determine the type of the returned object (HttpServletRequest).",NULL
"Instantiation time localization means that you inject localized dependencies (texts, paths, number and date formatters etc.)","(""Instantiation time localization"", ""Instantiation time localization involves the use of localized dependencies such as texts, paths, number and date formatters."", ""localized dependencies""); (""localized dependencies"", ""Texts are a type of localized dependency."", ""texts""); (""localized dependencies"", ""Paths are a type of localized dependency."", ""paths""); (""localized dependencies"", ""Number formatters are a type of localized dependency."", ""number formatters"")"
"As you can imagine, the more resources the MyComponent needs, the larger both the class and the configuration grows.","(""MyComponent"", ""MyComponent is a resource that requires a class for its configuration."", ""class"")"
"As you can imagine, only the execute() method will grow as the number of localized dependencies grow.",NULL
"Assuming that the MyService class implements an interface called IService, you can create a mock implementation of the IService interface using this code:",NULL
This mockService factory returns a dynamic implementation of the IService interface based on Java's java.lang.reflect.Proxy class.,"(""mockService"", ""mockService factory returns a dynamic implementation of the IService interface"", ""IService"")"
"The serviceMock instance passed to the getMock() method should be the mock object obtained from the mockService factory, using the container.instance(""mockService"") method call.","(""serviceMock"", ""The serviceMock instance is passed to the getMock() method, indicating a direct usage relationship."", ""getMock""); (""mockService"", ""The mock object is obtained from the mockService factory using the instance method, indicating a creation relationship."", ""instance"")"
"In other words, the instance returned from the MockFactory.createProxy() method call.",NULL
This way it is possible to detect if close() is called on the database connection after some method call that uses the connection has completed.,"(""close"", ""close() is a method that operates on the database connection."", ""database connection"")"
"A suggestion would be to have a PersonDao.getConnection() method, even though you'd probably mostly use it during testing.",NULL
From version 2.1.9 it is possible to replace factories at runtime.,NULL
"It is also possible to replace several script factories at a time, by using the ScriptFactoryBuilder.replaceFactories(InputStream) method.",NULL
Rather than configuring the PersonDao by hand with dependencies (and their dependencies recursively) you just reuse the configuration of the PersonDao from the application container configuration (the file containerConfig.bcs).,NULL
"When designing Butterfly we considered using an XML format for configuration like several alternative DI containers do (Spring, Nano etc.).","(""Butterfly"", ""Butterfly is designed with consideration of using XML format for configuration."", ""XML""); (""Butterfly"", ""Butterfly is compared to Spring as an alternative DI container."", ""Spring"")"
In this example a java.util.ArrayList() instance is created inside the call to setSomeList().,"(""ArrayList"", ""An instance of ArrayList is created inside the call to the method setSomeList."", ""setSomeList"")"
As you can see the List.add() method is called twice to add the string and myDataSource factory product to the list.,"(""List"", ""The add method is called on the List class to add elements to it."", ""add"")"
The fact One of the advantages you get when designing your own language is the freedom to e.g make methods that return void chainable.,"(""Language"", ""A language allows the creation of methods that can be designed to return void."", ""Method"")"
"The [] around the values in the setSomeList() call signals that the values are to be put inside a List or array, depending on the setSomeList() parameter type.","(""setSomeList"", ""setSomeList() method is designed to handle values that are to be placed inside a List."", ""List"")"
It is possible to map classes to tables and columns using annotations.,"(""Classes"", ""Classes can be mapped to tables in a database."", ""Tables"")"
You cannot have more than one mapping for the same class using annotation based mapping alone.,NULL
Each annotation is only allowed once in the code for a given class by the Java compiler.,"(""Annotation"", ""The Java compiler enforces the rule that each annotation can only be used once in the code for a given class."", ""Java Compiler"")"
There are two types of annotations available: A class annotation Annotations for getters and setters.,NULL
AClassMapping The class annotation (AClassMapping) is used ontop of your class name for your POJO classes.,NULL
"If you set the mappingMode to ""modify"" then Butterfly Persistence will first use automatic mapping to guess as much as it can, and then look at the annotations and modify the class mapping accordingly.",NULL
"The tableName element can be set to the name of the table the class is to be mapped to, if it cannot be guessed by the automatic mapping mechanism.",NULL
"If you have a database generated (e.g auto-incremented) primary key that is mapped to a getter method, you will have to mark the getter method as database generated, to avoid having Butterly Persistence try to set that value in the database.",NULL
The class annotation (AClassMapping) is used ontop of your class name for your POJO classes.,NULL
"Notice how the second class definition uses manual mapping, so the getter and setter must be fully mapped to columns in the database.","(""Class"", ""The getter is a method that retrieves data from the class, which is mapped to columns in the database."", ""Getter""); (""Class"", ""The setter is a method that updates data in the class, which is also mapped to columns in the database."", ""Setter""); (""Getter"", ""The getter method retrieves data that is stored in the database."", ""Database"")"
The ASetterMapping annotation is used to map setters of classes to columns in database tables or SQL queries.,"(""ASetterMapping"", ""The ASetterMapping annotation is used to map setters of classes to columns in database tables or SQL queries."", ""classes""); (""ASetterMapping"", ""The ASetterMapping annotation is used to map setters of classes to columns in database tables or SQL queries."", ""columns"")"
In this example the Employee.class object is the object mapping key.,NULL
"However, if you want Butterfly Persistence to be able to auto-map the target class to the database, the object mapping key should be either a Class object, or an IObjectMappingKey instance.","(""Butterfly Persistence"", ""Butterfly Persistence can auto-map the target class to the database using a Class object."", ""Class"")"
"The IObjectMappingKey instance can contain more information about the class to be mapped, than a Class object can.",NULL
"An IObjectMappingKey instance has a getObjectClass() method that returns the Class object of the class to map, so automatic mapping is possible in either case.","(""getObjectClass"", ""getObjectClass is a method of the IObjectMappingKey class that retrieves the Class object."", ""IObjectMappingKey"")"
When checking for tables with similar names to the class to map only the class name itself is used.,NULL
The ObjectMapper generates various textual combinations based on the class name and checks the database meta data to see if any of these match.,NULL
"The ObjectMapper mapper breaks the class name into words, based on the uppercase letters and numbers in the class name.","(""ObjectMapper"", ""The ObjectMapper uses the mapper to break the class name into words."", ""mapper"")"
Based on these combinations the PersistentObject class name would be similar to the table names PersistentObject persistentObject persistentobject PERSISTENTOBJECT Persistent_Object persistent_object PERSISTENT_OBJECT PersistentObjects persistentObjects persistentobjects PERSISTENTOBJECTS PERSISTENTOBJECTs Persistent_Objects persistent_objects PERSISTENT_OBJECTS PERSISTENT_OBJECTs As you can see there is a reasonable chance that the table name will be guessed if it is similar to the class name.,"(""PersistentObject"", ""Both are variations of the class name that could be used as table names."" "", ""Persistent_Object""); (""PersistentObject"", ""Both are variations of the class name that could be used as table names."" "", ""PersistentObjects""); (""Persistent_Object"", ""Both are variations of the class name that could be used as table names."" "", ""PersistentObjects""); (""PERSISTENTOBJECT"", ""Both are variations of the class name that could be used as table names."" "", ""PERSISTENT_OBJECT""); (""PERSISTENTOBJECTS"", ""Both are variations of the class name that could be used as table names."" "", ""PERSISTENTOBJECTs"")"
"The Object Mapper uses reflection to iterate the methods of the class to be mapped, and filters out all other methods than getters and setters.","(""Object Mapper"", ""The Object Mapper uses reflection to iterate the methods of the class to be mapped."", ""class""); (""class"", ""The class has methods that are iterated by the Object Mapper."", ""methods""); (""methods"", ""The methods include getters."", ""getters"")"
If your custom mapper implementation returns an object mapping from the getObjectMapping() method then automatic and annotation based mapping are not applied.,NULL
"If a table name is returned from the getTableName() method, then Butterfly Persistence will not try to guess a table name, nor look at the class annotation for table name.",NULL
If null is returned Butterfly Persistence will look at the class annotation to see if a table name is set there.,"(""Butterfly Persistence"", ""Butterfly Persistence uses the class annotation to determine if a table name is set."", ""class annotation"")"
If the getObjectMapping() method returned null Butterfly Persistence will call the modify() method to allow your custom object mapper to modify the automatically generated mapping.,"(""getObjectMapping"", ""The getObjectMapping() method is part of the Butterfly Persistence class, indicating a functional relationship between the method and the class."", ""Butterfly Persistence"")"
Before doing so Butterfly Persistence will have applied the annotations in the class to the mapping.,"(""Butterfly Persistence"", ""Butterfly Persistence applies the annotations to the mapping."", ""annotations"")"
"If you want Butterfly Persistence to manage the opening of connections, pass a javax.sql.DataSource implementation into the constructor of the PersistenceManager.","(""Butterfly Persistence"", ""Butterfly Persistence is related to PersistenceManager as it manages the opening of connections through the PersistenceManager."", ""PersistenceManager"")"
The readLong() method comes in another version too which takes an optional list of parameters.,NULL
They will be inserted in the sequence they are passed to the readLong() method.,NULL
"The string (4,5,6,7) is an id string which could be returned by the readIdString() method.",NULL
The readIdString() method comes in a variant that takes an optional list of parameters.,NULL
The IJdbcDao has a few read() methods that allows you to decide what to do with each record in the ResultSet resulting from some SQL query.,"(""IJdbcDao"", ""IJdbcDao has read() methods that allow interaction with records."", ""read()""); (""read()"", ""read() methods operate on records in the ResultSet."", ""ResultSet"")"
To do so you must provide the read() method with an implementation of the IResultSetProcessor interface.,NULL
The init() method is called before the iteration of the ResultSet begins.,NULL
The process() method is called for each record in the ResultSet The read() method returns an object.,"(""process"", ""The process() method is called for each record in the ResultSet."", ""ResultSet"")"
This is the object is obtained from the getResult() method of the IResultSetProcessor.,NULL
Here is an example of how to use a IResultSetProcessor with the read() methods:,NULL
It may be a good idea to create a base class for your IResultSetProcessor implementations with empty method implementations for init() and perhaps a default behaviour for getResult().,"(""IResultSetProcessor"", ""init() is a method that may be implemented in the IResultSetProcessor class."", ""init"")"
The read() method comes in a version that takes an optional number of parameters.,NULL
Notice how the number 1975 is passed into the read() method at the end.,NULL
The execute() method should execute the PreparedStatement and return the result of the execution.,NULL
The postProcess() method is normally used to call methods on the PreparedStatement after execution.,NULL
"To read the ids of X records returned from a query into a string of the format (id1, id2, id3, ...) you will do like this:",NULL
"From version 5.3.9 you no longer need to cast the returned object, if you use a Class object as object mapping key.","(""Class"", ""A Class object is used as an object mapping key to return an object without needing to cast it."", ""object"")"
You can also parameterize the SQL statement and pass the parameters to the readList() method.,NULL
"This text contains a few examples of how to use the object DAO, IObjectDao, so you can get an idea about how to use the IObjectDao class:",NULL
In addition the Person class and persons table are defined like this:,NULL
"Thus, it doesn't matter how many fields in a class are mapped to columns in the ""items"" table.",NULL
"Therefore you need to create a special object mapping for the given class, that only maps the fields you want to write to columns in the database.",NULL
"The object mapping key could be any object you choose, but if you want help from Butterfly Persistence to map a class to the database, the object mapping key should be either a java.lang.Class object, or an ObjectMappingKey instance.","(""Butterfly Persistence"", ""Butterfly Persistence helps to map a class to the database using a java.lang.Class object."", ""java.lang.Class"")"
"For instance, Employee.class is the object mapping key in the method call below:",NULL
"To enable easy, always-in-time custom object mapping Butterfly Persistence provides the ObjectMappingKey class for advanced object mapping keys.",NULL
Creating an ObjectMappingKey instance is done using the ObjectMappingKey class factory methods.,NULL
"That is because the ObjectMappingKey's factory methods gives each ObjectMappingKey instance a unique id, an int, which is used by its equals() and hashCode() methods.","(""ObjectMappingKey"", ""The factory methods are responsible for creating instances of ObjectMappingKey."", ""factory methods""); (""ObjectMappingKey"", ""The equals method is used to compare ObjectMappingKey instances."", ""equals"")"
"This speeds up object mapping cache lookups because the hashCode() method returns this int id, and because equals() also only compares int id's, instead of Class objects, table names etc.","(""hashCode"", ""hashCode() method returns this int id"", ""id"")"
Instead of the class MyCustomObjectMapper you should use your own class.,NULL
The extended class CustomObjectMapperBase is an empty implementation of the ICustomObjectMapper interface.,NULL
Just call the IObjectMapping.removeGetterMapping(String name) or IObjectMapping.removeSetterMapping(String name) method to do so.,"(""IObjectMapping"", ""removeGetterMapping is a method of the IObjectMapping class."", ""removeGetterMapping"")"
The ObjectMappingKey class has some static shortcut factory methods to create object mapping keys that has custom object mappers for auto-generated columns.,"(""ObjectMappingKey"", ""The ObjectMappingKey class has static shortcut factory methods to create object mapping keys."", ""shortcut factory methods"")"
The only thing required to use Butterfly Persistence is that you add the JAR file to the classpath of your application.,NULL
"A lot of things are cached internally in the PersistenceManager instance, like object mappings, sql etc., so you should not create a new instance everytime you need it.",NULL
Version control systems typically also makes it easier for multiple people to collaborate - e.g.,NULL
"The Docker base image you are using may itself consist of multiple layers, and can itself be based on another base image etc., until you get down to the most basic Docker image you can create - a raw Linux container image with no special settings applied.","(""Docker"", ""Docker is a package that can be used to create base images."", ""base image""); (""base image"", ""A base image is a type of image used in Docker."", ""image"")"
This example copies a single file from the Docker host at /myapp/target/myapp.jar to the Docker image at /myapp/myapp.jar .,"(""Docker"", ""Docker is used to host the myapp class and manage its deployment."", ""myapp"")"
This example copies the two files /myapp/config/prod/conf1.cfg and /myapp/conig/prod/conf2.cfg into the Docker image directory /myapp/config/ .,"(""myapp"", ""myapp is the application that uses the Docker package for its configuration."", ""Docker""); (""conf1.cfg"", ""conf1.cfg is a configuration file used by the myapp class."", ""myapp"")"
"In other words, you can create a directory inside the docker image, e.g.",NULL
"called /data which can later be mounted to a directory, e.g.",NULL
In a Maven repository a JAR file is identified by its group name (e.g.,NULL
"the organization that made it), its artifact name (the name of the project / software / tool / API), and a version number (e.g.","(""Organization"", ""The organization creates or is responsible for the artifact name."", ""Artifact Name"")"
"This example declares a dependency on Log4J using the group name log4j, the artifact name log4j and the version 1.2.17 .","(""Log4J"", ""Log4J is a package that includes the log4j artifact."", ""log4j"")"
By default the testCompile dependency configuration also includes the compiled classes and the dependencies from the compile dependency configuration.,"(""testCompile"", ""The testCompile configuration includes the compiled classes as part of its dependencies."", ""compiled classes""); (""testCompile"", ""The testCompile configuration also includes dependencies from the compile configuration."", ""dependencies"")"
The build task will compile all your Java classes and create a JAR file with them in.,"(""Build Task"", ""The build task compiles all Java classes."", ""Java Classes"")"
Gradle outputs classes and JAR file to the directory named build inside your project root directory.,"(""Gradle"", ""Gradle outputs classes to the directory."", ""classes""); (""Gradle"", ""Gradle outputs JAR file to the directory."", ""JAR file""); (""build"", ""build is the directory where classes are outputted."", ""classes"")"
The compiled classes are written to build/classes and the JAR file to build/libs .,"(""classes"", ""The compiled classes are written to the specified directory."", ""build/classes"")"
"This is because the classes, jar and assemble tasks are now all UP-TO-DATE from the last run.",NULL
"Running the clean task removes the build directory, and thus all compiled classes and created JAR files.","(""CleanTask"", ""The clean task removes the build directory."", ""BuildDirectory""); (""CleanTask"", ""The clean task removes all compiled classes."", ""CompiledClasses"")"
"Second, this example calls the myTask doFirst() method, passing along a closure as parameter.","(""myTask"", ""myTask is the class that contains the doFirst() method."", ""doFirst()"")"
"Third, this example calls the myTask doLast() method, passing along another closure as parameter.",NULL
"When the task myTask is executed Gradle will first execute all closures passed as parameters the doFirst() method, and then all closures passed as parameters the doLast() method.","(""myTask"", ""myTask is executed within the Gradle build system."", ""Gradle""); (""doFirst"", ""doFirst() method is executed as part of the myTask execution."", ""myTask"")"
"First of all you do not need the semicolon ; after the doFirst() and doLast() method calls, if the code line with the method calls ends with a new line.",NULL
"Second, you do not need the parentheses around the closure when calling doFirst() or doLast().",NULL
With these two syntax optimizations you can write the doFirst() and doLast() method calls like this:,NULL
Often you will not need to pass closures to both doFirst() and doLast() .,NULL
It is quite common to pass just a single closure to the doLast() method.,NULL
"Because this is such a common use case, Gradle has a shortcut for passing a closure to the doLast() method.",NULL
The two characters << corresponds to calling the doLast() method like this:,NULL
You can even define the task on the same line as you pass the closure to the doLast() method.,NULL
You can also add multiple closures using the doLast() shortcut notation.,NULL
"A task could be compiling the source code, generating JavaDoc, zipping the compiled classes into a JAR file etc.","(""Task"", ""A task involves compiling the source code."", ""Source Code""); (""Task"", ""A task could include generating JavaDoc."", ""JavaDoc""); (""Task"", ""A task may involve zipping the compiled classes."", ""Compiled Classes"")"
The build script is typically called build.gradle and is normally located in the root directory of the project you are building.,"(""build.gradle"", ""The build script is typically called build.gradle and is normally located in the root directory of the project."", ""root directory"")"
When you specify another build script Gradle does not use its settings.gradle file.,NULL
Gradle will use the build.gradle file found in the project directory (subproject-dir) and will execute the build task in that build script.,"(""Gradle"", ""Gradle uses the build.gradle file to execute tasks."", ""build.gradle""); (""build.gradle"", ""The build.gradle file is located in the project directory."", ""project directory"")"
"Note, that the Predicate interface contains a single unimplemented method named test() which returns a boolean.",NULL
"After creating the two basic functions, a third Predicate is composed, which calls the test() methods of the two first functions.","(""Predicate"", ""Predicate is composed of the test() method from the two first functions."", ""test"")"
The Predicate interface (java.util.function.Predicate) contains a few methods that help you compose new Predicate instances from other Predicate instances.,"(""Predicate"", ""Predicate is part of the java.util.function package."", ""java.util.function.Predicate"")"
The and() method is used to combine two other Predicate functions in the same way I showed in the beginning of this Java functional composition tutorial.,NULL
Here is an example of functional composition with the Predicate and() method:,NULL
This Predicate composition example composes a new Predicate from two other Predicate instances using the and() method of one of the basic Predicate instances.,"(""Predicate"", ""The and() method is used to compose a new Predicate from two other Predicate instances."", ""and"")"
The composed Predicate will return true from it's test() method if both of the Predicate instances it was composed from also return true.,NULL
"The Predicate or() method is used to combine a Predicate instance with another, to compose a third Predicate instance.",NULL
"The composed Predicate will return true if either of the Predicate instances it is composed from return true, when their test() methods are called with same input parameter as the composed Predicate.",NULL
This Predicate or() functional composition example first creates two basic Predicate instances.,"(""Predicate"", ""Predicate is a class that is being used in the method or()"", ""or()"")"
"Second, the example creates a third Predicate composed from the first two, by calling the or() method on the first Predicate and passing the second Predicate as parameter to the or() method.",NULL
The Java Function interface (java.util.function.Function) also contains a few methods that can be used to compose new Function instances from existing ones.,"(""Function"", ""Function is a class that is part of the java.util.function package."", ""java.util.function.Function"")"
"The Java Function compose() method composes a new Function instance from the Function instance it is called on, and the Function instance passed as parameter to the compose() method.","(""compose()"", ""The compose() method is a method of the Function class that operates on Function instances."", ""Function"")"
"The Function returned by compose() will first call the Function passed as parameter to compose(), and then it will call the Function which compose() was called on.","(""Function"", ""The Function is returned by the compose() method, indicating a direct relationship between them."", ""compose()"")"
"This is easier to understand with an example, so here is a Java Function compose() example:",NULL
The Java Function andThen() method works opposite of the compose() method.,NULL
"A Function composed with andThen() will first call the Function that andThen() was called on, and then it will call the Function passed as parameter to the andThen() method.","(""Function"", ""The Function is composed with andThen(), indicating a direct relationship between the Function and the method andThen()."", ""andThen()"")"
"Then the andThen() method is called on the multiply Function to compose a new Function, passing the add Function as parameter to andThen().","(""andThen"", ""The andThen() method is called on the multiply Function to compose a new Function."", ""multiply"")"
Calling the Function composed by andThen() with the value 3 will result in the following calculation 3 * 2 + 3 and the result will be 9.,"(""Function"", ""Function composed by andThen() is a method that is called."", ""andThen()""); (""3"", ""The calculation involving 3 results in the final value of 9."", ""9"")"
"Note: As mentioned in the beginning, andThen() works opposite of compose().",NULL
"Therefore, calling a.andThen(b) is actually the same as calling b.compose(a) .",NULL
The Java Function interface (java.util.function.Function) interface is one of the most central functional interfaces in Java.,NULL
The only method you have to implement to implement the Function interface is the apply() method.,NULL
"This Function implementation implements the apply() method so it takes a Long as parameter, and returns a Long.","(""Function"", ""The apply() method is implemented within the Function class."", ""apply"")"
"Second, the example calls the apply() method on the AddThree instance.",NULL
"As you can see, the Function interface implementation is now inlined in the declaration of the adderLambda variable, rather than in a separate class.",NULL
"The Java Predicate interface, java.util.function.Predicate, represents a simple function that takes a single value as parameter, and returns true or false.",NULL
"The Predicate interface contains more methods than the test() method, but the rest of the methods are default or static methods which you don't have to implement.","(""Predicate"", ""Predicate interface contains the test() method as one of its methods."", ""test"")"
"You can implement the Predicate interface using a class, like this:",NULL
This lambda implementation of the Predicate interface effectively does the same as the implementation above that uses a class.,"(""Lambda"", ""Lambda is an implementation of the Predicate interface."", ""Predicate"")"
This Java Consumer implementation prints the value passed as parameter to it out to System.out.,NULL
"Especially the idea of ""no side effects"" makes it hard to e.g.",NULL
"In the functional programming paradigm, functions are first class objects in the language.","(""FunctionalProgramming"", ""Functions are a key concept in the functional programming paradigm."", ""Functions"")"
Notice how the return value of the sum() function only depends on the input parameters.,NULL
"Notice also that the sum() has no side effects, meaning it does not modify any state (variables) outside the function anywhere.",NULL
"Notice how the method add() uses a member variable to calculate its return value, and it also modifies the state of the value member variable, so it has a side effect.",NULL
Notice how the createFactory() method returns a lambda expression as result.,NULL
Notice also that the createFactory() method takes two instances as parameters which are both implementations of interfaces (IProducer and IConfigurator).,"(""createFactory"", ""The createFactory() method takes IProducer as a parameter, indicating a relationship between the method and the interface."", ""IProducer"")"
Therefore they can be implemented by Java lambda expressions - and therefore the createFactory() method is a higher order function.,NULL
"A function may have local variables containing temporary state internally, but the function cannot reference any member variables of the class or object the function belongs to.","(""Function"", ""A function may have local variables containing temporary state internally."", ""Local Variables""); (""Function"", ""The function cannot reference any member variables of the class or object the function belongs to."", ""Member Variables"")"
"State outside of a function refers both to member variables in the class or object the function, and member variables inside parameters to the functions, or state in external systems like file systems or databases.","(""State"", ""State refers to member variables in the class or object the function."", ""function""); (""function"", ""Member variables can be inside parameters to the functions."", ""parameters""); (""State"", ""State refers to member variables in the class or object."", ""member variables""); (""external systems"", ""State can refer to state in external systems like file systems."", ""file systems"")"
"This is still a functional interface, because only run() is not implemented (abstract).",NULL
The first example of a higher order function is the Collections.sort() method which takes a Comparator as parameter.,NULL
The lambda parameter is what makes Collections.sort() a higher order function.,NULL
"Second, the example calls the reversed() method on the Comparator lambda.",NULL
"The reversed() method returns a new Comparator lambda, which reverse the result returned by the first Comparator implementation.",NULL
"By ""reversing"" I mean that it simply returns -1 * comparator.compare(a,b)","(""Comparator"", ""The method 'compare' is a function of the class 'Comparator'."", ""compare""); (""compare"", ""The method 'compare' takes 'a' as one of its parameters."", ""a"")"
"Because the reversed() method returns a lambda (function), the reversed() method is considered a higher order function.",NULL
"Third, the example sorts the List of Strings using the Collections.sort() method.","(""Collections"", ""The Collections package provides the sort method for sorting collections."", ""sort"")"
"In contrast, when you are using the Java Collections iteration features (e.g a Java Iterator or the Java for-each loop used with a Java Iterable) you have to implement the iteration of the elements yourself.","(""Java Collections"", ""Java Collections provides iteration features that include the use of an Iterator."", ""Iterator""); (""Java Collections"", ""Java Collections provides iteration features that include the use of a for-each loop."", ""for-each loop"")"
"Finally, the example calls the stream() method to obtain a Stream instance.",NULL
The call to the map() method of the Stream interface is a non-terminal operation.,NULL
The map() method will be covered in more detail later on.,NULL
Notice how the second call to Stream map() is called on the Stream returned by the first map() call.,NULL
The Java Stream filter() can be used to filter out elements from a Java Stream.,NULL
Here is an example of calling the Java Stream filter() method:,NULL
The Java Stream map() method converts (maps) an element to another object.,"(""Java Stream"", ""The map() method is a function of the Java Stream class."", ""map()"")"
The Java Stream flatMap() methods maps a single element into multiple elements.,NULL
This example should give you an idea about how flatMap() can be used to map a single element into multiple elements.,NULL
This Java Stream flatMap() example first creates a List with 3 strings containing book titles.,"(""Java Stream"", ""flatMap() is a method of the Java Stream class."", ""flatMap()""); (""flatMap()"", ""flatMap() returns a List of elements."", ""List"")"
"Then a Stream for the List is obtained, and flatMap() called.","(""Stream"", ""Stream is obtained for the List"", ""List"")"
The flatMap() operation called on the Stream has to return another Stream representing the flat mapped elements.,NULL
Note that this example finishes with a call to forEach() which is a terminal operation.,NULL
The Java Stream distinct() method is a non-terminal operation that returns a new Stream which will only contain the distinct elements from the original stream.,"(""Java Stream"", ""The distinct() method is a part of the Java Stream class."", ""distinct()"")"
Only the first occurrence of this element will be included in the Stream returned by distinct().,NULL
"Thus, the resulting List (from calling collect()) will only contain one, two and three.",NULL
The Java Stream limit() method can limit the number of elements in a stream to a number given to the limit() method as parameter.,NULL
The limit() method returns a new Stream which will at most contain the given number of elements.,NULL
"This example first creates a Stream, then calls limit() on it, and then calls forEach() with a lambda that prints out the elements in the stream.","(""Stream"", ""The method limit() is called on the Stream class."", ""limit"")"
The Java Stream peek() method is a non-terminal operation that takes a Consumer (java.util.function.Consumer) as parameter.,"(""peek()"", ""The peek() method takes a Consumer as a parameter."", ""Consumer""); (""peek()"", ""The peek() method is part of the Java Stream class."", ""Java Stream"")"
The peek() method returns a new Stream which contains all the elements in the original stream.,NULL
"The purpose of the peek() method is, as the method says, to peek at the elements in the stream, not to transform them.",NULL
It is the call to count() at the end of the example that is the terminal operation.,NULL
"Since count() returns a long, the Stream chain of non-terminal operations (the map() calls) is ended.","(""count"", ""count() is a method that returns a long value, which is used in the context of the Stream class."", ""Stream"")"
"The Java Stream anyMatch() method is a terminal operation that takes a single Predicate as parameter, starts the internal iteration of the Stream, and applies the Predicate parameter to each element.","(""anyMatch()"", ""anyMatch() is a method of the Java Stream class that operates on its elements."", ""Java Stream"")"
"If the Predicate returns true for any of the elements, the anyMatch() method returns true.",NULL
"In the example above, the anyMatch() method call will return true, because the first string element in the stream starts with ""One"".",NULL
"The Java Stream allMatch() method is a terminal operation that takes a single Predicate as parameter, starts the internal iteration of elements in the Stream, and applies the Predicate parameter to each element.","(""allMatch()"", ""allMatch() is a method that operates on the Java Stream class."", ""Java Stream"")"
"If the Predicate returns true for all elements in the Stream, the allMatch() will return true.","(""Predicate"", ""Predicate is a type that can be evaluated for elements in the Stream."", ""Stream"")"
"If not all elements match the Predicate, the allMatch() method returns false.",NULL
"In the example above, the allMatch() method will return false, because only one of the strings in the Stream starts with ""One"".",NULL
"The Java Stream noneMatch() method is a terminal operation that will iterate the elements in the stream and return true or false, depending on whether no elements in the stream matches the Predicate passed to noneMatch() as parameter.","(""noneMatch()"", ""noneMatch() is a method that operates on the Java Stream class to evaluate elements based on a Predicate."", ""Java Stream"")"
"The noneMatch() method will return true if no elements are matched by the Predicate, and false if one or more elements are matched.",NULL
"The Java Stream collect() method is a terminal operation that starts the internal iteration of elements, and collects the elements in the stream in a collection or object of some kind.","(""Java Stream"", ""The collect() method is a terminal operation of the Java Stream class."", ""collect()"")"
"Luckily, the Java class java.util.stream.Collectors contains a set of pre-implemented Collector implementations you can use, for the most common operations.",NULL
"In the example above, it was the Collector implementation returned by Collectors.toList() that was used.","(""Collector"", ""Collector is an implementation that is returned by the method toList() from the Collectors package."", ""toList"")"
"The Java Stream count() method is a terminal operation which starts the internal iteration of the elements in the Stream, and counts the elements.",NULL
"This example first creates a List of strings, then obtain the Stream for that List, adds a flatMap() operation for it, and then finishes with a call to count().","(""List"", ""List is used to create a Stream."", ""Stream""); (""Stream"", ""Stream has a flatMap() operation applied to it."", ""flatMap"")"
"The count() method will start the iteration of the elements in the Stream which will result in the string elements being split up into words in the flatMap() operation, and then counted.",NULL
The Java Stream findAny() method can find a single element from the Stream.,NULL
You can check if an element was found via the Optional isPresent() method.,NULL
"The Java Stream findFirst() method finds the first element in the Stream, if any elements are present in the Stream.","(""findFirst()"", ""The findFirst() method is a method of the Java Stream class that operates on Stream objects."", ""Java Stream"")"
"The findFirst() method returns an Optional from which you can obtain the element, if present.",NULL
You can check if the Optional returned contains an element via its isPresent() method.,NULL
"The Java Stream forEach() method is a terminal operation which starts the internal iteration of the elements in the Stream, and applies a Consumer (java.util.function.Consumer) to each element in the Stream.","(""forEach()"", ""forEach() is a method that operates on the elements of the Java Stream."", ""Java Stream""); (""forEach()"", ""forEach() applies a Consumer to each element in the Stream."", ""Consumer"")"
The Java Stream min() method is a terminal operation that returns the smallest element in the Stream.,NULL
Which element is the smallest is determined by the Comparator implementation you pass to the min() method.,NULL
Notice how the min() method returns an Optional which may or may not contain a result.,NULL
"If the Stream is empty, the Optional get() method will throw a NoSuchElementException.","(""get()"", ""get() is a method of the Optional class."", ""Optional"")"
The Java Stream max() method is a terminal operation that returns the largest element in the Stream.,NULL
Which element is the largest is determined by the Comparator implementation you pass to the max() method.,NULL
Notice how the max() method returns an Optional which may or may not contain a result.,NULL
The Java Stream reduce() method is a terminal operation that can reduce all elements in the stream to a single element.,"(""Java Stream"", ""The reduce() method is a part of the Java Stream class."", ""reduce()"")"
This Optional contains the value (if any) returned by the lambda expression passed to the reduce() method.,NULL
"The Java Stream toArray() method is a terminal operation that starts the internal iteration of the elements in the stream, and returns an array of Object containing all the elements.","(""Java Stream"", ""toArray() is a method of the Java Stream class that performs a terminal operation."", ""toArray()"")"
The Java Stream interface contains a static method called concat() which can concatenate two streams into one.,NULL
Here is an example of using the Java Stream concat() method:,NULL
The Java Stream interface contains a static method called of() which can be used to create a Stream from one or more objects.,"(""of"", ""The method 'of()' is a static method within the Java Stream class."", ""Java Stream"")"
Here is an example of using the Java Stream of() metho:,NULL
"A graph based stream processing API could instead support a ""sample"" operation where each node in the stream processing graph is asked for any value it may hold internally (e.g.",NULL
Some graph based stream processing APIs are also designed to kind of hide the iteration of the elements from the user of the API (e.g.,NULL
The full code for the command line argument parsers is listed at the end of this tutorial (it's just one class).,NULL
The interpretation of these command line arguments could be that the copy program should copy file.txt to a file named file2.txt and overwrite file2.txt if it already exists.,"(""copy program"", ""The copy program is designed to copy the contents of file.txt."", ""file.txt"")"
These command line arguments consists of one switch (-overwrite) and two targets (file.txt and file.2.txt).,"(""Command Line Arguments"", ""The command line arguments include the switch '-overwrite'."", ""Overwrite""); (""Command Line Arguments"", ""The command line arguments specify the target 'file.txt'."", ""File.txt"")"
"When the switch -overwrite is removed, the two arguments file.txt and file2.txt remain.","(""Switch"", ""The switch -overwrite affects the handling of the arguments file.txt and file2.txt."", ""File.txt"")"
The command line argument parser consists of a single Java class named CliArgs.,NULL
The CliArgs class takes an array of String as argument to its constructor.,NULL
The CliArgs class contains the following methods you can use to obtain switch information and values:,NULL
The switchPresent() method can be used to ask if a given switch is present or not.,NULL
"If the command line arguments contains the -overwrite switch anywhere, the switchPresent() method will return true.",NULL
The switchValue() method can be use to obtain the value of a switch.,NULL
Here is a code example showing how to use switchValue() to read the value of the -port switch:,NULL
If you want the value of a switch parsed into a long or double you can use the switchLongValue() and switchDoubleValue() methods.,NULL
The switchValues() method is used to obtain multiple values for a switch.,NULL
The switchValues() method will return all values after the switch and until the next switch is met (next argument starting with a - character).,NULL
The values of the -from switch will be file1.txt and file2.txt.,"(""from"", ""The -from switch specifies the input files, which are file1.txt and file2.txt."", ""file1.txt"")"
The values of the -to switch will be copy1.txt and copy2.txt.,NULL
Instead you can create a swith POJO (Plain Old Java Object) class to hold all the switches.,NULL
"You can now read all the switches from the command line directly into an instance of the CliSwitches class, using the switchPojo() method.",NULL
The CliArgs switchPojo() method will use the property names inside the class to match against switches in the command line.,NULL
The targets() method returns all the arguments which are not switches or switch values.,NULL
"The CliArgs class distinguishes between switch values and targets by assuming, that all arguments which have not been ""taken"" already as switch values must be targets.","(""CliArgs"", ""The CliArgs class distinguishes between switch values and targets by assuming that all arguments which have not been taken already as switch values must be targets."", ""switch values"")"
"will the method targets() as executed in the code above, return the String",NULL
"Therefore the targets() method call will return the argument web-root , because web-root is the only argument that has not been ""taken"" yet, even if it is located in the middle of the argument list.",NULL
You may need to have at least N next bytes (e.g.,NULL
"To be able to move forth and back in the stream data, you may need to keep the next e.g.",NULL
To solve this problem I will develop a RollingBufferInputStream class which keeps at least N bytes available in a buffer.,NULL
"The RollingBufferInputStream class which I have developed, can be used to iterate an InputStream while at the same time making sure there is always block size bytes available in the buffer.",NULL
"Note: Even if the class is called RollingBufferInputStream, it is not an InputStream subclass.",NULL
"First you ask if the buffer has N available bytes, by calling hasAvailableBytes().",NULL
This outline mostly serves to show you the interface of the RollingBufferInputStream class.,NULL
"If the call to hasAvailableBytes() detects that there is not enough bytes available in the buffer, it will attempt to fill the buffer.",NULL
"Here is the full hasAvailableBytes() method implementation, so you can see how it works:",NULL
"Filling data into the buffer is done by the method fillDataFromStreamIntoBuffer(), which is shown here:",NULL
"You could use the String.replace() method, but for large amounts of data, and high number of replacements, this performs badly.",NULL
The String.replace() method creates a new String instance - which is a copy of the original String with the replacements applied.,NULL
"If you have to perform 5 replacements, you have to call replace() 5 times, each time on the string returned by the last replace() call, like this:",NULL
"... where N = the size of the string, and M = the number of replacements to perform.",NULL
"Instead of using the String.replace() method I will here present a different, more scalable solution called a TokenReplacingReader.","(""String"", ""String is a class that has a method called replace()"", ""replace"")"
The token name (without the enclosing ${} ) is passed to the ITokenResolver.resolveToken(String tokenName) method.,"(""ITokenResolver"", ""ITokenResolver contains the method resolveToken which is used to resolve a token name."", ""resolveToken"")"
"The TokenReplacingReader is itself a subclass of java.io.Reader, so any class that can use a Reader, can use a TokenReplacingReader.",NULL
The TokenReplacingReader does not use as much memory as the String.replace() method.,NULL
"... where N is the size of the data to replace tokens in, and M is the number of replacements.",NULL
This is faster than the O(N * M) of the String.replace() method.,NULL
You could create a variant of the TokenReplacingReader which can replace XML entities (e.g.,NULL
"Additionally, since TokenReplacingReader is a java.io.Reader, and it gets its characters from a Reader itself, you can chain it with other java.io.Reader's or InputStreams which does other things (like unzipping, decrypting, converting from UTF-8, UTF-16 etc.)","(""TokenReplacingReader"", ""TokenReplacingReader is a subclass of Reader"", ""Reader"")"
Implementing a Java web crawler is a fun and challenging task often given in university programming classes.,"(""Java"", ""Java is the programming language used to implement the web crawler."", ""web crawler"")"
That way the thread listening for incoming requests spends as much time as possible in the serverSocket.accept() call.,NULL
That way the risk is minimized for clients being denied access to the server because the listening thread is not inside the accept() call.,"(""Client"", ""Clients are accessing the server."", ""Server"")"
"Here is the code for the WorkerRunnable class, which is passed to the worker thread constructor:",NULL
"As mentioned earlier the more time the thread calling serverSocket.accept() spends inside this method call, the more responsive the server will be.",NULL
Only when the listening thread is inside the accept() call can clients connect to the server.,"(""ListeningThread"", ""The ListeningThread class is involved in the accept() method, indicating that it is related to the process of accepting connections."", ""Accept"")"
Clients can only connect to the server while the server is inside the serverSocket.accept() method call.,"(""Clients"", ""Clients connect to the server while it is accepting connections."", ""server"")"
"The longer time the listening thread spends outside the serverSocket.accept() call, the higher the probability that the client will be denied access to the server.",NULL
That way the listening thread spends as little time as possible outside the serverSocket.accept() call.,NULL
"For instance, if you process 1.000 requests concurrently and each request takes 1 second, then all requests will take 1.000 seconds to complete.",NULL
"To use IText PDF API for Java you must first download the IText JAR file from the IText website, and include it on your application class path.","(""IText PDF API"", ""The IText PDF API requires the IText JAR file to be included in the application class path for usage."", ""IText JAR file"")"
"The com.itextpdf.text.Anchor class in IText represents an link, either to an external website, or internally in the document.",NULL
"The com.itextpdf.text.Chunk class in IText represents the smallest possible ""chunk"" of text.",NULL
"If you need to generate a PDF document from scratch, you will use the Document class.",NULL
"You can specify fonts for most text objects (Chunk, Phrase, Paragraph etc.)","(""Chunk"", ""Both are classes that can be used to specify fonts for text objects."", ""Phrase""); (""Chunk"", ""Both are classes that can be used to specify fonts for text objects."", ""Paragraph"")"
The com.itextpdf.text.Image is used to add images to IText PDF documents.,NULL
You set the absolute position of an image using the setAbsolutePosition() method.,NULL
"If you already have a finished PDF, and just want to add a header, footer or watermark to it, IText provides the com.itextpdf.pdf.PdfStamper class.",NULL
You can set the alignment of the paragraph using the setAlignment() method.,NULL
"You can write text as superscript or subscript using the Chunk class, and it's setTextRise() method.",NULL
You can add tables to a PDF document using the com.itextpdf.text.PdfPTable class in IText.,NULL
"To add cells to the table you call the addCell() method, passing PdfPCell instances, or other IText objects like Paragraph etc.","(""addCell"", ""The addCell() method is used to add PdfPCell instances to the table."", ""PdfPCell"")"
"You can set the column widths using the setWidths() method, like this:",NULL
"If you need a cell to span multiple columns you can do so using the setColspan() method, like this:",NULL
"In text mode the settings of the added element (Phrase, Paragraph etc.)",NULL
Content added via the PdfCell.addElement() method is considered composite mode content.,NULL
"You can set the default cell settings of new cells added, using the table.addCell() methods, like this:",NULL
The method setIndent() sets the indentation of the first paragraph in the cell.,NULL
The method setFollowingIndent() sets the indentation of the following paragraphs in the cell.,NULL
The method setRightIndent() sets the right indentation of the cell content.,NULL
"If the cell is in composite mode, just set the leading on the element added, e.g.","(""Cell"", ""The cell operates in composite mode, indicating a specific state or behavior of the cell."", ""CompositeMode"")"
The second method call sets the leading to 0 points + 1.5 x font height.,"(""Method Call"", ""The method call sets the leading value."", ""Leading"")"
"You can set the rotation of the cell content using the setRotation() method, like this:",NULL
"You can add underline and strikethrough text using the Chunk class, and its setUnderline() method.",NULL
Quite often Java applications keep objects in data structures that contain java.util.ArrayList instances.,NULL
This tutorial will also look at the performance of the OpenArrayList class - a class that mimics the java.util.ArrayList but designed with performance in mind.,NULL
Each element is obtained from the ArrayList instance using the get() method.,NULL
The third way to iterate an ArrayList is to use an java.util.Iterator obtained from the ArrayList.,"(""ArrayList"", ""An Iterator can be obtained from an ArrayList for iteration purposes."", ""Iterator"")"
The benchmarks were executed using JDK 1.8.0_u60 on a Intel Core i7-4770 Haswell server which was doing nothing but the benchmarks.,"(""JDK"", ""The benchmarks were executed using JDK 1.8.0_u60."", ""benchmarks""); (""Intel Core i7-4770"", ""The benchmarks were executed on an Intel Core i7-4770 Haswell server."", ""benchmarks"")"
"You can also see that iterating an ArrayList using a standard Java for loop with a counter, and obtaining each element by calling the ArrayList get() method is about 10% faster for an ArrayList with 10 elements, and around 12,5% faster when the ArrayList contains 100 elements.",NULL
The OpenArrayList class is a very simple imitation of the ArrayList which I have implemented to see if it could iterate a collection of elements faster than an ArrayList .,NULL
"This should be a tiny bit faster than calling the ArrayList get() method, although the JVM could optimize the get() method call away.",NULL
Another advantage of making the elements array public is that you can write to it or copy from it using System.arraycopy() which is very fast.,"(""System"", ""System is a class that contains the method System.arraycopy()"", ""System.arraycopy"")"
The fact that the performance is so close is probably a sign that the JVM has optimized the get() call away.,NULL
"As you can see, the readMyData() method returns a MyData object.",NULL
What is worth noting about this read pattern is that every time you call the readMyData() method a new MyData object is returned.,NULL
If the readMyData() method is called frequently that will lead to a lot of MyData objects being created.,NULL
Here is how the earlier readMyData() method would look using the read-into-existing pattern:,NULL
"It is now up to the caller of the readMyData() method to decide if an existing MyData instance should be reused, or if a new instance should be created.",NULL
Reusing an object also means that the chance the object is located in the CPU cache is much higher than when you create a new object for each call to the readMyData() method.,NULL
To change the previous example code to read data directly from the underlying source we need to change the implementation of the MyData class:,NULL
"To use the MyData class in its new variation, you will use code like this:",NULL
Just call setSource() when you need to read data out of a new byte array.,NULL
"Third, only if you actually call both getVal1() and getVal2() will the corresponding data be read out of the underlying byte array.",NULL
"Assuming that each MyData object consists of 2 bytes from the underlying source, here is how the MyData class would look with a navigation method added:",NULL
The first change is the that the setSource() method now takes an extra parameter called offset.,NULL
The second change is that the getVal1() and getVal2() methods now use the value of the internal offset variable as index into the source array when reading values out.,"(""getVal1"", ""getVal1 method uses the value of the internal offset variable."", ""offset""); (""getVal2"", ""getVal2 method uses the value of the internal offset variable."", ""offset""); (""getVal1"", ""getVal1 method reads values from the source array using the offset variable."", ""source array"")"
"The next() method increments the internal offset variable by 2, so that the offset variable points to the next record in the array.","(""next"", ""The next() method modifies the offset variable by incrementing it."", ""offset"")"
The fourth change is the addition of the hasNext() method which returns true if the source byte array has more records (bytes) in it.,NULL
"As you can see, using the MyData class in the navigator pattern implementation is pretty straightforward.",NULL
"Additionally, if your server works on many tasks at the same time (e.g incoming HTTP requests), the other CPUs in your server may already be busy working on their own tasks.",NULL
"My own experiences come from from a mix of Java performance experiments, as well as the design and development of VStack.co - a fully hosted application backend which I have cofounded with WorpCloud Ltd.",NULL
"The Java ArrayList class only works for objects - not for primitive types (byte, int, long etc).","(""Java ArrayList"", ""The Java ArrayList class does not support primitive types, including byte."", ""byte""); (""Java ArrayList"", ""The Java ArrayList class does not support primitive types, including int."", ""int"")"
The code consist of 3 Java classes and 2 unit tests.,NULL
100.000 x 1MB = 100GB (approximately - not precisely - but you get the picture).,"(""100GB"", ""100GB is a result of multiplying 100.000 by 1MB."", ""1MB"")"
"Note, that in languages with built-in garbage collection (like Java, C# etc.)",NULL
Even at 4GB (1.000.000 x 4KB) modern servers should be able to handle it.,"(""4GB"", ""4GB is a measurement of memory capacity that can be represented in terms of the number of 4KB units."", ""1.000.000"")"
"Additionally, if you use a small block size, you may have to expand blocks more often than if you use e.g.",NULL
"To obtain a ResizableArray instance, call the ResizableArrayBuffer's getArray() method, like this:","(""ResizableArrayBuffer"", ""ResizableArrayBuffer has a method called getArray() that returns a ResizableArray instance."", ""getArray()"")"
The ResizableArray class in the GitHub repository only contains a single write() method which takes a ByteBuffer as parameter.,"(""ResizableArray"", ""The write method is a member of the ResizableArray class."", ""write"")"
"It should be pretty easy to add more write() methods yourself, though.",NULL
The value returned by write() is the number of bytes copied from the ByteBuffer.,NULL
"If the ResizableArray cannot contain all the data in the ByteBuffer after expanding itself to the max size, the write() method will return -1 and no data will have been copied at all!","(""ResizableArray"", ""ResizableArray is designed to hold data from ByteBuffer, indicating a relationship between the two classes."", ""ByteBuffer""); (""write()"", ""The write() method is associated with the ResizableArray class, as it is responsible for writing data to it."", ""ResizableArray"")"
"You do so simply by calling the free() method on the ResizableArray, like this:",NULL
"Calling free() takes care of returning the used block to the correct block queue, regardless of the size of the block allocated to the ResizableArray.",NULL
I have implemented batch mode put() and take() operations for both ring buffer implementations.,"(""BatchMode"", ""Batch mode operations are implemented using the put() method."", ""Put""); (""BatchMode"", ""Batch mode operations are implemented using the take() method."", ""Take""); (""Put"", ""The put() method is part of the ring buffer implementations."", ""RingBuffer"")"
My benchmarks showed that batch put() and take() operations provides up to 4 times the throughput of putting and taking a single element at a time.,"(""benchmarks"", ""Benchmarks are used to measure the performance of the put method."", ""put""); (""benchmarks"", ""Benchmarks are used to measure the performance of the take method."", ""take""); (""put"", ""The put method contributes to the throughput measurement."", ""throughput"")"
Here is an implementation of the ring buffer that uses a fill count including the batch put() and take() operations.,"(""RingBuffer"", ""The put method is an operation of the RingBuffer class that adds elements to the buffer."", ""put"")"
"Here is an implementation of the ring buffer that uses a read position and flip marker, including the batch put() and take() operations.","(""RingBuffer"", ""The put() method is an operation that is part of the RingBuffer class."", ""put"")"
"The JMH Maven archetype will generate a new Java project with a single, example benchmark Java class, and a Maven pom.xml file.","(""JMH Maven archetype"", ""The JMH Maven archetype generates a new Java project."", ""Java project""); (""Java project"", ""The Java project contains a single example benchmark Java class."", ""benchmark Java class"")"
The Maven pom.xml file contains the correct dependencies to compile and build your JMH microbenchmark suite.,"(""pom.xml"", ""The pom.xml file is a configuration file used by Maven to manage project dependencies."", ""Maven""); (""pom.xml"", ""The pom.xml file contains the correct dependencies required for the project."", ""dependencies"")"
"It is time to write your first JMH benchmark class, or at least see how it is done.",NULL
The generated MyBenchmark class is a JMH class template which you can use to implement your JMH benchmarks.,NULL
"You can either implement your benchmarks directly in the generated MyBenchmark class, or create a new class in the same Java package.",NULL
To make it easy for you to write your first JMH benchmark I will just use the generated class in this example.,NULL
You can put the code you want to measure inside the testMethod() method body.,NULL
"For now, just imagine that the testMethod() body actually contained a good benchmark implementation.",NULL
"When you build your JMH benchmarks, Maven will always generate a JAR file named benchmarks.jar in the target directory (Maven's standard output directory).","(""Maven"", ""Maven generates a JAR file named benchmarks.jar as part of the build process."", ""benchmarks.jar""); (""JMH"", ""JMH benchmarks are built using Maven."", ""Maven"")"
It contains your compiled benchmark classes as well as all JMH classes needed to run the benchmark.,NULL
"If your benchmarks has any external dependencies (JAR files from other projects needed to run your benchmarks), declare these dependencies inside the Maven pom.xml, and they will be included in the benchmarks.jar too.","(""Maven"", ""Maven is used to declare dependencies in the pom.xml file."", ""pom.xml"")"
"Since benchmarks.jar is fully self contained, you can copy that JAR file to another computer to run your JMH benchmarks on that computer.","(""benchmarks"", ""benchmarks.jar is a JAR file that contains the benchmarks."", ""JAR"")"
This means that you want the output shown using the time unit minutes (e.g.,NULL
"State variables are declared in special state classes, and an instance of that state class can then be provided as parameter to the benchmark method.","(""State Variables"", ""State variables are declared in special state classes."", ""State Class"")"
In this example I have added a nested static class named MyState.,NULL
Notice that the testMethod() benchmark method now takes an instance of MyState as parameter.,"(""testMethod"", ""testMethod is a benchmark method that takes an instance of MyState as a parameter."", ""MyState"")"
Notice also that the testMethod() body has now been changed to use the MyState object when performing its sum calculation.,NULL
Notice the two new methods in the MyState class named doSetup() and doTearDown().,"(""MyState"", ""doSetup is a method defined in the MyState class."", ""doSetup"")"
"If you have any doubts about when a setup or tear down method is called, try inserting a System.out.println() statement in the method.","(""setup"", ""The setup method can be monitored by inserting a System.out.println() statement to understand when it is called."", ""System.out.println"")"
"If your benchmark method is calculating multiple values that might end up being eliminated as dead code, you can either combine the two values into a single, and return that value (e.g.",NULL
Notice how the testMethod() benchmark method now takes a Blackhole object as parameter.,"(""testMethod"", ""testMethod is a benchmark method that takes a Blackhole object as parameter."", ""benchmark"")"
Notice also how the calculated sum in the sum variable is now passed to the consume() method of the Blackhole instance.,"(""Blackhole"", ""The consume() method is a method of the Blackhole class."", ""consume"")"
"If your benchmark method produces multiple results you can pass each of these results to a black hole, meaning calling consume() on the Blackhole instance for each value.","(""Benchmark"", ""The benchmark method produces results that can be passed to the Blackhole package."", ""Blackhole"")"
"The JVM could even continue and never call the testMethod() because it knows it always returns 3, and just inline the constant 3 wherever the testMethod() was to be called.","(""JVM"", ""The JVM optimizes performance by inlining the constant return value of the testMethod() instead of calling it."", ""testMethod"")"
Sometimes a lot of time is even spent just allocating and freeing memory (e.g.,NULL
"When you control object allocation, deallocation and reallocation you can make limits like e.g.","(""Object Allocation"", ""Object allocation is a method that involves managing the deallocation of objects."", ""Deallocation"")"
having a maximum of 10.000 messages in memory at a time.,NULL
"The batch size can thus vary from 1 to a maximum upper limit set by the system, e.g.",NULL
"To achieve lower latency, yet allowing for micro batching to happen, you can loop over the input channels (inbound network connections, directories etc.)","(""Input Channels"", ""Input channels include inbound network connections as part of their definition."", ""Inbound Network Connections"")"
Therefore it can be beneficial to batch up data sent outside a process to minimize the overhead per data block (e.g.,NULL
"Instead of traversing the whole data structure to serve just one ""request"" (task, message etc.)","(""Request"", ""A request can be considered a type of task that needs to be served."", ""Task"")"
Notice how two different DAO's were called from inside the control's execute() method.,"(""control"", ""The execute() method is called from inside the control class."", ""execute()"")"
"To make this happen you need to obtain a database connection (or equivalent object) inside the Control.execute() method, and pass this connection (or other object) to each DAO.","(""Control"", ""The execute method is a part of the Control class."", ""execute"")"
"Well, you could if you call a setConnection() method on them afterwards.",NULL
The DaoManager is a class that you put in between the Control and the DAO's.,"(""DaoManager"", ""DaoManager is a class that acts as an intermediary between Control and DAO's."", ""Control"")"
Once the DaoManager.executeAndClose() method finishes the database connection inside the DaoManager is closed.,"(""executeAndClose"", ""executeAndClose is a method of the DaoManager class that handles database connection operations."", ""DaoManager"")"
"As you can see from the code example in the previous section, the scope of the connection when managed by the DaoManager.executeAndClose() is the boundaries of the executeAndClose() method.",NULL
This could be the case in a desktop application if each control is registered independently as listeners on e.g.,NULL
It is the DaoManager's executeAndClose() method that demarcates the life span of the underlying connection.,NULL
"If you call this method from each control's execute() method (or whatever the central execution method in your controls is called), each control will open and close a connection separately.",NULL
The ScopingDataSource will be moved to Butterfly Persistence from around version 5.2.0 or 5.4.0 which will be released in 2009.,"(""ScopingDataSource"", ""ScopingDataSource will be moved to Butterfly Persistence."", ""Butterfly Persistence""); (""Butterfly Persistence"", ""Butterfly Persistence is associated with version 5.2.0 as it is the target package for the ScopingDataSource."", ""version 5.2.0"")"
The ScopingDataSource is an implementation of the standard Java interface javax.sql.DataSource.,NULL
"Once this method is called, whenever the tread that called this method calls the ScopingDataSource.getConnection() method, the same connection instance is returned.",NULL
"This ScopingConnection ignores all calls to the close() method, so the underlying connection can be reused.",NULL
"When you are ready to close the connection your control calls the ScopingDataSource.endConnectionScope(), and the currently open connection (if any) is closed.",NULL
"From here on the ScopingDataSource behaves just like a regular DataSource, returning a new Connection for every call to getConnection().","(""ScopingDataSource"", ""ScopingDataSource behaves like a regular DataSource"", ""DataSource"")"
"The calls to beginConnectionScope() and endConnectionScope() do not have to be located within the same method, nor within the same class.",NULL
"You can just extend the DBControlBase and override the doExecute() method, then all connection scoping is done for you.",NULL
"They can be called outside the Control.execute() method too, or inside a parent control.",NULL
"If your Control class implements an interface, you can implement a Dynamic Proxy which implements the same interface.","(""Control"", ""The Control class can implement a Dynamic Proxy that adheres to the same interface."", ""Dynamic Proxy"")"
"When the execute() method is called on the control interface, this dynamic proxy will call the beginConnectionScope(), then call your controls execute() method, and finally the endConnectionScope().","(""execute"", ""The execute() method is called on the control interface."", ""control interface""); (""dynamic proxy"", ""The dynamic proxy calls the beginConnectionScope() method."", ""beginConnectionScope""); (""control interface"", ""The control interface has an execute() method that is called."", ""execute"")"
The only difference is that you call beginTransactionScope() and endTransactionScope() instead.,NULL
"When a connection is obtained from the ScopingDataSource while inside a transaction scope, connection.setAutoCommit(false) is called.","(""ScopingDataSource"", ""ScopingDataSource is used to obtain a connection."", ""connection"")"
"If an exception is thrown before the endTransactionScope() method is called, you should catch that exception and call abortTransactionScope(Exception) with that exception.",NULL
The first problem you run into when designing DAO classes is connection scoping.,NULL
A naive implementation of a DAO class using JDBC to target a relational database might look like below (at least I have designed DAO's like this in the past).,"(""DAO"", ""DAO class is implemented using JDBC to interact with a relational database."", ""JDBC"")"
Notice how the readPerson() method opens its own connection and closes it again once it is done.,NULL
You might also be able to hide connection closing from the domain logic by adding a close() method to the DAO.,NULL
But somewhere in the domain logic you would have to call that close() method.,NULL
The method call daoFactory.beginConnectionScope() marks the beginning of a connection scope.,NULL
The method call daoFactory.endConnectionScope() ends the current connection scope and closes the connection associated with the scope.,"(""daoFactory"", ""daoFactory is the class that contains the method endConnectionScope."", ""endConnectionScope"")"
This way neither of the DAO's need to have close() methods.,NULL
The methods beginTransaction() and endTransaction() mark the beginning and end of the transaction.,NULL
The beginTransaction() method will call connection.setAutoCommit(false) for the connection associated with the transaction scope.,"(""beginTransaction"", ""The beginTransaction method is associated with the connection that it operates on."", ""connection""); (""setAutoCommit"", ""The setAutoCommit method is called on the connection to change its auto-commit behavior."", ""connection"")"
The endTransaction() method will attempt to commit the transaction and call setAutoCommit(false) again.,NULL
Notice the new method call in the catch-block of the transaction scope: daoFactory.abortTransaction(e).,"(""daoFactory"", ""daoFactory is the class that contains the method abortTransaction which is being called."", ""abortTransaction"")"
This method call rolls the transaction back if an exception is thrown from any of the dao methods or from endTransaction().,"(""Method Call"", ""The method call is responsible for rolling back the transaction in case of an exception."", ""Transaction""); (""Method Call"", ""The method call is triggered when an exception occurs."", ""Exception""); (""Method Call"", ""The method call interacts with endTransaction() to manage the transaction."", ""EndTransaction"")"
"The DAO layer usually consists of a smaller set of classes, than the number of domain logic classes that uses it.",NULL
"It is also a somewhat more controlled operation, since you can search for all DAO classes, and make sure they are changed to use the new persistence mechanism.",NULL
"To solve the problems mentioned earlier, you can move some of the code to a DaoManager class.",NULL
Notice that the getPersonDao() method isn't synchronized even though it returns a kind of singleton.,NULL
"Rather than implementing a close() method in the DaoManager class, a template method will be added called executeAndClose().",NULL
This instance then has it's execute() method invoked with the DaoManager itself as parameter.,NULL
Now the scope of the connection is marked by the scope of the method call executeAndClose().,NULL
"Any exception handling related to the connection.close() call can be hidden away inside the executeAndClose() method, and reused throughout the application.",NULL
You can add a transaction() method similar to the executeAndClose() method which takes care of transaction management.,NULL
"For instance, if both commit() and rollback() throws exceptions, both of these exception are not properly preserved or handled.",NULL
Using the transaction() method is analogous to using the executeAndClose() method:,NULL
This could be done by wrapping the call to transaction() inside the call to executeAndClose().,NULL
"As you can see a DaoManager class can solve the problems of marking both connection life span and transaction boundaries, and automatically open and close connections and commit / rollback transactions.","(""DaoManager"", ""The DaoManager class is responsible for managing connection life span and transaction boundaries."", ""connection"")"
"If you implement a base event listener class that all event listeners (or actions, or whatever your framework calls them) extend, you can put the DaoManager code in that class (or a subclass of the base class).",NULL
Here is an example of a subclass that executes the persistence code marked in bold in the first code box in this section:,NULL
Now your domain logic class only contains the persistence code that is actually interesting.,NULL
It may not always be possible or feasible to implement such a persistence action base class.,NULL
It would be tempting to put that validation code inside the doPersistenceAction() method.,NULL
"But remember, a connection has been opened already when the DaoManager is instantiated, which happens before the doPersistenceAction() method is called.",NULL
"Furthermore, if the validation fails and aborts the doPersistenceAction() method call, you have opened a connection without ever using it.",NULL
"If you are using a persistence API you will inject whatever class you obtain connections or their equivalents from (sessions in Hibernate, IDaos in Butterfly Persistence).","(""Persistence API"", ""The Persistence API is used to obtain connections from the Class."", ""Class""); (""Class"", ""The Class is used to obtain Sessions in Hibernate."", ""Sessions""); (""Class"", ""The Class is used to obtain IDaos in Butterfly Persistence."", ""IDaos""); (""Sessions"", ""Sessions are a part of the Hibernate package."", ""Hibernate"")"
"This is done to avoid obtaining the connection before the DaoCommand.execute() method is called, to postpone obtaining the connection as much as possible.",NULL
"Inside the DaoCommand.execute() method the getPersonDaoTx() will be called, and then getConnectionTx() will be called, and then connection.setAutoCommit(false) will be called at that time.","(""DaoCommand"", ""execute() is a method of the DaoCommand class."", ""execute""); (""execute"", ""getPersonDaoTx() is called within the execute() method."", ""getPersonDaoTx""); (""execute"", ""getConnectionTx() is called within the execute() method."", ""getConnectionTx"")"
"After this code is executed, you can now access the cookies in the cookieMap using the cookie names as keys (cookieMap.get(""cookieName"")).",NULL
"Second, it sets the expiration to 24 hours using the setMaxAge() method.",NULL
"Cookies are most often used to store user specific information, like e.g.",NULL
The browser includes the Accept-Encoding HTTP header in requests sent to an HTTP server (e.g.,"(""Browser"", ""The browser includes the Accept-Encoding HTTP header in requests sent to an HTTP server."", ""Accept-Encoding"")"
That class is mapped to a set of URL's in the web.xml file.,NULL
"It does so by using a GZIPOutputStream internally, which is a standard Java class.",NULL
Remember to replace the class name with the fully qualified name of your own GZip Servlet filter class.,NULL
"In general, If no header exists with the name passed to getHeader(), null is returned.",NULL
"NOTE: You will have to call this method before calling any getParameter() method, because calling the getParameter() method on an HTTP POST request will cause the servlet engine to parse the HTTP request body for parameters.",NULL
"For instance, you can access context parameters set in the web.xml file, you can forward the request to other servlets, and you can store application wide parameters in the ServletContext too.","(""web.xml"", ""web.xml is a configuration file that can be used to set context parameters accessible in the ServletContext."", ""ServletContext"")"
In order to write binary data back to the browser you cannot use the Writer obtained from response.getWriter().,NULL
Instead you have to use the OutputStream obtained from the response.getOutputStream() method.,"(""getOutputStream"", ""The getOutputStream method returns an instance of the OutputStream class."", ""OutputStream"")"
The javax.servlet.http.HttpServlet class is a slightly more advanced base class than the GenericServlet shown in the Simple Servlet example.,"(""HttpServlet"", ""HttpServlet is a more advanced base class than GenericServlet."", ""GenericServlet"")"
"The HttpServlet class reads the HTTP request, and determines if the request is an HTTP GET, POST, PUT, DELETE, HEAD etc.",NULL
"HTTP GET requests only, you will extend the HttpServlet class, and override the doGet() method only.",NULL
"The HttpServlet class has methods you can override for each HTTP method (GET, POST etc.).","(""HttpServlet"", ""HttpServlet class has methods that can be overridden for HTTP methods including GET."", ""GET"")"
A Java Servlet is just an ordinary Java class which implements the interface,NULL
The easiest way to implement this interface is to extend either the class GenericServlet or HttpServlet.,NULL
"When an HTTP request arrives at the web server, targeted for your Servlet, the web server calls your Servlet's service() method.","(""web server"", ""The web server calls the Servlet's service() method when an HTTP request arrives."", ""Servlet"")"
"The service() method then reads the request, and generates a response which is sent back to the client (e.g.",NULL
"You will need to run your Java Servlets inside a Servlet compatible ""Servlet Container"" (e.g.",NULL
"The RequestDispatcher class enables your servlet to ""call"" another servlet from inside another servlet.",NULL
The above code obtains a RequestDispatcher targeted at whatever Servlet (or JSP) that is mapped to the URL /anotherUrl.simple.,"(""RequestDispatcher"", ""RequestDispatcher is targeted at the Servlet mapped to the specified URL."", ""Servlet""); (""RequestDispatcher"", ""RequestDispatcher is targeted at the JSP mapped to the specified URL."", ""JSP""); (""Servlet"", ""Servlet is mapped to the URL anotherUrl.simple."", ""anotherUrl.simple"")"
You can call the RequestDispatcher using either its include() or forward() method:,"(""RequestDispatcher"", ""The include() method is a method that can be called on the RequestDispatcher class."", ""include"")"
By calling either the include() or forward() method the servlet container activates whatever Servlet is mapped to the URL the RequestDispatcher.,"(""RequestDispatcher"", ""The include() method is used to activate a Servlet mapped to a URL through the RequestDispatcher."", ""include"")"
There is a little difference between calling the forward() and include() method.,NULL
"The forward() method intended for use in forwarding the request, meaning after the response of the calling servlet has been committed.","(""forward"", ""The forward() method is intended for use in forwarding the request."", ""request""); (""forward"", ""The forward() method is related to the response of the calling servlet after the request has been processed."", ""response"")"
"The include() method merges the response written by the calling servlet, and the activated servlet.",NULL
"This way you can achieve ""server side includes"" using the include().",NULL
The red boxes represent state (variables) that your servlet's service() method should be careful about accessing.,NULL
"Of course it is not only the member variables and static variables inside the servlet class itself, that you need to be careful about accessing.",NULL
"Static variables in any other class which are accessed by your servlet, must also be thread safe.",NULL
In order to create a servlet filter you must implement the javax.servlet.Filter interface.,NULL
"When the servlet filter is loaded the first time, its init() method is called, just like with servlets.","(""ServletFilter"", ""The init() method is called when the ServletFilter is loaded for the first time."", ""init"")"
"Notice how the doFilter() method checks a request parameter, myParam, to see if it equals the string ""blockTheRequest"".","(""doFilter"", ""doFilter() method checks the request parameter myParam"", ""myParam"")"
"If not, the request is forwarded to the target of the request, by calling the filterChain.doFilter() method.",NULL
"You need to configure the servlet filter in the web.xml file of your web application, before it works.","(""ServletFilter"", ""The servlet filter is configured in the web.xml file of the web application."", ""web.xml"")"
With this configuration all requests with URL's ending in .simple will be intercepted by the servlet filter.,NULL
Before a servlet can be invoked the servlet container must first load its class definition.,NULL
"When the servlet class is loaded, the servlet container creates an instance of the servlet.",NULL
"When a servlet instance is created, its init() method is invoked.",NULL
The init() method allows a servlet to initialize itself before the first request is processed.,NULL
You can specify init parameters to the servlet in the web.xml file.,NULL
"For every request received to the servlet, the servlets service() method is called.",NULL
"As long as the servlet is active in the servlet container, the service() method can be called.","(""Service"", ""The service() method is a function that can be called on the Servlet class."", ""Servlet"")"
"When a servlet is unloaded by the servlet container, its destroy() method is called.","(""Servlet"", ""The destroy() method is called when a servlet is unloaded by the servlet container."", ""destroy()"")"
"Once the servlet has been activated via the service() method, the servlet processes the request, and generates a response.",NULL
This is done in the web.xml file of your Java web application.,NULL
"To configure a servlet in the web.xml file, you write this:",NULL
"Here you give the servlet a name, and writes the class name of the servlet.",NULL
"In the above example, all URL's ending in .html are sent to the servlet.",NULL
You can pass parameters to a servlet from the web.xml file.,NULL
Here is how you read the init parameters from inside your servlet - in the servlets init() method:,NULL
A servlets init() method is called when the servlet container loads the servlet for the first time.,"(""init()"", ""The init() method is a part of the Servlets class and is called during the servlet's lifecycle."", ""Servlets"")"
"No one can access the servlet until the servlet has been loaded, and the init() method has been called successfully.",NULL
"Remember, the servlets init() method is called when the servlet is loaded.",NULL
Here is how you access the parameter from inside an HttpServlet subclass:,NULL
In this text I will show you a simple unit test implemented using JUnit 4.8.1.,NULL
First I will show you the class I want to test:,NULL
I have kept the class very simple to make it eaiser to understand what is going on.,NULL
To test this class I need a unit test that test each of its public methods.,"(""Class"", ""The unit test is designed to test the functionality of the class."" "", ""Unit Test"")"
"The class only has one public method, concatenate(), so all I need to test is this method.",NULL
Each test method usually tests a single method of the target class.,NULL
"Sometimes, a test method can test more than one method in the target class, and sometimes, if the method to test is big, you split the test into multiple test methods.","(""TestMethod"", ""A test method can test methods in the target class."", ""TargetClass"")"
Here is the JUnit unit test that test that the concatenate() method:,NULL
"The unit test class is an ordinary class, with one method, testConcatenate().",NULL
In this method we compare the output of the called method (concatenate()) with the expected output.,NULL
"In other words, we compare ""onetwo"" (expected output) with the value returned by the concatenate() method, which is kept in the variable result.",NULL
"The assertEquals() method is a statically imported method, which normally resides in the org.junit.Assert class.","(""assertEquals"", ""The assertEquals() method is a method that resides in the org.junit.Assert class."", ""Assert"")"
Notice the static import of this class at the top of MyUnitTest.,NULL
Using the static import of the method is shorter than writing Assert.assertEquals().,NULL
You can have as many test methods in a unit test class as you want.,NULL
This is how simple a unit test can be with JUnit 4.8.2 .,NULL
"As you may have figured out from the simple test, most of the secret of implementing JUnit unit tests, is in the use of the assert methods in the class org.junit.Assert.","(""JUnit"", ""JUnit is a testing framework that uses the Assert class for assertions."", ""Assert""); (""Assert"", ""Assert is part of the org.junit package."", ""org.junit"")"
In this text I will take a closer look at what assert methods are available in this class.,NULL
"The code for this class is not shown, but you don't really need the code in order to understand how to test it.",NULL
The assertArrayEquals() method will test whether two arrays are equal to each other.,NULL
"To check for element equality, the elements in the array are compared using their equals() method.",NULL
"More specifically, the elements of each array are compared one by one using their equals() method.",NULL
"Second the myUnit.getTheStringArray() method is called, which is the method we want to test.",NULL
"Third, the result of the myUnit.getTheStringArray() method call is compared to the expected array.","(""myUnit"", ""myUnit is the class that contains the method getTheStringArray."", ""getTheStringArray"")"
"If the arrays are equal, the assertArrayEquals() will proceed without errors.",NULL
"The assertEquals() method compares two objects for equality, using their equals() method.",NULL
"First the myUnit.concatenate() method is called, and the result is stored in the variable result.","(""myUnit"", ""myUnit is the class that contains the concatenate method."", ""concatenate"")"
"Second, the result value is compared to the expected value ""onetwo"", using the assertEquals() method.","(""result value"", ""The result value is compared to the expected value."", ""expected value"")"
"If the two objects are equal according to their implementation of their equals() method, the assertEquals() method will return normally.",NULL
"Otherwise the assertEquals() method will throw an exception, and the test will stop there.",NULL
"This example compared to String objects, but the assertEquals() method can compare any two objects to each other.",NULL
The assertEquals() method also come in versions which compare primitive types like int and float to each other.,"(""AssertEquals"", ""The assertEquals() method can compare the primitive type int."", ""Int"")"
"The assertTrue() and assertFalse() methods tests a single variable to see if its value is either true, or false.",NULL
"As you can see, the method call to myUnit.getTheBollean() is inlined inside the assertTrue() assertFalse() calls.","(""myUnit"", ""myUnit is the class that contains the method getTheBollean()"", ""getTheBollean""); (""getTheBollean"", ""getTheBollean() is called inside assertTrue()"", ""assertTrue"")"
"If the getTheBoolean() method returns true, the assertTrue() method will return normally.",NULL
"If the getTheBoolean() method returns false, the assertFalse() method will return normally.",NULL
"Of course the above test will fail in either the assertTrue() or assertFalse() call, if the getTheBoolean() method returns the same value in both calls.","(""getTheBoolean"", ""The getTheBoolean method is being tested by the assertTrue method to check if it returns true."", ""assertTrue"")"
The assertNull() and assertNotNull() methods test a single variable to see if it is null or not null.,"(""AssertNull"", ""AssertNull method tests if the variable is null."", ""Variable"")"
The call to myUnit.getTheObject() is inlined in the assertNull() and assertNotNull() calls.,"(""myUnit"", ""myUnit is the class that contains the method getTheObject."", ""getTheObject""); (""getTheObject"", ""getTheObject is called within the assertNull method."", ""assertNull"")"
"If the myUnit.getTheObject() returns null, the assertNull() method will return normally.","(""myUnit"", ""myUnit is the class that contains the method getTheObject."", ""getTheObject"")"
"If a non-null value is returned, the assertNull() method will throw an exception, and the test will be aborted here.",NULL
"The assertNotNull() method works oppositely of the assertNull() method, throwing an exception if a null value is passed to it, and returning normally if a non-null value is passed to it.",NULL
The assertSame() and assertNotSame() methods tests if two object references point to the same object or not.,NULL
It is not enough that the two objects pointed to are equals according to their equals() methods.,NULL
The calls to myUnit.getTheSameObject() are inlined into the assertSame() and assertNotSame() method calls.,"(""getTheSameObject"", ""getTheSameObject() is called within the assertSame() method"", ""assertSame"")"
"If the two references points to the same object, the assertSame() method will return normally.",NULL
"If the two objects do not poin to the same object, the assertNotSame() method will return normally.",NULL
The assertThat() method compares an object to an org.hamcrest.Matcher to see if the given object matches whatever the Matcher requires it to match.,NULL
"If you are testing a component that uses a database, e.g.",NULL
"a DAO class, you may want to test that the component really inserts data into the database, updates it etc.",NULL
It is just a standard Java class - nothing secret about it.,NULL
"Exactly what methods you will put in your own TestData class, depends on the data used by your application.",NULL
"Also, you may want some of the methods to take parameters, rather than e.g.",NULL
"Once you have such a TestData class, you can use and reuse it in your unit tests.",NULL
"The TestData class can contain all kinds of business wise complex test data setups, which are then easy to setup in the database, once they have been programmed once.",NULL
"Below is a diagram illustrating a unit test, a unit (which is being tested), and a dependency which is some class used by the unit.","(""UnitTest"", ""UnitTest is designed to test the functionality of the Unit."", ""Unit""); (""Unit"", ""The Unit relies on the Dependency for its functionality."", ""Dependency"")"
"If a method or field is private, only instances of that class can access that method or field.","(""Method"", ""Only instances of the class can access the method if it is private."", ""Class"")"
"A protected method or field, on the other hand, is also accessible to other classes in the same package, and for subclasses of the unit too.","(""Method"", ""A protected method is accessible to other classes in the same package."", ""Class""); (""Field"", ""A protected field is accessible to other classes in the same package."", ""Class""); (""Method"", ""A protected method is accessible to subclasses of the unit in the same package."", ""Package"")"
"By encapsulating calls to external dependencies (components) in protected methods, you can create a subclass mock of the unit to test, and override these protected methods, to make them record information about whether they were called or not.","(""Protected Methods"", ""Protected methods encapsulate calls to external dependencies."", ""External Dependencies"")"
"By ""boundary class"" I mean classes that plug into some framework.",NULL
You may need the whole framework running in order to test your boundary class.,NULL
"Examples of boundary classes are Servlets, Struts actions, custom Swing components, EJB's etc.",NULL
Each of these boundary classes need a larger framework or server running in order to test them.,"(""Boundary Classes"", ""Boundary classes require a larger framework to function."", ""Framework"")"
"A way to get around that is to move the business logic out of the boundary class, and into it's own component.","(""BoundaryClass"", ""Business logic is moved out of the boundary class."", ""BusinessLogic"")"
Make sure that the business logic component does not know anything about the boundary classes.,NULL
"For instance, if your boundary class is a servlet, your business logic class should not know anything about the HttpRequest or HttpResponse interfaces.","(""BoundaryClass"", ""The Boundary Class is represented as a servlet in this context."", ""Servlet""); (""BusinessLogicClass"", ""The Business Logic Class should not have knowledge of the HttpRequest interface."", ""HttpRequest"")"
"Preferably, the business logic class only takes the parameters it needs, as the types it needs.",NULL
"When your business logic class is separated from the boundary class, you can test the business logic class separately.",NULL
"When the boundary classes are minimized to dispatch logic, the risk of errors in them are a lot smaller, in case you choose not to unit test them.",NULL
"For an example of this, see the Servlet Unit Testing text, in which I show how to unit test the business logic of a servlet, by moving the business logic to a separate class.","(""Servlet Unit Testing"", ""The Servlet Unit Testing package demonstrates how to unit test the business logic of a servlet."", ""business logic"")"
In this text I will give a few suggestions to how you can test such classes.,NULL
Let's look at how to write a unit test for this class.,NULL
The ByteArrayInputStream is then used as input into the MyIOUnitTest.read() method.,"(""ByteArrayInputStream"", ""ByteArrayInputStream is used as input into the read method."", ""read"")"
Here is the unit test which uses a ByteArrayOutputStream to collect the data written to the OutputStream passed to the MyIOUnit.write() method:,"(""ByteArrayOutputStream"", ""ByteArrayOutputStream is used in the context of the MyIOUnit class to collect data written to an OutputStream."", ""MyIOUnit"")"
"Notice how the output.toByteArray() method is called, and passed into a String.","(""Output"", ""The toByteArray method is called on the Output class."", ""toByteArray"")"
"If your input or output component uses a Reader or Writer instead of an InputStream or OutputStream, you can use the classes CharArrayReader and CharArrayWriter instead of ByteArrayInputStream and ByteArrayOutputStream.","(""CharArrayReader"", ""CharArrayReader is an alternative to ByteArrayInputStream for input components."", ""ByteArrayInputStream"")"
You may also be able to use the StringReader and StringWriter classes in your unit tests.,NULL
"Unit testing means testing the smaller units of your application, like classes and methods.","(""Unit Testing"", ""Unit testing involves testing classes as smaller units of the application."", ""Classes"")"
"JUnit 4.8.2 ships with Hamcrest internally, so you don't have to download it, and add it yourself.",NULL
"Matchers are used with the org.junit.Assert.assertThat() method, which looks like this:","(""Matchers"", ""Matchers are used with the assertThat() method."", ""assertThat"")"
"The assertThat() method just takes care of the ""plumming"" - meaning calling the Matcher with the given object.",NULL
"In the example above, the org.hamcrest.CoreMatchers.is() method is used to create a Matcher.","(""is"", ""is is a method of the CoreMatchers class"", ""CoreMatchers"")"
"The Matcher returned by is() returns true, if the two values compared are equal, and false if not.","(""is"", ""is() is a method that returns a Matcher object."", ""Matcher""); (""true"", ""is() returns true if the values are equal."", ""is"")"
"The is() method returns one matcher, and the not() method returns another.",NULL
The matcher returned by not() negates the matcher output of the matcher given as input.,NULL
"In this case, it is the output of the matcher returned by the is() method, that is negated.",NULL
You can write your own matchers and plug into the assertThat() method.,NULL
The static method matches() creates a new matcher and returns it.,NULL
You just embed the call to the static method matches() inside the assertThat() method.,NULL
In several situations mock testing is easier than testing with the real collaborators of a class.,NULL
When testing a DAO you may use a mock java.sql.Connection and java.sql.ResultSet object with the DAO to check that the DAO makes the correct JDBC calls.,"(""DAO"", ""The DAO uses the java.sql.Connection object to perform database operations."", ""java.sql.Connection""); (""DAO"", ""The DAO interacts with the java.sql.ResultSet object to retrieve data from the database."", ""java.sql.ResultSet"")"
It is not visible from the value returned by the DAO if it remembered to call ResultSet.close() and Connection.close() before returning.,"(""DAO"", ""DAO is responsible for managing the ResultSet, which is a data structure used to hold the results of a database query."", ""ResultSet"")"
The above situation was exactly the case for the GenericDao class in Mr. Persister.,NULL
Ideally the JDBC driver would detect that when calling the PreparedStatement.executeUpdate() method.,NULL
Therefore we decided to compare the PreparedStatement.getParameterMetaData().getParameterCount() with parameters.length before calling PreparedStatement.executeUpdate().,"(""PreparedStatement"", ""PreparedStatement is a class that contains the method getParameterMetaData() which retrieves metadata about the parameters of the PreparedStatement."", ""getParameterMetaData""); (""getParameterMetaData"", ""The method getParameterMetaData() returns an object that allows access to the method getParameterCount(), which retrieves the number of parameters."", ""getParameterCount"")"
"This works with the HSQLDB driver, but the MySQL driver haven't implemented the PreparedStatement.getParameterMetaData() method.","(""HSQLDB"", ""HSQLDB driver works with the PreparedStatement class."", ""PreparedStatement""); (""MySQL"", ""MySQL driver has not implemented the PreparedStatement class method getParameterMetaData()."", ""PreparedStatement"")"
Fortunately the MySQL driver does throw an exception if the ?-signs and the parameters set doesn't match when calling PreparedStatement.executeUpdate().,"(""MySQL Driver"", ""The MySQL Driver is related to PreparedStatement as it is the driver that interacts with the PreparedStatement class for executing SQL statements."", ""PreparedStatement"")"
"In the classpath element I add the output locations of my project code, and test code.","(""Classpath"", ""Classpath is used to define the output locations for the project code and test code."", ""Output Locations""); (""Output Locations"", ""Output Locations are associated with the Project Code as they specify where the project code is located."", ""Project Code"")"
In the test element I declare which unit test class to execute.,NULL
The classpath stuff is the same as in the first example.,NULL
"In this example I execute all files that has the text ""Test"" and "".java"" in their file name, regardless of what directory they are located in, recursively.",NULL
"What I usually do instead, is to ""move the code out of the boundary class"", as I have described in the text Design for Testability.",NULL
"Basically, I would try to push the main business logic in the servlet into a separate class which has no dependencies on the Servlet API's, if possible.","(""Business Logic"", ""The business logic is being pushed from the servlet into a separate class."", ""Servlet"")"
"So, I will take the concatenation logic and move into a separate class, which can be tested independent from the MyServlet class.",NULL
Notice how the concatenation logic has been moved to a class called MyConcatenator.,NULL
Notice how the concatenate() method only refers to a string array.,NULL
Notice again how it was not necessary to reference any servlet classes or interfaces in this unit test.,NULL
By real objects I mean the objects the tested unit (class) will be using in the real application.,NULL
"If you have a class Calculator, that needs a dao (Data Access Object) object to load the data it needs from a database, then the dao object is a ""real object"".","(""Calculator"", ""Calculator needs a dao object to load data from a database."", ""dao""); (""dao"", ""dao is a type of Data Access Object."", ""Data Access Object"")"
In order to test the Calculator class you will have to provide it with a dao object that has a valid connection to the database.,"(""Calculator"", ""The Calculator class requires a dao object to function properly."", ""dao"")"
Instead you can provide the Calculator instance with a fake dao class which just returns the data you need for the test.,NULL
The fake dao class will not actually read the data from the database.,NULL
A replacement for a real object which makes it easier to test the Calculator class.,NULL
Nor can you see if the connection.close() method was called before returning the value.,NULL
"If you add a String ""myReturnValue"" as return value to the stub and then call connection.prepareStatement(""select * from houses"") which returns a PreparedStatement, you will get an exception.","(""myReturnValue"", ""myReturnValue is used as a return value in the prepareStatement method."", ""prepareStatement""); (""connection"", ""connection calls the prepareStatement method."", ""prepareStatement""); (""prepareStatement"", ""prepareStatement returns a PreparedStatement object."", ""PreparedStatement"")"
"The String return value cannot be returned from the connection.prepareStatement(""...""); You will have to make sure yourself that the return values and called methods on the stub match.","(""String"", ""String is a class that may be used in conjunction with connection for return values."", ""connection""); (""connection"", ""connection has a method prepareStatement that is called to prepare SQL statements."", ""prepareStatement""); (""prepareStatement"", ""prepareStatement returns values that need to be handled."", ""return values"")"
If the connection.close() method has not been called a java.lang.AssertionError is thrown.,"(""connection"", ""The close method is a method of the connection entity."", ""close"")"
You just provide the real collaborator to the MockFactory instead of an interface (class object).,NULL
You can even turn the proxyConnection into a stub temporarily by adding a return value to the proxy via the mock.addReturnValue(...).,NULL
"Subclass mock objects is a mock object that is created by subclassing the class you want to test, and overriding some of its methods.","(""Subclass"", ""Subclass mock objects are a type of mock object created by subclassing the class you want to test."", ""MockObject"")"
The class MyUnit is the class I am trying to unit test.,NULL
"In this unit test, I want to check if the MyUnit class calls the MyDependency class correctly.",NULL
"The first thing to do is to refactory the MyUnit class, so that all calls to the MyDependency class are encapsulated in their own methods.",NULL
"Notice how the two calls to MyDependency.callOne() and MyDependency.callTwo() are now encapsulated in two protected methods, callOne() and callTwo().",NULL
The second step is to create a subclass mock of the MyUnit class.,NULL
Here is a unit test method that uses the MyUnitMock class:,NULL
"Third, assertions are made about whether the callOne() and callTwo() method were invoked.",NULL
"As you can see, it is possible to test almost all of a class by using subclass mocks, as described above.",NULL
"There are, however, situations where it works better to use a completely separate mock dependency object with the original class instead.",NULL
"If the throwIllegalArgumentException() method returns normall, then this fail() call is executed, causing the test to fail.",NULL
"Correspondingly, if the throwIllegalArgumentException() method throws the expected IllegalArgumentException, it is caught in the catch-clause, and ignored.",NULL
"Instead you want users trying to access your web app to see a nice ""This web app is down for maintenance..."" page.",NULL
"A ""This web app is down for maintenance..."" page lets them know that the down time is controlled and expected.",NULL
Here is how the web.xml configuration looks for such a setup:,NULL
"For instance, imagine that a user sends a request that takes 1 minute to process (e.g.",NULL
"I've posted the full solution including the servlet filter Java code, the web.xml configuration, the maintenance message page and the maintenance GUI page, for your convenience below.","(""ServletFilter"", ""The ServletFilter is likely configured in the web.xml file for servlet management."", ""WebXML"")"
"Apparently the field name ""comment"" caused the text (""Comment..."") in the textarea not to show up in Firefox... weird, right...?!",NULL
"In order to get a Java web server or servlet container to run your Java web application, you need to package the resources inside it (servlets, JSP's etc.)","(""Java Web Server"", ""Both are types of environments that can run Java web applications."", ""Servlet Container""); (""Java Web Application"", ""Resources are packaged inside the Java web application."", ""Resources""); (""Java Web Application"", ""Servlets are a type of resource used in Java web applications."", ""Servlets"")"
... then the index.jsp page will be accessible at the URL,NULL
"For instance, if you create a subdirectory called layout, and put a file inside it called theLayout.jsp, then you could access that file from the outside, via this URL:",NULL
"Inside the WEB-INF directory there are two important directories (classes and lib, and one important file (web.xml).",NULL
"The web.xml file contains information about the web application, which is used by the Java web server / servlet container in order to properly deploy and execute the web application.","(""web.xml"", ""The web.xml file contains information about the web application."", ""web application""); (""Java"", ""The web application is used by the Java web server / servlet container."", ""web application"")"
"For instance, the web.xml contains information about which servlets a web application should deploy, and what URL's they should be mapped to.","(""web.xml"", ""web.xml contains information about which servlets a web application should deploy."", ""servlets""); (""web application"", ""servlets are part of the web application that should be deployed."", ""servlets"")"
I will not get into more detail about the web.xml file here.,NULL
The classes directory contains all compiled Java classes that are part of your web application.,NULL
"The classes should be located in a directory structure matching their package structure, just like if you were to run them directly from the commandline, or package them in a JAR file.",NULL
"You could, however, also put your own classes into a JAR file, and locate it here, rather than putting those classes in the classes directory.",NULL
Perl or C. A Servlet is an ordinary Java class that implements a special Servlet interface.,"(""Servlet"", ""Servlet is an ordinary Java class that implements a special Servlet interface."", ""Java"")"
"Here is a small servlet and JSP example to better illustrate the difference: public void service(ServletRequest request, ServletResponse response){ PrintWriter writer = ((HttpServletResponse) response)).getWriter(); writer.write(""<html>""); writer.write(""<body>""); writer.write(""<table>""); for(int i=0; i<10; i++){ writer.write(""<tr><td>""); writer.write("""" + i); writer.write(""</td></tr>""); } writer.write(""</table>""); writer.write(""</body>""); writer.write(""</html>""); } <html> <body> <table> <% for(int i=0; i<10; i++){ %><tr><td><%=i%></td></tr><% } %> </table> </body> </html> As you can see, the JSP example is much shorter than the Servlet example, and it is much easier to get an overview of the HTML.","(""service"", ""The service method processes requests and takes ServletRequest as a parameter."", ""ServletRequest""); (""service"", ""The service method processes responses and takes ServletResponse as a parameter."", ""ServletResponse""); (""HttpServletResponse"", ""HttpServletResponse is cast to obtain a PrintWriter for writing the response."", ""PrintWriter"")"
This is illustrated below: component.control --> component.control --> component.control --> component.control --> component.control component.view --> component.view --> component.view --> component.view --> component.view First all components in the hierarchy executes their control logic (domain logic).,NULL
A Servlet is an ordinary Java class that implements a special Servlet interface.,"(""Servlet"", ""Servlet is a Java class that implements a special Servlet interface."", ""Java"")"
JCTools is an open source toolkit and is released under the Apache License 2.0.,NULL
"A Fat JAR is a single JAR file that contains all the compiled Java classes from your project, and all compiled Java classes from all JAR files your project depends on (see Maven Dependencies).","(""Fat JAR"", ""A Fat JAR contains all the compiled Java classes from your project."", ""Java classes"")"
"Fat JARs are handy when you need to build an executable JAR file, e.g.",NULL
"This makes execution much easier, because you don't have to list all the JAR files your microservice depends on, on the classpath.",NULL
"When you execute Maven package phase with the maven-assembly-plugin configuration shown earlier, Maven will output a Fat JAR in the target directory, into which Maven outputs all of its other build products (e.g.","(""Maven"", ""Maven uses the maven-assembly-plugin to configure the package phase."", ""maven-assembly-plugin""); (""maven-assembly-plugin"", ""The maven-assembly-plugin is used to create a Fat JAR during the package phase."", ""Fat JAR"")"
"The list contains more than 1.300 Maven archetypes, so it is not really that easy to find the archetype you need.",NULL
"Too look at the list of available Maven archetypes, you can pipe the output into a file, and open that file in e.g.",NULL
"Keep in mind, that when you execute the clean goal of Maven, the target directory is removed, meaning you lose all compiled classes from previous builds.","(""Maven"", ""Maven executes the clean goal which affects the target directory."", ""target"")"
"That means, that Maven will have to build all of your project again from scratch, rather than being able to just compile the classes that were changed since last build.","(""Maven"", ""Maven is responsible for building the project from scratch."", ""project"")"
"However, sometimes it can be nice to have a clean, fresh build, e.g.",NULL
The pom.xml file is the Maven POM file (Project Object Model).,"(""pom.xml"", ""The pom.xml file is associated with the Maven package as it is a configuration file used in Maven projects."", ""Maven"")"
The .mvn directory is a directory where you can put some Maven configuration files.,NULL
One of these Maven configuration files is the jvm.config file which can be used to configure the Java VM that is used by Maven to build your project.,"(""Maven"", ""jvm.config is a configuration file used by Maven."", ""jvm.config""); (""Maven"", ""Maven is used to build the project."", ""project"")"
The resource files will be available for loading via the classpath.,NULL
The default Java compiler version used by Maven is Java 1.5 .,"(""Maven"", ""Maven uses the Java compiler to compile Java code."", ""Java Compiler"")"
"To make Maven compile your Java code with a newer version of the Java compiler, you need to specify the Java compiler explicitly in your project's POM file (pom.xml).","(""Maven"", ""Maven is used to compile Java code, which involves specifying the Java compiler in the POM file."", ""POM file"")"
Notice also that the version of the Maven Java compiler plugin has changed from 3.6.1 to 3.8.0 .,"(""Maven Java Compiler Plugin"", ""The Maven Java Compiler Plugin has a version that changed from 3.6.1 to 3.8.0."", ""3.6.1"")"
The first version of this Maven tutorial is based on Maven 3.6.3.,NULL
The POM file is named pom.xml and should be located in the root directory of your project.,"(""POM"", ""The POM file is named pom.xml, indicating that POM is related to the file name."", ""pom.xml"")"
"This command first executes the clean build life cycle, which removes compiled classes from the Maven output directory, and then it executes the install build phase.","(""Maven"", ""The clean build life cycle is a process that is executed within the Maven build system."", ""clean build life cycle"")"
These JAR files are needed on the classpath when you compile your project code.,"(""JAR files"", ""JAR files are needed on the classpath when compiling project code."", ""classpath"")"
"The example above needs the org.jsoup group's jsoup artifact in version 1.7.1, and the junit group's junit artifact in version 4.8.1.","(""Jsoup"", ""Jsoup is the artifact that requires version 1.7.1."", ""1.7.1"")"
"Thus Maven only needs to download the dependencies once, even if multiple projects depends on them (e.g.","(""Maven"", ""Maven manages the dependencies required for projects."", ""dependencies"")"
Your Maven settings file is also located in your user-home/.m2 directory and is called settings.xml.,"(""Maven"", ""Maven settings file refers to the settings file used for configuration in Maven."", ""settings""); (""settings"", ""The settings file is specifically named settings.xml."", ""settings.xml"")"
"The clean life cycle handles everything related to removing temporary files from the output directory, including generated source files, compiled classes, previous JAR files etc.","(""CleanLifeCycle"", ""The CleanLifeCycle is responsible for handling everything related to the OutputDirectory."", ""OutputDirectory""); (""CleanLifeCycle"", ""The CleanLifeCycle manages the removal of GeneratedSourceFiles."", ""GeneratedSourceFiles""); (""CleanLifeCycle"", ""The CleanLifeCycle is involved in handling CompiledClasses."", ""CompiledClasses"")"
One way to choose what profile is being executed is in the settings.xml file.,NULL
"You do so by creating a simple Java class that extends a special Maven class, and then create a POM for the project.","(""Java Class"", ""The Java Class extends the Maven Class."", ""Maven Class"")"
It is the argument -Dmaven.test.skip=true that makes Maven skip the tests completely.,NULL
To configure the Maven Surefire plugin to enable Java preview features you need the following configuration in your Maven POM file - in the <build><plugins>...</plugins></build> section:,"(""Maven Surefire Plugin"", ""The Maven Surefire Plugin is configured to enable Java preview features."", ""Java Preview Features"")"
To publish a JAR file with compiled Java classes to the Maven central repository you need to go through set of steps.,"(""JAR"", ""A JAR file is published to the Maven central repository."", ""Maven central repository"")"
You can find more information about creating and publishing a public key / priate key pair from the Sonatype producers page: https://central.sonatype.org/pages/producers.html.,"(""Sonatype"", ""Sonatype is associated with the producers who create and publish keys."", ""producers""); (""producers"", ""producers are responsible for creating public key."", ""public key"")"
"For a full POM file, check out the pom.xml in this github repository: RION Ops for Java GitHub Repository",NULL
From Maven 3.3 and forward you can set the memory limits in a file called jvm.config located in the .mvn directory inside your project directory.,"(""Maven"", ""Maven is a build automation tool that can utilize jvm.config for memory limits."", ""jvm.config""); (""jvm.config"", ""jvm.config is located in the .mvn directory."", "".mvn"")"
Inside the jvm.config file you need the following settings to be able to control the memory limits of Maven during a Maven build:,NULL
"Once you have created the project root directory, create a file called pom.xml inside the directory.",NULL
"When you have created the pom.xml file inside the project root directory it is a good idea to just test that Maven works, and that Maven understands the pom.xml file.",NULL
"To test the pom.xml file, open a command prompt and change directory (cd) into the project root directory.",NULL
Inside the helloworld directory (java package) insert a file named HelloWorld.java.,"(""Helloworld"", ""The HelloWorld class is located inside the helloworld package."", ""HelloWorld"")"
Maven will compile the Java source file and create a JAR file containing the compiled Java class.,"(""Maven"", ""Maven is used to compile Java source files."", ""Java""); (""Maven"", ""Maven creates a JAR file containing compiled classes."", ""JAR"")"
"Inside the target directory you will find the finished JAR file, as well as lots of temporary files (e.g.",NULL
The Mem Ops Bytes class represents a sequence of bytes from a byte array.,NULL
"To avoid fragmenting the Java heap with Bytes instances, the Bytes class is designed to be obtained from an ObjectPool .",NULL
"To use the Bytes class effectively you should create a BytesAllocatorAutoDefrag, a BytesFactory and an ObjectPool .","(""Bytes"", ""The Bytes class is mentioned as a context for using the BytesAllocatorAutoDefrag class effectively."", ""BytesAllocatorAutoDefrag""); (""Bytes"", ""The Bytes class is mentioned as a context for using the BytesFactory class effectively."", ""BytesFactory"")"
To obtain a Bytes instance from the ObjectPool you simply call the ObjectPool instance() method.,"(""ObjectPool"", ""The instance() method is called on the ObjectPool class to obtain a Bytes instance."", ""instance"")"
Calling free() will free the Bytes instance back to the ObjectPool and the allocated bytes back to the BytesAllocatorAutoDefrag.,"(""free"", ""The method free() is associated with the class Bytes as it is used to free the Bytes instance."", ""Bytes""); (""Bytes"", ""The class Bytes is related to the ObjectPool as the instance is returned to the ObjectPool."", ""ObjectPool"")"
"In this section I will try to give you a few visual use case examples that shows how to use the Bytes class, and its fields.",NULL
"The use cases are actually quite similar in how they use the Bytes class, even if they are doing different things.",NULL
The Mem Ops BytesAllocatorAutoDefrag class is capable of allocating smaller sections (blocks) of a bigger byte array.,NULL
"When you free a byte array section, the BytesAllocatorAutoDefrag class will automatically defragment its internal big byte array so the freed section is joined with adjacent free sections to form a larger free section from which future sections can be allocated.",NULL
To use the BytesAllocatorAutoDefrag class you must first create an instance of it.,NULL
"In order to allocate a block (section) of bytes from the underlying byte array, you call the allocate() method.",NULL
"Once allocated, no other allocate() call can allocate the same block until it has been freed.",NULL
"The allocate() method returns the offset into the big, underlying byte array where the allocated block starts.",NULL
You can get a reference to the underlying byte array via the getData() method.,NULL
"Once you have allocated a block of bytes from the BytesAllocatorAutoDefrag you can access it via the data array, from the offset returned by allocate() and until offset + length - 1.","(""BytesAllocatorAutoDefrag"", ""The data array is accessed from the BytesAllocatorAutoDefrag class after allocating a block of bytes."", ""data""); (""BytesAllocatorAutoDefrag"", ""The allocate() method is used to allocate a block of bytes from the BytesAllocatorAutoDefrag class."", ""allocate""); (""allocate"", ""The offset is returned by the allocate() method, indicating where the allocated bytes start."", ""offset"")"
The free() method takes the start and end offset of the block to free.,NULL
The Mem Ops BytesAllocatorManualDefrag class is capable of allocating smaller sections (blocks) of a bigger byte array.,NULL
"When you free a byte array section, the ByteArrayAllocatorAutoDefrag class will mark it as free, but will not defragment the underlying byte array until you explicitly to tell it to.",NULL
To use the BytesAllocatorManualDefrag class you must first create an instance of it.,NULL
"Once you have allocated a block of bytes from the BytesAllocatorManualDefrag you can access it via the data array, from the offset returned by allocate() and until offset + length - 1.","(""BytesAllocatorManualDefrag"", ""The data array is accessed via the BytesAllocatorManualDefrag after allocating a block of bytes."", ""data""); (""data"", ""The data array is accessed using the offset returned by the allocate() method."", ""allocate""); (""allocate"", ""The allocate() method returns an offset that is used to access the data array."", ""offset"")"
To defragment the free blocks you call the defragment() method of the BytesAllocatorManualDefrag .,NULL
It is during such idle times you should call defragment() .,NULL
"If your system is constantly very busy, there may never be an idle period during which to call defragment().",NULL
Calling defragment() will most likely result in a longer pause than if you immediately defragment free blocks like the ByteArrayAllocatorAutoDefrag does.,NULL
"Systems that need to create high numbers of objects at a rapid pace, but do not need all of these objects at the same time, can benefit from using object pools rather than instantiating the objects using the Java new XYZObject() .",NULL
The Bytes class represents a byte sequence allocated from a shared byte array.,"(""Bytes"", ""The Bytes class represents a byte sequence."", ""byte sequence"")"
The Mem Ops ObjectPool class is capable of pooling instances of objects which can be reused.,NULL
To use the Mem Ops ObjectPool you must first create an instance of the com.nanosai.memops.objects.ObjectPool class.,NULL
Notice that the ObjectPool class constructor takes two parameters: The capacity and an IObjectFactory implementation.,"(""ObjectPool"", ""The ObjectPool class has a constructor that takes parameters."", ""constructor""); (""constructor"", ""The constructor takes capacity as a parameter."", ""capacity"")"
"As you can see, the IObjectFactory only contains a single method named instance().",NULL
The type returned from the instance() method is decided by you when you implement the IObjectFactory interface.,"(""instance"", ""The instance method is part of the IObjectFactory interface implementation."", ""IObjectFactory"")"
You free an object instance for reuse by calling the ObjectPool free() method.,NULL
"You just tell what module that contains the main class to run, and ModRun resolves and loads all its dependencies too.",NULL
"By loading the classes of a module with its own ClassLoader, ModRun can control what classes are visible to each module.","(""ModRun"", ""ModRun uses ClassLoader to load classes."", ""ClassLoader"")"
A module can only see the classes from itself or from its dependencies (modules) and transitive dependencies.,NULL
"A module cannot see classes from modules ""above"" itself in the dependency graph.",NULL
The JVM will consider classes loaded from the two different versions of the API as different classes because they are loaded with different ClassLoader instances.,"(""JVM"", ""The JVM uses ClassLoader instances to load classes, indicating a relationship between them."", ""ClassLoader"")"
Each instance of the module have the classes loaded from its dependency graph isolated from the other instances of the same module (at least it can - if you want to).,NULL
Loading the classes from each module with its own ClassLoader makes application multi tenancy easier.,NULL
"ModRun can load multiple applications into the same JVM at the same time, and have their classes be completely isolated from each other, so one application cannot access the classes of another application.","(""ModRun"", ""ModRun can load multiple applications into the same JVM at the same time."", ""JVM"")"
"Here is an example that creates a module from a Maven repository, loads a class from the module, creates an instance of the class and calls a method on the instance via reflection:","(""module"", ""A module is created from a Maven repository."", ""Maven""); (""class"", ""A class is loaded from the module."", ""module""); (""instance"", ""An instance of the class is created."", ""class"")"
Installing Netty in your Java project only requires that you download the Netty JAR files and include them on the classpath.,"(""Netty"", ""Netty is a package that requires JAR files to be downloaded for installation."", ""JAR files"")"
"A Netty EventLoop is a loop that keeps looking for new events, e.g.",NULL
"Third, the NioServerSocketChannel class instance is set on the ServerBootstrap instance.",NULL
Its method initChannel() is called whenever a new incoming TCP connection is accepted by the TCP server.,NULL
"As you can see, the ChannelInitializer is added to the ServerBootstrap using the childHandler() method.","(""ServerBootstrap"", ""The ChannelInitializer is added to the ServerBootstrap, indicating a relationship where ServerBootstrap utilizes ChannelInitializer."", ""ChannelInitializer"")"
The serverBootstrap.bind() method returns a ChannelFuture which can be used to know when the binding of the server (binding to local address and TCP port) is done.,"(""bind"", ""The bind method returns a ChannelFuture object."", ""ChannelFuture"")"
"By calling sync() on the ChannelFuture the main thread that creates the server waits until the server has started, before continuing.",NULL
The channelRead() method is called whenever data is received from the SocketChannel the HelloServerHandler instance is attached to.,"(""channelRead"", ""The channelRead() method is called whenever data is received from the SocketChannel the HelloServerHandler instance is attached to."", ""HelloServerHandler"")"
"As you can see, the channelRead() responds with ""Hello "" + whatever the client sent to the server.","(""channelRead"", ""The method channelRead() responds with the string 'Hello' concatenated with the client's message."", ""Hello"")"
The channelReadComplete() method is called when there is no more data to read from the SocketChannel.,NULL
The exceptionCaught() method is called if an exception is thrown while receiving or sending data from the SocketChannel.,NULL
That means that you create a Java application with a class with a main() method and inside that application you create one of the Netty servers.,"(""Java Application"", ""The main() method is a part of the Java application that serves as the entry point for execution."", ""main()"")"
The RION Ops RionObjectReader class can read a RION Object field into a Java object.,NULL
The easiest way to create an instance of the RionObjectReader is via the RionObjectReaderBuilder class.,NULL
This class makes it easier to configure and create a RionObjectReader instance.,NULL
Here is an example of creating a RionObjectReader via the RionObjectReaderBuilder class:,NULL
The RionObjectReader readCyclic() method reads a cyclic object graph stored as RION in a byte array.,"(""RionObjectReader"", ""The readCyclic() method is a method of the RionObjectReader class."", ""readCyclic"")"
The RION Ops RionObjectWriter class makes it easy to write Java objects as a RION field to a byte array.,NULL
"To use the RionObjectWriter you must first create an instance of the RionObjectWriter class, com.nanosai.rionops.rion.object.RionObjectWriter.",NULL
The easiest way to create a RionObjectWriter instance is via the RionObjectWriterBuilder class.,NULL
"These examples build a RionObjectWriter which will serialize all fields (private, protected, default and public) found in the Pojo class to RION.",NULL
"Once created, the RionObjectWriter instance then only serialize objects of the given class.",NULL
To serialize objects of multiple classes you will have to create a RionObjectWriter for each class.,NULL
Note: You only need one RionObjectWriter per root class you want to serialize.,NULL
"If a given class represents an object graph consisting of other classes referenced from within the root class (or any of its field's classes recursively), all of these classes will be serialized too.","(""Class"", ""A class can represent an object graph consisting of other classes."", ""Object Graph"")"
"To elaborate, in the example above, if the Pojo class contained fields of class Pojo2 and Pojo3 internally, these would be serialized too because they are part of an object graph rooted by a Pojo object.","(""Pojo"", ""Pojo2 is a field of the Pojo class, indicating a relationship between them."", ""Pojo2"")"
The RionObjectWriter contains an writeAcyclic() and writeCyclic() method for these purposes.,"(""RionObjectWriter"", ""RionObjectWriter contains the writeAcyclic method as part of its functionality."", ""writeAcyclic"")"
The RionObjectWriter writeAcyclic() can write an acyclic object graph as RION into a byte array.,"(""RionObjectWriter"", ""writeAcyclic is a method of the RionObjectWriter class that performs a specific function."", ""writeAcyclic"")"
"If the object is part of a cyclic (not acyclic) object graph, the writeAcyclic() method will enter an infinite recursion and eventually crash.",NULL
Here is an example of writing an object using the RionObjectWriter writeAcyclic() method:,NULL
The RionObjectWriter writeCyclic() method can write a cyclic object graph as RION to a byte array.,"(""RionObjectWriter"", ""The writeCyclic() method is a method of the RionObjectWriter class."", ""writeCyclic"")"
Here is an example of writing a cyclic object graph to RION using the RionObjectWriter writeCyclic() method.,NULL
"The RION Ops RionReader class, com.nanosai.rionops.rion.read.RionReader makes it easy to write RION fields from a Java byte array.",NULL
Setting a source byte array is done via the method setSource().,NULL
Here is an example of setting the source byte array on a RionReader via its setSource() method:,NULL
"Third, the example loops as long as hasNext() returns true, and iterates through all the RION fields in the source byte array, one by one.","(""hasNext"", ""hasNext() is a method that checks the condition for iterating through RION fields."", ""RION"")"
You can read a RION Bytes field using the RionReader readBytes() method.,NULL
The readBytes() method will read the bytes of the RION Bytes field into this byte array.,NULL
Here is an example of reading a RION Bytes field with the readBytes() method:,NULL
The value returned by the readBytes() method is the number of bytes read into the destination byte array.,NULL
"The readBytes() method also comes in a version where you can specify the offset into the destination byte array to start writing the Bytes field value, and a maximal length (number of bytes) to read.",NULL
Here is an example of reading a RION Bytes field using that readBytes() method:,NULL
"This example tells the readBytes() method to start writing the Bytes field value into the destination array from offset 2, and to maximally read 10 bytes.","(""readBytes"", ""The readBytes() method is associated with the Bytes class as it operates on its field value."", ""Bytes"")"
To read a RION Boolean field you can use the RionReader readBoolean() method.,NULL
Here is an example of reading RION Boolean field using the RionReader readBoolean() method:,"(""RionReader"", ""RionReader contains the method readBoolean() for reading Boolean fields."", ""readBoolean()"")"
Here is an example of reading a Java Boolean object using the RionReader readBooleanObj() method:,NULL
To read a RION Int64 field you can use the RionReader readInt64() method.,NULL
Here is an example of reading a RION Int64 field using the RionReader readInt64() method:,NULL
Here is an example of reading a RION Int64 field into a Java Long object using the RionReader readInt64Obj() method:,"(""RionReader"", ""RionReader is the class that contains the method readInt64Obj() which reads an Int64 field."", ""readInt64Obj()""); (""readInt64Obj()"", ""The method readInt64Obj() is used to read an Int64 field."", ""Int64"")"
These methods are named readFloat32() and readFloat64() Here are two examples of reading a RION Float field into a Java float and double variable:,"(""readFloat32"", ""readFloat32() is a method that reads a RION Float field."", ""RION Float""); (""readFloat64"", ""readFloat64() is a method that reads a RION Float field."", ""RION Float""); (""readFloat32"", ""readFloat32() is used in the context of Java programming."", ""Java"")"
Use the readFloat32Obj() or readFloat64Obj() methods if the RION Float field can be set to null in your concrete use case.,NULL
The RionReader class has a method named readUtf8String() which can read a RION UTF-8 field into a Java String.,"(""RionReader"", ""The readUtf8String method is a method of the RionReader class."", ""readUtf8String"")"
Here is an example of reading a RION UTF-8 field into a Java String with readUtf8String() :,"(""readUtf8String"", ""The method readUtf8String() is used to read a UTF-8 field from the RION class."", ""RION"")"
The readUtcCalendar() method of the RionReader class can read a RION UTC field as a Java Calendar instance.,"(""readUtcCalendar"", ""The readUtcCalendar() method belongs to the RionReader class."", ""RionReader"")"
When reading a composite RION field you need to use the RionReader moveInto() and moveOutOf() methods.,"(""RionReader"", ""The moveInto() method is a function of the RionReader class used for reading a composite RION field."", ""moveInto"")"
"The moveInto() method will move the RionReader's internal state ""into"" the given RION field.","(""moveInto"", ""The moveInto() method is a function of the RionReader class that manipulates its internal state."", ""RionReader"")"
"That means, that the hasNext() method now returns true as long as the RION field you moved into has more nested fields.",NULL
"The moveOutOf() method moves the RionReader's internal state ""out of"" the given RION field.","(""moveOutOf"", ""The moveOutOf() method is a function of the RionReader class that manipulates its internal state."", ""RionReader"")"
Now the hasNext() method will return true if the parent scope (parent RION field or the total source byte array for the RionReader) has more RION fields.,"(""hasNext"", ""The hasNext() method is associated with the RION class as it checks for more RION fields."", ""RION"")"
"At the outer nesting level (top level) of the above RION field sequence, the RionReader hasNext() will return true, as long as there are RION fields at this nesting level.",NULL
"Now the RionReader hasNext() method returns true 2 times, because there are 2 nested RION fields inside the RION Object field.","(""RionReader"", ""RionReader hasNext() is a method of the RionReader class."", ""hasNext()"")"
"Once the hasNext() method returns false, you ""move out of"" the composite RION field again.",NULL
You can improve on the above code in various ways - e.g.,NULL
"To read a RION Table field, you have to ""move into"" it with moveInto(), then read the first field which is an Int64 RION field representing the row count, and then 1 to N Key or Key Short fields representing the column headers (column names / keys) of the table, and then finally 1 to N fields per row.","(""RION Table"", ""moveInto() is a method used to access the RION Table."", ""moveInto()""); (""moveInto()"", ""After moving into the RION Table, the first field read is an Int64 RION field representing the row count."", ""Int64 RION field""); (""Int64 RION field"", ""The Int64 RION field represents the row count of the RION Table."", ""row count""); (""RION Table"", ""Key fields represent the column headers of the RION Table."", ""Key""); (""RION Table"", ""Key Short fields also represent the column headers of the RION Table."", ""Key Short"")"
The RionReader class contains a method named isNull() which will tell you if the current RION field pointed to by the RionReader has the field value null.,NULL
Here is an example of checking if a given RION field is null via the RionReader isNull() method:,"(""RionReader"", ""RionReader contains the method isNull() for checking null fields"", ""isNull()"")"
"The RION Ops RionWriter class, com.nanosai.rionops.rion.write.RionWriter, enables you to write RION fields easily and efficiently.",NULL
You set the destination byte array of the RionWriter using the setDestination() method.,NULL
The RionWriter contains a method named writeBytes() which can be used to write a RION Bytes field to the destination byte array.,"(""RionWriter"", ""RionWriter contains a method named writeBytes() which can be used to write a RION Bytes field."", ""writeBytes()"")"
Here is a Java example of writing a RION Bytes field from a byte array using the RionWriter writeBytes() method:,"(""RionWriter"", ""RionWriter contains the method writeBytes() which is used to write bytes."", ""writeBytes()""); (""RION Bytes"", ""RION Bytes is being written using the RionWriter class."", ""RionWriter"")"
The writeBytes() method also exists in a version that takes a source offset and source length which specifies from what offset and how many bytes forward in the source byte array to write to the RION Bytes field in the destination byte array.,"(""writeBytes"", ""The writeBytes() method operates on the source byte array to write data from it."", ""source byte array""); (""writeBytes"", ""The writeBytes() method writes to the RION Bytes field."", ""RION Bytes"")"
The RionWriter method writeBoolean() writes a boolean value (true / false) as a RION Boolean field to the destination byte array.,"(""RionWriter"", ""The writeBoolean method is a method of the RionWriter class."", ""writeBoolean"")"
Here is a Java example of writing a RION Boolean field using the RionWriter writeBoolean() method:,NULL
The RionWriter method writeInt64() will write a 64 bit integer as a RION IntPos or IntNeg field to the destination byte array.,"(""RionWriter"", ""The RionWriter class contains the method writeInt64() which performs a specific function."", ""writeInt64()""); (""writeInt64()"", ""The writeInt64() method writes a 64 bit integer as a RION IntPos field."", ""RION IntPos"")"
"Here are two examples of writing int64 values (long values) as RION IntPos and IntNeg fields to the destination byte array, using the RionWriter writeInt64() method:","(""RionWriter"", ""RionWriter is the class that contains the method writeInt64() which is used to write int64 values."", ""writeInt64""); (""writeInt64"", ""The method writeInt64() is used to write values to the IntPos field."", ""IntPos"")"
The RionWriter methods writeFloat32() and writeFloat64() writes a 32 bit and 64 bit floating point number as a RION Float field to the destination byte array.,"(""RionWriter"", ""writeFloat32 is a method of the RionWriter class."", ""writeFloat32"")"
"Here are two examples of writing a 32 bit and 64 bit floating point number as RION Float fields to the destination byte array, using the RionWriter writeFloat32() and writeFloat64() methods:","(""RionWriter"", ""RionWriter is the class that contains the method writeFloat32 for writing 32 bit floating point numbers."", ""writeFloat32"")"
The RionWriter method writeUtf8() writes a Java String as a RION UTF-8 or UTF-8-Short field to the destination byte array.,"(""RionWriter"", ""The RionWriter class contains the method writeUtf8() which is used to write a Java String as a RION UTF-8 or UTF-8-Short field."", ""writeUtf8()"")"
Here is an example of writing a RION UTF-8 field to a byte array using the RionWriter writeUtf8() method:,NULL
The RionWriter method writeUtc() method writes a date and time in the shape of a Java Calendar as a RION UTC field (UTC date-time) to the destination byte array.,"(""RionWriter"", ""The writeUtc method is a method of the RionWriter class."", ""writeUtc""); (""writeUtc"", ""The writeUtc method writes a date and time in the shape of a Java Calendar."", ""Calendar"")"
Here is an example of writing a Java Calendar as a RION UTC field to the destination byte array using the RionWriter writeUtc() method:,"(""RionWriter"", ""RionWriter contains the method writeUtc() which is used to write a Java Calendar as a RION UTC field."", ""writeUtc"")"
The RionWriter class has functionality that helps you reserve length bytes for composite RION fields and jump back up and fill them in correctly later.,"(""RionWriter"", ""The RionWriter class provides functionality related to reserving length bytes."", ""length bytes"")"
One of the mechanisms in the RionWriter class that helps you reserve length bytes and set their value correctly later requires an internal stack to keep track of where the reserved length bytes are located.,NULL
Here is an example of setting the nested field stack for a RionWriter via its setNestedFieldStack() method:,NULL
"However, it is possible for all RION fields to take the value null, so it is possible to include e.g.",NULL
"The writeObjectBeginPush() method writes the beginning of the RION Object field, and reserves and reserve as many length bytes as you pass to it as parameter (2 in the example above).",NULL
"The writeObjectEndPop() method pops the RION Object field start index off the nested field stack, calculates the total length of the Object field and writes the total Object field length into its reserved length bytes.","(""writeObjectEndPop"", ""The method writeObjectEndPop() is associated with the RION class as it operates on the RION Object field."", ""RION"")"
There are also versions of the writeObjectBegin() and writeObjectEnd() method that does not use the internal nested field stack.,NULL
The String arguments passed to the main() method are the command line arguments passed to the application when it is executed.,"(""main"", ""The main method takes String arguments as input."", ""String"")"
The Main argument is the name of the object to run the main() method of.,NULL
"The arguments ""arg1"" and ""arg2"" are passed in the String array to the main() method.","(""arg1"", ""arg1 is passed to the main method as an argument"", ""main"")"
The until keyword makes sure to only iterate until myArray.length - 1.,NULL
"If you had needed i to also take the value of myArray.length in the final iteration, you could have used the to keyword instead of the until keyword.",NULL
"This means that you can define classes in Scala, and instantiate objects of these classes.",NULL
"That means, that a class defines what information objects of that class holds, and what behaviour (methods) it exposes.",NULL
The other aspects of Scala classes will be covered in separate texts.,NULL
Here I have just shown you how to declare a method inside a class.,NULL
"Notice how this addToMyField() method does not have the equals sign, and no return type specified.",NULL
"When an exception is thrown from inside the throwsException() method, the execution is interrupted and the execution jumps to the catch clause surrounding the code that threw the exception.",NULL
"In the example above, when the throwsException() method is called, and it throws an exception, the statement below the throwsException() method call is never executed.",NULL
"In the example above, only one exception is caught, Exception which is the superclass of most exceptions.",NULL
"Rather than compute the .toUpperCase() value twice, by nesting them inside each if-statement, the uppercase version of aString is computed just once, and assigned to the variable aStringUC.","(""aString"", ""aStringUC is the uppercase version of aString, computed using the toUpperCase method."", ""aStringUC"")"
"You can thus use all the classes of the Java SDK's in Scala, and also your own, custom Java classes, or your favourite Java open source projects.","(""Java SDK"", ""Java SDK can be used in Scala, indicating a relationship between the two classes."", ""Scala""); (""Java SDK"", ""Java SDK includes Java classes, establishing a relationship between them."", ""Java classes"")"
"Instead a Scala class can have what is called a singleton object, or sometime a companion object.","(""Scala"", ""Scala classes can have singleton objects as companions."", ""singleton object"")"
"When a singleton object is named the same as a class, it is called a companion object.",NULL
A companion object must be defined inside the same source file as the class.,NULL
"In this class you can both instantiate Main and call sayHelloWorld() or call the sayHi() method on the companion object directly, like this:","(""Main"", ""Main can instantiate sayHelloWorld method."", ""sayHelloWorld""); (""Main"", ""Main can call sayHi method."", ""sayHi""); (""sayHelloWorld"", ""sayHelloWorld can be called on the companion object."", ""companion object"")"
This also means that you can use all Java classes in your Scala code.,NULL
The Scala version used in the examples in this tutorial is Scala 2.8.0 .,NULL
"The Stream Ops StreamOps class, com.nanosai.streamops.StreamOps, provides a convenient facade for the Stream Ops API.","(""StreamOps"", ""StreamOps is part of the package com.nanosai.streamops."", ""com.nanosai.streamops.StreamOps"")"
The StreamOps class can create the most commonly used components of the Stream Ops API.,NULL
"Thus, the StreamOps class is a good place to start, both when using Stream Ops, but also when exploring what you can do with Stream Ops and how it works.",NULL
In this tutorial we will only go over the components the StreamOps and related factory classes can create.,NULL
"You can create instances of these classes via the new operator, or you can use a StreamStorageFactory.",NULL
You can create a StreamStorageFS instance via the StreamStorageFactory createStreamStorageFS() method.,"(""StreamStorageFactory"", ""The method createStreamStorageFS() is a method of the StreamStorageFactory class."", ""createStreamStorageFS"")"
Here is an example of creating a StreamStorageFS instance via the createStreamStorageFS() method:,NULL
You can create a StreamStorageRootFS instance via the StreamStorageFactory createStreamStorageRootFS() method.,"(""StreamStorageFactory"", ""The method createStreamStorageRootFS() is a method of the StreamStorageFactory class."", ""createStreamStorageRootFS"")"
"The Stream Ops StreamStorageFS class, com.nanosai.streamops.storage.file.StreamStorageFS, provides disk storage for a data stream.",NULL
"More specifically, the StreamStorageFS class can write an ordered sequence of records to disk, and later read the records from disk again in the exact same order.",NULL
The StreamStorageFS class is one of the core classes of the Stream Ops data storage engine.,NULL
Many of the other classes in the Stream Ops data storage engine revolve around this class.,NULL
To use the StreamStorageFS class you must first create a StreamStorageFS instance.,NULL
"Once a StreamStorageFS instance is open for appending records, you can append a record to the stream via the append() method.",NULL
You can obtain a list of StreamStorageBlockFS instances from a StreamStorageFS by calling getStorageBlocks().,"(""StreamStorageFS"", ""getStorageBlocks is a method that can be called on StreamStorageFS to obtain instances of StreamStorageBlockFS."", ""getStorageBlocks"")"
The StreamStorageFS class contains a method to read bytes from a stream block file.,NULL
"The readBytes() method reads bytes from the file represented by the given StreamStorageBlockFS instance, into the byte[] array passed as parameter.","(""readBytes"", ""The readBytes() method reads bytes from the file represented by the given StreamStorageBlockFS instance."", ""StreamStorageBlockFS"")"
The readBytes() method will start fromByte bytes into the block file.,NULL
The Stream Ops for Java class named StreamStorageRootFS (com.nanosai.streamops.engine.storage.file.StreamStorageRootFS) class represents the root of a file based stream storage system.,"(""StreamStorageRootFS"", ""StreamStorageRootFS is part of the Stream Ops package."", ""StreamOps"")"
You can always obtain the root directory path a StreamStorageRootFS was created with via its getRootDirPath() method.,NULL
Here is an example of obtaining the root directory path of a StreamStorageRootFS via its getRootDirPath() method:,NULL
"When you write records to a stream via the StreamStorageFS instance, the StreamStorageFS class will divide the records into multiple files.",NULL
Creating a Buffer is done using the static buffer() method in the Buffer interface.,NULL
If you want the bytes stored in the Buffer to be encoded using a special encoding (e.g.,NULL
"you can specify the encoding as the second parameter to the buffer() method, like this:",NULL
You can read the length of a Buffer using its length() method.,NULL
You can write to a specific position inside a buffer using one of the set...() methods.,NULL
You can also write data to a Buffer using one of the append...() methods.,NULL
You can read the data stored in a Buffer using the many get...() methods.,NULL
After the vertx run part of the command you must write the fully qualified class name of the verticle to deploy.,NULL
To deploy a verticle class you must run the vertx run classname command from the root directory of the compiled classes for the verticle to deploy.,"(""Verticle"", ""The Verticle class is part of the Vertx package, which is used for deployment."", ""Vertx"")"
"Thus, the root directory of your classes becomes the classpath for deploying the verticle.",NULL
Whatever directory you run the vertx run command from is automatically added to the classpath when looking for the verticle class.,NULL
You can also run a Java verticle class which is located inside a JAR file.,NULL
Sometimes you need a classpath which contains more than one directory or JAR file.,"(""Classpath"", ""A classpath can include multiple directories."", ""Directory"")"
In those situations you can provide a normal classpath string as the -cp argument value.,NULL
Each entry (directory or JAR file) in the classpath string must be separated by either a semicolon (on Windows) or a colon (on Unix / Linux).,"(""Classpath"", ""Classpath includes entries that can be directories."", ""Directory"")"
This example contains two JAR files in the classpath separated by a semicolon.,NULL
"If you have a very long classpath your command line may get very long, and thus be hard to read in a text editor.",NULL
"Instead you can build the classpath up as an environment variable, one entry per line, and use that environment variable in the command line.",NULL
run.cmd and you can execute it from a Windows command line.,NULL
Notice the use of / as directory separator and the use of : as classpath entry separator.,NULL
That might be useful if you deploy a class file that is written in Groovy or Scala (but which are compiled into Java classes).,"(""Class"", ""Groovy is a programming language that can be used to write class files."", ""Groovy""); (""Class"", ""Scala is a programming language that can be used to write class files."", ""Scala"")"
The first parameter to the getNow() method is the TCP port to connect to the remote HTTP server on.,"(""getNow"", ""The getNow() method uses the TCP port as its first parameter to establish a connection."", ""TCP port"")"
The getNow() method exists in a version where you can leave the port out.,NULL
The second parameter to the getNow() method is the domain name of the remote HTTP server to connect to.,"(""getNow"", ""The getNow method takes domain name as a parameter."", ""domain name"")"
The third parameter to the getNow() method is the URI to the resource to retrieve.,NULL
The Handler implementation passed to the getNow() method is called when the headers of the HTTP response are received.,"(""getNow"", ""The Handler implementation is passed to the getNow() method."", ""Handler"")"
"However, if you do need to access the body of the HTTP response, you need to register another handler on the HttpClientResponse that is passed as parameter to the first Handler's handle() method.","(""HttpClientResponse"", ""HttpClientResponse is passed as a parameter to the handle method of the Handler class."", ""Handler"")"
The Handler implementation passed to the bodyHandler() method of the HttpClientResponse is called when the full HTTP response body is received.,"(""bodyHandler"", ""The Handler implementation is passed to the bodyHandler() method."", ""Handler"")"
"Once you have created the HTTP server, you can start it using its listen() method.",NULL
"The HttpServer class has more versions of the listen() method too, which gives you different options for starting the HTTP server.",NULL
"Every time an HTTP request arrives at the HTTP server, the handle() method of the Handler object is called.","(""HTTP Server"", ""The handle() method is called when an HTTP request arrives at the HTTP server."", ""handle()"")"
Inside the handle() method you can execute the code needed to handle the HTTP request.,NULL
You can access HTTP headers and parameters from the HttpServerRequest object passed as parameter to the handle() method.,NULL
"After writing the headers back you can write the response body back via the write() method, like this:",NULL
You can call write() multiple times to add more data to the response body.,NULL
The write() method is asynchronous and returns immediately after queuing up the string or buffer.,"(""write"", ""The write() method is related to the string class as it queues up a string for processing."", ""string"")"
This is done by calling the end() method as shown in the previous example.,NULL
The end() method can take either a String or Buffer as parameter.,"(""end"", ""The end() method can take String as a parameter."", ""String"")"
To close an HTTP server you simply call its close() method like this:,NULL
"The close() method executes asynchronously, so the HTTP server may not be fully closed by the time the close() method returns.",NULL
"You can pass a close handler as parameter to the close() method, to be notified when the HTTP server is fully closed.",NULL
"You can just unzip the zip file and add these JAR files to the classpath of your Java application, and you are good to go.","(""Java"", ""Java applications typically require a classpath to locate classes and resources."", ""classpath"")"
As long as the JAR files are available on the classpath of your application.,NULL
You connect to a remote server by calling the connect() method.,NULL
You obtain a reference to the NetSocket connected to the remote server via the AsyncResult instance passed to the handler's handle() method.,"(""AsyncResult"", ""The AsyncResult instance provides a reference to the NetSocket connected to the remote server."", ""NetSocket"")"
You can write data to the TCP connection via the NetSocket write() method.,NULL
The data may not be sent by the time the write() method returns.,NULL
The Handler's handle() method will get called when data is received from the remote server.,"(""Handler"", ""The handle() method is a function of the Handler class."", ""handle()"")"
You close the TCP client by calling the close() method of the NetClient instance.,"(""TCP Client"", ""The close() method is used to close the TCP client."", ""close()"")"
"Again, the NetClient's close() method is asynchronous, so the underlying TCP connection may not yet be closed by the time the close() method returns.",NULL
"Once you have created the TCP server, you can start it using its listen() method.",NULL
This example starts the server and instructs it to listen on TCP port 10.000 .,NULL
The NetServer class contains more versions of the listen() method which gives you different options for starting the TCP server.,NULL
The handle() method of the connect handler is called whenever a new TCP connection is created by a client of the TCP server.,"(""handle"", ""The handle() method is part of the connect handler class."", ""connect handler""); (""connect handler"", ""The connect handler is responsible for handling new TCP connections."", ""TCP connection"")"
The NetSocket object passed as parameter to the handle() method gives access to the incoming connection (socket etc.,NULL
You can do so via the NetSocket instance passed to the connect handler's handle() method.,NULL
The NetSocket class contains more versions of the write() method which enables you to write e.g.,NULL
When you are finished with the TCP server you can close it using its close() method.,NULL
"Closing the TCP server is an asynchronous actions, so the close() method may exit before the TCP server is actually closed.",NULL
"If you need to be notified of when the TCP server has shut down, you can pass a Handler to the close() method.","(""TCP Server"", ""The TCP Server can be monitored for shutdown events through the close() method."", ""close()"")"
"The setTimer() method takes a time interval in milliseconds as first parameter, and a Handler implementation as second parameter.",NULL
The Handler's handle() method is called when the time interval has elapsed.,"(""Handler"", ""The handle() method belongs to the Handler class."", ""handle()"")"
This timer ID is also passed as parameter to the Handler's handle() method.,"(""Timer ID"", ""The Timer ID is passed as a parameter to the handle() method of the Handler class."", ""handle()"")"
"The setPeriodic() method takes a time interval in milliseconds as first parameter, and a Handler implementation as second parameter.",NULL
The Handler's handle() method is called every time the time interval has elapsed.,"(""Handler"", ""The handle() method belongs to the Handler class."", ""handle()"")"
This timer ID is also passed to the Handler's handle() method whenever it is called.,"(""Timer ID"", ""Timer ID is passed to the Handler's handle() method."", ""Handler"")"
Support for Scala and Clojure should be arriving soon (it was originally planned for v. 3.0 but I am not sure if they got it in).,NULL
You don't have to learn both a language and a new platform (e.g.,NULL
You will see later in this tutorial how to use both versions of the start() method.,NULL
Here is an example of overriding the stop() method in your own verticle:,NULL
Sending messages via the event bus can be done via either the send() or publish() method on the event bus.,"(""EventBus"", ""The send method is a function that can be executed on the EventBus class to send messages."", ""send"")"
The send() method sends the message to just one of the listening verticles.,"(""send"", ""The send() method is responsible for sending the message."", ""message"")"
This is useful for distributing work load over multiple verticles (e.g.,NULL
"The first message is sent via the publish() method, so both consumers receive the message.",NULL
"The second message is sent via the send() method, so only one of the consumers will receive the message.",NULL
A verticle has a start() and a stop() method which are called when the verticle is deployed and when it is undeployed.,"(""Verticle"", ""The start() method is a function of the Verticle class that is called when the verticle is deployed."", ""start"")"
"You should perform any necessary initialization work inside the start() method, and any necessary cleanup work inside the stop() method.",NULL
"For instance, you can specify how many verticle instances of a given verticle class to deploy.",NULL
The startsWith() and endsWith() methods check if the String starts with a certain substring,"(""startsWith"", ""The startsWith() method checks if the String starts with a certain substring"", ""String"")"
In the above example the two methods getTime() and setTime() can access the time member variable,"(""getTime"", ""The method getTime() accesses the time member variable."", ""time"")"
The convertToInt() method has the same signature as the deserialize() method of the Deserializer deserialize() method,"(""convertToInt"", ""Both methods have the same signature, indicating a relationship in functionality."", ""deserialize"")"
Deque.removeLast() is different from pollLast() which returns null if the Deque is empty,"(""removeLast"", ""removeLast is a method of the Deque class"", ""Deque""); (""pollLast"", ""pollLast is a method of the Deque class"", ""Deque"")"
The floor() method does the opposite of the ceiling() method meaning it returns the greatest element that is less than or equal to the given parameter value,NULL
You can also specify METHOD or FIELD or you can leave the target out alltogether so the annotation can be used for both classes methods and fields,"(""METHOD"", ""METHOD and FIELD are both options that can be specified in the context of annotations."", ""FIELD""); (""METHOD"", ""METHOD can be used in the context of classes, indicating a relationship between them."", ""classes"")"
For instance finest() finer() fine() info() warning() and severe() each corresponds to one of the log levels,"(""Finest"", ""Finest corresponds to one of the log levels."", ""Log Level""); (""Finer"", ""Finer corresponds to one of the log levels."", ""Log Level""); (""Fine"", ""Fine corresponds to one of the log levels."", ""Log Level""); (""Info"", ""Info corresponds to one of the log levels."", ""Log Level""); (""Warning"", ""Warning corresponds to one of the log levels."", ""Log Level"")"
You can encrypt or decrypt data into an existing byte array by passing the destination byte array as parameter to the update() and or doFinal() method,"(""update"", ""The update method operates on the byte array by using it as a parameter for encryption or decryption."", ""byte array"")"
Second if the lock is locked the threads are blocked in the wait() call inside the while(isLocked) loop in the lock() method,"(""Lock"", ""The threads are blocked when the lock is locked, indicating a relationship between the Lock class and Threads."", ""Threads""); (""Lock"", ""The wait() call is executed when the lock is locked, establishing a relationship between the Lock class and the Wait method."", ""Wait""); (""Lock"", ""The while(isLocked) loop checks the lock status, linking the Lock class to the IsLocked method."", ""IsLocked"")"
Deque.removeFirst() is different from pollFirst() which returns null if the Deque is empty,"(""removeFirst"", ""Both are methods of the Deque class, but they have different behaviors when the Deque is empty."", ""pollFirst""); (""Deque"", ""removeFirst is a method of the Deque class."", ""removeFirst"")"
The peek() works like the element() method except it does not throw an exception if the Queue is empty,"(""peek"", ""peek() is similar to element() but does not throw an exception when the Queue is empty"", ""element""); (""peek"", ""peek() operates on the Queue class"", ""Queue"")"
The addAll() method takes a Collection as parameter so you can pass either a List or Java Set as parameter,"(""addAll"", ""The addAll() method takes a Collection as a parameter."", ""Collection""); (""addAll"", ""The addAll() method allows passing a List as a parameter."", ""List"")"
The Java Properties class java.util.Properties is like a Java Map of Java String key and value pairs,"(""Properties"", ""Properties is a class within the java.util package"", ""java.util.Properties"")"
java.io.InputStream means that you use the Java FileInputStream as an InputStream (FileInputStream behaves like an InputStream),NULL
Since PipedInputStream is a subclass of InputStream PipedInputStream has the same basic methods and use patterns as an InputStream,NULL
Choice.select(int pos) is done by having a different thread call the Selector.wakeup() method on the Selector which the first thread has called select() on,"(""select"", ""select is a method of the Choice class"", ""Choice""); (""wakeup"", ""wakeup is a method of the Selector class"", ""Selector"")"
While isLocked is true the thread calling lock() is parked waiting in the wait() call,"(""isLocked"", ""isLocked is a condition that affects the behavior of the lock method."", ""lock"")"
The AtomicInteger class is located in the java.util.concurrent.atomic package so the full class name is java.util.concurrent.atomic.AtomicInteger,NULL
But no thread can actually execute unlock() until the thread waiting in lock() leaves the outer synchronized block,NULL
The System class also has a getProperty() and setProperty() method which are shortcuts to the Properties getProperty() and setProperty() methods of the System Properties instance.,"(""getProperty"", ""getProperty() is a method of the System class."", ""System""); (""setProperty"", ""setProperty() is a method of the System class."", ""System""); (""getProperty"", ""getProperty() is a method of the Properties class."", ""Properties""); (""setProperty"", ""setProperty() is a method of the Properties class."", ""Properties"")"
Closeable.close() closes the Selector and invalidates all SelectionKey instances registered with this Selector,"(""Closeable"", ""Closeable.close() is a method of the Closeable class that closes the Selector."", ""close()"")"
Any.stream() is similar to how you obtain an Iterator by calling the items.iterator() method but a Stream is a different animal than an Iterator,"(""Any"", ""Any.stream() is similar to how you obtain an Iterator by calling the items.iterator() method"", ""stream"")"
An interesting aspect to note about the BufferedInputStream is that is supports the mark() and reset() methods inherited from the InputStream,"(""BufferedInputStream"", ""BufferedInputStream supports the mark() method inherited from InputStream"", ""mark"")"
"You can search for an object on the stack to get it's index, using the search() method. The object's equals() method is called on every object on the Stack to determine if the searched-for object is present on the Stack.","(""search"", ""The search() method is used to find an object's index on the Stack."", ""Stack"")"
Actually java.sql.Timestamp extends java.util.Date so anything you can do with a java.util.Date you can also do with a java.sql.Timestamp,"(""Timestamp"", ""Timestamp extends Date, indicating an inheritance relationship between the two classes."", ""Date""); (""java.sql"", ""Timestamp is part of the java.sql package, indicating a package relationship."", ""Timestamp"")"
"If the Deque is empty, removeFirst() will throw an exception. This is different from pollFirst() which returns null if the Deque is empty.","(""Deque"", ""removeFirst() is a method that operates on the Deque class."", ""removeFirst()"")"
You read bytes from a Java ByteArrayInputStream just like you would from a regular InputStream via its read() method,"(""ByteArrayInputStream"", ""ByteArrayInputStream is a subclass of InputStream, used for reading bytes."", ""InputStream"")"
You create a DateFormat using the getDateInstance() and getTimeInstance() method of the DateFormat class,"(""getDateInstance"", ""getDateInstance() is a method of the DateFormat class"", ""DateFormat"")"
You can use addBatch() and executeBatch() methods to execute batch updates.,NULL
The Java FileOutputStream class is a subclass of Java OutputStream meaning you can use a FileOutputStream as an OutputStream,NULL
In the example above I passed it a FileInputStream connected to a file named myfile.zip,NULL
java.util.logging.LogRecord Throwable is either passed as parameter to a Logger log method or set directly on a LogRecord which is then passed to a Logger,NULL
As you can see a new StringBuilder is created passing along the first String to its constructor and the second String to its append() method before finally calling the toString() method,"(""StringBuilder"", ""The append method is called on the StringBuilder instance to add a String."", ""append"")"
A thread cannot call wait() notify() or notifyAll() without holding the lock on the object the method is called on,"(""Thread"", ""A thread can call wait() only when it holds the lock on the object."", ""wait()""); (""Thread"", ""A thread can call notify() only when it holds the lock on the object."", ""notify()""); (""Thread"", ""A thread can call notifyAll() only when it holds the lock on the object."", ""notifyAll()""); (""wait()"", ""wait() requires the lock to be held on the object."", ""Lock""); (""notify()"", ""notify() requires the lock to be held on the object."", ""Lock"")"
The AtomicReferenceArray in the java.util.concurrent.atomic package is an array of object references which can be updated atomically,NULL
Spin locks and the methods wait() and notify() are covered in more detail in the text Thread Signaling,"(""Spin Locks"", ""Spin locks utilize the wait() method for synchronization."", ""wait""); (""Spin Locks"", ""Spin locks utilize the notify() method for synchronization."", ""notify""); (""wait"", ""The wait() method is discussed in the context of Thread Signaling."", ""Thread Signaling"")"
The AtomicLong class is located in the java.util.concurrent.atomic package so the full class name is java.util.concurrent.atomic.AtomicLong,NULL
"The Arrays class contains a set of methods called binarySearch(). This method helps you perform a binary search in an array. The array must first be sorted. You can do so yourself, or via the Arrays.sort() method covered earlier in this text.","(""Arrays"", ""The binarySearch method is part of the Arrays class, indicating that it is a method defined within this class."", ""binarySearch"")"
The Java Reader (java.io.Reader) and Java Writer class (java.io.Writer) in Java IO work much like the InputStream and OutputStream with the exception that Reader and Writer are character based,"(""Java Reader"", ""Java Reader is an implementation of the Reader class in the java.io package."", ""java.io.Reader""); (""Java Writer"", ""Java Writer is an implementation of the Writer class in the java.io package."", ""java.io.Writer"")"
The methods getAndIncrement() and incrementAndGet() works like getAndAdd() and addAndGet() but just add 1 to the value of the AtomicInteger,"(""getAndIncrement"", ""Both methods work similarly by adding 1 to the value of the AtomicInteger."", ""incrementAndGet"")"
"The tailSet() method works the same way as the headSet() method, except it returns all elements that are equal to or higher than the given parameter element",NULL
If a different thread calls wakeup() and no thread is currently blocked inside select() the next thread that calls select() will wake up immediately,NULL
HashMap maps a key and a value. It does not guarantee any order of the elements stored internally in the map.TreeMap also maps a key and a value. Furthermore it guarantees the order in which keys or values are iterated - which is the sort order of the keys or values.,NULL
It is worth noting that both unlockRead() and unlockWrite() calls notifyAll() rather than notify(),"(""UnlockRead"", ""UnlockRead calls NotifyAll to notify all waiting threads."", ""NotifyAll""); (""UnlockWrite"", ""UnlockWrite calls NotifyAll to notify all waiting threads."", ""NotifyAll"")"
Notice the call to update() and then doFinal() for these two blocks of data,NULL
You simply pass an offset and length to the update() and or doFinal() method,NULL
The Java Collections addAll() method can add a variable number of elements to a Collection (typically either a List or a Set,"(""addAll()"", ""The addAll() method is used to add elements to a Collection."", ""Collection""); (""Collection"", ""Collection can be a List or a Set."", ""List"")"
Once a thread is awakened it cannot exit the wait() call until the thread calling notify() has left its synchronized block,"(""Thread"", ""A thread is in a waiting state when it calls wait() and cannot exit until notified."", ""wait()""); (""Thread"", ""A thread can notify another thread by calling notify() to wake it up from the wait state."", ""notify()""); (""wait()"", ""The wait() method must be called within a synchronized block to ensure proper thread synchronization."", ""synchronized block"")"
java.lang.ThreadLocal is possible to set an initial value for a Java ThreadLocal which will get used the first time get() is called before set() has been called with a new value,"(""ThreadLocal"", ""The method get() retrieves the value from the ThreadLocal instance."", ""get"")"
The Reader and Writer classes are stream oriented classes that enable a Java application to read and write streams of characters,"(""Reader"", ""Both are stream oriented classes that enable reading and writing streams of characters in Java applications."", ""Writer""); (""Reader"", ""Reader is a class used within Java applications."", ""Java"")"
If the doNotify() method had called notifyAll() instead of notify() all waiting threads had been awakened and checked for signals in turn,"(""doNotify"", ""doNotify() method is related to notifyAll() because it is suggested that doNotify() should have called notifyAll() instead of notify()"", ""notifyAll""); (""doNotify"", ""doNotify() method is related to notify() as it is the method that was originally called in the context of the statement"", ""notify"")"
The run() method is what is executed by the thread after you call start(),NULL
You can convert Strings to uppercase and lowercase using the methods toUpperCase() and toLowerCase(),"(""Strings"", ""Strings can be converted to uppercase using the method toUpperCase()"", ""toUpperCase"")"
To make the Calculator class thread safe you could have declared the getValue() setValue() and add() methods synchronized,"(""Calculator"", ""The setValue method is part of the Calculator class and is suggested to be synchronized for thread safety."", ""setValue"")"
"If the call to take() happens before the call to release() the thread calling release() will still know that take() was called, because the signal is stored internally in the signal variable.","(""take"", ""The method take() is called before the method release(), indicating a sequence of operations between them."", ""release"")"
The getAndAdd() method does the same as the addAndGet() method except the getAndAdd() method returns the value of the element before a value is added to it,NULL
Adding and getting elements to a generic Map is done using the put() and get() methods just like you have always done,"(""put()"", ""The put() method is used to add elements to the Map."", ""Map"")"
When guarding a critical section with a ReadWriteLock and the critical section may throw exceptions it is important to call the readUnlock() and writeUnlock() methods from inside a finallyclause,NULL
The FileChannel class has a transferTo() and a transferFrom() method which does this for you,"(""FileChannel"", ""The transferTo() method is a method of the FileChannel class."", ""transferTo"")"
To generate a KeyPair with a KeyPairGenerator you call the generateKeyPair() method,"(""KeyPairGenerator"", ""The generateKeyPair() method is called on the KeyPairGenerator to generate a KeyPair."", ""generateKeyPair"")"
You can convert a OutputStream to a character based Writer using the Java OutputStreamWriter class,NULL
If you created your SortedSet with a Comparator you can obtain that Comparator via the SortedSet comparator() method,"(""SortedSet"", ""The comparator() method is a method of the SortedSet class that allows access to the Comparator used to create the SortedSet."", ""comparator()"")"
"In order to update the database you need to use a Statement. But, instead of calling the executeQuery() method, you call the executeUpdate() method.","(""Statement"", ""The Statement class is used to perform database operations, including executing queries."", ""executeQuery"")"
Instances of this class are used together with UDP DatagramSockets and normal Socket and ServerSocket,"(""Instances"", ""Instances of this class are used together with UDP DatagramSockets"", ""UDP DatagramSockets""); (""Instances"", ""Instances of this class are used together with Socket"", ""Socket"")"
The Java InputStreamReader class java.io.InputStreamReader wraps a Java InputStream thereby turning the byte based InputStream into a character based Reader,"(""InputStreamReader"", ""InputStreamReader wraps InputStream to convert byte stream to character stream"", ""InputStream"")"
The Math is located in the java.lang package and not in the java.math package,"(""Math"", ""Math is located in the java.lang package"", ""java.lang"")"
The Java StringReader class enables you to turn an ordinary String into a Reader,NULL
All elements inserted into the PriorityBlockingQueue must implement the java.lang.Comparable interface,NULL
As mentioned earlier the DataInputStream class is often used together with a DataOutputStream,NULL
java.io.FileReader works much like the FileInputStream except the FileInputStream reads bytes whereas the FileReader reads characters,NULL
Deque.pollLast() is different than removeLast() which throws an exception if the Deque is empty,"(""Deque"", ""pollLast is a method of the Deque class"", ""pollLast""); (""Deque"", ""removeLast is a method of the Deque class"", ""removeLast"")"
The java.util.concurrent.locks package has the following implementations of the Lock interface,NULL
The methods start() and end() will give the indexes into the text where the found match starts and ends,NULL
The tailSet() method works the same way as the headSet() method except it returns all elements that are equal to or higher than the given parameter element,NULL
A thread that calls wait() on any object becomes inactive until another thread calls notify() on that object,"(""Thread"", ""A thread interacts with an object by calling wait() and notify() methods on it."", ""Object"")"
Here is an example of listing all files in a directory via the Java File list() and listFiles() methods,"(""File"", ""The list() method is used to list files in a directory of the File class."", ""list"")"
You can peek at the element at the head of a Queue without taking the element out of the Queue. This is done via the Queue element() or peek() methods.,"(""Queue"", ""The element method is a method of the Queue class that allows access to the head element without removing it."", ""element"")"
The methods Class.getField(String name) and Class.getFields() methods only return public fields so they wont work,"(""getField"", ""getField is a method of the Class class"", ""Class"")"
When you do so you can call connect() read() and write() in asynchronous mode,"(""connect"", ""connect() is a method that can be called in asynchronous mode along with read()."", ""read""); (""connect"", ""connect() is a method that can be called in asynchronous mode along with write()."", ""write"")"
"if you are writing a component that needs to read input from a stream, try to make our component depend on an InputStream, rather than any of it's subclasses (e.g. FileInputStream).",NULL
For inexplicable reasons it is possible for threads to wake up even if notify() and notifyAll() has not been called,"(""Threads"", ""Threads can wake up even if notify() has not been called."", ""notify()"")"
The applyLocalizedPattern() does the same as applyPattern() except it interpretes the characters in the pattern according to the Locale the DecimalFormat was created with,"(""applyLocalizedPattern"", ""applyLocalizedPattern() performs the same function as applyPattern() but with locale-specific interpretation."", ""applyPattern"")"
"You can access these two parts of the duration using the Duration methods:getNano(),getSeconds()","(""Duration"", ""getNano is a method of the Duration class that retrieves the nanoseconds part of the duration."", ""getNano"")"
If you look back at the doSynchronized() method you will notice that the comment between lock() and unlock() states that the code in between these two calls take a long time to execute,"(""doSynchronized"", ""The doSynchronized method calls the lock method before executing its code."", ""lock"")"
When the thread calling lock() right after calls queueObject.wait() it will remain blocked until some other thread calls unlock() which may never happen,"(""lock"", ""The method lock() is called by the thread before it calls wait() on the queueObject, indicating a relationship between locking and waiting on the queueObject."", ""queueObject"")"
Creating a pipe using Java IO is done via the PipedOutputStream and PipedInputStream classes. A PipedInputStream should be connected to a PipedOutputStream. The data written to the PipedOutputStream by one thread can be read from the connected PipedInputStream by another thread.,"(""PipedOutputStream"", ""A PipedInputStream should be connected to a PipedOutputStream."", ""PipedInputStream"")"
Once a thread is awakened it cannot exit the wait() call until the thread calling notify() has left its synchronized block.,"(""Thread"", ""A thread cannot exit the wait() call until the notify() method is called by another thread."", ""wait""); (""Thread"", ""The notify() method is called by a thread to wake up another thread that is waiting."", ""notify""); (""wait"", ""The wait() method is called within a synchronized block to ensure thread safety."", ""synchronized block"")"
"TreeSet also guarantees the order of the elements when iterated, but the order is the sorting order of the elements. In other words, the order in which the elements whould be sorted if you used a Collections.sort() on a List or array containing these elements. This order is determined either by their natural order (if they implement Comparable), or by a specific Comparator implementation","(""TreeSet"", ""TreeSet guarantees order based on the natural order of elements if they implement Comparable"", ""Comparable""); (""TreeSet"", ""TreeSet can also use a specific Comparator implementation to determine order"", ""Comparator"")"
"You can also obtain an Iterator from many of the Java Collection data structures, e.g. a List, Set, Map, Queue, Deque or Map.","(""Iterator"", ""Iterator can be obtained from a List as part of Java Collection data structures."", ""List""); (""Iterator"", ""Iterator can be obtained from a Set as part of Java Collection data structures."", ""Set""); (""Iterator"", ""Iterator can be obtained from a Map as part of Java Collection data structures."", ""Map""); (""Iterator"", ""Iterator can be obtained from a Queue as part of Java Collection data structures."", ""Queue"")"
Instead the critical section is guarded by the lock.lock() and lock.unlock() calls,"(""Lock"", ""Lock.lock is a method of the Lock class that is used to acquire the lock."", ""Lock.lock"")"
The methods mark() and reset() methods are typically used when implementing parsers,NULL
Once you have obtained a Field reference you can get and set its values using the Field.get() and Field.set()methods like this,"(""Field"", ""Field.get() is a method used to retrieve values from a Field reference."", ""get"")"
The poll() and remove() both removes the first element in the Queue,"(""poll"", ""The poll() method operates on the Queue class to remove the first element."", ""Queue"")"
Any other thread calling lock() will be blocked until the thread that locked the lock calls unlock(),"(""Thread"", ""A thread can call the lock method to acquire the lock."", ""Lock"")"
The java.text.DateFormat class is used to format dates as strings according to a specific Locale,NULL
The InputStream class has two methods called mark() and reset() which subclasses of InputStream may or may not support,"(""InputStream"", ""mark() is a method of the InputStream class"", ""mark"")"
java.nio.channels.Selector is not the Channel that pushes the data into the Selector and from there into the component even if that is what the above diagram suggests,NULL
When connected you can also use the read() and write() method as if you were using a traditional channel,NULL
"The mark() sets a mark internally in the InputStream which marks the point in the stream to which data has been read so far. The code using the InputStream can then continue reading data from it. If the code using the InputStream wants to go back to the point in the stream where the mark was set, the code calls reset() on the InputStream.","(""mark"", ""mark() is a method that sets a mark in the InputStream to track the read position."", ""InputStream"")"
These two types of tasks are represented by the RecursiveAction and RecursiveTask classes,NULL
The java.util.concurrent package has the following implementations of the BlockingQueue interface,NULL
If the objects in the Java List do not implement the Comparable interface or if you want to sort the objects in another order than their compare() implementation then you need to use a Comparator implementation (java.util.Comparator),"(""Java List"", ""Java List objects need to implement Comparable to be sorted using their compare() method."", ""Comparable""); (""Java List"", ""Comparator is used to sort Java List objects when they do not implement Comparable."", ""Comparator"")"
The Java SimpleDateFormat class is also capable of formatting a Date object into a StringBuffer instead of returning an individual String with the date formatted,"(""SimpleDateFormat"", ""The SimpleDateFormat class formats a Date object."", ""Date"")"
If the markSupported() method returns false then mark() and reset() are not supported,"(""markSupported"", ""The markSupported() method indicates whether the mark() method is supported."", ""mark"")"
The Matcher replaceAll() and replaceFirst() methods can be used to replace parts of the string the Matcher is searching through,"(""Matcher"", ""The replaceAll method is a method of the Matcher class used for string replacement."", ""replaceAll"")"
In that way the PrintWriter is a bit different from other Writer subclasses which tend to have mostly constructors that can take other Writer instances as parameters (except for a few like OutputStreamWriter),"(""PrintWriter"", ""PrintWriter is a subclass of Writer."", ""Writer"")"
The reduce() method can be combined with the filter() method too,NULL
In case you prefer to use Java NIO instead of Java Networking (standard API) then you can also use a ServerSocketChannel instead of the java.net.ServerSocket,"(""ServerSocketChannel"", ""ServerSocketChannel can be used as an alternative to ServerSocket in Java NIO."", ""ServerSocket"")"
The problem is that since the doNotify() call only calls notify() and not notifyAll() only one thread is awakened even if 4 threads are waiting on the same string instance (the empty string),"(""doNotify"", ""doNotify calls notify as part of its execution"", ""notify""); (""notify"", ""notify is a method that does not awaken all waiting threads unlike notifyAll"", ""notifyAll"")"
You can convert a FileOutputStream to a character based Writer using the Java OutputStreamWriter class,"(""OutputStreamWriter"", ""OutputStreamWriter is a class that converts a FileOutputStream to a character based Writer."", ""Writer"")"
The channel returned by the SelectionKey.channel() method should be cast to the channel you need to work with a ServerSocketChannel or SocketChannel etc,"(""SelectionKey"", ""The channel is a method of the SelectionKey class that returns a channel object."", ""channel""); (""channel"", ""The channel can be cast to a ServerSocketChannel type."", ""ServerSocketChannel"")"
java.io.Writer works just like combining the Reader with InputStream or the Writer with OutputStream,"(""Writer"", ""Writer is compared to InputStream in terms of functionality."", ""InputStream"")"
Object.wait(long timeout) means that the majority of the time waited to be able to lock the lock and enter the critical section is spent waiting in the wait() call inside the lock() method not being blocked trying to enter the lock() method,"(""Object"", ""The wait() method is a function of the Object class that is used to pause execution until a condition is met."", ""wait""); (""wait"", ""The wait() method is called to wait for the lock() method to be available."", ""lock"")"
Remember that even if the 4 threads call wait() and notify() on the same shared string instance the signals from the doWait() and doNotify() calls are stored individually in the two MyWaitNotify instances,"(""MyWaitNotify"", ""The wait() method is called on the MyWaitNotify instance to manage thread synchronization."", ""wait""); (""MyWaitNotify"", ""The notify() method is called on the MyWaitNotify instance to manage thread synchronization."", ""notify""); (""MyWaitNotify"", ""The doWait() method is related to the MyWaitNotify instance for handling waiting threads."", ""doWait"")"
The rest of the components like Pipe and FileLock are merely utility classes to be used in conjunction with the three core components,"(""Pipe"", ""Pipe is described as a utility class that can be used in conjunction with core components."", ""utility classes"")"
java.io.PrintStream example first creates a PrintStream which is connected to an OutputStream,NULL
"If the Deque is empty, pollLast() returns null. This is different than removeLast() which throws an exception if the Deque is empty.","(""pollLast"", ""pollLast() is a method that operates on the Deque class."", ""Deque""); (""removeLast"", ""removeLast() is a method that operates on the Deque class."", ""Deque"")"
The Map computeIfAbsent() method works similarly to the compute() method but the lambda expression is only called if no entry exists already for the given key,"(""computeIfAbsent"", ""The computeIfAbsent method works similarly to the compute method."", ""compute"")"
You can get and set the nanoseconds using the getNanos() and setNanos(),NULL
This OutputStream write() example first creates a FileOutputStream to which the data will be written. Then the example enters a while loop. The condition to exit the while loop is the return value of the method hasMoreData().,"(""write"", ""The method write() is a function of the OutputStream class that writes data to the FileOutputStream."", ""OutputStream"")"
Since the BufferedWriter collects the characters written internally in a buffer before writing them to the underlying Writer the speedup is not as noticeable as with other Writer classes (that do not use buffering),NULL
The Java compiler then generates the corresponding fields getter methods and a hashCode() and equals() method,"(""Java Compiler"", ""The Java compiler generates the corresponding fields getter methods."", ""getter methods""); (""Java Compiler"", ""The Java compiler generates a hashCode() method."", ""hashCode()"")"
The bigger the result String grows the longer it takes to copy the characters from it into a new StringBuilder and again copy the characters from the StringBuilder into the temporary String created by the toString() method,NULL
"Instead of calling the stop() method you will have to implement your thread code so it can be stopped, you can implements Runnable which contains an extra method called doStop() which signals to the Runnable to stop.","(""Runnable"", ""Runnable contains an extra method called doStop() which signals to the Runnable to stop."", ""doStop"")"
The logp() methods work like the log() methods except each method take an extra two parameters The sourceClass and sourceMethod parameter,"(""logp"", ""The logp() methods work like the log() methods, indicating they are similar methods."", ""log""); (""logp"", ""The logp() method takes an extra parameter, sourceMethod, indicating a relationship between them."", ""sourceMethod"")"
But since the thread waiting in lock() has not yet called queueObject.wait() the call to queueObject.notify() passes into oblivion,"(""lock"", ""The method lock() is related to the class queueObject as it is involved in the synchronization process with the queueObject's wait() and notify() methods."", ""queueObject""); (""wait"", ""The method wait() is called on the class queueObject, indicating a direct relationship between them."", ""queueObject"")"
It is possible to compare two buffers using equals() and compareTo(),NULL
The names take() and release() may seem a bit odd when using a semaphore for signaling,"(""Take"", ""The method 'take()' is used for signaling in the context of a semaphore."", ""Semaphore"")"
If you need to read and write the date and time to a database use the java.sql.Date and java.sql.Timestamp classes,"(""Date"", ""Date is a class within the java.sql package"", ""java.sql"")"
Since PipedOutputStream is a subclass of OutputStream PipedOutputStream has the same basic methods and use patterns as an OutputStream,"(""PipedOutputStream"", ""PipedOutputStream is a subclass of OutputStream, indicating an inheritance relationship."", ""OutputStream"")"
In the following sections I will explain how to use the ReentrantLock class as a Lock,NULL
In contrast to the signaling use case the methods take() and release() are now called by the same thread,NULL
The methods notify() and notifyAll() do not save the method calls to them in case no threads are waiting when they are called,NULL
The Matcher appendReplacement() and appendTail() methods are used to replace string tokens in an input text and append the resulting string to a StringBuffer,"(""appendReplacement"", ""appendReplacement is a method of the Matcher class"", ""Matcher""); (""appendTail"", ""appendTail is a method of the Matcher class"", ""Matcher""); (""appendReplacement"", ""appendReplacement modifies a StringBuffer"", ""StringBuffer"")"
The Java BufferedReader class is a subclass of the Java Reader class so you can use a BufferedReader anywhere a Reader is required,NULL
You can convert a Java Set to a Java List by creating a List and calling its addAll() method passing the Set as parameter to the addAll() method,"(""Java Set"", ""Java Set can be converted to a Java List by using the addAll() method."", ""Java List"")"
The add() and offer() methods differ in how the behave if the Queue is full so no more elements can be added,"(""add"", ""The add() method is related to the Queue class as it adds elements to the Queue."", ""Queue"")"
The Collections binarySearch() method can search a Java List for an element using a binary search algorithm. The List must be sorted in ascending order before you search it using binarySearch() .,"(""binarySearch"", ""The binarySearch() method is used to search for an element within a List."", ""List""); (""Collections"", ""The binarySearch() method belongs to the Collections class."", ""binarySearch"")"
If unlockWrite() was not called from inside a finallyclause and an exception was thrown from the critical section the ReadWriteLock would remain write locked forever causing all threads calling lockRead() or lockWrite() on that ReadWriteLock instance to halt indefinately,"(""unlockWrite()"", ""unlockWrite() is a method that affects the state of the ReadWriteLock class by potentially leaving it write locked."", ""ReadWriteLock""); (""lockRead()"", ""lockRead() is a method that attempts to read from the ReadWriteLock class, which may be affected by the state set by unlockWrite()."", ""ReadWriteLock"")"
Third the characters written to the StringWriter are obtained via the two methods toString() and getBuffer(),"(""StringWriter"", ""toString() is a method that operates on the StringWriter class"", ""toString"")"
The decrementAndGet() subtracts 1 from the AtomicInteger value and returns its value after the subtraction. The getAndDecrement() also subtracts 1 from the AtomicInteger value but returns the value the AtomicInteger had before the subtraction.,"(""decrementAndGet"", ""decrementAndGet() is a method that operates on the AtomicInteger class by subtracting 1 from its value."", ""AtomicInteger""); (""getAndDecrement"", ""getAndDecrement() is a method that operates on the AtomicInteger class by subtracting 1 from its value."", ""AtomicInteger"")"
"If the Deque is empty, removeLast() will throw an exception. This is different from pollLast() which returns null if the Deque is empty.","(""removeLast"", ""removeLast() is a method that operates on the Deque class."", ""Deque""); (""pollLast"", ""pollLast() is a method that operates on the Deque class."", ""Deque"")"
You may be familiar with these two wellknown PrintStream instances in Java System.out and System.err,"(""PrintStream"", ""System.out is an instance of the PrintStream class"", ""System.out"")"
"If adding the element fails, for instance if the Deque is full, the push() method will throw an exception. This is similar to how the addFirst() method works.","(""Deque"", ""The push() method is associated with the Deque class as it operates on its instances."", ""push()"")"
Finally you can access the localized values in the ResourceBundle via its different getString() and getObject() etc,"(""ResourceBundle"", ""getString() is a method that accesses localized values from ResourceBundle"", ""getString"")"
"The tailMap() method is similar to the headMap() method, except that tailMap() returns all elements that are equal to or higher than the given parameter element.",NULL
That you would not call wait() and notify() on an internal monitor object but rather on the This is probably true,"(""wait"", ""wait() is a method that should be called on an internal monitor object."", ""internal monitor object"")"
You can parse a String into a java.util.Date instance using the parse() method of the SimpleDateFormat instance,"(""parse"", ""The parse() method is a method of the SimpleDateFormat class used to parse a String into a Date instance."", ""SimpleDateFormat"")"
"If the Deque is empty, peekFirst() returns null. This is similar to how peek() works","(""peekFirst"", ""peekFirst() is a method that operates on the Deque class"", ""Deque""); (""peek"", ""peek() is a method that operates on the Deque class"", ""Deque"")"
When creating and starting a thread a common mistake is to call the run() method of the Thread instead of start() like this,"(""Thread"", ""run() is a method of the Thread class that is commonly misused when starting a thread."", ""run"")"
java.util.logging.Handler is not a Filter even though it has the same effect,NULL
The Java PrintStream class contains the powerful format() and printf() methods (they do exactly the same but the name printf is more familiar to Cprogrammers),"(""PrintStream"", ""The format() method is a member of the PrintStream class."", ""format""); (""PrintStream"", ""The printf() method is a member of the PrintStream class."", ""printf"")"
java.util.TreeSet Comparator will then decide the ordering of the elements in the TreeSet,NULL
Exactly how to handle the calls to commit() and or rollback() is covered in the JDBC Transactions Tutorial,"(""JDBC Transactions Tutorial"", ""The JDBC Transactions Tutorial covers how to handle calls to commit()"", ""commit"")"
You may be tempted then to always call notifyAll() instead notify() but this is a bad idea performance wise,NULL
The File class contains the method mkdir() and mkdirs() for that purpose,"(""File"", ""The File class contains the method mkdir()"", ""mkdir()"")"
The lock() method locks the Lock instance so that all threads calling lock() are blocked until unlock() is executed,"(""lock"", ""The lock() method is a function of the Lock class that manages thread locking."", ""Lock"")"
The call to read() reads a character from the PushbackReader just like from any other Reader,"(""read"", ""The method read() is called on the PushbackReader class to read a character."", ""PushbackReader"")"
java.io.BufferedInputStream is typically much faster than reading a single byte at a time from an InputStream especially for disk access and larger data amounts,NULL
Even though the Java Networking APIs enable you to open and close network connections via sockets all communication happens via the Java IO classes InputStream and OutputStream,"(""Java Networking APIs"", ""Java Networking APIs enable communication through InputStream"", ""InputStream"")"
The tailMap() method is similar to the headMap() method except that tailMap() returns all elements that are equal to or higher than the given parameter element,NULL
Again here the first() and next() methods return the unicode index of the found word boundary,"(""first"", ""The first() method returns the unicode index of the found word boundary"", ""unicode index"")"
"The `getAndIncrement()` method does the same as the `incrementAndGet()` method, except the `getAndIncrement()` method returns the value of the element *before* it is incremented.",NULL
When creating and starting a thread a common mistake is to call the run() method of the Thread instead of start(),"(""Thread"", ""The run() method is a method of the Thread class that is commonly called when working with threads."", ""run"")"
Obviously if the input parameter to contains() is null the contains() method will not use the equals() method to compare against each element but rather use the == operator,"(""contains"", ""The contains() method does not use the equals() method when the input parameter is null."", ""equals"")"
Thus you can use the return values of start() and end() inside a String.substring() call,"(""start"", ""start() is a method that can return values used in a String operation."", ""String""); (""end"", ""end() is a method that can return values used in a String operation."", ""String"")"
The PrintWriter class has all the same methods as the PrintStream except for the methods to write raw bytes,"(""PrintWriter"", ""The PrintWriter class has all the same methods as the PrintStream, indicating a relationship of similarity between the two classes."", ""PrintStream"")"
"The Java SortedMap interface, java.util.SortedMap, is a subtype of the java.util.Map interface, with the addition that the elements stored in a Java SortedMap map are sorted internally. This means you can iterate the elements stored in a SortedMap in the sort order.","(""SortedMap"", ""SortedMap is a subtype of Map."", ""Map"")"
Similarly the compareTo() method should throw a ClassCastException if the input parameter is not of the same class as the class of the object compareTo() is called on,"(""compareTo"", ""The compareTo() method is expected to throw a ClassCastException when the input parameter is not of the same class as the object it is called on."", ""ClassCastException"")"
The class java.lang.Object defines three methods wait() notify() and notifyAll() to facilitate this,"(""Object"", ""The method wait() is defined in the class java.lang.Object."", ""wait""); (""Object"", ""The method notify() is defined in the class java.lang.Object."", ""notify""); (""Object"", ""The method notifyAll() is defined in the class java.lang.Object."", ""notifyAll"")"
Both Java File and FileChannel works but in case you want a pure Java NIO solution use the Java NIO FileChannel class,"(""Java File"", ""Both Java File and FileChannel works together in Java programming."", ""FileChannel"")"
The methods getAndIncrement() and incrementAndGet() works like getAndAdd() and addAndGet() but just add 1 to the value of the AtomicLong,"(""getAndIncrement"", ""Both methods work similarly by adding 1 to the value of the AtomicLong."", ""incrementAndGet"")"
"celingEntry(), floorEntry(), higherEntry(), lowerEntry(),The NavigableMap also has methods to get the entry for a given key, rather than the key itself. These methods behave like the ceilingKey() etc. methods, except they return a Map.Entry instead of the key object itself.","(""NavigableMap"", ""ceilingEntry is a method of the NavigableMap class that retrieves the ceiling entry for a given key."", ""ceilingEntry""); (""NavigableMap"", ""floorEntry is a method of the NavigableMap class that retrieves the floor entry for a given key."", ""floorEntry""); (""NavigableMap"", ""higherEntry is a method of the NavigableMap class that retrieves the higher entry for a given key."", ""higherEntry""); (""NavigableMap"", ""lowerEntry is a method of the NavigableMap class that retrieves the lower entry for a given key."", ""lowerEntry"")"
The Java GZIPOutputStream class (java.util.zip.GZIPOutStream) can be used to GZIP compress data and write it to an OutputStream,NULL
Object.wait(long timeout) allows other threads to call wait() or notify() too since these methods must be called from inside a synchronized block,"(""Object"", ""Object is the class that contains the wait method."", ""wait""); (""Object"", ""Object is the class that contains the notify method."", ""notify"")"
The java.util.TimeZone class is used in conjunction with the java.util.Calendar class,NULL
You do so by calling the Cipher update() or doFinal() methods,"(""Cipher"", ""The update() method is a method of the Cipher class."", ""update()"")"
The BlockingDeque interface in the java.util.concurrent class represents a deque which is thread safe to put into and take instances from,NULL
Here are two examples of taking an element from a Java Queue using its poll() and remove() methods,"(""Queue"", ""poll() is a method of the Queue class used to retrieve and remove the head of the queue."", ""poll"")"
If you need an integer value use the round() floor() or ceil() method,"(""round"", ""Both are methods used to obtain integer values."", ""floor""); (""round"", ""Both are methods used to obtain integer values."", ""ceil"")"
Notice how it is possible to change that reference through both the setValue() and add() methods,NULL
a given date is or convert dates and times between time zones use the java.util.Calendar and java.util.GregorianCalendar classes,"(""Calendar"", ""Calendar is part of the java.util package"", ""java.util""); (""GregorianCalendar"", ""GregorianCalendar is part of the java.util package"", ""java.util"")"
If the call to take() happens before the call to release() the thread calling release() will still know that take() was called because the signal is stored internally in the signal variable,"(""take"", ""The method take() is called before the method release(), indicating a sequence of operations between them."", ""release"")"
The compareAndSet() method can compare the reference stored in the AtomicReference instance with an expected reference and if they two references are the same (not equal as in equals() but same as in ==) then a new reference can be set on the AtomicReference instance,NULL
Anders Hejlsberg on checked vs. unchecked exceptions httpwww.artima.comintvhandcuffs.html James Gosling on checked exceptions httpwww.artima.comintvsolid.html Bill Venners on Exceptions httpwww.artima.cominterfacedesignexceptions.html Bruce Eckel on checked exceptions httpwww.artima.comintvtypingP.html Designing with Exceptions (Bill Venners www.artima.com) httpwww.artima.comdesigntechniquesdesexcept.html Effective Java (Joshua Bloch Addison Wesley 2001) Daniel Pietraru in favor of checked exceptions Exceptional Java Checked exceptions are priceless茂驴�?For everything else there is the RuntimeException,"(""Anders Hejlsberg"", ""Anders Hejlsberg is discussing checked vs. unchecked exceptions."", ""checked exceptions""); (""James Gosling"", ""James Gosling is discussing checked exceptions."", ""checked exceptions""); (""Bill Venners"", ""Bill Venners is discussing Exceptions."", ""Exceptions""); (""Bruce Eckel"", ""Bruce Eckel is discussing checked exceptions."", ""checked exceptions""); (""Joshua Bloch"", ""Joshua Bloch is the author of Effective Java."", ""Effective Java"")"
But the thread waiting in the lock() method will not leave that block until the isLocked is set to false and a monitorObject.notify() is executed as it happens in unlock(),"(""lock"", ""The lock method's execution depends on the isLocked variable being set to false."", ""isLocked""); (""lock"", ""The lock method requires the monitorObject to notify when it is released."", ""monitorObject"")"
As you saw in the previous section when you register a Channel with a Selector the register() method returns a SelectionKey objects,"(""register"", ""The register() method is used to register a Channel with a Selector."", ""Channel""); (""register"", ""The register() method is used to register a Channel with a Selector."", ""Selector"")"
By walking through all directories and deleting all files (inside visitFile()) in each directory and afterwards delete the directory itself (inside postVisitDirectory()) you can delete a directory with all subdirectories and files,NULL
The lower() method does the opposite of the higher() method meaning it returns the highest element that is less than (not equal to) the given parameter,NULL
In many cases though you can replace the use of the File class with use of the Path interface,NULL
Once the Mac instance is initialized you can calculate a MAC from data by calling the update() and doFinal() method,NULL
Deque.offerFirst(E e) is different from the addFirst() method which will throw an exception is adding an element to the beginning of the Deque fails,"(""offerFirst"", ""Both methods are used to add elements to the beginning of the Deque, but offerFirst does not throw an exception while addFirst does."", ""addFirst""); (""Deque"", ""The offerFirst method is a function of the Deque class."", ""offerFirst"")"
The main difference between the Runnable run() method and the Callable call() method is that the call() method can return an Object from the method call,"(""run()"", ""The run() method is compared to the call() method in terms of their functionality."", ""call()""); (""Runnable"", ""The run() method belongs to the Runnable class."", ""run()"")"
The toNanos() is different from the getNano() in that the getNano() only returns the part of the Duration which is less than one second,NULL
Collection.add(E e) is different from the offer() method which will return false if it cannot insert the element,"(""Collection"", ""Collection class has a method named add that takes an element as a parameter."", ""add"")"
To take an element from a Java Queue you can call either its poll() or remove() method,"(""Queue"", ""poll() is a method that can be called on a Queue to take an element."", ""poll"")"
java.util.TreeMap Comparator will then be used to sort the keys of the key value pairs stored in the SortedMap,"(""TreeMap"", ""Comparator is used by TreeMap to sort the keys of the key value pairs."", ""Comparator"")"
If a thread calls lock() twice without calling unlock() in between the second call to lock() will block,"(""Thread"", ""A thread can call the lock() method to acquire a lock."", ""lock"")"
The start() call will return as soon as the thread is started. It will not wait until the run() method is done.,NULL
"If the Deque is empty, peekFirst() returns null. This is similar to how peek() works, but the method name peekFirst() is a bit more saying about which end of the Deque you peek at.","(""Deque"", ""peekFirst() is a method that operates on the Deque class."", ""peekFirst()"")"
If isLocked is true however the thread calling lock() is parked waiting in the monitorObject.wait() call,"(""lock"", ""The method lock() is related to the method wait() as they are both involved in thread synchronization."", ""wait"")"
The remove() method will use the o.equals() to decide if the object o passed as parameter matches a given element in the BlockingQueue.,"(""remove"", ""The remove() method uses the o.equals() method to determine if the object o matches an element."", ""o"")"
"In general you can call the?markSupported()?method to find out if?mark()?and?reset()are supported on a given?InputStream?or not, but the?BufferedInputStream?supports them.","(""BufferedInputStream"", ""BufferedInputStream is a subclass of InputStream, thus it can utilize its methods."", ""InputStream""); (""BufferedInputStream"", ""BufferedInputStream supports the markSupported method."", ""markSupported""); (""BufferedInputStream"", ""BufferedInputStream supports the mark method."", ""mark"")"
If you compare the Lock and FairLock classes you will notice that there is somewhat more going on inside the lock() and unlock() in the FairLock class,"(""Lock"", ""Both classes are being compared in terms of their implementation of the lock() and unlock() methods."", ""FairLock""); (""FairLock"", ""The lock() method is a member of the FairLock class."", ""lock"")"
The third variant of getConnection() takes a database URL and a Properties object as parameter,"(""getConnection"", ""getConnection() takes a Properties object as a parameter"", ""Properties"")"
"You can get the current line number from the?LineNumberReader?by calling the?getLineNumber()method. You can also set the current line number, should you need to, by calling the?setLineNumber()?method","(""LineNumberReader"", ""LineNumberReader class provides the method to retrieve the current line number."", ""getLineNumber"")"
Executing unlock() sets isLocked back to false and notifies (awakens) one of the threads waiting in the wait() call in the lock() method if any,"(""unlock"", ""The unlock() method sets the isLocked state back to false."", ""isLocked""); (""unlock"", ""The unlock() method notifies a thread waiting in the wait() method."", ""wait"")"
The SimpleDateFormat class does this via a version of the format() method that takes the Date StringBuffer and a FieldPosition instance as parameters,"(""SimpleDateFormat"", ""The SimpleDateFormat class uses the format() method to format dates."", ""format""); (""format"", ""The format() method takes a Date as a parameter."", ""Date""); (""format"", ""The format() method takes a StringBuffer as a parameter."", ""StringBuffer"")"
The getAndIncrement() method does the same as the incrementAndGet() method except the getAndIncrement() method returns the value of the element before it is incremented,NULL
java.util.TreeMap Comparator will then be used to sort the keys of the key value pairs stored in the NavigableMap,"(""TreeMap"", ""Comparator is used by TreeMap to sort its keys."", ""Comparator"")"
In other words the calling thread must call wait() or notify() from inside a synchronized block,"(""Thread"", ""The calling thread must call wait() from inside a synchronized block."", ""wait"")"
As you can see both the waiting and notifying thread calls wait() and notify() from within a synchronized block,"(""Synchronized Block"", ""The wait() method is called within a synchronized block to ensure thread safety."", ""Wait"")"
However unless you need to specify all these parameters explicitly for your ThreadPoolExecutor it is often easier to use one of the factory methods in the java.util.concurrent.Executors class as shown in the ExecutorService text,"(""ThreadPoolExecutor"", ""ThreadPoolExecutor can be created using factory methods in the Executors class."", ""Executors"")"
"You can choose between the following Deque implementations in the Java Collections API:java.util.LinkedList,java.util.ArrayDeque","(""Deque"", ""LinkedList is one of the implementations of Deque in the Java Collections API."", ""LinkedList"")"
Put shortly the thread waiting in lock() needs an unlock() call to execute successfully for it to exit lock() and the synchronized blocks inside it,"(""lock"", ""The method lock() requires an unlock() call to execute successfully."", ""unlock"")"
Java NIO has more classes and components than these but the Channel Buffer and Selector forms the core of the API in my opinion,NULL
The DateTimeFormatter is located in the java.time.format package so the fully qualified class name is java.time.format.DateTimeFormatter,NULL
The ceilingEntry() is thus similar to the ceilingKey() method except the ceilingKey() method only returns the key and ceilingKey() returns a Map.Entry object containing both the key and value,"(""ceilingEntry"", ""The ceilingEntry() method is similar to the ceilingKey() method, indicating a relationship in functionality."", ""ceilingKey"")"
"unless you need to specify all these parameters explicitly for your ThreadPoolExecutor, it is often easier to use one of the factory methods in the java.util.concurrent.Executors class","(""ThreadPoolExecutor"", ""ThreadPoolExecutor can be created using factory methods provided in the Executors class."", ""Executors"")"
Once the read operation has completed the data read into the ByteBuffer and then into a String and printed to System.out,"(""ByteBuffer"", ""ByteBuffer is used to read data into a String."", ""String"")"
javax.lang.model.util.Elements is possible to specify generic types for most (if not all) of the components in the Java Collections API,NULL
The Java PrintWriter class contains the powerful format() and printf() methods,"(""PrintWriter"", ""The format() method is a method of the PrintWriter class."", ""format"")"
If an InputStream subclass supports the mark() and reset() methods then that subclass should override the markSupported() to return true,"(""InputStream"", ""InputStream is a subclass that supports the mark method"", ""mark""); (""InputStream"", ""InputStream is a subclass that supports the reset method"", ""reset""); (""mark"", ""mark method should override markSupported method"", ""markSupported"")"
Not until a thread has called release() will the thread calling take() be allowed to deliver its signal,"(""Thread"", ""The method release() is called by a thread to allow it to deliver a signal."", ""release"")"
The poll() and remove() both removes the first element in the Queue. They differ in how they behave if the Queue is empty. The poll() method returns null if the Queue is empty. The remove() method throws an exception if the Queue is empty.,"(""Poll"", ""The poll() method operates on the Queue class."", ""Queue""); (""Remove"", ""The remove() method operates on the Queue class."", ""Queue"")"
Notice how the execute() method will throw an IllegalStateException if execute() is called after stop() has been called,"(""execute"", ""The execute() method throws an IllegalStateException when called after stop()"", ""IllegalStateException"")"
The methods hashCode() and equals() play a distinct role in the objects you insert into Java collections,"(""hashCode"", ""hashCode() and equals() are both methods that play a distinct role in Java collections."", ""equals""); (""hashCode"", ""hashCode() is a method used in the context of Java collections."", ""Java collections"")"
Notice the two synchronized blocks inside the set() and get() method,"(""set"", ""Both methods are part of the same context where synchronized blocks are utilized."", ""get""); (""synchronized block"", ""The synchronized block is used within the set() method."", ""set"")"
Therefore if a thread calls notify() before the thread to signal has called wait() the signal will be missed by the waiting thread,"(""Thread"", ""The notify method is called by a thread to signal another thread."", ""notify"")"
"celingEntry(), floorEntry(), higherEntry(), lowerEntry(),These methods behave like the ceilingKey() etc. methods, except they return a Map.Entry instead of the key object itself.","(""ceilingEntry"", ""ceilingEntry() behaves like ceilingKey() but returns a Map.Entry instead of the key object itself."", ""ceilingKey""); (""floorEntry"", ""floorEntry() behaves like ceilingKey() but returns a Map.Entry instead of the key object itself."", ""ceilingKey""); (""higherEntry"", ""higherEntry() behaves like ceilingKey() but returns a Map.Entry instead of the key object itself."", ""ceilingKey"")"
By default the ConsoleHandler uses a SimpleFormatter to format the messages before writing them to System.err,"(""ConsoleHandler"", ""ConsoleHandler uses SimpleFormatter to format messages"", ""SimpleFormatter"")"
The hashCode() method of objects is used when you insert them into a HashTable HashMap or HashSet,"(""hashCode()"", ""The hashCode() method is used when inserting objects into the HashTable."", ""HashTable""); (""hashCode()"", ""The hashCode() method is used when inserting objects into the HashMap."", ""HashMap"")"
So as you can see a combination of the hashCode() and equals() methods are used when storing and when looking up objects in a hashtable,"(""hashCode"", ""Both methods are used in conjunction for storing and looking up objects in a hashtable."", ""equals""); (""hashCode"", ""The hashCode method is used when storing objects in a hashtable."", ""hashtable"")"
Here is a modified version of MySignal called MyWaitNotify that uses wait() and notify(),"(""MyWaitNotify"", ""MyWaitNotify is a modified version of MySignal"", ""MySignal""); (""MyWaitNotify"", ""MyWaitNotify uses the method wait()"", ""wait()"")"
To set a new System stream use one of th emethods System.setIn() System.setOut() or System.setErr(),"(""System"", ""setIn is a method of the System class used to set the input stream."", ""setIn""); (""System"", ""setOut is a method of the System class used to set the output stream."", ""setOut"")"
"The add() and offer() methods differ in how the behave if the Queue is full, so no more elements can be added. The add() method throws an exception in that case, whereas the offer() method just returns false.","(""add"", ""The add() method interacts with the Queue class by attempting to add elements to it."", ""Queue""); (""offer"", ""The offer() method interacts with the Queue class by attempting to add elements to it."", ""Queue"")"
Both the Pattern and Matcher classes are covered in detail in their own texts,NULL
The Java Set interface as a method called removeAll() which removes all elements in the Set which are also present in another Collection,"(""removeAll"", ""removeAll() is a method of the Set class that operates on Set instances."", ""Set"")"
The Map compute() method takes a key object and a lambda expression as parameters. The lambda expression must implement the java.util.function.BiFunction interface.,"(""Map"", ""The compute() method is a method of the Map class."", ""compute""); (""compute"", ""The compute() method takes a key object as a parameter."", ""key object""); (""compute"", ""The compute() method takes a lambda expression as a parameter."", ""lambda expression"")"
java.text.CollationKey is faster than the stringwise comparison the RuleBasedCollator uses normally,NULL
The ForkJoinPool located in the java.util.concurrent package so the full class name is java.util.concurrent.ForkJoinPool,NULL
Notice how notifyAll() is only called from enqueue() and dequeue() if the queue size is equal to the size bounds (0 or limit),"(""notifyAll"", ""notifyAll() is called from enqueue() when certain conditions are met"", ""enqueue""); (""notifyAll"", ""notifyAll() is called from dequeue() when certain conditions are met"", ""dequeue""); (""enqueue"", ""enqueue() operates on the queue"", ""queue""); (""dequeue"", ""dequeue() operates on the queue"", ""queue""); (""size"", ""size is a property of the queue"", ""queue"")"
In other words you can add all elements from a List or Set into a List with addAll(),"(""List"", ""addAll() is a method that can be used to add elements from a List or Set into a List."", ""addAll()"")"
Since only one thread is allowed to take the semaphore all other threads calling take() will be blocked until release() is called,"(""Semaphore"", ""The take method is used to acquire the semaphore, blocking other threads until it is released."", ""take"")"
The format() and printf() methods allow you to mix text and data in very advanced ways using a formatting string,NULL
The Collections replaceAll() method uses the equals() method of each element to determine if the element is equal to the element to replace or not,"(""replaceAll"", ""The replaceAll method is a method of the Collections class."", ""Collections"")"
The call to unread() pushes a character back into the PushbackReader. The next time read() is called the pushed back characters will be read first.,"(""unread"", ""unread() is a method that operates on the PushbackReader class to push a character back into it."", ""PushbackReader"")"
java.sql.ResultSet ResultSet has 3 different columns (Name Age Gender) and 3 records with different values for each column,"(""ResultSet"", ""ResultSet contains a column named Name"", ""Name""); (""ResultSet"", ""ResultSet contains a column named Age"", ""Age"")"
First the ResourceBundle class will look for a ListResourceBundle and then for a PropertyResourceBundle,"(""ResourceBundle"", ""ResourceBundle class looks for ListResourceBundle as part of its functionality"", ""ListResourceBundle"")"
The returned long value can be used to initialize java.util.Date java.sql.Date java.sql.Timestamp and java.util.GregorianCalendar objects,"(""Date"", ""Date is part of the java.util package"", ""java.util""); (""Timestamp"", ""Timestamp is part of the java.sql package"", ""java.sql"")"
In fact the implementation of the ExecutorService interface present in the java.util.concurrent package is a thread pool implementation,NULL
Notice how the Collections.sort() method now takes a java.util.Comparator as parameter in addition to the List,"(""Collections"", ""Collections class contains the sort method"", ""sort""); (""sort"", ""sort method takes java.util.Comparator as a parameter"", ""java.util.Comparator"")"
For instance ordinary debug trace logging calls to entering() and exiting() would be called at the beginning and end of a method call,"(""Entering"", ""Entering and Exiting are methods that are called at the beginning and end of a method call."", ""Exiting""); (""Debug Trace Logging"", ""Debug Trace Logging is used to log calls to the Entering method."", ""Entering"")"
Each of the methods ceilingEntry() floorEntry() higherEntry() and lowerEntry() will be covered in the following sections,NULL
java.text.SimpleDateFormat is not exactly clear how the FieldPosition instance is used,NULL
The LocalDate Java class is located in the java.time package so its fully qualified class name is java.time.LocalDate,NULL
If there is no more data to read from the underlying Reader then the BufferedReader readLine() method will return null,NULL
java.util.List is different from a Java Set where each element can occur only once,NULL
Deque.addLast(E e) is different from the offerLast() method which will return false if the element cannot be added to the Deque,"(""addLast"", ""addLast is a method of the Deque class that is compared to the offerLast method."", ""offerLast"")"
Do not confuse this class with the java.util.Arrays class in the Java Collections suite which contains utility methods for sorting arrays converting them to collections etc,NULL
You obtain a Collection of the values stored in a Map via the values() method,"(""values"", ""The values() method returns a Collection of values from the Map."", ""Collection"")"
Unfortunately if an exception is thrown during the write() call in the example above that exception will cause the program flow to break before the close() method is called,NULL
Being a subclass of Hashtable you can actually use the get() and put() method of the Hashtable class which allow the use of nonstring keys and values,"(""Hashtable"", ""The get() method is a method of the Hashtable class that allows retrieval of values using nonstring keys."", ""get"")"
"A Java Properties instance clearly is as Hashtable, but it should not share the Hashtable interface. So - the ""Is a"" part of this rule should be interpreted as ""Should be usable as a"" instead. Using that formulation, Properties would not have been made a subclass of Hashtable, because Properties should not be usable as a Hashtable .",NULL
"I mean, only the same, single thread is ever allowed to call inc(). Multiple threads can call count().",NULL
"If the Deque is empty, poll() returns null. This is different than remove() which throws an exception if the Deque is empty.",NULL
The peek() works like the element() method except it does not throw an exception if the Queue is empty. Instead it just returns null.,"(""peek"", ""peek() works like the element() method except it does not throw an exception if the Queue is empty."", ""element""); (""peek"", ""peek() is a method that operates on the Queue class."", ""Queue"")"
Notice the doStop() and keepRunning() methods. The doStop() is intended to be called from another thread than the thread executing the MyRunnable's run() method. The keepRunning() method is called internally by the thread executing the MyRunnable's run() method. As long as doStop() has not been called the keepRunning() method will return true - meaning the thread executing the run() method will keep running.,"(""doStop"", ""doStop() is intended to be called from another thread than the thread executing MyRunnable's run() method."", ""MyRunnable""); (""keepRunning"", ""keepRunning() method is called internally by the thread executing MyRunnable's run() method."", ""MyRunnable"")"
System.err works like System.out except it is normally only used to output error texts,NULL
To do so set the upper bound to 1 and have the call to take() and release() guard the critical section,NULL
java.io.InputStream method is useful if you need to read all bytes from a file via a FileInputStream into a byte array,"(""InputStream"", ""InputStream is a method that reads bytes from a file using FileInputStream."", ""FileInputStream"")"
Notice how the getMonth() and getDayOfWeek() methods return an enum instead of an int,NULL
java.io.InputStreamReader example first creates a FileInputStream and then wraps it in an InputStreamReader,NULL
Deque.offerLast(E e) is different from the addLast() method which will throw an exception is adding an element to the end of the Deque fails,"(""Deque"", ""offerLast is a method of the Deque class that adds an element to the end."", ""offerLast"")"
Java has 3 streams called System.in System.out and System.err which are commonly used to provide input to and output from Java applications,"(""Java"", ""Java uses System.in as a method for input."", ""System.in""); (""Java"", ""Java uses System.out as a method for output."", ""System.out"")"
To access a private field you will need to call the Class.getDeclaredField(String name) or Class.getDeclaredFields() method,"(""Class"", ""getDeclaredField is a method of the Class class that retrieves a field by name."", ""getDeclaredField"")"
"If the Deque is empty, pollFirst() returns null. This is different than removeFirst() which throws an exception if the Deque is empty.","(""Deque"", ""pollFirst() is a method that operates on the Deque class."", ""pollFirst""); (""Deque"", ""removeFirst() is a method that operates on the Deque class."", ""removeFirst"")"
Once you have opened a socket (network connection) though you read and write data to and from it via Java IO InputStream and OutputStream classes,"(""Socket"", ""Socket is used to read and write data via InputStream."", ""InputStream"")"
java.util.Set is different from a Java List where each element can occur more than once,NULL
Keep in mind that if some of the operations in the transaction fail you would most likely want to call the rollback() method instead of commit(),NULL
The min() and max() methods return an Optional instance which has a get() method on which you use to obtain the value,"(""min"", ""The min() method returns an Optional instance."", ""Optional""); (""max"", ""The max() method returns an Optional instance."", ""Optional"")"
Only one thread can execute inside any of the two add() and subtract() methods at any given time,NULL
A Java Callable is different from a Runnable in that the Runnable interface run() method does not return a value and it cannot throw checked exceptions (only RuntimeExceptions),"(""Callable"", ""Both are interfaces in Java that define tasks to be executed by threads."", ""Runnable""); (""Runnable"", ""The run() method is a part of the Runnable interface, which defines the task to be executed."", ""run"")"
The ConcurrentHashMap is very similar to the java.util.HashTable class except that ConcurrentHashMap offers better concurrency than HashTable does,NULL
You shut down a ScheduledExecutorService using the shutdown() or shutdownNow() methods which are inherited from the ExecutorService interface,"(""ScheduledExecutorService"", ""ScheduledExecutorService can be shut down using the shutdown() method."", ""shutdown""); (""ScheduledExecutorService"", ""ScheduledExecutorService can be shut down using the shutdownNow() method."", ""shutdownNow""); (""shutdown"", ""shutdown() method is inherited from the ExecutorService interface."", ""ExecutorService"")"
It is the last line of this example that calls the List stream() method to obtain the Stream representing the elements in the List.Once you have obtained a Stream from a List you can iterate the Stream by calling its forEach() method.,"(""List"", ""The List class has a method called stream() that returns a Stream object."", ""stream"")"
Using that formulation Properties would not have been made a subclass of Hashtable because Properties should not be usable as a Hashtable,NULL
Many of the core components in the Java Collection API rely on the correct implementation of the `hashCode()` and `equals()` methods.,"(""Java Collection API"", ""The Java Collection API relies on the correct implementation of the hashCode() method."", ""hashCode()"")"
System.in System.out and System.err are initialized by the Java runtime when a Java VM starts up so you dont have to instantiate any streams yourself (although you can exchange them at runtime),"(""System.in"", ""System.in is initialized by the Java runtime when a Java VM starts up."", ""Java VM""); (""System.out"", ""System.out is initialized by the Java runtime when a Java VM starts up."", ""Java VM"")"
"In case the write() method throws an exception, the close() method will never get called.",NULL
You create a Path instance using a static method in the Paths class (java.nio.file.Paths) named Paths.get(),"(""Paths"", ""Paths.get() is a static method in the Paths class used to create a Path instance."", ""get"")"
"If no permits are available, the acquire() call will block until a permit is released by another thread. Similarly, a release() calls is blocked if no more permits can be released into this semaphore.","(""acquire"", ""The acquire() method is used to obtain a permit from the semaphore."", ""semaphore"")"
The submaps are the maps returned by various methods like headMap() subMap() and tailMap(),"(""Submaps"", ""Submaps are returned by the method headMap()"", ""HeadMap""); (""Submaps"", ""Submaps are returned by the method subMap()"", ""SubMap"")"
If your Java SortedMap was created using a Comparator you can obtain the Comparator used via the SortedMap comparator() method,"(""SortedMap"", ""SortedMap is created using a Comparator."", ""Comparator"")"
You can change this pattern later using the applyPattern() or applyLocalizedPattern() method,NULL
The AtomicBoolean class is located in the java.util.concurrent.atomic package so the full class name is java.util.concurrent.atomic.AtomicBoolean,NULL
java.io.InputStreamReader example creates a FileInputStream and wraps it in a InputStreamReader,NULL
When the process() method of the subclass is called the full process is executed including the stepBefore() and stepAfter() of the abstract superclass and the action() method of the subclass,"(""process"", ""The process() method is defined in the subclass and is executed when called."", ""subclass""); (""stepBefore"", ""The stepBefore() method is part of the execution process in the abstract superclass."", ""abstractSuperclass""); (""stepAfter"", ""The stepAfter() method is part of the execution process in the abstract superclass."", ""abstractSuperclass"")"
If you want to set a different offset for the dest byte array there is a version of update() and doFinal() which takes an offset parameter extra,"(""update"", ""Both methods are related as they are versions that handle an offset parameter for the dest byte array."", ""doFinal""); (""update"", ""The update method is used to set a different offset for the dest byte array."", ""dest byte array"")"
java.security.cert.X509Certificate class represents an X.509 certificate which is used as identity certificate in HTTPS and TLS,"(""X509Certificate"", ""X509Certificate is used as an identity certificate in HTTPS."", ""HTTPS"")"
java.io.PrintWriter example first creates a PrintWriter instance which is connected to a FileWriter,NULL
The Java CharArrayReader is handy when you have data in a char array but need to pass that data to some component which can only read from a Reader (or a Reader subclass),NULL
The compareAndSet() method can compare the reference stored in the AtomicStampedReference instance with an expected reference and the stored stamp with an expected stamp and if they two references and stamps are the same (not equal as in equals() but same as in ==) then a new reference can be set on the AtomicStampedReference instance,NULL
The BoundedSemaphore class shown below has two testandset methods take() and release(),"(""BoundedSemaphore"", ""The take method is a method of the BoundedSemaphore class."", ""take"")"
For a 100% precise description of how to implement equals() and hashCode() you should check out the official JavaDoc,"(""equals"", ""equals() and hashCode() are methods that are often implemented together in Java classes for object comparison and hashing."", ""hashCode""); (""JavaDoc"", ""JavaDoc provides official documentation for the equals() method."", ""equals"")"
You could view the LocalDateTime as a combination of the LocalDate and LocalTime classes of the Java 8 date time API,"(""LocalDateTime"", ""LocalDateTime is a combination of LocalDate and LocalTime classes"", ""LocalDate""); (""LocalDateTime"", ""LocalDateTime is a combination of LocalDate and LocalTime classes"", ""LocalTime""); (""LocalDate"", ""LocalDate is part of the Java 8 date time API"", ""Java 8 date time API"")"
InputStream.read() example creates an AsynchronousFileChannel and then creates a ByteBuffer which is passed to the read() method as parameter along with a position of 0,"(""InputStream"", ""InputStream has a method called read() which is being invoked."", ""read()""); (""AsynchronousFileChannel"", ""AsynchronousFileChannel is created as part of the read() operation."", ""read()"")"
When the thread that locked the Lock in the first place tries to unlock it by calling unlock() it will be blocked trying to enter the synchronized(this) block in the unlock() method,"(""Lock"", ""The unlock() method is called on the Lock class to release the lock."", ""unlock()""); (""unlock()"", ""The unlock() method attempts to enter the synchronized block."", ""synchronized()"")"
Of course you could do this with the start() and end() methods but it is easier to do so with the group functions,"(""start"", ""Both methods are mentioned as alternatives for achieving a task."", ""end""); (""group functions"", ""The group functions are described as an easier alternative to using the start method."", ""start"")"
java.lang.StringBuffer text explains how to use the SimpleDateFormat class to format dates,NULL
The Java?ExecutorService?submit(Callable)?method is similar to the?submit(Runnable)?method except it takes a?Java Callable?instead of a?Runnable.?,"(""ExecutorService"", ""The submit method is a part of the ExecutorService class."", ""submit""); (""submit"", ""The submit method can take a Callable as an argument."", ""Callable"")"
Just to make it clear You should NOT use the put() and get() method of the Properties class!,"(""Properties"", ""put() is a method of the Properties class that should not be used."", ""put"")"
The Java compiler auto generates getter methods toString() hashcode() and equals() methods for these data fields so you dont have to write that boilerplate code yourself,"(""Java Compiler"", ""The Java compiler auto generates the toString() method for these data fields."", ""toString()""); (""Java Compiler"", ""The Java compiler auto generates the hashcode() method for these data fields."", ""hashcode()"")"
java.nio.channels.Selector means that you cannot use FileChannel with a Selector since FileChannel cannot be switched into nonblocking mode,NULL
Just set a new InputStream for System.in or a new OutputStream for System.out or System.err and all further data will be read written to the new stream,"(""InputStream"", ""InputStream is used to set a new input stream for System.in."", ""System.in""); (""OutputStream"", ""OutputStream is used to set a new output stream for System.out."", ""System.out"")"
Creating a pipe using Java IO is done via the PipedOutputStream and PipedInputStream classes,NULL
The biggest difference between java.sql.Date and java.sql.Timestamp is that the java.sql.Date only keeps the date not the time of the date it represents,NULL
Since the parameters of the Finder.find() and MyClass.doFind() methods match it is possible to create a lambda expression that implements Finder.find() and references the MyClass.doFind() method,"(""Finder"", ""Finder is a class that contains the method find()"", ""find""); (""MyClass"", ""MyClass is a class that contains the method doFind()"", ""doFind"")"
Here is an example of obtaining the Comparator used by a SortedMap via its comparator() method,"(""comparator"", ""The comparator() method is used to obtain the Comparator associated with the SortedMap class."", ""SortedMap"")"
"The getAndDecrement() method does the same as the decrementAndGet() method, except the getAndDecrement() method returns the value of the element before it is decremented.",NULL
The Matcher lookingAt() method works like the matches() method with one major difference,NULL
In general you can call the markSupported() method to find out if mark() and reset() are supported on a given InputStream or not but the BufferedInputStream supports them,"(""BufferedInputStream"", ""BufferedInputStream supports the markSupported() method to check if mark() and reset() are supported."", ""markSupported""); (""BufferedInputStream"", ""BufferedInputStream is a subclass of InputStream."", ""InputStream""); (""markSupported"", ""markSupported() method is related to mark() method as it checks if mark() is supported."", ""mark"")"
Lock.lock() result is that any thread calling either lock() or unlock() will become blocked indefinately,"(""Lock"", ""lock() is a method of the Lock class"", ""lock""); (""Lock"", ""unlock() is a method of the Lock class"", ""unlock"")"
The getAndDecrement() method does the same as the decrementAndGet() method except the getAndDecrement() method returns the value of the element before it is decremented,NULL
The Collection interface has two methods to check if a Collection contains one or more certain elements. These are the contains() and containsAll() methods.,"(""Collection"", ""contains is a method of the Collection class that checks for certain elements."", ""contains"")"
"The newLine() method which can write a new-line character to the underlying Writer. In addition, you may need to call flush() if you need to be absolutely sure that the characters written until now is flushed out of the buffer and onto the network or disk.","(""newLine"", ""The newLine() method writes a new-line character to the underlying Writer."", ""Writer"")"
To calculate a MAC value you call the Mac update() or doFinal() method,"(""Mac"", ""The update method is called on the Mac class to calculate a MAC value."", ""update"")"
The java.util.concurrent package has the following implementations of the BlockingDeque interface,NULL
Notice how the calculate() method both locks the Calculator instance Lock before performing any calculations and also call the add() and subtract() methods which also locks the lock,"(""calculate"", ""calculate() is a method of the Calculator class that performs calculations."", ""Calculator""); (""add"", ""add() is a method called by calculate() within the Calculator class."", ""Calculator""); (""subtract"", ""subtract() is a method called by calculate() within the Calculator class."", ""Calculator"")"
After calling read() the example loops until the isDone() method of the returned Future returns true,"(""read"", ""The read() method is called on an instance of the Future class."", ""Future"")"
Deque.pollFirst() is different than removeFirst() which throws an exception if the Deque is empty,"(""Deque"", ""pollFirst() is a method of the Deque class"", ""pollFirst()""); (""Deque"", ""removeFirst() is a method of the Deque class"", ""removeFirst()"")"
Adding and getting elements to a generic Map is done using the put() and get() methods,"(""Map"", ""The put() method is used to add elements to the Map."", ""put()"")"
Java IO contains many subclasses of the InputStream OutputStream Reader and Writer classes,"(""Java IO"", ""Java IO contains many subclasses of the InputStream class"", ""InputStream""); (""Java IO"", ""Java IO contains many subclasses of the OutputStream class"", ""OutputStream""); (""Java IO"", ""Java IO contains many subclasses of the Reader class"", ""Reader"")"
Even if you can get get() and put() to work I would recommend that you do not use these methods,NULL
Lock.unlock() will remain blocked until the thread waiting in lock() leaves the synchronized(this) block,"(""Lock"", ""unlock is a method of the Lock class"", ""unlock""); (""Lock"", ""lock is a method of the Lock class"", ""lock"")"
The Path interface is located in the java.nio.file package so the fully qualified name of the Java Path interface is java.nio.file.Path,NULL
Here are two examples of adding elements to a Java Queue via its add() and offer() methods,"(""Java Queue"", ""The add() method is used to add elements to the Java Queue."", ""add()"")"
The methods Class.getMethod(String name Class[] parameterTypes) and Class.getMethods() methods only return public methods so they wont work,"(""getMethod"", ""getMethod is a method of the Class class"", ""Class"")"
"BlockingQueue.offer(E e, long timeout, TimeUnit unit) is different from the add() method which will throw an exception is adding an element to the end of the Deque fails","(""BlockingQueue"", ""offer is a method of the BlockingQueue class that allows adding elements with a timeout."", ""offer""); (""BlockingQueue"", ""add is a method that throws an exception if adding an element to the Deque fails, contrasting with offer."", ""add"")"
The ByteArrayInputStream class is a subclass of the InputStream class so you can use a ByteArrayInputStream as an InputStream,NULL
If you need to set a date on a java.sql.PreparedStatement or get a date from a java.sql.ResultSet you will interact with java.sql.Date,"(""PreparedStatement"", ""PreparedStatement can set a date using java.sql.Date."", ""Date"")"
The java.nio.file.Files class works with java.nio.file.Path instances so you need to understand the Path class before you can work with the Files class,NULL
Both PipedInputStream and PipedOutputStream has a connect() method that can connect one to the other,"(""PipedInputStream"", ""PipedInputStream and PipedOutputStream can connect one to the other using the connect() method."", ""PipedOutputStream"")"
java.awt.List is the last line of this example that calls the List stream() method to obtain the Stream representing the elements in the List,"(""List"", ""The List class has a method called stream() that is used to obtain a Stream."", ""stream"")"
Queue.poll() is different than remove() which throws an exception if the Deque is empty,"(""poll"", ""Both are methods that operate on collections, but poll() does not throw an exception while remove() does if the collection is empty."", ""remove"")"
java.util.Collection represents an ordered sequence of objects just like a Java List but its intended use is slightly different,NULL
Another difference between call() and run() is that call() can throw an exception whereas run() cannot (except for unchecked exceptions subclasses of RuntimeException),NULL
As you can see the key Iterator returns every key stored in a Java Map one by one (one for each call to next()),NULL
The awaitTermination() method is typically called after calling shutdown() or shutdownNow(),"(""awaitTermination"", ""The awaitTermination() method is typically called after calling shutdown()"", ""shutdown"")"
Collection.remove(Object o) is different from poll() which returns null if the Deque is empty,"(""Collection"", ""remove is a method of the Collection class that operates on Object instances."", ""remove"")"
The Java GZIPInputStream and GZIPOutputStream classes are used to ZIP compress a single file,NULL
The java.util.concurrent package contains the following implementations of the ConcurrentMap interface,NULL
Receiving data via a DatagramSocket is done by first creating a DatagramPacket and then receiving data into it via the DatagramSocket receive() method,"(""DatagramSocket"", ""DatagramPacket is created to receive data via a DatagramSocket."", ""DatagramPacket"")"
"Notice how the while loop continues until a -1 value is read from the ByteArrayInputStream read() method. After that, the while loop exits, and the ByteArrayInputStream close() method is called.","(""ByteArrayInputStream"", ""The read() method is a method of the ByteArrayInputStream class."", ""read()"")"
Notice how we can call the addAndReturn() method using both String and Integer and their corresponding collections,"(""addAndReturn"", ""The addAndReturn() method can be called using the String class."", ""String""); (""addAndReturn"", ""The addAndReturn() method can be called using the Integer class."", ""Integer""); (""String"", ""String is part of the collections package."", ""collections"")"
"As you can see, the DecimalFormat is created with a formatting pattern. You can change this pattern later using the applyPattern() or applyLocalizedPattern() method.","(""DecimalFormat"", ""The applyPattern method is used to change the formatting pattern of the DecimalFormat class."", ""applyPattern"")"
For that you need to use the find() start() and end() methods,"(""find"", ""Both methods are used in conjunction to perform operations."", ""start""); (""find"", ""Both methods are used in conjunction to perform operations."", ""end"")"
The Java Stack class actually implements the Java List interface but you rarely use a Stack as a List except perhaps if you need to inspect all elements currently stored on the stack,NULL
In Java 6 to 13 there is only one implementation of the NavigableSet interface in the java.util package The java.util.TreeSet class,"(""NavigableSet"", ""The NavigableSet interface is implemented in the java.util package."", ""java.util"")"
In many ways the java.nio.file.Path interface is similar to the java.io.File class but there are some minor differences,NULL
java.io.CharArrayReader is also possible to write data to an ByteArrayOutputStream or CharArrayWriter,"(""CharArrayReader"", ""CharArrayReader can write data to ByteArrayOutputStream"", ""ByteArrayOutputStream"")"
"The first method, addAndGet() adds a number to the AtomicInteger and returns its value after the addition. The second method, getAndAdd() also adds a number to the AtomicInteger but returns the value the AtomicInteger had before the value was added.","(""addAndGet"", ""addAndGet() is a method that operates on the AtomicInteger class by adding a number to it."", ""AtomicInteger""); (""getAndAdd"", ""getAndAdd() is a method that operates on the AtomicInteger class by adding a number to it."", ""AtomicInteger"")"
Here is an example of obtaining the Comparator used by a SortedSet via the comparator() method,"(""comparator"", ""The comparator() method is used to obtain the Comparator class."", ""Comparator"")"
You will call take() instead of notify() and release() instead of wait(),"(""take"", ""take() is suggested as a replacement for notify()"", ""notify"")"
The problem with calling wait() and notify() on the empty string or any other constant string is that the JVMCompiler internally translates constant strings into the same object,"(""wait"", ""The method wait() is related to the JVMCompiler as it is executed within the context of the Java Virtual Machine, which the JVMCompiler is a part of."", ""JVMCompiler""); (""notify"", ""The method notify() is related to the JVMCompiler as it is executed within the context of the Java Virtual Machine, which the JVMCompiler is a part of."", ""JVMCompiler"")"
"if the Deque is full, the offerFirst() method returns false. This is different from the addFirst() method which will throw an exception is adding an element to the beginning of the Deque fails.","(""Deque"", ""The offerFirst() method is associated with the Deque class as it operates on its instances."", ""offerFirst"")"
You read characters from a Java PushbackReader just like you do from a Java Reader because PushbackReader is a Java Reader subclass,NULL
Since the Map does not contain any object stored by the key E the given default value will be returned which is the String default value passed as the last parameter to the getOrDefault() method,"(""Map"", ""The getOrDefault() method is used to retrieve a value from the Map, which is related to the Map class."", ""getOrDefault()"")"
When you call select() or selectNow() on the Selector it gives you only the SelectableChannel instances that actually has data to read,"(""select()"", ""select() is a method that is called on the Selector class"", ""Selector""); (""selectNow()"", ""selectNow() is a method that is called on the Selector class"", ""Selector""); (""select()"", ""select() returns instances of SelectableChannel"", ""SelectableChannel"")"
"For the SortedSet to be able to determine the natural order of the elements, the elements must implement the java.lang.Comparable interface.",NULL
For the SortedSet to be able to determine the natural order of the elements the elements must implement the java.lang.Comparable interface,NULL
java.util.concurrent.RecursiveTask example is similar to the RecursiveAction example except it returns a result,"(""RecursiveTask"", ""Both are examples of classes that are used in concurrent programming in Java, with RecursiveTask returning a result while RecursiveAction does not."", ""RecursiveAction""); (""RecursiveTask"", ""RecursiveTask is part of the java.util.concurrent package."", ""java.util.concurrent"")"
Notice the two synchronized blocks inside the set() and get() method. Notice how the blocks are placed last and first in the two methods.,NULL
This Keytool delete command will remove the KeyStore entry with the alias testkey from the KeyStore stored in the file keystore.jks,"(""Keytool"", ""Keytool is a class that contains the delete method for managing KeyStore entries."", ""delete""); (""delete"", ""The delete method is used to remove an entry from the KeyStore."", ""KeyStore""); (""KeyStore"", ""testkey is the alias of the KeyStore entry being removed."", ""testkey"")"
Deque.addFirst(E e) is different from the offerFirst() method which will return false if an element cannot be inserted in the beginning of the Deque,"(""addFirst"", ""Both methods are related as they are used to manipulate elements in the Deque, with addFirst adding an element and offerFirst checking if an element can be added."", ""offerFirst"")"
To access a private method you will need to call the Class.getDeclaredMethod(String name Class[] parameterTypes) or Class.getDeclaredMethods() method,"(""Class"", ""getDeclaredMethod is a method that belongs to the Class class"", ""getDeclaredMethod"")"
There are several overridden versions of both update() and doFinal() which takes different parameters,NULL
If you look at the example in the previous section imagine what happens if an exception is thrown between the call to lock.lock() and lock.unlock(),NULL
"The replace() method will only insert the new value if there is already an existing value mapped to the key. If no existing value is mapped to the given key, no value is inserted. This is different from how put() works, which always insert the value no matter what.",NULL
The logrb() methods work like the log() methods too except they can obtain the log messages from a resource bundle,NULL
a stop() or pause() method too) then you can no longer create your Runnable implementation with a Java lambda expression,"(""Runnable"", ""The stop method is related to the Runnable class as it is a method that can be implemented in a Runnable context."", ""stop""); (""Runnable"", ""The pause method is related to the Runnable class as it is a method that can be implemented in a Runnable context."", ""pause"")"
java.security.KeyStore example loads the KeyStore file located in the keystore.ks file,NULL
The queueObject.doWait() call is placed outside the synchronized(this) block to avoid nested monitor lockout so another thread can actually call unlock() when no thread is executing inside the synchronized(this) block in lock() method,"(""queueObject"", ""doWait is a method of the queueObject class."", ""doWait""); (""synchronized"", ""synchronized is a method that is related to the lock method in the context of thread synchronization."", ""lock"")"
The read() and write() calls on the streams are blocking meaning if you try to use the same thread to both read and write this may result in the thread deadlocking itself,"(""read"", ""The read() method is called on the streams class."", ""streams"")"
"mutiple blocks from a large file, you call the update() once for each block of data, and finish with a call to doFinal() with the last data loce",NULL
That means that when a thread invokes a read() or write() that thread is blocked until there is some data to read or the data is fully written,"(""Thread"", ""A thread invokes the read() method, indicating a direct interaction between the thread and the read operation."", ""read"")"
You can convert a Java List to a Java Array using the List toArray() method,"(""List"", ""toArray() is a method that converts a List to an Array"", ""toArray()"")"
When the thread is done with the code in the critical section (the code between lock() and unlock()) the thread calls unlock(),"(""Thread"", ""The thread executes the code within the critical section."", ""CriticalSection""); (""CriticalSection"", ""The critical section is defined by the lock() method."", ""Lock"")"
The LinkedList class is a pretty standard Deque and Queue implementation,"(""LinkedList"", ""The LinkedList class is a standard implementation of the Deque."", ""Deque"")"
The System class also has a getProperty() and setProperty() method which are shortcuts to the Properties getProperty() and setProperty() methods of the System Properties instance,"(""getProperty"", ""getProperty() is a method of the System class"", ""System""); (""setProperty"", ""setProperty() is a method of the System class"", ""System""); (""getProperty"", ""getProperty() is a method of the Properties class"", ""Properties""); (""setProperty"", ""setProperty() is a method of the Properties class"", ""Properties"")"
The Handler in the Java Logging API use a java.util.logging.Formatter to format the LogRecord before writing it to an external system,"(""Handler"", ""The Handler uses a Formatter to format the LogRecord."", ""Formatter""); (""Formatter"", ""The Formatter formats the LogRecord before it is written to an external system."", ""LogRecord"")"
The compare() method returns an int with the same meaning as the String.compareTo() method,NULL
The method getBuffer() returns the StringBuffer used by the StringWriter to build the string from the written characters,"(""getBuffer"", ""The method getBuffer() returns an instance of StringBuffer."", ""StringBuffer"")"
java.io.Writer is faster to write an array of characters to a Java BufferedWriter than writing one character at a time,NULL
java.util.Stack Java example pushes a Java String with the text 1 onto the Stack,"(""Stack"", ""The Stack class is used to push a String onto it."", ""String"")"
Deque.peekFirst() is similar to how peek() works but the method name peekFirst() is a bit more saying about which end of the Deque you peek at,"(""Deque"", ""peekFirst() is a method of the Deque class that retrieves the first element."", ""peekFirst"")"
To sort a collection of strings according to the rules of a certain Locale you use a java.text.Collator instance created for that specific Locale,NULL
