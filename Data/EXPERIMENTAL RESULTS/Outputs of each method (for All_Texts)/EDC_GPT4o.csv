The Java Collection interface (java.util.Collection) is one of the root interfaces of the Java Collection API.,"[('Java Collection interface', 'part of', 'Java Collection API'), ('Java Collection interface', 'has namespace', 'java.util.Collection')]"
Adding an element to a Collection is done via the add() method.,"[('element', 'added to', 'Collection'), ('add() method', 'used for', 'adding an element')]"
"The add() method adds the given element to the collection, and returns true if the Collection changed as a result of calling the add() method.","[('add() method', 'adds', 'given element'), ('add() method', 'adds to', 'collection'), ('add() method', 'returns', 'true'), ('Collection', 'changed as a result of', 'calling the add() method')]"
"On the other hand, if you called add() on a List and the List already contained that element, the element would then exist twice in the List.","[('add()', 'called on', 'List'), ('List', 'contains', 'element'), ('element', 'exists twice in', 'List')]"
"The remove() method removes the given element from the Collection and returns true if the removed element was present in the Collection, and was removed.","[('remove() method', 'removes', 'given element'), ('remove() method', 'removes from', 'Collection'), ('remove() method', 'returns', 'true'), ('removed element', 'was present in', 'Collection')]"
"If the element was not present, the remove() method returns false.","[('element', 'not present', 'remove() method'), ('remove() method', 'returns', 'false')]"
You can also add a collection of objects to a Java Collection using the addAll().,"[('addAll()', 'used to add', 'collection of objects'), ('collection of objects', 'can be added to', 'Java Collection')]"
The Java Collection addAll() adds all elements found in the Collection passed as parameter to the method.,"[('addAll()', 'adds elements', 'Collection'), ('elements', 'found in', 'Collection'), ('Collection', 'passed as parameter to', 'addAll()')]"
"If you had called add() with the Collection as parameter instead, the Collection object itself would have been added, not its elements.","[('add()', 'called with', 'Collection as parameter'), ('Collection object', 'would have been added', 'not its elements')]"
Exactly how the addAll() method behaves depends on the Collection subtype.,"[('addAll() method', 'behavior depends on', 'Collection subtype')]"
The Java Collection removeAll() removes all elements found the Collection passed as parameter to the method.,"[('removeAll()', 'removes elements from', 'Collection'), ('Collection', 'passed as parameter to', 'removeAll()')]"
"contains() returns true if the collection contains the element, and false if not.","[('contains()', 'returns', 'true'), ('contains()', 'returns', 'false'), ('collection', 'contains', 'element')]"
"containsAll() returns true if the collection contains all the elements in the parameter collection, and false if not.","[('containsAll()', 'returns', 'true'), ('containsAll()', 'returns', 'false'), ('collection', 'contains', 'elements'), ('elements', 'in', 'parameter collection')]"
You can check the size of a collection using the size() method.,"[('size()', 'method of', 'collection'), ('collection', 'has property', 'size')]"
The Java Stream API provides a more functional programming approach to iterating and processing elements of e.g.,"[('Java Stream API', 'provides', 'functional programming approach'), ('functional programming approach', 'used for', 'iterating and processing elements')]"
You obtain a stream from a collection by calling the stream() method of the given collection.,"[('stream()', 'method of', 'collection'), ('stream()', 'obtain', 'stream'), ('collection', 'has method', 'stream()')]"
Then a Stream of strings is obtained by calling the items.stream() method.,"[('Stream of strings', 'obtained by', 'calling items.stream() method')]"
"This is similar to how you obtain an Iterator by calling the items.iterator() method, but a Stream is a different animal than an Iterator.","[('you', 'obtain', 'Iterator'), ('you', 'call method', 'items.iterator()'), ('Stream', 'is a different animal than', 'Iterator')]"
The Predicate interface contains a function called test() which the lambda expression passed as parameter above is matched against.,"[('Predicate interface', 'contains function', 'test()'), ('lambda expression', 'passed as parameter', 'test()')]"
"If you look at the lambda expression above, you can see that it takes a single parameter item and returns a boolean - the result of the item.startsWith(""o"") method call.",
"When you call the filter() method on a Stream, the filter passed as parameter to the filter() method is stored internally.","[('filter() method', 'called on', 'Stream'), ('filter', 'passed as parameter to', 'filter() method'), ('filter', 'stored internally', 'filter() method')]"
"The parameter passed to the filter() function determines what items in the stream should be processed, and which that should be excluded from the processing.","[('parameter', 'passed to', 'filter() function'), ('parameter', 'determines', 'items in the stream'), ('items in the stream', 'should be', 'processed'), ('items in the stream', 'should be', 'excluded from the processing')]"
"If the Predicate.test() method of the parameter passed to filter() returns true for an item, that means it should be processed.","[('Predicate.test() method', 'is part of', 'parameter'), ('parameter', 'is passed to', 'filter()'), ('Predicate.test() method', 'returns', 'true'), ('true', 'indicates', 'item should be processed')]"
The collect() method is one of the stream processing methods on the Stream interface.,"[('collect() method', 'is a', 'stream processing method'), ('stream processing method', 'on the', 'Stream interface')]"
"The min() and max() methods return an Optional instance which has a get() method on, which you use to obtain the value.","[('min() method', 'returns', 'Optional instance'), ('max() method', 'returns', 'Optional instance'), ('Optional instance', 'has method', 'get() method'), ('get() method', 'used to', 'obtain the value')]"
In case the stream has no elements the get() method will return null.,"[('stream', 'has no elements', 'get() method'), ('get() method', 'will return', nan)]"
The Comparator.comparing() method creates a Comparator based on the lambda expression passed to it.,"[('Comparator.comparing() method', 'creates', 'Comparator'), ('Comparator', 'based on', 'lambda expression')]"
"In fact, the comparing() method takes a Function which is a functional interface suited for lambda expressions.","[('comparing() method', 'takes', 'Function'), ('Function', 'is a', 'functional interface'), ('functional interface', 'suited for', 'lambda expressions')]"
The count() method simply returns the number of elements in the stream after filtering has been applied.,"[('count() method', 'returns', 'number of elements'), ('number of elements', 'in', 'stream'), ('filtering', 'applied to', 'stream')]"
The count() method returns a long which is the count of elements in the stream after filtering etc.,"[('count() method', 'returns', 'long'), ('long', 'is', 'count of elements in the stream after filtering')]"
The reduce() method can reduce the elements of a stream to a single value.,"[('reduce() method', 'can reduce elements of', 'stream'), ('reduce() method', 'reduces elements to', 'single value')]"
"The reduce() method takes a BinaryOperator as parameter, which can easily be implemented using a lambda expression.","[('reduce() method', 'takes', 'BinaryOperator'), ('BinaryOperator', 'can be implemented using', 'lambda expression')]"
The BinaryOperator.apply() method is the method implemented by the lambda expression above.,"[('BinaryOperator.apply()', 'is implemented by', 'lambda expression')]"
"Thus, the value created by the reduce() function is the accumulated value after processing the last element in the stream.","[('reduce() function', 'creates', 'value'), ('value', 'is', 'accumulated value'), ('accumulated value', 'is after processing', 'last element'), ('last element', 'is in', 'stream')]"
The reduce() method taking a BinaryOperator as parameter returns an Optional .,"[('reduce() method', 'takes', 'BinaryOperator'), ('reduce() method', 'returns', 'Optional')]"
"In case the stream contains no elements, the Optional.get() returns null.","[('stream', 'contains', 'elements'), ('Optional.get()', 'returns', nan)]"
"This version of the reduce() method returns the accumulated value directly, and not an Optional.","[('reduce() method', 'returns', 'accumulated value'), ('accumulated value', 'is not', 'Optional')]"
The reduce() method can be combined with the filter() method too.,"[('reduce() method', 'can be combined with', 'filter() method')]"
"The Java Collections class, java.util.Collections, contains a long list of utility methods for working with collections in Java.","[('Java Collections class', 'part of', 'java.util.Collections'), ('java.util.Collections', 'contains', 'utility methods'), ('utility methods', 'used for', 'working with collections'), ('working with collections', 'context', 'Java')]"
The Java Collections addAll() method can add a variable number of elements to a Collection (typically either a List or a Set .,"[('Java Collections addAll() method', 'can add elements to', 'Collection'), ('Collection', 'typically either', 'List'), ('Collection', 'typically either', 'Set')]"
Here is a java code example of calling the Collections addAll() method:,"[('java code example', 'demonstrates method', 'Collections addAll()')]"
The Collections binarySearch() method can search a Java List for an element using a binary search algorithm.,"[('Collections binarySearch() method', 'can search', 'Java List'), ('Collections binarySearch() method', 'uses', 'binary search algorithm')]"
The List must be sorted in ascending order before you search it using binarySearch() .,"[('List', 'must be sorted in order', 'ascending'), ('you', 'search', 'List'), ('you', 'use method', 'binarySearch()')]"
Here is an example of searching a List using the Collections binarySearch() method:,"[('Collections', 'has method', 'binarySearch()'), ('binarySearch()', 'used for', 'searching a List')]"
The Collections copy() method can copy all elements of a List into another List.,"[('Collections copy() method', 'can copy', 'all elements of a List'), ('Collections copy() method', 'can copy into', 'another List')]"
Here is a Java example of calling the Collections copy() method:,"[('Java', 'has example of', 'calling the Collections copy() method')]"
The Collections reverse() method can reverse the elements in a Java List.,"[('Collections reverse() method', 'can reverse', 'elements'), ('elements', 'located in', 'Java List')]"
The Collections shuffle() method can shuffle the elements of a List.,"[('Collections shuffle() method', 'can shuffle', 'elements of a List'), ('elements of a List', 'can be shuffled by', 'Collections shuffle() method')]"
Here is an example of shuffling a list with the Collections shuffle() method:,"[('Collections shuffle() method', 'used for', 'shuffling a list')]"
Here is an example of sorting a Java List using Collections sort() method:,"[('Java List', 'can be sorted using', 'Collections sort() method')]"
The Java Collections copy() method can copy one List into another.,"[('Java Collections copy() method', 'can copy', 'List'), ('List', 'can be copied into', 'another List')]"
You provide the source and destination List instances as parameters to the copy() method.,"[('copy() method', 'requires parameter', 'source List instance'), ('copy() method', 'requires parameter', 'destination List instance')]"
The Collections min() method can find the minimum element in a List according to the natural ordering of the elements (see my Java List sorting tutorial).,"[('Collections min() method', 'can find', 'minimum element'), ('minimum element', 'in', 'List'), ('minimum element', 'according to', 'natural ordering of the elements'), ('Java List sorting tutorial', 'see', 'natural ordering of the elements')]"
Here is an example of finding the minimum element in a Java List using Collections min() method:,"[('Java List', 'operation', 'finding minimum element'), ('Collections min() method', 'used for', 'finding minimum element')]"
The Collections max() method can find the maximum element in a List according to the natural order of the elements (see my Java List sorting tutorial).,"[('Collections max() method', 'can find', 'maximum element'), ('maximum element', 'in', 'List'), ('maximum element', 'according to', 'natural order of the elements'), ('Java List sorting tutorial', 'see', 'natural order of the elements')]"
The Java Collections replaceAll() method can replace all occurrences of one element with another element.,"[('Java Collections', 'has method', 'replaceAll()'), ('replaceAll()', 'can replace', 'all occurrences of one element with another element')]"
You pass the element to replace and the element to replace it with as parameters to the replaceAll() method.,"[('You', 'pass', 'element to replace'), ('You', 'pass', 'element to replace it with'), ('You', 'pass as parameters to', 'replaceAll() method')]"
"The Collections replaceAll() method returns true if any elements were replaced, and false if not.","[('replaceAll() method', 'part of', 'Collections'), ('replaceAll() method', 'returns', 'true'), ('replaceAll() method', 'returns', 'false'), ('true', 'condition', 'any elements were replaced'), ('false', 'condition', 'any elements were not replaced')]"
The Collections replaceAll() method uses the equals() method of each element to determine if the element is equal to the element to replace or not.,"[('Collections replaceAll() method', 'uses', 'equals() method'), ('equals() method', 'determines', 'if element is equal to element to replace')]"
I have a written a few more details about how the equals() method works in my section about the Java equals() method.,"[('I', 'have written', 'details'), ('details', 'about', 'equals() method'), ('equals() method', 'works in', 'section'), ('section', 'about', 'Java equals() method')]"
The unmodifiableSet() method in the Java Collections class can create an immutable (unmodifiable) Set from a normal Java Set .,"[('unmodifiableSet() method', 'part of', 'Java Collections class'), ('unmodifiableSet() method', 'can create', 'immutable Set'), ('immutable Set', 'derived from', 'normal Java Set')]"
"The Java Comparable interface,java.lang.Comparable, represents an object which can be compared to other objects.","[('Java Comparable interface', 'is represented by', 'java.lang.Comparable'), ('Java Comparable interface', 'can be compared to', 'other objects')]"
Several of the built-in classes in Java implements the Java Comparable interface.,"[('built-in classes in Java', 'implements', 'Java Comparable interface')]"
"You can also implement the Java Comparable interface yourself, to make your own classes comparable.","[('You', 'can implement', 'Java Comparable interface'), ('Java Comparable interface', 'is implemented by', 'your own classes'), ('your own classes', 'are', 'comparable')]"
"When a class implements the Java Comparable interface, this means that instances (objects) of that class can be compared to each other, as mentioned above.","[('class', 'implements', 'Java Comparable interface'), ('instances', 'can be compared to', 'each other')]"
Please keep in mind that the Comparable interface is intended for comparison of objects of the same class.,"[('Comparable interface', 'intended for', 'comparison of objects of the same class')]"
In the following section I will explain how the compareTo() method works.,"[('I', 'will explain', 'how the compareTo() method works')]"
The Java Comparable compareTo() method takes a single object as parameter and returns an int value.,"[('Java Comparable compareTo() method', 'takes parameter', 'single object'), ('Java Comparable compareTo() method', 'returns', 'int value')]"
"The int returned signal whether the object the compareTo() method is called on is larger than, equal to or smaller than the parameter object.","[('int', 'returns signal', 'whether the object the compareTo() method is called on is larger than, equal to or smaller than the parameter object')]"
"The Java Integer class implements the Comparable interface, so you can call compareTo() Here is an example:","[('Java Integer class', 'implements', 'Comparable interface'), ('Java Integer class', 'can call', 'compareTo()')]"
Since the value 45 is smaller than 99 - the first comparison ( valA.compareTo(valB) = 45.compareTo(99) ) results in the value -1 being returned.,"[('45', 'is smaller than', '99'), ('valA', 'compareTo', 'valB'), ('45', 'compareTo', '99'), ('comparison', 'results in', '-1')]"
"In the second comparison, when 99 is compared to 45 ( valB.compareTo(valA) = 99.compareTo(45) ) the result is 1 - because 99 is larger than 45.","[('99', 'compared to', '45'), ('valB', 'compareTo', 'valA'), ('99', 'compareTo', '45'), ('99', 'is larger than', '45'), ('result', 'is', '1')]"
Here is an example of a Spaceship class which can compare itself to other Spaceship instances:,"[('Spaceship class', 'can compare itself to', 'other Spaceship instances')]"
This way you can implement compareTo() to compare base on multiple factors.,"[('compareTo()', 'can be implemented', 'This way'), ('compareTo()', 'compares based on', 'multiple factors')]"
"By specifying a type parameter when implementing the Comparable interface, the compareTo() method parameter changes from Object to whatever type you have specified.","[('Comparable interface', 'has method', 'compareTo()'), ('compareTo()', 'has parameter type', 'Object'), ('compareTo()', 'parameter type changes to', 'specified type')]"
"Notice how there is no type parameter specified after the ""implements Comparable"" interface in the class declaration.",
"Notice also, how the parameter type of the compareTo() object is no longer Spaceship, but Object.","[('compareTo()', 'has parameter type', 'Object'), ('compareTo()', 'previously had parameter type', 'Spaceship')]"
"Finally, also notice how it is now necessary to cast the parameter of the compareTo() method to Spaceship explicitly.","[('compareTo() method', 'has parameter', 'Spaceship')]"
"Notice too, that the compareTo() method should throw a NullPointerException if the parameter object is null.","[('compareTo() method', 'should throw', 'NullPointerException'), ('parameter object', 'is', nan)]"
"Similarly, the compareTo() method should throw a ClassCastException if the input parameter is not of the same class as the class of the object compareTo() is called on.","[('compareTo() method', 'should throw', 'ClassCastException'), ('input parameter', 'is not of the same class as', 'class of the object compareTo() is called on')]"
You can just cast to the desired class (as in the example above).,"[('You', 'can cast to', 'desired class')]"
"If the classes do not match, the Java VM will throw a ClassCastException.","[('Java VM', 'will throw', 'ClassCastException')]"
"The Java Comparator interface, java.util.Comparator, represents a component that can compare two objects so they can be sorted using sorting functionality in Java.","[('Java Comparator interface', 'part of', 'java.util.Comparator'), ('Java Comparator interface', 'can compare', 'two objects'), ('Java Comparator interface', 'used for', 'sorting functionality in Java')]"
When sorting e.g a Java List you can pass a Java Comparator to the sorting method.,"[('Java List', 'can be sorted using', 'Java Comparator'), ('Java Comparator', 'is passed to', 'sorting method')]"
"This method, the compare() method, takes two objects which the Comparator implementation is intended to compare.","[('compare() method', 'is a type of', 'method'), ('compare() method', 'takes', 'two objects'), ('Comparator implementation', 'intended to compare', 'two objects')]"
The compare() method returns an int which signals which of the two objects was larger.,"[('compare() method', 'returns', 'int'), ('int', 'signals', 'which of the two objects was larger')]"
Imagine you have the following Spaceship class that you would like to be able to compare instances of:,"[('Spaceship class', 'has ability', 'compare instances')]"
"Notice that the Spaceship class already implements the Comparable interface which compares Spaceship objects on spaceshipClass first, and then registrationNo.","[('Spaceship class', 'implements', 'Comparable interface'), ('Comparable interface', 'compares', 'Spaceship objects'), ('Spaceship objects', 'compared on', 'spaceshipClass'), ('Spaceship objects', 'compared on', 'registrationNo')]"
"First, notice how the SpaceshipComparator class implements the Comparator interface with the type Spaceship specified inside the < > characters ( implements Comparator<Spaceship> ).","[('SpaceshipComparator', 'implements', 'Comparator<Spaceship>'), ('SpaceshipComparator', 'implements interface', 'Comparator'), ('Comparator', 'type', 'Spaceship')]"
"Setting the generic type of the Comparator implementation to Spaceship means that the parameter types of the compare() method can be set to Spaceship, and not Object as it would have been - if no generic type had been specified ( implements Comparator ).","[('Comparator implementation', 'generic type', 'Spaceship'), ('compare() method', 'parameter types', 'Spaceship'), ('compare() method', 'parameter types', 'Object'), ('generic type', 'not specified', 'Object')]"
"A Java Comparator implementation is pretty much always specialized to be able to compare objects of a specific type (class), so specifying a generic type in your Comparator implementation almost always makes sense.","[('Java Comparator implementation', 'specialized to compare', 'objects of a specific type'), ('objects of a specific type', 'is a', 'class'), ('specifying a generic type', 'makes sense in', 'Comparator implementation')]"
"Second, notice how the compare() method returns the registrationNo of the first Spaceship parameter compared to the registrationNo of the second Spaceship parameter.","[('compare() method', 'returns', 'registrationNo of the first Spaceship parameter'), ('compare() method', 'compares', 'registrationNo of the first Spaceship parameter'), ('compare() method', 'compares', 'registrationNo of the second Spaceship parameter')]"
"Imagine if the registrationNo variable of the Spaceship class was an int instead, so getRegistrationNo() would return an int.","[('Spaceship', 'has variable', 'registrationNo'), ('registrationNo', 'is of type', 'int'), ('getRegistrationNo()', 'returns', 'int')]"
"The Java Deque interface, java.util.Deque, represents a double ended queue, meaning a queue where you can add and remove elements to and from both ends of the queue.","[('Java Deque interface', 'located in', 'java.util.Deque'), ('Java Deque interface', 'represents', 'double ended queue'), ('double ended queue', 'allows operation', 'add elements to both ends'), ('double ended queue', 'allows operation', 'remove elements from both ends')]"
The LinkedList class is a pretty standard Deque and Queue implementation.,"[('LinkedList class', 'is a type of', 'Deque'), ('LinkedList class', 'is a type of', 'Queue')]"
The Java ArrayDeque class stores its elements internally in an array.,"[('Java ArrayDeque class', 'stores elements in', 'array')]"
Before you can use a Java Deque you must create an instance of one of the classes that implements the Deque interface.,"[('Java Deque', 'requires', 'instance of class'), ('class', 'implements', 'Deque interface')]"
You add elements to the beginning end of a Deque using the add() method.,"[('You', 'add elements to', 'Deque'), ('add elements to', 'using method', 'add()'), ('elements', 'added to', 'beginning end')]"
"If the element cannot be inserted into the Deque, the add() method will throw an exception.","[('element', 'cannot be inserted into', 'Deque'), ('add() method', 'will throw', 'exception')]"
"This is different from the offer() method, which will return false if it cannot insert the element.","[('offer() method', 'will return', 'false'), ('offer() method', 'cannot insert', 'element')]"
The addLast() method also adds an element to the end (tail) of a Java Deque.,"[('addLast() method', 'adds element to', 'end of Java Deque'), ('end of Java Deque', 'part of', 'Java Deque')]"
This is the Deque interface's equivalent of the add() method inherited from the Queue interface.,"[('Deque interface', 'equivalent of', 'add() method'), ('add() method', 'inherited from', 'Queue interface')]"
Here is an example of adding an element to a Java Deque instance using the addLast() method:,"[('addLast() method', 'used for', 'adding an element'), ('adding an element', 'applies to', 'Java Deque instance')]"
"If the element cannot be inserted into the Deque, the addLast() method will throw an exception.","[('element', 'cannot be inserted into', 'Deque'), ('addLast() method', 'will throw', 'exception')]"
This is different from the offerLast() method which will return false if the element cannot be added to the Deque.,"[('offerLast() method', 'different from', 'This'), ('offerLast() method', 'return', 'false'), ('element', 'cannot be added to', 'Deque')]"
To add an element at the beginning (head) instead of the end of a Java Deque you call the addFirst() method instead.,"[('addFirst() method', 'used for', 'add an element at the beginning of a Java Deque')]"
"If the element cannot be added to the beginning of the Deque, the addFirst() method will throw an exception.","[('element', 'cannot be added to', 'beginning of the Deque'), ('addFirst() method', 'will throw', 'exception')]"
This is different from the offerFirst() method which will return false if an element cannot be inserted in the beginning of the Deque.,"[('offerFirst() method', 'returns', 'false'), ('element', 'cannot be inserted in', 'beginning of the Deque')]"
The offer() method adds an element to the end (tail) of the Deque.,"[('offer() method', 'adds element to end of', 'Deque')]"
This is different from the add() method which will throw an exception is adding an element to the end of the Deque fails.,"[('add() method', 'throws', 'exception'), ('exception', 'occurs when', 'adding an element to the end of the Deque fails')]"
Here is an example of how to add an element to the end of a Java Deque using the offer() method:,"[('Java Deque', 'operation', 'add an element'), ('add an element', 'method', 'offer()')]"
"The offerLast() method adds an element to the end (tail) of the Deque, just like offer().","[('offerLast() method', 'adds element to', 'end of the Deque'), ('offerLast() method', 'similar to', 'offer() method')]"
The method name offerLast() is just a bit more saying about where the element is added to the Deque.,"[('offerLast()', 'adds element to', 'Deque')]"
This is different from the addLast() method which will throw an exception is adding an element to the end of the Deque fails.,"[('addLast() method', 'throws', 'exception'), ('exception', 'caused by', 'adding an element to the end of the Deque fails')]"
Here is an example of how to add an element to the end of a Java Deque using the offerLast() method:,"[('offerLast() method', 'used for', 'add an element to the end of a Java Deque')]"
The offerFirst() method adds an element to the beginning (head) of the Deque.,"[('offerFirst() method', 'adds element to', 'beginning of the Deque'), ('beginning of the Deque', 'part of', 'Deque')]"
This is different from the addFirst() method which will throw an exception is adding an element to the beginning of the Deque fails.,"[('addFirst() method', 'throws', 'exception'), ('exception', 'occurs when', 'adding an element to the beginning of the Deque fails')]"
Here is an example of how to add an element to the beginning of a Java Deque using the offerFirst() method:,"[('offerFirst() method', 'used for', 'add an element to the beginning of a Java Deque')]"
The push() method adds an element to the beginning (head) of a Java Deque method.,"[('push() method', 'adds element to', 'beginning of Java Deque'), ('push() method', 'type', 'Java Deque method')]"
"If adding the element fails, for instance if the Deque is full, the push() method will throw an exception.","[('push() method', 'throws', 'exception'), ('Deque', 'state', 'full'), ('adding the element', 'fails', 'Deque is full')]"
Here is an example of adding an element to the beginning of a Java Deque using the push() method:,"[('push() method', 'used for', 'adding an element'), ('adding an element', 'to', 'beginning of a Java Deque')]"
The peek() method returns the first element from the beginning (head) of a Java Deque without removing it.,"[('peek() method', 'returns', 'first element'), ('first element', 'position', 'beginning (head)'), ('first element', 'part of', 'Java Deque'), ('peek() method', 'does not remove', 'first element')]"
Here is an example of peeking at the first element of a Java Deque using the peek() method:,"[('Java Deque', 'has method', 'peek()'), ('peek()', 'used for', 'peeking at the first element')]"
The peekFirst() method returns the first element from the beginning (head) of a Java Deque without removing it.,"[('peekFirst() method', 'returns', 'first element'), ('first element', 'position', 'beginning of a Java Deque'), ('first element', 'position', 'head of a Java Deque'), ('peekFirst() method', 'does not remove', 'first element')]"
"This is similar to how peek() works, but the method name peekFirst() is a bit more saying about which end of the Deque you peek at.","[('peek()', 'is similar to', 'peekFirst()'), ('peekFirst()', 'is a method name', 'Deque')]"
Here is an example of peeking at the first element of a Java Deque using the peekFirst() method:,"[('peekFirst() method', 'used for', 'peeking at the first element'), ('peeking at the first element', 'applies to', 'Java Deque')]"
To peek at the last element of a Java Deque you can use the peekLast() method.,"[('Java Deque', 'has method', 'peekLast()'), ('peekLast()', 'used for', 'peek at the last element')]"
Here is an example of peeking at the last element of a Java Deque using the peekLast() method:,"[('peekLast() method', 'used for', 'peeking at the last element'), ('peeking at the last element', 'applies to', 'Java Deque')]"
The getFirst() method returns the first element from the beginning (head) of a Java Deque without removing it.,"[('getFirst() method', 'returns', 'first element'), ('first element', 'position', 'beginning (head)'), ('first element', 'part of', 'Java Deque'), ('getFirst() method', 'action', 'without removing')]"
Here is an example of peeking at the first element of a Java Deque using the getFirst() method:,"[('Java Deque', 'operation', 'peeking at the first element'), ('peeking at the first element', 'method', 'getFirst()')]"
To peek at the last element of a Java Deque you can use the getLast() method.,"[('Java Deque', 'has method', 'getLast()'), ('getLast()', 'used for', 'peek at the last element')]"
Here is an example of peeking at the last element of a Java Deque using the getLast() method:,"[('Java Deque', 'operation', 'getLast() method'), ('getLast() method', 'action', 'peeking at the last element')]"
The remove() method removes the first element of a Java Deque.,"[('remove() method', 'removes', 'first element'), ('first element', 'part of', 'Java Deque')]"
The remove() method returns the element that is removed from the Deque.,"[('remove() method', 'returns', 'element'), ('element', 'is removed from', 'Deque')]"
Here is an example of removing the first element a Java Deque using the remove() method:,"[('Java Deque', 'operation', 'remove() method'), ('remove() method', 'action', 'removing the first element')]"
This is different from poll() which returns null if the Deque is empty.,"[('poll()', 'returns', nan), ('Deque', 'state', 'empty')]"
The removeFirst() method also removes the first element from a Deque - the element at the head of the Deque.,"[('removeFirst() method', 'removes', 'first element'), ('first element', 'position', 'head of the Deque'), ('first element', 'part of', 'Deque')]"
Here is an example of removing the first element of a Java Deque using the removeFirst() method:,"[('removeFirst() method', 'used for', 'removing the first element'), ('removing the first element', 'applies to', 'Java Deque')]"
This is different from pollFirst() which returns null if the Deque is empty.,"[('pollFirst()', 'returns', nan), ('Deque', 'state', 'empty')]"
The removeLast() method removes the last element of a Deque - meaning the element at the tail of the Deque.,"[('removeLast()', 'method of', 'Deque'), ('removeLast()', 'removes', 'last element'), ('last element', 'position', 'tail of the Deque')]"
Here is an example of removing the last element of a Java Deque using the removeLast() method:,"[('removeLast() method', 'used for', 'removing the last element'), ('removing the last element', 'applies to', 'Java Deque')]"
After running this Java example the removedElement variable will point to the String object element 2 - since that element was the last element of the Deque when removeLast() was called.,"[('removedElement', 'points to', 'String object element 2'), ('String object element 2', 'was', 'last element of the Deque'), ('removeLast()', 'was called on', 'Deque')]"
This is different from pollLast() which returns null if the Deque is empty.,"[('pollLast()', 'returns', nan), ('Deque', 'is empty', nan)]"
The poll() method removes an element from the beginning of the Deque.,"[('poll() method', 'removes', 'element'), ('element', 'from the beginning of', 'Deque')]"
This is different than remove() which throws an exception if the Deque is empty.,"[('remove()', 'throws', 'exception'), ('Deque', 'state', 'empty')]"
Here is an example of removing the first element from a Java Deque using the poll() method:,"[('poll() method', 'used for', 'removing the first element'), ('removing the first element', 'applies to', 'Java Deque')]"
"The pollFirst() method removes an element from the beginning of the Deque, just like poll().","[('pollFirst()', 'removes element from', 'beginning of the Deque'), ('poll()', 'removes element from', 'beginning of the Deque')]"
The method name pollFirst() is just a bit more saying about from where the method removes elements.,
This is different than removeFirst() which throws an exception if the Deque is empty.,"[('removeFirst()', 'throws', 'exception'), ('Deque', 'can be', 'empty')]"
Here is an example of removing the first element from a Java Deque using the pollFirst() method:,"[('pollFirst() method', 'used for', 'removing the first element'), ('removing the first element', 'applies to', 'Java Deque')]"
The pollLast() method removes an element from the end (tail) of the Deque.,"[('pollLast() method', 'removes element from', 'end of the Deque'), ('end of the Deque', 'part of', 'Deque')]"
This is different than removeLast() which throws an exception if the Deque is empty.,"[('removeLast()', 'throws', 'exception'), ('Deque', 'can be', 'empty')]"
Here is an example of removing the last element from a Java Deque using the pollLast() method:,"[('Java Deque', 'method', 'pollLast()'), ('pollLast()', 'action', 'removing the last element')]"
The pop() method removes an element from the beginning (head) of a Java Deque.,"[('pop() method', 'removes', 'element'), ('element', 'location', 'beginning (head) of a Java Deque')]"
"If removing the element fails, for instance if the Deque is empty, the pop() method will throw an exception.","[('removing the element', 'fails if', 'Deque is empty'), ('pop() method', 'will throw', 'exception')]"
Here is an example of removing the first element from a Java Deque using the pop() method:,"[('Java Deque', 'operation', 'pop() method'), ('pop() method', 'removes', 'first element')]"
You can use the Java Deque contains() method to check if a Deque contains a given element.,"[('Java Deque', 'has method', 'contains()'), ('contains()', 'used for', 'check if a Deque contains a given element')]"
"The contains() method will return true if the Deque contains the element, and false if not.","[('contains() method', 'will return', 'true'), ('contains() method', 'will return', 'false'), ('Deque', 'contains', 'element')]"
Here is an example of checking if a Java Deque contains a specific element using the contains() method:,"[('Java Deque', 'method', 'contains()'), ('contains()', 'checks if contains', 'specific element')]"
The Java Deque size() method returns the number of elements stored in the Java Deque at the time you invoke the method.,"[('Java Deque size() method', 'returns', 'number of elements'), ('number of elements', 'stored in', 'Java Deque'), ('Java Deque', 'contains', 'elements')]"
Here is an example of obtaining the number of elements in a Java Deque using its size() method:,"[('Java Deque', 'has method', 'size()'), ('size()', 'used for', 'obtaining the number of elements')]"
After running this code the size variable will contain the value 2 because the Deque contains 2 element at the time size() is called.,"[('size variable', 'will contain', 'value 2'), ('Deque', 'contains', '2 element'), ('size()', 'is called at the time', 'Deque contains 2 element')]"
"When you have specified a generic type for a Java collection, that generic type also works for the Iterator returned by the iterator() method.","[('Java collection', 'has generic type', 'generic type'), ('Iterator', 'returned by', 'iterator() method'), ('generic type', 'works for', 'Iterator')]"
Notice how it is not necessary to cast the String returned from the iterator.next() method call.,"[('iterator.next() method call', 'returns', 'String'), ('String', 'does not require', 'casting')]"
"Because the Iterator has its generic type set to String, the Java compiler already knows that next() will return a String.","[('Iterator', 'has generic type', 'String'), ('Java compiler', 'knows', 'next() will return a String')]"
The methods hashCode() and equals() play a distinct role in the objects you insert into Java collections.,"[('hashCode()', 'plays role in', 'objects'), ('equals()', 'plays role in', 'objects'), ('objects', 'insert into', 'Java collections')]"
equals() is used in most collections to determine if a collection contains a given element.,"[('equals()', 'used in', 'most collections'), ('most collections', 'determine if contains', 'given element')]"
"The ArrayList iterates all its elements and execute ""123"".equals(element) to determine if the element is equal to the parameter object ""123"".",
It is the String.equals() implementation that determines if two strings are equal.,"[('String.equals()', 'determines if', 'two strings are equal')]"
"The ArrayList again iterates all its elements and execute ""123"".equals(element) to determine if the element is equal to the parameter object ""123"".",
"As you can see, a proper implementation of .equals() is essential for your own classes to work well with the Java Collection classes.","[('proper implementation of .equals()', 'is essential for', 'your own classes'), ('your own classes', 'work well with', 'Java Collection classes')]"
"That depends on your application, the classes, and what you are trying to do.","[('That', 'depends on', 'your application'), ('That', 'depends on', 'the classes'), ('That', 'depends on', 'what you are trying to do')]"
"The hashCode() method of objects is used when you insert them into a HashTable, HashMap or HashSet.","[('hashCode() method', 'used when inserting into', 'HashTable'), ('hashCode() method', 'used when inserting into', 'HashMap'), ('hashCode() method', 'used when inserting into', 'HashSet')]"
"If you do not know the theory of how a hashtable works internally, you can read about hastables on Wikipedia.org.","[('you', 'do not know', 'theory of how a hashtable works internally'), ('you', 'can read about', 'hastables on Wikipedia.org')]"
The hashtable then iterates this area (all keys with the same hash code) and uses the key's equals() method to find the right key.,"[('Hashtable', 'iterates', 'area'), ('Keys', 'have', 'same hash code'), ('Hashtable', 'uses', ""key's equals() method""), (""Key's equals() method"", 'finds', 'right key')]"
"So, as you can see, a combination of the hashCode() and equals() methods are used when storing and when looking up objects in a hashtable.","[('hashCode() method', 'used in', 'storing objects in a hashtable'), ('equals() method', 'used in', 'storing objects in a hashtable'), ('hashCode() method', 'used in', 'looking up objects in a hashtable'), ('equals() method', 'used in', 'looking up objects in a hashtable')]"
"Here are two rules that are good to know about implementing the hashCode() method in your own classes, if the hashtables in the Java Collections API are to work correctly:","[('hashCode() method', 'implemented in', 'classes'), ('hashtables', 'part of', 'Java Collections API'), ('Java Collections API', 'contains', 'hashtables')]"
Here are two example implementation of the hashCode() method matching the equals() methods shown earlier:,"[('hashCode() method', 'has implementation', 'example implementation'), ('equals() methods', 'has matching implementation', 'hashCode() method')]"
For a 100% precise description of how to implement equals() and hashCode() you should check out the official JavaDoc's.,"[('equals()', 'implementation described in', 'official JavaDoc'), ('hashCode()', 'implementation described in', 'official JavaDoc')]"
The purpose of this text was mostly to explain how they are used by the Java Collection classes.,"[('this text', 'purpose', 'to explain how they are used by the Java Collection classes')]"
"This means, that a class that implements the Java Iterable interface can have its elements iterated.","[('class', 'implements', 'Java Iterable interface'), ('Java Iterable interface', 'allows', 'elements iterated')]"
"You can iterate the objects of a Java Iterable in three ways: Via the , by obtaining a Java Iterator from the Iterable, or by calling the Java Iterable forEach() method.","[('Java Iterable', 'has method', 'forEach()'), ('Java Iterable', 'can obtain', 'Java Iterator'), ('Java Iterable', 'can iterate objects via', 'forEach()'), ('Java Iterable', 'can iterate objects via', 'Java Iterator')]"
"Then it uses a for-each loop to iterate the elements of the List, and print out the toString() value of each element.","[('for-each loop', 'used to iterate', 'elements of the List'), ('for-each loop', 'action', 'print out'), ('element', 'has method', 'toString()')]"
The second way you can iterate the elements of a Java Iterable is by obtaining a Java Iterator from it by calling the Iterable iterator() method.,"[('Java Iterable', 'can iterate elements by', 'obtaining a Java Iterator'), ('Java Iterator', 'obtained by calling', 'Iterable iterator() method')]"
The third way to iterate the elements of a Java Iterable is via its forEach() method.,"[('Java Iterable', 'has method', 'forEach()'), ('forEach()', 'used for', 'iterate elements')]"
Here is an example of iterating the elements of an Iterable via its forEach() method:,"[('Iterable', 'has method', 'forEach()'), ('forEach()', 'used for', 'iterating elements')]"
The Java Iterable interface (java.lang.Iterable) is one of the root interfaces of the Java Collections API.,"[('Java Iterable interface', 'part of', 'Java Collections API'), ('java.lang.Iterable', 'is a', 'Java Iterable interface')]"
"Therefore, there are several classes in Java that implements the Java Iterable interface.","[('several classes', 'implements', 'Java Iterable interface'), ('Java Iterable interface', 'implemented by', 'several classes')]"
You can obtain a Java Spliterator from a Java Iterable via its spliterator() method.,"[('Java Iterable', 'has method', 'spliterator()'), ('Java Spliterator', 'obtained from', 'Java Iterable')]"
"If you are writing some code that needs to iterate a collection lots of times in a tight loop, let's say iterate a Java List thousands of times per second, iterating the List via the Java for-each loop is slower than iterating the list via a standard for-loop as seen here: () .","[('code', 'needs to iterate', 'collection'), ('collection', 'iterated via', 'Java for-each loop'), ('collection', 'iterated via', 'standard for-loop'), ('iterating via', 'slower than', 'standard for-loop')]"
"The reason the for-each loop is slower is, that each iteration will call the List iterator() method, which will create a new Iterator object.","[('for-each loop', 'is slower than', 'List iterator() method'), ('each iteration', 'will call', 'List iterator() method'), ('List iterator() method', 'will create', 'new Iterator object')]"
The standard Java collection interface Collection contains a method called iterator().,"[('Java collection interface', 'contains method', 'iterator()'), ('Collection', 'is a', 'Java collection interface')]"
By calling iterator() you can obtain an iterator from the given Collection.,"[('iterator()', 'obtains', 'iterator'), ('iterator', 'from', 'Collection')]"
"You can also obtain an Iterator from many of the Java Collection data structures, e.g.","[('Iterator', 'can be obtained from', 'Java Collection data structures')]"
The first method is the Iterator hasNext() method which returns true if the Iterator contains more elements.,"[('Iterator hasNext() method', 'is a type of', 'method'), ('Iterator hasNext() method', 'returns', 'true'), ('Iterator', 'contains', 'elements'), ('Iterator hasNext() method', 'checks if', 'Iterator contains more elements')]"
"In other words, if the Iterator has not yet iterated over all of the elements in the collection the Iterator was obtained from - the hasNext() method will return true.","[('Iterator', 'obtained from', 'collection'), ('Iterator', 'has method', 'hasNext()'), ('hasNext()', 'returns', 'true')]"
If the Iterator has iterated over all elements in the underlying collection - the hasNext() method returns false.,"[('Iterator', 'iterates over', 'elements'), ('elements', 'part of', 'underlying collection'), ('hasNext() method', 'returns', 'false'), ('Iterator', 'has method', 'hasNext() method')]"
The second method to pay attention to is the next() method.,"[('second method', 'related to', 'next() method')]"
The next() method returns the next element of the collection the Iterator is iterating over.,"[('next() method', 'returns', 'next element'), ('Iterator', 'is iterating over', 'collection')]"
In that case you will get a ConcurrentModificationException the next time you call the Iterator next() method.,"[('ConcurrentModificationException', 'occurs when', 'call the Iterator next() method')]"
The Java Iterator interface has a remove() method which lets you remove the element just returned by next() from the underlying collection.,"[('Java Iterator interface', 'has method', 'remove()'), ('remove()', 'lets you remove', 'element'), ('element', 'returned by', 'next()'), ('element', 'from', 'underlying collection')]"
"The Java Iterator forEachRemaining() method can iterate over all of the elements remaining in the Iterator internally, and for each element call a Java Lambda Expression passed as parameter to forEachRemaining() .","[('Java Iterator', 'has method', 'forEachRemaining()'), ('forEachRemaining()', 'can iterate over', 'elements remaining in the Iterator'), ('forEachRemaining()', 'calls', 'Java Lambda Expression')]"
Here is an example of using the Java Iterator forEachRemaining() method:,"[('Java Iterator', 'has method', 'forEachRemaining()')]"
"The Java List interface, java.util.List, represents an ordered sequence of objects.","[('Java List interface', 'part of', 'java.util.List'), ('java.util.List', 'represents', 'ordered sequence of objects')]"
"If the List is not typed, using Java Generics, then you can even mix objects of different types (classes) in the same List.","[('List', 'can contain', 'objects of different types'), ('List', 'can contain', 'objects of different classes'), ('List', 'not typed', 'using Java Generics')]"
These List implementations are explained in more detail in my java.util.concurrent tutorial .,"[('List implementations', 'explained in', 'java.util.concurrent tutorial'), ('java.util.concurrent tutorial', 'explained by', 'my')]"
You create a List instance by creating an instance of one of the classes that implements the List interface.,"[('List instance', 'created by', 'creating an instance of a class'), ('class', 'implements', 'List interface')]"
"Remember, most often you will use the ArrayList class, but there can be cases where using one of the other implementations might make sense.","[('ArrayList class', 'is a type of', 'implementation'), ('other implementations', 'can be used in', 'cases')]"
"Thus, you need to cast them to the concrete class (or interface) that you know the object to be of.","[('you', 'need to cast', 'them'), ('them', 'cast to', 'concrete class'), ('them', 'cast to', 'interface'), ('you', 'know', 'object to be of')]"
You insert elements (objects) into a Java List using its add() method.,"[('You', 'insert elements into', 'Java List'), ('Java List', 'uses method', 'add()'), ('elements', 'are', 'objects')]"
Here is an example of adding elements to a Java List using the add() method:,"[('Java List', 'method used', 'add()'), ('add()', 'adds elements to', 'Java List')]"
The first three add() calls add a String instance to the end of the list.,"[('add() calls', 'add', 'String instance'), ('String instance', 'position', 'end of the list')]"
"The List interface has a version of the add() method that takes an index as first parameter, and the element to insert as the second parameter.","[('List interface', 'has method', 'add()'), ('add()', 'takes parameter', 'index'), ('add()', 'takes parameter', 'element to insert')]"
"The addAll() method takes a Collection as parameter, so you can pass either a List or Java Set as parameter.","[('addAll() method', 'takes parameter', 'Collection'), ('Collection', 'can be', 'List'), ('Collection', 'can be', 'Java Set')]"
"In other words, you can add all elements from a List or Set into a List with addAll() .","[('List', 'can add elements from', 'List'), ('List', 'can add elements from', 'Set'), ('addAll()', 'used to add elements into', 'List')]"
The indexOf() method finds the index of the first occurrence in the List of the given element.,"[('indexOf() method', 'finds', 'index of the first occurrence'), ('index of the first occurrence', 'in', 'List'), ('index of the first occurrence', 'of', 'given element')]"
The lastIndexOf() method finds the index of the last occurrence in the List of a given element.,"[('lastIndexOf() method', 'finds', 'index of the last occurrence'), ('index of the last occurrence', 'in', 'List'), ('index of the last occurrence', 'of', 'given element')]"
You can check if a Java List contains a given element using the List contains() method.,"[('Java List', 'has method', 'contains()'), ('contains()', 'checks if contains', 'given element')]"
Here is an example of checking if a Java List contains an element using the contains() method:,"[('Java List', 'method', 'contains()'), ('contains()', 'used for', 'checking if a Java List contains an element')]"
"Obviously, if the input parameter to contains() is null, the contains() method will not use the equals() method to compare against each element, but rather use the == operator.","[('input parameter', 'to', 'contains()'), ('contains()', 'method', 'equals()'), ('contains()', 'use', '== operator'), ('contains()', 'not use', 'equals()'), ('equals()', 'compare against', 'each element')]"
The Java List interface contains a clear() method which removes all elements from the list when called.,"[('Java List interface', 'contains method', 'clear()'), ('clear()', 'removes', 'all elements from the list')]"
Here is simple example of removing all elements from a List (clearing) with the clear() method:,"[('clear() method', 'used for', 'removing all elements from a List')]"
"After the clear() method has been called, the List will be completely empty.","[('clear() method', 'has been called on', 'List'), ('List', 'will be', 'completely empty')]"
The Java List interface has a method called retainAll() which is capable of retaining all elements from one List which are also present in another List.,"[('Java List interface', 'has method', 'retainAll()'), ('retainAll()', 'capable of', 'retaining all elements from one List which are also present in another List')]"
"In other words, the retain() method removes all the elements from the target List which are not found in the other List.","[('retain() method', 'removes elements from', 'target List'), ('elements', 'not found in', 'other List')]"
Here is a Java example of calling the List retainAll() method:,"[('Java', 'has method', 'List retainAll()')]"
"Third, the retainAll() method is called on list, passing otherList as parameter.","[('retainAll() method', 'is called on', 'list'), ('retainAll() method', 'passes as parameter', 'otherList')]"
"After list.retainAll(otherList) has finished executing, the list will only contain those elements which were both present in list and otherList before retainAll() was called.","[('list.retainAll(otherList)', 'action', 'finished executing'), ('list', 'will contain', 'elements'), ('elements', 'present in', 'list'), ('elements', 'present in', 'otherList'), ('retainAll()', 'was called', 'before')]"
You can obtain the number of elements in the List by calling the size() method.,"[('size() method', 'used to obtain', 'number of elements'), ('number of elements', 'contained in', 'List')]"
The Java List interface has a method called subList() which can create a new List with a subset of the elements from the original List.,"[('Java List interface', 'has method', 'subList()'), ('subList()', 'can create', 'new List'), ('new List', 'contains', 'subset of elements'), ('subset of elements', 'from', 'original List')]"
The subList() method takes 2 parameters: A start index and and end index.,"[('subList() method', 'takes parameter', 'start index'), ('subList() method', 'takes parameter', 'end index')]"
Here is a Java example of creating a sublist of elements from another List using the subList() method:,"[('Java', 'has method', 'subList()'), ('subList()', 'creates', 'sublist'), ('sublist', 'is created from', 'List')]"
"After executing the list.subList(1,3) instruction the sublist will contain the elements at index 1 and 2.","[('list', 'executes instruction', 'list.subList(1,3)'), ('list.subList(1,3)', 'results in', 'sublist'), ('sublist', 'contains elements at index', '1'), ('sublist', 'contains elements at index', '2')]"
"The list.subList(1,3) call will include index 1, but exclude index 3, thereby keeping the elements at index 1 and 2.","[('list.subList(1,3)', 'includes index', '1'), ('list.subList(1,3)', 'excludes index', '3'), ('list.subList(1,3)', 'keeps elements at index', '1'), ('list.subList(1,3)', 'keeps elements at index', '2')]"
You can convert a Java List to a Java Array using the List toArray() method.,"[('Java List', 'can be converted to', 'Java Array'), ('List toArray() method', 'used for', 'convert Java List to Java Array')]"
"Note that even if we pass a String array of size 0 to the toArray(), the array returned will have all the elements in the List in it.","[('String array', 'has size', '0'), ('toArray()', 'returns', 'array'), ('array', 'contains', 'elements'), ('elements', 'are in', 'List')]"
It is the Arrays.asList() method that converts the array to a List.,"[('Arrays.asList()', 'converts', 'array'), ('Arrays.asList()', 'converts to', 'List')]"
You can sort a Java List using the Collections sort() method.,"[('Collections', 'provides method', 'sort()'), ('sort()', 'used for', 'sort a Java List')]"
"If the List contains objects that implement the Comparable interface (java.lang.Comparable), then the objects can compare themselves to each other.","[('List', 'contains', 'objects'), ('objects', 'implement', 'Comparable interface'), ('Comparable interface', 'part of', 'java.lang.Comparable'), ('objects', 'can compare', 'themselves to each other')]"
"The Java String class implements the Comparable interface, you can sort them in their natural order, using the Collections sort() method.","[('Java String class', 'implements', 'Comparable interface'), ('Collections sort() method', 'sorts', 'Java String class')]"
"If the objects in the Java List do not implement the Comparable interface, or if you want to sort the objects in another order than their compare() implementation, then you need to use a Comparator implementation (java.util.Comparator).","[('objects in the Java List', 'do not implement', 'Comparable interface'), ('you', 'want to sort', 'objects in another order'), ('you', 'need to use', 'Comparator implementation'), ('Comparator implementation', 'instance of', 'java.util.Comparator')]"
You obtain an Iterator by calling the iterator() method of the List interface.,"[('Iterator', 'obtained by calling', 'iterator() method'), ('iterator() method', 'method of', 'List interface')]"
Once you have obtained an Iterator you can keep calling its hasNext() method until it returns false.,"[('Iterator', 'has method', 'hasNext()'), ('hasNext()', 'returns', 'false')]"
Calling hasNext() is done inside a while loop as you can see.,"[('hasNext()', 'is done inside', 'while loop')]"
Inside the while loop you call the Iterator next() method of the Iterator interface to obtain the next element pointed to by the Iterator.,"[('while loop', 'contains', 'call to Iterator next() method'), ('Iterator next() method', 'part of', 'Iterator interface'), ('Iterator next() method', 'obtains', 'next element'), ('next element', 'pointed to by', 'Iterator')]"
"Inside the for loop the example accesses the elements in the List via its get() method, passing the incrementing variable i as parameter.","[('example', 'accesses elements in', 'List'), ('example', 'uses method', 'get()'), ('get()', 'has parameter', 'i')]"
"Again, if the List is typed using Java Generics to e.g.","[('List', 'typed using', 'Java Generics')]"
"Hence, the compiler knows that only a String can be returned from the get() method.","[('compiler', 'knows', 'only a String can be returned from the get() method')]"
Therefore you do not need to cast the element returned by get() to String.,"[('element', 'returned by', 'get()'), ('get()', 'returns', 'element'), ('element', 'does not need to be cast to', 'String')]"
Obtaining a Stream from a List in Java is done by calling the List stream() method.,"[('Stream', 'obtained from', 'List'), ('List', 'method', 'stream()'), ('stream()', 'used for', 'obtaining Stream')]"
It is the last line of this example that calls the List stream() method to obtain the Stream representing the elements in the List.,"[('List', 'has method', 'stream()'), ('stream()', 'obtains', 'Stream'), ('Stream', 'represents', 'elements in the List')]"
Once you have obtained a Stream from a List you can iterate the Stream by calling its forEach() method.,"[('Stream', 'obtained from', 'List'), ('Stream', 'iterated by', 'forEach() method')]"
Here is an example of iterating the elements of a List using the Stream forEach() method:,"[('Stream forEach() method', 'used for', 'iterating the elements of a List')]"
"Calling the forEach() method will make the Stream iterate all the element of the Stream internally, and call the Consumer passed as parameter to the forEach() method for each element in the Stream.","[('forEach() method', 'makes', 'Stream iterate all the element of the Stream internally'), ('forEach() method', 'calls', 'Consumer passed as parameter'), ('Consumer', 'is passed as parameter to', 'forEach() method'), ('forEach() method', 'is called for each element in', 'Stream')]"
"The Java Map interface, java.util.Map, represents a mapping between a key and a value.","[('Java Map interface', 'part of', 'java.util.Map'), ('Java Map interface', 'represents', 'mapping between a key and a value')]"
To create a Java Map you must create an instance of one the classes that implement the Java Map interface.,"[('Java Map', 'implemented by', 'classes'), ('classes', 'implement', 'Java Map interface'), ('Java Map', 'instance of', 'classes')]"
To add elements to a Map you call its put() method.,"[('Map', 'has method', 'put()'), ('put()', 'adds elements to', 'Map')]"
The three put() calls maps a string value to a string key.,"[('put() calls', 'maps', 'string value'), ('put() calls', 'maps to', 'string key')]"
Here is an example of auto-boxing primitive parameters passed to the put() method:,"[('auto-boxing primitive parameters', 'passed to method', 'put()')]"
The value passed to the put() method in the above example is a primitive int.,"[('value', 'passed to method', 'put()'), ('value', 'is a', 'primitive int')]"
"Java auto-boxes it inside an Integer instance though, because the put() method requires an Oject instance as both key and value.","[('Java', 'auto-boxes', 'Integer instance'), ('put() method', 'requires', 'Object instance'), ('Object instance', 'used as', 'key'), ('Object instance', 'used as', 'value')]"
Auto-boxing would also happen if you passed a primitive as key to the put() method.,"[('primitive', 'passed as key to', 'put() method'), ('auto-boxing', 'would happen if', 'primitive passed as key to put() method')]"
"If you call put() more than once with the same key, the latest value passed to put() for that key will overwrite what is already stored in the Map for that key.","[('put()', 'called with', 'key'), ('key', 'associated with', 'value'), ('put()', 'overwrites', 'value in Map')]"
To obtain the value stored by the null key you call the get() method with null as parameter value.,"[('null key', 'value stored by', 'value'), ('get() method', 'called with parameter', nan)]"
Just keep in mind that you will get a null out when you call get() later with that key - so this will return null:,"[('get()', 'returns', nan)]"
The Java Map interface has a method called putAll() which can copy all key + value pairs (entries) from another Map instance into itself.,"[('Java Map interface', 'has method', 'putAll()'), ('putAll()', 'can copy', 'key + value pairs'), ('key + value pairs', 'from', 'another Map instance'), ('putAll()', 'into', 'itself')]"
Here is an example of copying all entries from one Java Map into another via putAll():,"[('copying all entries from one Java Map', 'method', 'putAll()')]"
"Calling mapB.putAll(mapA) will only copy entries from mapA into mapB, not from mapB into mapA.","[('mapB', 'method', 'putAll'), ('putAll', 'copies entries from', 'mapA'), ('putAll', 'copies entries to', 'mapB'), ('putAll', 'does not copy entries from', 'mapB'), ('putAll', 'does not copy entries to', 'mapA')]"
"To copy entries the other way, you would have to execute the code mapA.putAll(mapB).","[('mapA', 'receives entries from', 'mapB'), ('mapB', 'provides entries to', 'mapA')]"
"To get a specific element stored in a Java Map you call its get() method, passing along the key for that element as parameter.","[('Java Map', 'has method', 'get()'), ('get()', 'requires parameter', 'key'), ('key', 'retrieves', 'specific element')]"
"Notice that the get() method returns a Java Object, so we have to cast it to a String (because we know the value is a String).","[('get() method', 'returns', 'Java Object'), ('Java Object', 'cast to', 'String'), ('value', 'is a', 'String')]"
"If we had specified a generic type for the key and value of the Map, then it would not have been necessary to cast the object returned by get() method.","[('Map', 'has generic type', 'key'), ('Map', 'has generic type', 'value'), ('get() method', 'returns', 'object'), ('object', 'requires', 'cast')]"
The Java Map interface has a getOrDefault() method which can return a default value supplied by you - in case no value is stored in the Map by the given key.,"[('Java Map interface', 'has method', 'getOrDefault()'), ('getOrDefault()', 'can return', 'default value'), ('default value', 'supplied by', 'you'), ('no value', 'stored in', 'Map'), ('given key', 'used in', 'Map')]"
"This example creates a Map and stores three values in it using the keys A, B and C. Then the example calls the Map getOrDefault() method, passing the String E as key, along with a default value - the String default value.","[('example', 'creates', 'Map'), ('example', 'stores', 'values'), ('values', 'quantity', 'three'), ('values', 'stored using keys', 'A'), ('values', 'stored using keys', 'B'), ('values', 'stored using keys', 'C'), ('example', 'calls', 'getOrDefault() method'), ('getOrDefault() method', 'passed key', 'String E'), ('getOrDefault() method', 'passed default value', 'String default value')]"
Since the Map does not contain any object stored by the key E the given default value will be returned - which is the String default value passed as the last parameter to the getOrDefault() method.,"[('Map', 'does not contain', 'object stored by the key E'), ('default value', 'is', 'String'), ('default value', 'passed as', 'last parameter to the getOrDefault() method')]"
You can check if a Java Map contains a specific key using the containsKey() method.,"[('Java Map', 'can be checked for specific key using', 'containsKey() method')]"
You can iterate all the keys of a Java Map via its keySet() method.,"[('Java Map', 'has method', 'keySet()'), ('keySet()', 'iterates', 'keys of Java Map')]"
"As you can see, the key Iterator returns every key stored in a Java Map, one by one (one for each call to next()).","[('key Iterator', 'returns', 'every key stored in a Java Map'), ('Java Map', 'contains', 'key')]"
"Once you have the key, you can obtain the element stored for that key using the Map get() method.","[('key', 'used to obtain', 'element'), ('element', 'stored for', 'key'), ('Map get() method', 'used to obtain', 'element')]"
"In the example above, the Iterator next() method returns an Object - and so does the get() method.","[('Iterator next() method', 'returns', 'Object'), ('get() method', 'returns', 'Object')]"
Notice how a generic type is now also specified for the Iterator obtained from map.keySet().iterator().,"[('Iterator', 'obtained from', 'map.keySet().iterator()'), ('generic type', 'specified for', 'Iterator')]"
You obtain a Collection of the values stored in a Map via the values() method.,"[('Collection', 'obtained via', 'values() method'), ('values() method', 'returns', 'Collection'), ('values() method', 'operates on', 'Map'), ('Map', 'stores', 'values')]"
Notice how the key and value can be obtained from each Map.Entry instance.,"[('key', 'can be obtained from', 'Map.Entry instance'), ('value', 'can be obtained from', 'Map.Entry instance')]"
You can remove all entries in a Java Map using the clear() method.,"[('clear() method', 'used for', 'remove all entries'), ('remove all entries', 'applies to', 'Java Map')]"
It is possible to replace an element in a Java Map using the replace() method.,"[('replace() method', 'used for', 'replace an element in a Java Map'), ('element', 'located in', 'Java Map')]"
The replace() method will only insert the new value if there is already an existing value mapped to the key.,"[('replace() method', 'inserts', 'new value'), ('new value', 'inserted if', 'existing value mapped to the key')]"
"This is different from how put() works, which always insert the value no matter what.","[('put()', 'works differently from', 'insert the value no matter what')]"
Here is an example of replacing one value with another using the Java Map replace() method:,"[('Java Map', 'method', 'replace()'), ('replace()', 'used for', 'replacing one value with another')]"
You can read the number of entries in a Java Map using the size() method.,"[('Java Map', 'has method', 'size()'), ('size()', 'used for', 'read number of entries')]"
The number of entries in a Java Map is also referred to as the Map size - hence the method name size() .,"[('number of entries', 'referred to as', 'Map size'), ('method name', 'is', 'size()')]"
Here is an example of reading the number of entries in a Map using the size() method:,"[('Map', 'has method', 'size()'), ('size()', 'reads', 'number of entries')]"
This method is called isEmpty() and it returns either true or false.,"[('method', 'is called', 'isEmpty()'), ('isEmpty()', 'returns', 'true'), ('isEmpty()', 'returns', 'false')]"
The isEmpty() method will return false if the Map instance contains 1 or more entries.,"[('isEmpty() method', 'will return', 'false'), ('Map instance', 'contains', '1 or more entries')]"
The Map compute() method takes a key object and a lambda expression as parameters.,"[('Map compute() method', 'takes', 'key object'), ('Map compute() method', 'takes', 'lambda expression')]"
Here is an example of calling the Java Map compute() method:,"[('Java Map', 'has method', 'compute()')]"
"The compute() method will call the lambda expression internally, passing the key object and whatever value is stored in the Map for that key object, as parameters to the lambda expression.","[('compute() method', 'calls internally', 'lambda expression'), ('compute() method', 'passes as parameters', 'key object'), ('compute() method', 'passes as parameters', 'value stored in the Map'), ('value stored in the Map', 'associated with', 'key object')]"
"In the example above you can see that the lambda expression checks if the value mapped to the given key is null or not, before calling toString().toUpperCase() on it.","[('lambda expression', 'checks if', 'value mapped to the given key is null or not'), ('lambda expression', 'calls', 'toString().toUpperCase()')]"
"The Map computeIfAbsent() method works similarly to the compute() method, but the lambda expression is only called if no entry exists already for the given key.","[('Map', 'has method', 'computeIfAbsent()'), ('computeIfAbsent()', 'works similarly to', 'compute()'), ('lambda expression', 'is called if', 'no entry exists for the given key')]"
"However, the lambda expression could have calculated the value in any way it needed to - e.g.","[('lambda expression', 'could have calculated', 'value')]"
"The Map merge() method takes a key, a value, and a lambda expression implementing the BiFunction interface as parameters.","[('Map merge() method', 'takes', 'key'), ('Map merge() method', 'takes', 'value'), ('Map merge() method', 'takes', 'lambda expression'), ('lambda expression', 'implements', 'BiFunction interface')]"
"If the Map does not have an entry for the key, or if the value for the key is null, the value passed as parameter to the merge() method is inserted for the given key.","[('Map', 'does not have entry for', 'key'), ('value for key', 'is', nan), ('value passed as parameter', 'is inserted for', 'given key')]"
"The Java NavigableMap interface, java.util.NavigableMap, is a sub-interface of the Java SortedMap interface.","[('Java NavigableMap interface', 'is a sub-interface of', 'Java SortedMap interface'), ('java.util.NavigableMap', 'is a sub-interface of', 'Java SortedMap interface')]"
The java.util package only has one implementation of the NavigableMap interface: The java.util.TreeMap class.,"[('java.util package', 'has implementation', 'NavigableMap interface'), ('NavigableMap interface', 'implemented by', 'java.util.TreeMap class')]"
"There is a Java NavigableMap implementation in the java.util.concurrent package too, but that is outside the scope of this tutorial.","[('Java NavigableMap implementation', 'located in package', 'java.util.concurrent')]"
To create a Java NavigableMap you must create an instance of one of the classes that implements the NavigableMap interface.,"[('Java NavigableMap', 'created by', 'creating an instance of a class'), ('class', 'implements', 'NavigableMap interface')]"
Here is an example of creating an instance of the Java TreeMap class which implements the NavigableMap interface:,"[('Java TreeMap class', 'implements', 'NavigableMap interface')]"
The first interesting navigation method of NavigableMap is the descendingKeySet() method.,"[('NavigableMap', 'has navigation method', 'descendingKeySet()')]"
The descendingKeySet() method returns a NavigableSet in which the order of the elements is reversed compared to the original key set.,"[('descendingKeySet() method', 'returns', 'NavigableSet'), ('order of the elements', 'is reversed compared to', 'original key set')]"
The descendingMap() method returns a NavigableMap which is a view of the original Map.,"[('descendingMap() method', 'returns', 'NavigableMap'), ('NavigableMap', 'is a view of', 'original Map')]"
"The headMap() method returns a view of the original NavigableMap which only contains elements that are ""less than"" the given element.",
"The tailMap() method is similar to the headMap() method, except that tailMap() returns all elements that are equal to or higher than the given parameter element.","[('tailMap()', 'is similar to', 'headMap()'), ('tailMap()', 'returns', 'all elements that are equal to or higher than the given parameter element')]"
"The tailMap variable will reference a SortedMap containing all key + value pairs from the NavigableMap for the keys ""c"", ""d"" and ""e"", as these keys are considered equal to or larger than the parameter value ""c"" passed to the tailMap() method.",
The subMap() allows you to pass two parameters demarcating the boundaries of the view map to return.,"[('subMap()', 'allows', 'you'), ('subMap()', 'allows', 'pass two parameters'), ('parameters', 'demarcate', 'boundaries of the view map'), ('subMap()', 'returns', 'view map')]"
The ceilingKey() method returns the least (smallest) key in this map that is greater than or equal to the element passed as parameter to the ceilingKey() method.,"[('ceilingKey() method', 'returns', 'least key'), ('least key', 'is greater than or equal to', 'element passed as parameter')]"
"Thus, floorKey() returns the greatest key which is less than or equal to the parameter value passed to ceilingKey().","[('floorKey()', 'returns', 'greatest key'), ('greatest key', 'is less than or equal to', 'parameter value'), ('parameter value', 'is passed to', 'ceilingKey()')]"
The higherKey() method returns the least (smallest) element in this map that is greater than (not equal too) the element passed as parameter to the higherKey() method.,"[('higherKey() method', 'returns', 'least element'), ('least element', 'is greater than', 'element passed as parameter')]"
"Thus, lowerKey() returns the greatest key which is lower than the parameter value passed to the lowerKey() method.","[('lowerKey()', 'returns', 'greatest key'), ('greatest key', 'is lower than', 'parameter value')]"
"In the example above, the returned lowerKey will be ""1"", as this is the highest key which is lower than the parameter value ""2"" passed to the lowerKey() method.",
"methods, except they return a Map.Entry instead of the key object itself.","[('methods', 'return', 'Map.Entry'), ('Map.Entry', 'instead of', 'key object')]"
"Each of the methods ceilingEntry(), floorEntry(), higherEntry() and lowerEntry() will be covered in the following sections.","[('methods', 'will be covered in', 'following sections')]"
The ceilingEntry() method returns the key + value stored for the least (smallest) key in the NavigableMap which is higher than or equal to the parameter value passed to the ceilingEntry() method.,"[('ceilingEntry() method', 'returns', 'key + value'), ('key + value', 'stored for', 'least (smallest) key'), ('least (smallest) key', 'in', 'NavigableMap'), ('least (smallest) key', 'higher than or equal to', 'parameter value'), ('parameter value', 'passed to', 'ceilingEntry() method')]"
"The ceilingEntry() is thus similar to the ceilingKey() method, except the ceilingKey() method only returns the key, and ceilingKey() returns a Map.Entry object containing both the key and value.","[('ceilingEntry()', 'is similar to', 'ceilingKey() method'), ('ceilingKey() method', 'returns', 'key'), ('ceilingEntry()', 'returns', 'Map.Entry object'), ('Map.Entry object', 'contains', 'key'), ('Map.Entry object', 'contains', 'value')]"
"In the example above the returned ceilingEntry will contain the key ""c"" and the value ""3"", since the key ""c"" is the smallest key that is greater than or equal to the parameter value ""c"" passed to ceilingEntry() .",
The floorEntry() method returns the key + value for the greatest key which is equal to or lower than the parameter value passed to the floorEntry() method.,"[('floorEntry() method', 'returns', 'key + value for the greatest key which is equal to or lower than the parameter value')]"
"The floorEntry returned in the example above will contain the key + value pair ""c"" + ""3"" , because key ""c"" is the greatest key which is lower than or equal to the parameter value ""c"" passed to the floorEntry() method.",
The higherEntry() method returns the key + value stored for the smallest key that is higher than the parameter value passed to the higherEntry() method.,"[('higherEntry() method', 'returns', 'key + value'), ('key + value', 'stored for', 'smallest key'), ('smallest key', 'higher than', 'parameter value'), ('parameter value', 'passed to', 'higherEntry() method')]"
"The higherEntry returned in the example above will contain the key + value pair ""d"" + ""4"" because the key ""d"" is the lowest key which is higher than the parameter value ""c"" passed to the higherEntry() method.",
The lowerEntry() method in the NavigableMap interface returns the key + value pair for the highest key which is lower than the parameter value passed to the lowerEntry() method.,"[('lowerEntry() method', 'part of', 'NavigableMap interface'), ('lowerEntry() method', 'returns', 'key + value pair'), ('key + value pair', 'associated with', 'highest key'), ('highest key', 'is lower than', 'parameter value')]"
"The lowerEntry returned in this example will be the key + value pair ""a"" + ""1"" since ""a"" is the highest key which is lower than the parameter value ""b"" passed to the lowerEntry() method.",
"The pollFirstEntry() method returns and removes the ""first"" entry (key + value) in the NavigableMap or null if the map is empty.",
"The pollLastEntry() returns and removes the ""last"" element in the map or null if the map is empty.",
"The Java NavigableSet interface, java.util.NavigableSet, is a subtype of the Java SortedSet interface.","[('Java NavigableSet interface', 'subtype of', 'Java SortedSet interface'), ('Java NavigableSet interface', 'part of', 'java.util.NavigableSet')]"
In Java 6 to 13 there is only one implementation of the NavigableSet interface in the java.util package: The java.util.TreeSet class.,"[('Java 6', 'has implementation of', 'NavigableSet interface'), ('Java 7', 'has implementation of', 'NavigableSet interface'), ('Java 8', 'has implementation of', 'NavigableSet interface'), ('Java 9', 'has implementation of', 'NavigableSet interface'), ('Java 10', 'has implementation of', 'NavigableSet interface'), ('Java 11', 'has implementation of', 'NavigableSet interface'), ('Java 12', 'has implementation of', 'NavigableSet interface'), ('Java 13', 'has implementation of', 'NavigableSet interface'), ('NavigableSet interface', 'implemented by', 'java.util.TreeSet class'), ('java.util.TreeSet class', 'located in', 'java.util package')]"
There is an implementation in the java.util.concurrent package called ConcurrentSkipListSet but that is outside the scope of this trail.,"[('ConcurrentSkipListSet', 'is an implementation in', 'java.util.concurrent package'), ('ConcurrentSkipListSet', 'is outside the scope of', 'this trail')]"
To create a Java NavigableSet you must create an instance of one of the classes implementing the NavigableSet interface.,"[('Java NavigableSet', 'created by', 'creating an instance of a class'), ('class', 'implements', 'NavigableSet interface')]"
Here is an example of creating an instance of the class TreeSet which implements the NavigableSet interface:,"[('TreeSet', 'instance of', 'class'), ('TreeSet', 'implements', 'NavigableSet'), ('NavigableSet', 'type of', 'interface')]"
The descendingSet() method returns a NavigableSet in which the order of the elements is reversed compared to this one.,"[('descendingSet() method', 'returns', 'NavigableSet'), ('NavigableSet', 'order of elements', 'reversed')]"
"The descendingIterator() method allows you to iterate the elements of the NavigableSet (which is also a SortedSet) in reverse order, without changing the order of the elements internally.","[('descendingIterator() method', 'allows', 'iterate elements of NavigableSet'), ('NavigableSet', 'is a type of', 'SortedSet'), ('descendingIterator() method', 'iterates in', 'reverse order'), ('descendingIterator() method', 'does not change', 'order of elements internally')]"
"The headSet() method returns a view of the original NavigableSet which only contains elements that are ""less than"" the given element.",
"The tailSet() method works the same way as the headSet() method, except it returns all elements that are equal to or higher than the given parameter element.","[('tailSet() method', 'works the same way as', 'headSet() method'), ('tailSet() method', 'returns', 'all elements that are equal to or higher than the given parameter element')]"
The subSet() method allows you to pass two parameters demarcating the boundaries of the view set to return.,"[('subSet() method', 'allows', 'pass two parameters'), ('parameters', 'demarcate', 'boundaries of the view set'), ('subSet() method', 'returns', 'view set')]"
The ceiling() method returns the least (smallest) element in this set that is greater than or equal to the element passed as parameter to the ceiling() method.,"[('ceiling() method', 'returns', 'least element'), ('least element', 'is greater than or equal to', 'element passed as parameter')]"
"The floor() method does the opposite of the ceiling() method, meaning it returns the greatest element that is less than or equal to the given parameter value.","[('floor() method', 'does opposite of', 'ceiling() method'), ('floor() method', 'returns', 'greatest element less than or equal to given parameter value')]"
The higher() method returns the least (smallest) element in this set that is greater than (not equal too) the element passed as parameter to the higher() method.,"[('higher() method', 'returns', 'least element'), ('least element', 'is greater than', 'element passed as parameter')]"
"The lower() method does the opposite of the higher() method, meaning it returns the highest element that is less than (not equal to) the given parameter.","[('lower() method', 'does opposite of', 'higher() method'), ('lower() method', 'returns', 'highest element less than given parameter')]"
"The pollFirst() method returns and removes the ""first"" element in the NavigableSet or null if the set is empty.",
"The pollLast() method returns and removes the ""last"" element in the NavigableSet.",
"The Java Properties class, java.util.Properties, is like a Java Map of Java String key and value pairs.","[('Java Properties class', 'is like', 'Java Map'), ('Java Properties class', 'contains', 'Java String key and value pairs')]"
"The Java Properties class can write the key, value pairs to a properties file on disk, and read the properties back in again.","[('Java Properties class', 'can write', 'key, value pairs'), ('Java Properties class', 'can write to', 'properties file on disk'), ('Java Properties class', 'can read', 'properties')]"
To use the Java Properties class you must first create a Properties instance.,"[('Java Properties class', 'used by', 'Properties instance'), ('Properties instance', 'created by', 'Java Properties class')]"
To set properties in a Java Properties instance you use the setProperty() method.,"[('Java Properties instance', 'method', 'setProperty()'), ('setProperty()', 'used to', 'set properties')]"
"To get properties from a Java Properties object you use the getProperty() method, passing the key of the property to get as parameter.","[('Java Properties object', 'has method', 'getProperty()'), ('getProperty()', 'requires parameter', 'key of the property')]"
"You can remove a property from a Java Properties instance using its remove() method, passing as parameter to remove() the key for the property to remove.","[('Java Properties instance', 'has method', 'remove()'), ('remove()', 'action', 'remove property'), ('remove()', 'requires parameter', 'key for the property')]"
You store the contents of a Properties object via its store() method.,"[('Properties object', 'has method', 'store()'), ('store()', 'stores', 'contents')]"
Notice the first line of the properties file is actually the comment that was passed as second parameter to the store() method call in the code example in the previous section about storing properties to a property file.,"[('first line of the properties file', 'is', 'comment'), ('comment', 'passed as', 'second parameter'), ('second parameter', 'to', 'store() method call'), ('store() method call', 'in', 'code example'), ('code example', 'in', 'previous section'), ('previous section', 'about', 'storing properties to a property file')]"
You can also load properties stored in a property file back into a Java Properties object via its load() method.,"[('property file', 'stores', 'properties'), ('Java Properties object', 'loads', 'properties'), ('load() method', 'used by', 'Java Properties object')]"
By default the load() method will assume that the loaded file is encoded using ISO-8859-1 (Latin-1).,"[('load() method', 'assume', 'loaded file is encoded using ISO-8859-1')]"
The Java Properties class can also write the key-value pairs stored in it to an XML file via its storeToXML().,"[('Java Properties class', 'can write', 'key-value pairs'), ('key-value pairs', 'stored in', 'Java Properties class'), ('Java Properties class', 'write to', 'XML file')]"
"Notice how the comment passed to the storeToXML() method is enclosed in a comment XML element, and not in an XML comment (<!-- -->) .","[('comment', 'passed to method', 'storeToXML()'), ('comment', 'enclosed in', 'comment XML element'), ('comment', 'not enclosed in', 'XML comment')]"
You can load properties from an XML property file into a Java Properties object via its loadFromXML() method.,"[('XML property file', 'can be loaded into', 'Java Properties object'), ('Java Properties object', 'has method', 'loadFromXML()')]"
By default the loadFromXML() method will assume that the XML file is stored using the UTF-8 encoding.,"[('loadFromXML() method', 'assume', 'XML file is stored using UTF-8 encoding')]"
It is possible to load properties into a Java Properties from a file that is available on the classpath.,"[('Java Properties', 'can load properties from', 'file'), ('file', 'is available on', 'classpath')]"
"That file could thus be located inside the same JAR file as the application loading the properties, or inside another JAR file or directory available on the Java classpath when your Java application is executed.","[('file', 'could be located inside', 'same JAR file'), ('application', 'loads', 'properties'), ('file', 'could be located inside', 'another JAR file'), ('file', 'could be located inside', 'directory'), ('directory', 'available on', 'Java classpath'), ('Java application', 'is executed on', 'Java classpath')]"
To load properties from a file available on the classpath you need to obtain a Class instance first.,"[('you', 'need to obtain', 'Class instance'), ('properties', 'load from', 'file'), ('file', 'available on', 'classpath')]"
In the example below I obtain it from the class that contains the main() method of my application:,"[('class', 'contains', 'main() method'), ('main() method', 'belongs to', 'application')]"
Once I have the Class instance I can call its getResourceAsStream() method which returns a Java InputStream referencing the file.,"[('Class instance', 'has method', 'getResourceAsStream()'), ('getResourceAsStream()', 'returns', 'Java InputStream'), ('Java InputStream', 'references', 'file')]"
Here is an example of obtaining a reference to a file from the classpath:,"[('example', 'involves', 'obtaining a reference to a file from the classpath')]"
The file would have to be located in the root directory of the classpath.,"[('file', 'located in', 'root directory'), ('root directory', 'part of', 'classpath')]"
"If you put it into a subdirectory, the path passed to getResourceAsStream() should reflect that.","[('subdirectory', 'is part of', 'path'), ('path', 'passed to', 'getResourceAsStream()')]"
"Using the InputStream you can load the file into a Java Properties instance, using either the load() or loadFromXML() methods explained earlier in this Java Properties tutorial.","[('InputStream', 'can load file into', 'Java Properties instance'), ('Java Properties instance', 'loaded using', 'load() method'), ('Java Properties instance', 'loaded using', 'loadFromXML() method'), ('load() method', 'explained in', 'Java Properties tutorial'), ('loadFromXML() method', 'explained in', 'Java Properties tutorial')]"
"The ResourceBundle class is covered as part of that tutorial, in the Java ResourceBundle tutorial.","[('ResourceBundle class', 'covered in', 'Java ResourceBundle tutorial')]"
The Java Properties class has the ability to provide default property values for properties that do not have any key registered in the Properties instance.,"[('Java Properties class', 'has ability', 'provide default property values'), ('properties', 'do not have', 'key registered'), ('key', 'registered in', 'Properties instance')]"
The getProperty() method comes in a version that takes an extra parameter which is the default value to return in case the Properties instance does not contain a value for the given key.,"[('getProperty() method', 'has version', 'version with extra parameter'), ('version with extra parameter', 'takes parameter', 'default value'), ('default value', 'returned in case', 'Properties instance does not contain value for given key')]"
Here is an example of calling getProperty() with a default value:,"[('getProperty()', 'example of', 'calling with a default value')]"
"If the Properties instance does not contain a property for the key preferredLanguage, then the value Danish will be returned - instead of returning null which would have been returned if no default value had been passed to getProperty().","[('Properties instance', 'does not contain property for key', 'preferredLanguage'), ('value', 'will be returned', 'Danish'), (nan, 'would have been returned if', 'no default value had been passed to getProperty()')]"
The Java Properties class can be instantiated with another Properties instance containing default values to use when the newly created Properties instance does not contain a value for a requested property key.,"[('Java Properties class', 'can be instantiated with', 'another Properties instance'), ('another Properties instance', 'contains', 'default values'), ('newly created Properties instance', 'does not contain', 'value for a requested property key')]"
The System class also has a getProperty() and setProperty() method which are shortcuts to the Properties getProperty() and setProperty() methods of the System Properties instance.,"[('System class', 'has method', 'getProperty()'), ('System class', 'has method', 'setProperty()'), ('getProperty()', 'is shortcut to', 'Properties getProperty()'), ('setProperty()', 'is shortcut to', 'Properties setProperty()'), ('Properties getProperty()', 'method of', 'System Properties instance'), ('Properties setProperty()', 'method of', 'System Properties instance'), ('System class', 'has method', 'getProperty()'), ('System class', 'has method', 'setProperty()'), ('getProperty()', 'is shortcut to', 'Properties getProperty()'), ('setProperty()', 'is shortcut to', 'Properties setProperty()'), ('Properties getProperty()', 'method of', 'System Properties instance'), ('Properties setProperty()', 'method of', 'System Properties instance')]"
"The Java Properties class is a subclass of the Java Hashtable class, and as I will show you - this is actually a design mistake!","[('Java Properties class', 'is a subclass of', 'Java Hashtable class')]"
"It is a great example of when the classic ""Is a / Has a"" OOP rule about when to use inheritance vs. composition fails.",
"Being a subclass of Hashtable, you can actually use the get() and put() method of the Hashtable class, which allow the use of non-string keys and values.","[('Hashtable', 'has subclass', 'Being'), ('Being', 'uses method', 'get()'), ('Being', 'uses method', 'put()'), ('get()', 'belongs to class', 'Hashtable'), ('put()', 'belongs to class', 'Hashtable'), ('Hashtable', 'allows', 'use of non-string keys and values')]"
"This defeats the purpose of the Properties class, which is to function as a string,string map.","[('Properties class', 'has purpose', 'function as a string,string map')]"
Notice how it is possible to call put() with non-string values.,"[('put()', 'can be called with', 'non-string values')]"
Just to make it clear: You should NOT use the put() and get() method of the Properties class!,"[('put()', 'method of', 'Properties class'), ('get()', 'method of', 'Properties class')]"
"If instead the value passed to put() had been two strings, then it would have worked as expected.","[('value', 'passed to', 'put()'), ('value', 'consists of', 'two strings')]"
Notice how the second value passed to put() is now also a string.,"[('second value', 'passed to', 'put()'), ('second value', 'is', 'string')]"
"Even if you can get get() and put() to work, I would recommend that you do not use these methods.","[('get()', 'is a method', 'put()'), ('recommend', 'do not use', 'get()'), ('recommend', 'do not use', 'put()')]"
"Using that formulation, Properties would not have been made a subclass of Hashtable, because Properties should not be usable as a Hashtable .","[('Properties', 'subclass of', 'Hashtable'), ('Properties', 'should not be usable as', 'Hashtable')]"
"Instead, the Properties class should have just had an internal Hashtable to keep the property key,value pairs in.","[('Properties class', 'should have', 'internal Hashtable'), ('internal Hashtable', 'keep', 'property key,value pairs')]"
"The Java Queue interface, java.util.Queue represents a data structure designed to have elements inserted at the end of the queue, and elements removed from the beginning of the queue.","[('Java Queue interface', 'part of', 'java.util.Queue'), ('java.util.Queue', 'represents', 'data structure'), ('data structure', 'designed to have elements inserted at', 'end of the queue'), ('data structure', 'designed to have elements removed from', 'beginning of the queue')]"
"There are also Queue implementations in the java.util.concurrent package, but I will leave the concurrency utilities out of this tutorial.","[('Queue implementations', 'located in', 'java.util.concurrent package'), ('java.util.concurrent package', 'contains', 'Queue implementations')]"
"The add() and offer() methods differ in how the behave if the Queue is full, so no more elements can be added.","[('add()', 'differs in behavior from', 'offer()'), ('offer()', 'differs in behavior from', 'add()'), ('Queue', 'can be', 'full'), ('elements', 'can be added to', 'Queue')]"
"The add() method throws an exception in that case, whereas the offer() method just returns false.","[('add() method', 'throws', 'exception'), ('offer() method', 'returns', 'false')]"
Here are two examples of adding elements to a Java Queue via its add() and offer() methods:,"[('Java Queue', 'has method', 'add()'), ('Java Queue', 'has method', 'offer()')]"
To take an element from a Java Queue you can call either its poll() or remove() method.,"[('Java Queue', 'method', 'poll()'), ('Java Queue', 'method', 'remove()')]"
The poll() and remove() both removes the first element in the Queue.,"[('poll()', 'removes', 'first element in the Queue'), ('remove()', 'removes', 'first element in the Queue')]"
The remove() method throws an exception if the Queue is empty.,"[('remove() method', 'throws', 'exception'), ('Queue', 'state', 'empty')]"
Here are two examples of taking an element from a Java Queue using its poll() and remove() methods:,"[('Java Queue', 'has method', 'poll()'), ('Java Queue', 'has method', 'remove()')]"
"The call to poll() will remove the first element of the Queue - which is the first Java String instance added - ""element 1"".",
"The call to rmove() will remove the second element of the Queue - which after the first poll() call is now the String instance added - ""element 2"".",
"If the Queue is empty, the element() method throws a NoSuchElementException.","[('Queue', 'is empty', 'NoSuchElementException'), ('element() method', 'throws', 'NoSuchElementException')]"
Here is an example of peeking at the first element of a Java Queue using the element() method:,"[('Java Queue', 'operation', 'peeking at the first element'), ('peeking at the first element', 'uses method', 'element()')]"
The peek() works like the element() method except it does not throw an exception if the Queue is empty.,"[('peek()', 'works like', 'element() method'), ('peek()', 'does not throw', 'exception'), ('Queue', 'can be', 'empty')]"
Here is an example of peeking at the first element of a Queue using the peek() method:,"[('peek() method', 'used for', 'peeking at the first element of a Queue')]"
"To remove elements from a Java Queue, you call the remove() method.","[('Java Queue', 'method for removing elements', 'remove()')]"
You can remove all elements from a Java Queue using its clear() method.,"[('Java Queue', 'method for removing all elements', 'clear()')]"
Here is an example of removing all elements from a Java Queue via its clear() method:,"[('Java Queue', 'has method', 'clear()'), ('clear()', 'removes elements from', 'Java Queue')]"
You can read the number of elements stored in a Java Queue via its size() method.,"[('Java Queue', 'has method', 'size()'), ('size()', 'reads', 'number of elements')]"
Here is an example of obtaining the size of a Java Queue via its size() method:,"[('Java Queue', 'has method', 'size()'), ('size()', 'obtains', 'size of Java Queue')]"
After running this code the size variable should contain the value 3 - because the Queue contains 3 elements at the time size() is called.,"[('code', 'affects', 'size variable'), ('size variable', 'contains value', '3'), ('Queue', 'contains', '3 elements'), ('size()', 'is called at time', 'Queue contains 3 elements')]"
You can check if a Java Queue contains a certain element via its contains() method.,"[('Java Queue', 'has method', 'contains()'), ('contains()', 'checks for', 'certain element')]"
"The contains() method will return true if the Queue contains the given element, and false if not.","[('contains() method', 'will return', 'true'), ('contains() method', 'will return', 'false'), ('Queue', 'contains', 'given element')]"
"The contains() method is actually inherited from the Collection interface, but in practice that doesn't matter.","[('contains() method', 'inherited from', 'Collection interface')]"
"The Java Set interface, java.util.Set, represents a collection of objects where each object in the Java Set is unique.","[('Java Set interface', 'part of', 'java.util.Set'), ('java.util.Set', 'represents', 'collection of objects'), ('object', 'part of', 'Java Set'), ('object', 'characteristic', 'unique')]"
"If the Set is not typed, using Java Generics, then you can even mix objects of different types (classes) in the same Set.","[('Set', 'is not', 'typed'), ('Set', 'uses', 'Java Generics'), ('Java Generics', 'allows', 'mix objects of different types'), ('objects', 'have', 'different types'), ('objects', 'belong to', 'different classes'), ('objects', 'are in', 'Set')]"
This example creates a HashSet which is one of the classes in the Java APIs that implement the Set interface.,"[('HashSet', 'is a', 'class'), ('HashSet', 'part of', 'Java APIs'), ('Java APIs', 'implement', 'Set interface')]"
"In other words, the order in which the elements whould be sorted if you used a Collections.sort() on a List or array containing these elements.","[('Collections.sort()', 'operates on', 'List'), ('Collections.sort()', 'operates on', 'array'), ('List', 'contains', 'elements'), ('array', 'contains', 'elements')]"
"There are also Set implementations in the java.util.concurrent package, but I will leave the concurrency utilities out of this tutorial.","[('Set implementations', 'located in', 'java.util.concurrent package')]"
The Java Set static factory methods are called of() and take either zero or more parameters.,"[('Java Set static factory methods', 'are called', 'of()'), ('of()', 'take', 'zero or more parameters')]"
"Here is first an example of creating an empty, immutable Set using Set.of() :","[('Set', 'can be created using', 'Set.of()'), ('Set', 'is', 'empty'), ('Set', 'is', 'immutable')]"
Specifying a generic type of the Set returned by Set.of() looks like this:,
Here is an example of how creating a Set containing elements using the Set.of() method looks:,"[('Set', 'contains elements', 'Set.of() method')]"
To add elements to a Set you call its add() method.,"[('add() method', 'used to add elements to', 'Set')]"
The three add() calls add a String instance to the set.,"[('add() calls', 'add', 'String instance'), ('String instance', 'is added to', 'set')]"
You obtain an Iterator from a Set by calling the iterator() method.,"[('Iterator', 'obtained from', 'Set'), ('Set', 'provides method', 'iterator()')]"
You can remove all elements from a Java Set using the clear() method.,"[('clear() method', 'used to remove', 'all elements'), ('all elements', 'part of', 'Java Set')]"
The Java List interface has a method called addAll() which adds all elements from another Collection (List or Set) to the Set.,"[('Java List interface', 'has method', 'addAll()'), ('addAll()', 'adds elements from', 'Collection'), ('Collection', 'type', 'List'), ('Collection', 'type', 'Set')]"
The Java Set interface as a method called removeAll() which removes all elements in the Set which are also present in another Collection.,"[('Java Set interface', 'has method', 'removeAll()'), ('removeAll()', 'removes elements from', 'Set'), ('elements', 'are present in', 'another Collection')]"
"The element three has been removed, because it was present in set2, which was given as parameter to set.removeAll(set2) .","[('element three', 'has been removed', 'set'), ('element three', 'was present in', 'set2'), ('set2', 'was given as parameter to', 'set.removeAll(set2)')]"
You can check the size of a Java Set using the size() method.,"[('Java Set', 'method to check size', 'size()')]"
"You can check if a Java Set is empty, meaning it contains no elements, by calling the isEmpty() method on the Set.","[('Java Set', 'can be checked if empty by', 'calling the isEmpty() method'), ('Java Set', 'contains', 'elements')]"
You can also check if a Set is empty by comparing the value returned by the size() method with 0.,"[('Set', 'can be checked if empty by comparing', 'value returned by size() method'), ('value returned by size() method', 'compared with', '0')]"
"After running this Java code the isEmpty variable will contain the value true, because the Set size() method returns 0 - because the Set in the example contains no elements.","[('Java code', 'affects', 'isEmpty variable'), ('isEmpty variable', 'contains value', 'true'), ('Set size() method', 'returns', '0'), ('Set', 'contains', 'no elements')]"
You can check if a Java Set contains a given element (object) by calling the contains() method.,"[('Java Set', 'method', 'contains()'), ('contains()', 'action', 'check if contains element')]"
"You can convert a Java Set to a Java List by creating a List and calling its addAll() method, passing the Set as parameter to the addAll() method.","[('Java Set', 'can be converted to', 'Java List'), ('List', 'method', 'addAll()'), ('addAll()', 'parameter', 'Set')]"
"The Java SortedMap interface, java.util.SortedMap, is a subtype of the java.util.Map interface, with the addition that the elements stored in a Java SortedMap map are sorted internally.","[('Java SortedMap interface', 'subtype of', 'java.util.Map interface'), ('java.util.SortedMap', 'subtype of', 'java.util.Map interface'), ('elements', 'stored in', 'Java SortedMap'), ('elements', 'sorted internally', 'Java SortedMap')]"
Java comes with a built-in implementation of the Java SortedMap interface called TreeMap (java.util.TreeMap).,"[('Java', 'comes with implementation', 'TreeMap'), ('TreeMap', 'implements interface', 'Java SortedMap'), ('TreeMap', 'part of package', 'java.util.TreeMap')]"
"The order of the sorting in a Java SortedMap is either the natural sorting order of the elements (if they implement java.lang.Comparable), or the order determined by a Comparator that you can give to the SortedSet.","[('Java SortedMap', 'has sorting order', 'natural sorting order'), ('elements', 'implement', 'java.lang.Comparable'), ('Java SortedMap', 'has sorting order', 'order determined by Comparator'), ('Comparator', 'can be given to', 'SortedSet')]"
But it is also possible to iterate the elements in descending order using the method TreeMap.descendingKeySet().,"[('TreeMap', 'has method', 'descendingKeySet()'), ('descendingKeySet()', 'used for', 'iterate elements in descending order')]"
"You iterate the keys of a SortedMap by calling its keySet() method, like this:","[('You', 'iterate keys of', 'SortedMap'), ('SortedMap', 'method', 'keySet()')]"
"Remember, if you want to iterate the keys in descending order rather than ascending order, use the sortedMap.descendingKeySet().iterator() method, like this:","[('you', 'want to iterate keys in order', 'descending'), ('use', 'method', 'sortedMap.descendingKeySet().iterator()')]"
"If your Java SortedMap was created using a Comparator, you can obtain the Comparator used via the SortedMap comparator() method.","[('Java SortedMap', 'created using', 'Comparator'), ('Java SortedMap', 'obtain', 'Comparator'), ('SortedMap', 'method', 'comparator()')]"
Here is an example of obtaining the Comparator used by a SortedMap via its comparator() method:,"[('SortedMap', 'has method', 'comparator()'), ('comparator()', 'used by', 'SortedMap'), ('Comparator', 'obtained by', 'comparator()')]"
Here is an example of obtaining the first key of a SortedMap via its firstKey() method:,"[('SortedMap', 'has method', 'firstKey()'), ('firstKey()', 'obtains', 'first key')]"
Here is an example of obtaining the last key of a SortedMap via its lastKey() method:,"[('SortedMap', 'has method', 'lastKey()'), ('lastKey()', 'obtains', 'last key')]"
The SortedMap interface has a method named headMap() which returns a new Map which contains the first elements of the SortedMap according to the sort order used.,"[('SortedMap', 'has method', 'headMap()'), ('headMap()', 'returns', 'new Map'), ('new Map', 'contains', 'first elements of SortedMap'), ('first elements of SortedMap', 'determined by', 'sort order used')]"
The headMap() method takes a parameter that acts as a delimiter for what elements gets included in the returned head map.,"[('headMap() method', 'takes parameter', 'delimiter'), ('delimiter', 'determines', 'elements included in returned head map')]"
All elements with a key that is smaller than / earlier than the parameter passed to the headMap() method.,"[('elements', 'have key smaller than', 'parameter passed to headMap() method')]"
Here is an example of obtaining a head map from a SortedMap via its headMap() method:,"[('SortedMap', 'has method', 'headMap()'), ('headMap()', 'obtains', 'head map')]"
The SortedMap interface has a method named tailMap() which returns a new Map which contains the last elements of the SortedMap according to the sort order used.,"[('SortedMap', 'has method', 'tailMap()'), ('tailMap()', 'returns', 'new Map'), ('new Map', 'contains', 'last elements of the SortedMap'), ('last elements of the SortedMap', 'according to', 'sort order used')]"
The tailMap() method takes a parameter that acts as a delimiter for what elements gets included in the returned tail map.,"[('tailMap() method', 'takes parameter', 'delimiter'), ('delimiter', 'determines', 'elements included in returned tail map')]"
All elements with a key that is equal to or larger than the parameter passed to the tailMap() method.,"[('elements', 'have key', 'equal to or larger than parameter'), ('parameter', 'passed to', 'tailMap() method')]"
Here is an example of obtaining a tail map from a SortedMap via its tailMap() method:,"[('SortedMap', 'has method', 'tailMap()'), ('tailMap()', 'obtains', 'tail map')]"
"The tail map returned will contain the key, value pairs (""c"", ""3""), (""d"", ""4"") and (""e"", ""5""), since ""c"", ""d"" and ""e"" are larger than or equal to the ""c"" passed as parameter to tailMap() .",
The Java SortedMap also has a method named subMap() which can return a new Map which is a submap of the SortedMap.,"[('Java SortedMap', 'has method', 'subMap()'), ('subMap()', 'returns', 'new Map'), ('new Map', 'is submap of', 'SortedMap')]"
The subMap() method takes two parameters which act as delimiters for what elements are included in the returned submap.,"[('subMap() method', 'takes', 'two parameters'), ('two parameters', 'act as', 'delimiters'), ('delimiters', 'included in', 'returned submap')]"
Here is an example of obtaining a submap from a Java SortedMap via its subMap() method:,"[('Java SortedMap', 'has method', 'subMap()'), ('subMap()', 'obtains', 'submap')]"
"The Java SortedSet interface, java.util.SortedSet, is a subtype of the java.util.Set interface.","[('Java SortedSet interface', 'subtype of', 'java.util.Set interface'), ('Java SortedSet interface', 'part of', 'java.util.SortedSet')]"
The Java Collections API only has one implementation of the Java SortedSet interface - the java.util.TreeSet class.,"[('Java Collections API', 'has implementation', 'java.util.TreeSet class'), ('java.util.TreeSet class', 'implements', 'Java SortedSet interface')]"
"The java.util.concurrent package also has an implementation of this interface, but I will leave the concurrency utilities out of this trail.","[('java.util.concurrent package', 'has implementation of', 'this interface'), ('concurrency utilities', 'are part of', 'this trail')]"
"It it possible to pass a Comparator, java.util.Comparator implementation to the constructor of the TreeSet.","[('Comparator', 'is a', 'java.util.Comparator implementation'), ('java.util.Comparator implementation', 'can be passed to', 'constructor of the TreeSet')]"
"For the SortedSet to be able to determine the natural order of the elements, the elements must implement the java.lang.Comparable interface.","[('SortedSet', 'determines order of', 'elements'), ('elements', 'implement', 'java.lang.Comparable interface')]"
But it is also possible to iterate the elements in descending order using the method TreeSet.descendingIterator().,"[('TreeSet', 'has method', 'descendingIterator'), ('descendingIterator', 'used for', 'iterate elements in descending order')]"
"If you created your SortedSet with a Comparator, you can obtain that Comparator via the SortedSet comparator() method.","[('SortedSet', 'created with', 'Comparator'), ('SortedSet', 'method', 'comparator()'), ('comparator()', 'obtains', 'Comparator')]"
Here is an example of obtaining the Comparator used by a SortedSet via the comparator() method:,"[('SortedSet', 'uses method', 'comparator()'), ('comparator()', 'obtains', 'Comparator')]"
You add elements to a Java SortedSet in the same way you do with a normal Java Set - via its add() method.,"[('Java SortedSet', 'is a type of', 'Java Set'), ('Java SortedSet', 'has method', 'add()'), ('Java Set', 'has method', 'add()'), ('add()', 'used for', 'add elements')]"
"To remove an element from a SortedSet you call its remove() method, passing the element to remove as parameter.","[('remove()', 'method of', 'SortedSet'), ('remove()', 'action', 'remove element'), ('remove()', 'parameter', 'element')]"
You can get the first element of a SortedSet according to its sort order by calling the first() method of the SortedSet.,"[('first()', 'method of', 'SortedSet'), ('first()', 'gets', 'first element'), ('first element', 'according to', 'sort order')]"
You can get the last element of a SortedSet according to its sort order by calling the last() method of the SortedSet.,"[('SortedSet', 'has method', 'last()'), ('last()', 'returns', 'last element of SortedSet')]"
"You call the SortedSet iterator() method which returns an Iterator, and then you can iterate the elements via that.","[('SortedSet', 'has method', 'iterator()'), ('iterator()', 'returns', 'Iterator'), ('Iterator', 'used to', 'iterate elements')]"
"The Java SortedSet interface has a method named headSet() which returns another SortedSet with all elements that are smaller than (ahead of) a given parameter value, according to the sort order used by the SortedSet.","[('Java SortedSet interface', 'has method', 'headSet()'), ('headSet()', 'returns', 'SortedSet'), ('SortedSet', 'contains elements', 'smaller than given parameter value'), ('SortedSet', 'uses sort order', 'SortedSet')]"
Here is an example of obtaining a head set from a Java SortedSet via its headSet() method:,"[('Java SortedSet', 'has method', 'headSet()'), ('headSet()', 'obtains', 'head set')]"
"After running this code the headSet will contain the elements ""a"" and ""b"" since these two elements are smaller than (ahead of) the parameter value ""c"" that was passed to the headSet() method.",
"The Java SortedSet interface has a method named setSet() which returns another SortedSet with all elements that are greater than or equal to (tailing) a given parameter value, according to the sort order used by the SortedSet.","[('Java SortedSet interface', 'has method', 'setSet()'), ('setSet()', 'returns', 'SortedSet'), ('SortedSet', 'contains elements', 'greater than or equal to a given parameter value'), ('SortedSet', 'uses sort order', 'SortedSet')]"
Here is an example of obtaining a tail set from a Java SortedSet via its tailSet() method:,"[('Java SortedSet', 'method', 'tailSet()'), ('tailSet()', 'obtains', 'tail set')]"
"After running this code the tailSet will contain the elements ""c"", ""d"" and ""e"", since these three elements are greater than or equal to (tailing) the parameter value ""c"" that was passed to the tailSet() method.",
The Java SortedSet interface has a method named subSet() method which will return a new SortedSet which is a subset of the SortedSet the subSet() method is called on.,"[('Java SortedSet interface', 'has method', 'subSet() method'), ('subSet() method', 'returns', 'new SortedSet'), ('new SortedSet', 'is subset of', 'SortedSet')]"
The subSet() method takes two parameter values which specify what elements the returned SortedSet should contain.,"[('subSet() method', 'takes', 'two parameter values'), ('two parameter values', 'specify', 'elements'), ('elements', 'contained in', 'returned SortedSet')]"
Here is an example of obtaining a subset of a Java SortedSet via its subSet() method:,"[('Java SortedSet', 'has method', 'subSet()'), ('subSet()', 'obtains', 'subset')]"
Notice how there is no longer a cast of the object returned from iterator.next() needed.,"[('iterator', 'returns', 'object'), ('object', 'is returned from', 'iterator.next()')]"
"Because the generic type of the SortedSet is String, the compiler knows that the iterator is an Iterato<String>, so next() return String objects.","[('SortedSet', 'has generic type', 'String'), ('compiler', 'knows', 'iterator is an Iterator<String>'), ('next()', 'returns', 'String objects')]"
You can sort a Java List collections using the java.util.Collections.sort() method.,"[('java.util.Collections.sort()', 'used for', 'sort a Java List collections'), ('Java List collections', 'can be sorted using', 'java.util.Collections.sort()')]"
For objects to have a natural order they must implement the interface java.lang.Comparable.,"[('objects', 'must implement', 'interface java.lang.Comparable'), ('interface java.lang.Comparable', 'provides', 'natural order')]"
"The compareTo() method should compare this object to another object, return an int value.","[('compareTo() method', 'should compare', 'this object'), ('compareTo() method', 'should compare', 'another object'), ('compareTo() method', 'should return', 'int value')]"
"So, if a string is less than another string by alphabetic comparison it will return a negative number from the compareTo() method.","[('string', 'compared alphabetically to', 'another string'), ('compareTo() method', 'returns', 'negative number')]"
When you implement the compareTo() method in your own classes you will have to decide how these objects should be compared to each other.,"[('you', 'implement', 'compareTo() method'), ('compareTo() method', 'is in', 'your own classes'), ('you', 'decide', 'how these objects should be compared to each other')]"
Notice how the Collections.sort() method now takes a java.util.Comparator as parameter in addition to the List.,"[('Collections.sort()', 'takes parameter', 'java.util.Comparator'), ('Collections.sort()', 'takes parameter', 'List')]"
The compare() method compares two objects to each other and should:,"[('compare() method', 'compares', 'two objects')]"
"There are a few more requirements to the implementation of the compare() method, but these are the primary requirements.","[('compare() method', 'has requirement', 'implementation')]"
"If you want to compare objects by more than one factor, start by comparing by the first factor (e.g first name).","[('You', 'want', 'compare objects by more than one factor'), ('compare objects by more than one factor', 'start by', 'comparing by the first factor'), ('first factor', 'example of', 'first name')]"
"Then, if the first factors are equal, compare by the second factor (e.g.","[('first factors', 'are equal to', 'second factor')]"
"The Java Stack class, java.util.Stack, is a classical stack data structure.","[('Java Stack class', 'is a type of', 'stack data structure'), ('Java Stack class', 'part of', 'java.util.Stack')]"
"The Java Stack class actually implements the Java List interface, but you rarely use a Stack as a List - except perhaps if you need to inspect all elements currently stored on the stack.","[('Java Stack class', 'implements', 'Java List interface'), ('Stack', 'used as', 'List'), ('Stack', 'stores', 'elements')]"
"Please note, that the Java Stack class is a subclass of Vector, an older Java class which is synchronized.","[('Java Stack class', 'is a subclass of', 'Vector'), ('Vector', 'is a', 'Java class'), ('Vector', 'is', 'synchronized')]"
"Additionally, the Vector class uses several older (no longer recommended) parts of Java, like the Enumeration which is superseded by the Iterator interface.","[('Vector class', 'uses', 'older parts of Java'), ('older parts of Java', 'includes', 'Enumeration'), ('Enumeration', 'superseded by', 'Iterator interface')]"
To use a Java Stack you must first create an instance of the Stack class.,"[('Java Stack', 'requires action', 'create an instance'), ('create an instance', 'object', 'Stack class')]"
You push elements onto a Java Stack using its push() method.,"[('You', 'use method', 'push()'), ('push()', 'operates on', 'Java Stack'), ('Java Stack', 'has method', 'push()')]"
You pop an element off a Java Stack using the pop() method.,"[('You', 'use method', 'pop()'), ('pop()', 'operates on', 'Java Stack'), ('pop()', 'action', 'pop an element off')]"
Here is an example of popping an element off a Stack using the pop() method:,"[('pop() method', 'used for', 'popping an element off a Stack')]"
"The Java Stack class has a method called peek() which enables you to see what the top element on the Stack is, without popping off the element.","[('Java Stack class', 'has method', 'peek()'), ('peek()', 'enables', 'see top element on the Stack'), ('see top element on the Stack', 'without', 'popping off the element')]"
After running this Java example the topElement variable will contain the String object 1 which was pushed onto the Stack just before peek() was called.,"[('topElement', 'contains', 'String object 1'), ('String object 1', 'pushed onto', 'Stack'), ('peek()', 'called before', 'topElement contains String object 1')]"
The String object is still present on the Stack after calling peek().,"[('String object', 'is present on', 'Stack'), ('peek()', 'action', 'String object')]"
"You can search for an object on the stack to get it's index, using the search() method.","[('You', 'can search for', 'object'), ('object', 'located on', 'stack'), ('search()', 'method of', 'stack'), ('search()', 'returns', 'index')]"
The object's equals() method is called on every object on the Stack to determine if the searched-for object is present on the Stack.,"[('object', 'has method', 'equals()'), ('equals()', 'called on', 'every object on the Stack'), ('equals()', 'determine if', 'searched-for object is present on the Stack')]"
"You can obtain the size of a Java Stack, meaning the number of elements currently stored on the Stack, via the Stack size() method.","[('Java Stack', 'has method', 'size()'), ('size()', 'determines', 'number of elements on the Stack')]"
Here is an example of obtaining the size of a Java Stack via its size() method:,"[('Java Stack', 'has method', 'size()'), ('size()', 'obtains', 'size of Java Stack')]"
"After running this code the size variable will contain the value 3, since the Stack in the example contains 3 elements at the time its size() method is called.","[('size variable', 'will contain', 'value 3'), ('Stack', 'contains', '3 elements'), ('size() method', 'is called on', 'Stack')]"
You do so by first obtaining a Stream from the Stack via the stream() method.,"[('Stream', 'obtained from', 'Stack'), ('Stack', 'provides method', 'stream()')]"
"Notice, that this example uses a Java Lambda as parameter to the Stream.forEach() method.","[('example', 'uses', 'Java Lambda'), ('Java Lambda', 'used as parameter to', 'Stream.forEach() method')]"
The non-parallelizable part of the programs is 40% which out of a total time of 1 is equal to 0.4 .,"[('non-parallelizable part of the programs', 'percentage', '40%'), ('total time', 'equals', '1'), ('non-parallelizable part of the programs', 'time', '0.4')]"
The parallelizable part is thus equal to 1 - 0.4 = 0.6 .,"[('parallelizable part', 'is equal to', '0.6'), ('0.6', 'is calculated as', '1 - 0.4')]"
"If B is 0.4, O is 2 and N is 5, then the calculation looks like this:","[('B', 'is', '0.4'), ('O', 'is', '2'), ('N', 'is', '5')]"
"With B = 0.4, O = 2 and N = 5, the calculation becomes:","[('B', 'equals', '0.4'), ('O', 'equals', '2'), ('N', 'equals', '5')]"
"That means, that if you optimize the non-parallelizable (sequential) part by a factor of 2, and paralellize the parallelizable part by a factor of 5, the new optimized version of the program or algorithm would run a maximum of 2.77777 times faster than the old version.","[('non-parallelizable part', 'optimized by a factor of', '2'), ('parallelizable part', 'parallelized by a factor of', '5'), ('new optimized version', 'runs faster by a factor of', '2.77777'), ('new optimized version', 'compared to', 'old version')]"
Note: The content of this text is a part result of a M.Sc.,"[('content of this text', 'is a part result of', 'M.Sc.')]"
Once a thread want to notify the waiting threads it calls notifyAll() on the object the waiting threads called wait() on.,"[('thread', 'wants to notify', 'waiting threads'), ('thread', 'calls', 'notifyAll()'), ('waiting threads', 'called', 'wait()'), ('notifyAll()', 'called on', 'object'), ('wait()', 'called on', 'object')]"
Just have the notifying thread call notify() on the object the waiting threads have called wait() on.,"[('notifying thread', 'calls', 'notify()'), ('waiting threads', 'called', 'wait()'), ('notify()', 'called on', 'object'), ('wait()', 'called on', 'object')]"
"To achive this each waiting thread must call wait() on its own, separate object.","[('waiting thread', 'must call', 'wait()'), ('wait()', 'called on', 'separate object')]"
When the notifying thread wants to notify a specific waiting thread it will call notify() on the object this specific thread has called wait() on.,"[('notifying thread', 'wants to notify', 'specific waiting thread'), ('notifying thread', 'calls', 'notify()'), ('specific waiting thread', 'calls', 'wait()'), ('notify()', 'called on', 'object'), ('wait()', 'called on', 'object')]"
The lockWrite() method of a ReadWriteLock class shown below is an example of a test-and-set method.,"[('lockWrite() method', 'part of', 'ReadWriteLock class'), ('lockWrite() method', 'is an example of', 'test-and-set method')]"
Threads calling lockWrite() first sets the state before the test (writeRequests++).,"[('Threads', 'calls', 'lockWrite()'), ('lockWrite()', 'action', 'sets the state'), ('lockWrite()', 'action', 'writeRequests++')]"
Then it tests the internal state against the access condition in the canGrantWriteAccess() method.,"[('internal state', 'tested against', 'access condition'), ('access condition', 'evaluated in', 'canGrantWriteAccess() method')]"
The BoundedSemaphore class shown below has two test-and-set methods: take() and release().,"[('BoundedSemaphore', 'has method', 'take()'), ('BoundedSemaphore', 'has method', 'release()')]"
A typical example of a set method is the unlock() method of a Lock class.,"[('unlock() method', 'is a method of', 'Lock class'), ('unlock() method', 'is an example of', 'set method')]"
Java 5 comes with blocking queue implementations in the java.util.concurrent package.,"[('Java 5', 'comes with', 'blocking queue implementations'), ('blocking queue implementations', 'located in', 'java.util.concurrent package')]"
Notice how notifyAll() is only called from enqueue() and dequeue() if the queue size is equal to the size bounds (0 or limit).,"[('notifyAll()', 'called from', 'enqueue()'), ('notifyAll()', 'called from', 'dequeue()'), ('queue size', 'equal to', 'size bounds'), ('size bounds', 'includes', '0'), ('size bounds', 'includes', 'limit')]"
"If the queue size is not equal to either bound when enqueue() or dequeue() is called, there can be no threads waiting to either enqueue or dequeue items.","[('queue size', 'not equal to', 'either bound'), ('enqueue()', 'called when', 'queue size not equal to either bound'), ('dequeue()', 'called when', 'queue size not equal to either bound'), ('threads', 'can be waiting to', 'enqueue items'), ('threads', 'can be waiting to', 'dequeue items')]"
"As you can see, the lock() method first checks if the locked member variable is equal to false (check), and if it is it ses locked to true (then act).","[('lock() method', 'checks', 'locked member variable'), ('locked member variable', 'is equal to', 'false'), ('lock() method', 'sets', 'locked member variable'), ('locked member variable', 'is set to', 'true')]"
"If multiple threads had access to the same MyLock instance, the above lock() function would not be guaranteed to work.","[('multiple threads', 'have access to', 'the same MyLock instance'), ('lock() function', 'would not be guaranteed to work', 'if multiple threads had access to the same MyLock instance')]"
Here is the code example from earlier with the lock() method turned into an atomic block of code using the synchronized keyword:,"[('lock() method', 'turned into', 'atomic block of code'), ('atomic block of code', 'using', 'synchronized keyword')]"
Now the lock() method is synchronized so only one thread can executed it at a time on the same MyLock instance.,"[('lock() method', 'is synchronized', 'True'), ('thread', 'can execute', 'lock() method'), ('lock() method', 'belongs to', 'MyLock instance')]"
"The atomic lock() method is actually an example of ""compare and swap"".",
"The lock() method compares the variable locked to the expected value false and if locked is equal to this expected value, it swaps the variable's value to true .","[('lock() method', 'compares', 'variable locked'), ('variable locked', 'compared to', 'expected value false'), ('locked', 'equal to', 'expected value'), ('lock() method', 'swaps', ""variable's value""), (""variable's value"", 'swapped to', 'true')]"
From Java 5 you can get access to these functions in the CPU via some of the new atomic classes in the java.util.concurrent.atomic package.,"[('Java 5', 'provides access to', 'functions in the CPU'), ('functions in the CPU', 'accessed via', 'atomic classes'), ('atomic classes', 'located in', 'java.util.concurrent.atomic package')]"
Here is an example showing how to implement the lock() method shown earlier using the AtomicBoolean class:,"[('lock() method', 'implemented using', 'AtomicBoolean class')]"
"This class has a compareAndSet() function which will compare the value of the AtomicBoolean instance to an expected value, and if has the expected value, it swaps the value with a new value.","[('compareAndSet()', 'is a function of', 'class'), ('compareAndSet()', 'compares value of', 'AtomicBoolean instance'), ('AtomicBoolean instance', 'has value', 'expected value'), ('compareAndSet()', 'swaps value with', 'new value')]"
"The compareAndSet() method returns true if the value was swapped, and false if not.","[('compareAndSet() method', 'returns', 'true if the value was swapped'), ('compareAndSet() method', 'returns', 'false if not')]"
Many of the concurrency utilities in the java.util.concurrent Java package are designed for use with this model.,"[('concurrency utilities', 'designed for use with', 'this model'), ('concurrency utilities', 'located in', 'java.util.concurrent Java package')]"
Non-blocking IO means that when a worker starts an IO operation (e.g.,"[('Non-blocking IO', 'means', 'when a worker starts an IO operation')]"
"When the IO operation finishes, the result of the IO operation ( e.g.","[('IO operation', 'has result', 'result of the IO operation')]"
It just needs to know what channel to forward the job to (or send the message to etc.).,"[('It', 'needs to know', 'what channel to forward the job to'), ('It', 'needs to know', 'what channel to send the message to')]"
"The main disadvantage of the assembly line concurrency model is that the execution of a job is often spread out over multiple workers, and thus over multiple classes in your project.","[('assembly line concurrency model', 'has disadvantage', 'execution of a job spread out over multiple workers'), ('execution of a job', 'spread out over', 'multiple workers'), ('execution of a job', 'spread out over', 'multiple classes in your project')]"
"Of course parallel worker code may also be spread over many different classes, but the execution sequence is often easier to read from the code.","[('parallel worker code', 'may be spread over', 'many different classes'), ('execution sequence', 'is easier to read from', 'the code')]"
With Java 7 we got the java.util.concurrent package contains the ForkAndJoinPool which can help you implement something similar to functional parallelism.,"[('Java 7', 'introduced', 'java.util.concurrent package'), ('java.util.concurrent package', 'contains', 'ForkAndJoinPool'), ('ForkAndJoinPool', 'helps implement', 'functional parallelism')]"
"However, if the system is concurrently executing multiple other tasks (like e.g.","[('system', 'is executing', 'multiple other tasks')]"
when a Java application is started its main() method is executed by the main thread - a special thread that is created by the Java VM to run your application.,"[('Java application', 'has method', 'main()'), ('main()', 'is executed by', 'main thread'), ('main thread', 'is created by', 'Java VM'), ('Java VM', 'runs', 'Java application')]"
"Threads are instances of class java.lang.Thread, or instances of subclasses of this class.","[('Threads', 'are instances of', 'class java.lang.Thread'), ('Threads', 'are instances of', 'subclasses of class java.lang.Thread')]"
"To start the Java thread you will call its start() method, like this:","[('Java thread', 'has method', 'start()'), ('start()', 'is called by', 'you')]"
The first is to create a subclass of Thread and override the run() method.,"[('subclass', 'is a type of', 'Thread'), ('subclass', 'overrides', 'run() method')]"
The second method is to pass an object that implements Runnable (java.lang.Runnable to the Thread constructor.,"[('object', 'implements', 'Runnable'), ('Runnable', 'belongs to', 'java.lang.Runnable'), ('object', 'passed to', 'Thread constructor')]"
"The first way to specify what code a thread is to run, is to create a subclass of Thread and override the run() method.","[('Thread', 'has subclass', 'subclass of Thread'), ('subclass of Thread', 'overrides method', 'run() method'), ('thread', 'runs code', 'run() method')]"
The run() method is what is executed by the thread after you call start().,"[('run() method', 'executed by', 'thread'), ('thread', 'executes', 'run() method'), ('you', 'call', 'start()')]"
The start() call will return as soon as the thread is started.,"[('start()', 'will return', 'as soon as the thread is started')]"
The run() method will execute as if executed by a different CPU.,"[('run() method', 'will execute as if executed by', 'different CPU')]"
"When the run() method executes it will print out the text ""MyThread running"".",
You can also create an anonymous subclass of Thread like this:,"[('anonymous subclass', 'is a type of', 'Thread')]"
"This example will print out the text ""Thread running"" once the run() method is executed by the new thread.",
The second way to specify what code a thread should run is by creating a class that implements the java.lang.Runnable interface.,"[('class', 'implements', 'java.lang.Runnable interface'), ('thread', 'runs', 'code')]"
Whatever the thread is supposed to do when it executes must be included in the implementation of the run() method.,"[('thread', 'executes', 'run() method'), ('run() method', 'includes', 'whatever the thread is supposed to do')]"
The first way to implement the Java Runnable interface is by creating your own Java class that implements the Runnable interface.,"[('Java class', 'implements', 'Runnable interface'), ('Java Runnable interface', 'implemented by', 'Java class')]"
Here is an example of a custom Java class that implements the Runnable interface:,"[('custom Java class', 'implements', 'Runnable interface')]"
"After printing that text, the run() method exits, and the thread running the run() method will stop.","[('run() method', 'prints', 'text'), ('run() method', 'exits', 'after printing text'), ('thread', 'runs', 'run() method'), ('thread', 'stops', 'after run() method exits')]"
Here is an example of an anonymous Java class that implements the Runnable interface:,"[('anonymous Java class', 'implements', 'Runnable interface')]"
"Apart from being an anononymous class, this example is quite similar to the example that used a custom class to implement the Runnable interface.","[('this example', 'is similar to', 'the example that used a custom class'), ('the example that used a custom class', 'implements', 'Runnable interface')]"
"To have the run() method executed by a thread, pass an instance of a class, anonymous class or lambda expression that implements the Runnable interface to a Thread in its constructor.","[('run() method', 'executed by', 'thread'), ('instance', 'implements', 'Runnable interface'), ('class', 'implements', 'Runnable interface'), ('anonymous class', 'implements', 'Runnable interface'), ('lambda expression', 'implements', 'Runnable interface'), ('Runnable interface', 'passed to', 'Thread'), ('Thread', 'has constructor', 'Runnable interface')]"
When the thread is started it will call the run() method of the MyRunnable instance instead of executing it's own run() method.,"[('thread', 'calls method', 'run() method of the MyRunnable instance'), ('thread', 'does not execute', 'its own run() method')]"
Sometimes you may have to implement Runnable as well as subclass Thread.,"[('You', 'may have to implement', 'Runnable'), ('You', 'may have to subclass', 'Thread')]"
"For instance, if creating a subclass of Thread that can execute more than one Runnable.","[('subclass', 'can execute', 'more than one Runnable'), ('creating', 'involves', 'subclass of Thread')]"
"When creating and starting a thread a common mistake is to call the run() method of the Thread instead of start(), like this:","[('creating and starting a thread', 'common mistake', 'call the run() method of the Thread instead of start()')]"
At first you may not notice anything because the Runnable's run() method is executed like you expected.,"[('Runnable', 'has method', 'run()'), ('run()', 'is executed', 'like you expected')]"
Instead the run() method is executed by the thread that created the thread.,"[('run() method', 'executed by', 'thread'), ('thread', 'created', 'thread')]"
"To have the run() method of the MyRunnable instance called by the new created thread, newThread, you MUST call the newThread.start() method.","[('MyRunnable instance', 'has method', 'run()'), ('new created thread', 'called by', 'run() method of MyRunnable instance'), ('newThread', 'is', 'new created thread'), ('newThread', 'has method', 'start()'), ('newThread.start()', 'must be called', 'to call run() method')]"
"For instance, if multiple threads write to System.out it can be handy to see which thread wrote the text.","[('multiple threads', 'write to', 'System.out'), ('thread', 'wrote', 'text')]"
"Notice however, that since the MyRunnable class is not a subclass of Thread, it does not have access to the getName() method of the thread executing it.","[('MyRunnable class', 'is not a subclass of', 'Thread'), ('MyRunnable class', 'does not have access to', 'getName() method'), ('getName() method', 'belongs to', 'thread executing MyRunnable class')]"
The Thread.currentThread() method returns a reference to the Thread instance executing currentThread() .,"[('Thread.currentThread()', 'returns', 'reference to the Thread instance'), ('Thread instance', 'executing', 'currentThread()')]"
First it prints out the name of the thread executing the main() method.,"[('thread', 'executes', 'main() method'), ('main() method', 'has output', 'name of the thread')]"
"Note that even if the threads are started in sequence (1, 2, 3 etc.)","[('threads', 'started in sequence', '1, 2, 3 etc.')]"
"they may not execute sequentially, meaning thread 1 may not be the first thread to write its name to System.out.","[('thread 1', 'may not be', 'first thread'), ('first thread', 'write to', 'System.out')]"
A thread can pause itself by calling the static method Thread.sleep() .,"[('thread', 'can pause itself by calling', 'Thread.sleep()'), ('Thread.sleep()', 'is a', 'static method')]"
The sleep() method will attempt to sleep that number of milliseconds before resuming execution.,"[('sleep() method', 'will attempt to', 'sleep that number of milliseconds'), ('sleep() method', 'before', 'resuming execution')]"
"The Thread sleep() is not 100% precise, but it is pretty good still.","[('Thread sleep()', 'precision', 'not 100%'), ('Thread sleep()', 'quality', 'pretty good')]"
Here is an example of pausing a Java thread for 3 seconds (3.000 millliseconds) by calling the Thread sleep() method:,"[('Java thread', 'can be paused for', '3 seconds'), ('3 seconds', 'equivalent to', '3,000 milliseconds'), ('Thread sleep() method', 'used for', 'pausing a Java thread')]"
"The thread executing the Java code above, will sleep for approximately 10 seconds (10.000 milliseconds).","[('thread', 'executes', 'Java code'), ('thread', 'will sleep for', '10 seconds'), ('10 seconds', 'equals', '10,000 milliseconds')]"
"The Java Thread class contains a stop() method, but it is deprecated.","[('Java Thread class', 'contains', 'stop() method'), ('stop() method', 'is', 'deprecated')]"
The original stop() method would not provide any guarantees about in what state the thread was stopped.,"[('stop() method', 'does not provide', 'guarantees'), ('thread', 'was stopped in', 'state')]"
Instead of calling the stop() method you will have to implement your thread code so it can be stopped.,"[('stop() method', 'is called by', 'you'), ('you', 'implement', 'thread code'), ('thread code', 'can be', 'stopped')]"
Here is an example of a class that implements Runnable which contains an extra method called doStop() which signals to the Runnable to stop.,"[('class', 'implements', 'Runnable'), ('class', 'contains method', 'doStop()'), ('doStop()', 'signals to', 'Runnable')]"
The doStop() is intended to be called from another thread than the thread executing the MyRunnable's run() method.,"[('doStop()', 'intended to be called from', 'another thread'), ('another thread', 'different from', ""thread executing MyRunnable's run() method"")]"
The keepRunning() method is called internally by the thread executing the MyRunnable's run() method.,"[('thread', 'executes', ""MyRunnable's run() method""), (""MyRunnable's run() method"", 'calls internally', 'keepRunning() method')]"
As long as doStop() has not been called the keepRunning() method will return true - meaning the thread executing the run() method will keep running.,"[('keepRunning()', 'will return', 'true'), ('thread', 'executes', 'run() method'), ('run() method', 'will keep', 'running')]"
"Here is an example of starting a Java thread that executes an instance of the above MyRunnable class, and stopping it again after a delay:","[('Java thread', 'executes', 'instance of MyRunnable class')]"
"Then the thread executing the main() method (the main thread) sleeps for 10 seconds, and then calls the doStop() method of the MyRunnable instance.","[('main() method', 'executed by', 'main thread'), ('main thread', 'sleeps for', '10 seconds'), ('main thread', 'calls', 'doStop() method'), ('doStop() method', 'belongs to', 'MyRunnable instance')]"
"This will cause the thread executing the MyRunnable method to stop, because the keepRunning() will return false after doStop() has been called.","[('thread', 'executes', 'MyRunnable method'), ('keepRunning()', 'returns', 'false')]"
Please keep in mind that if your Runnable implementation needs more than just the run() method (e.g.,"[('Runnable implementation', 'needs', 'run() method')]"
"a stop() or pause() method too), then you can no longer create your Runnable implementation with a Java lambda expression.","[('Runnable implementation', 'created with', 'Java lambda expression')]"
"Instead you must use a custom class, or a custom interface that extends Runnable which has the extra methods, and which is implemented by an anonymous class.","[('custom class', 'extends', 'Runnable'), ('custom interface', 'extends', 'Runnable'), ('custom interface', 'has', 'extra methods'), ('anonymous class', 'implements', 'custom interface')]"
You will have to create a custom lock class or use one of the Java 5 concurrency constructs in the java.util.concurrency package.,"[('custom lock class', 'can be created using', 'Java 5 concurrency constructs'), ('Java 5 concurrency constructs', 'located in', 'java.util.concurrency package')]"
"Every time a thread takes a lock it is noted in a data structure (map, graph etc.)","[('thread', 'takes', 'lock'), ('lock', 'noted in', 'data structure'), ('data structure', 'example of', 'map'), ('data structure', 'example of', 'graph')]"
Here is an example of a TreeNode class that call synchronized methods in different instances:,"[('TreeNode class', 'contains', 'synchronized methods'), ('synchronized methods', 'called in', 'different instances')]"
"If a thread (1) calls the parent.addChild(child) method at the same time as another thread (2) calls the child.setParent(parent) method, on the same parent and child instances, a deadlock can occur.","[('thread (1)', 'calls method', 'parent.addChild(child)'), ('thread (2)', 'calls method', 'child.setParent(parent)'), ('parent.addChild(child)', 'involves', 'parent'), ('parent.addChild(child)', 'involves', 'child'), ('child.setParent(parent)', 'involves', 'parent'), ('child.setParent(parent)', 'involves', 'child'), ('deadlock', 'can occur', 'on same parent and child instances')]"
Here is some pseudo code that illustrates this: Thread 1: parent.addChild(child); //locks parent --> child.setParentOnly(parent); Thread 2: child.setParent(parent); //locks child --> parent.addChildOnly() First thread 1 calls parent.addChild(child).,"[('Thread 1', 'calls', 'parent.addChild(child)'), ('parent', 'locks', 'parent'), ('child', 'locks', 'child'), ('parent', 'has method', 'addChild'), ('child', 'has method', 'setParentOnly'), ('Thread 2', 'calls', 'child.setParent(parent)'), ('parent', 'has method', 'addChildOnly'), ('child', 'has method', 'setParent')]"
Since addChild() is synchronized thread 1 effectively locks the parent object for access from other treads.,"[('addChild()', 'is', 'synchronized'), ('thread 1', 'locks', 'parent object'), ('parent object', 'access from', 'other threads')]"
Since setParent() is synchronized thread 2 effectively locks the child object for acces from other threads.,"[('setParent()', 'is', 'synchronized'), ('thread 2', 'locks', 'child object'), ('child object', 'access from', 'other threads')]"
"Next thread 1 tries to call child.setParentOnly() method, but the child object is locked by thread 2, so the method call just blocks.","[('thread 1', 'tries to call method', 'child.setParentOnly()'), ('child object', 'is locked by', 'thread 2')]"
"Thread 2 also tries to call parent.addChildOnly() but the parent object is locked by thread 1, causing thread 2 to block on that method call.","[('Thread 2', 'tries to call', 'parent.addChildOnly()'), ('parent object', 'locked by', 'Thread 1'), ('Thread 2', 'blocked on', 'method call')]"
"Note: The two threads must call parent.addChild(child) and child.setParent(parent) at the same time as described above, and on the same two parent and child instances for a deadlock to occur.","[('thread', 'must call', 'parent.addChild(child)'), ('thread', 'must call', 'child.setParent(parent)'), ('parent.addChild(child)', 'involves', 'parent'), ('parent.addChild(child)', 'involves', 'child'), ('child.setParent(parent)', 'involves', 'parent'), ('child.setParent(parent)', 'involves', 'child'), ('deadlock', 'occurs on', 'parent'), ('deadlock', 'occurs on', 'child')]"
Thread 1: parent.addChild(child); //locks parent --> child.setParentOnly(parent); Thread 2: child.setParent(parent); //locks child --> parent.addChildOnly() First thread 1 calls parent.addChild(child).,"[('Thread 1', 'calls', 'parent.addChild(child)'), ('parent', 'locks', 'parent'), ('child', 'setParentOnly', 'parent'), ('Thread 2', 'calls', 'child.setParent(parent)'), ('child', 'locks', 'child')]"
By far the best book on the java.util.concurrent package in Java 5 and forward.,"[('book', 'topic', 'java.util.concurrent package'), ('java.util.concurrent package', 'part of', 'Java 5')]"
"https://lmax-exchange.github.io/disruptor/ The LMAX Disrupter concurrent data structure (a single reader, single writer queue-like structure with high concurrency).","[('LMAX Disrupter', 'has type', 'concurrent data structure'), ('LMAX Disrupter', 'has feature', 'single reader'), ('LMAX Disrupter', 'has feature', 'single writer'), ('LMAX Disrupter', 'has feature', 'queue-like structure'), ('LMAX Disrupter', 'has feature', 'high concurrency'), ('LMAX Disrupter', 'has URL', 'https://lmax-exchange.github.io/disruptor/')]"
In the following code example I have created an example of such a communication mechanism - a Java class called FrameExchanger.,"[('I', 'created', 'example of communication mechanism'), ('example of communication mechanism', 'is', 'Java class'), ('Java class', 'called', 'FrameExchanger')]"
It is not important how this class looks in order to understand how the FrameExchanger works.,"[('class', 'related to', 'FrameExchanger'), ('FrameExchanger', 'related to', 'class')]"
"The producing thread will call storeFrame() continuously, and the drawing thread will call takeFrame() continuously.","[('producing thread', 'will call', 'storeFrame()'), ('drawing thread', 'will call', 'takeFrame()')]"
Notice how the three instructions inside the storeFrame() method seem like they do not depend on each other.,"[('storeFrame() method', 'contains', 'three instructions'), ('three instructions', 'seem like', 'do not depend on each other')]"
"That means, that if the drawing thread is waiting in the while-loop in the takeFrame() method, the drawing thread could exit that while-loop, and take the old Frame object.","[('drawing thread', 'waiting in', 'while-loop'), ('while-loop', 'located in', 'takeFrame() method'), ('drawing thread', 'could exit', 'while-loop'), ('drawing thread', 'take', 'old Frame object')]"
Notice that the first instruction is a read of a volatile variable (other.volatileVarC).,"[('first instruction', 'is a', 'read of a volatile variable'), ('volatile variable', 'example', 'other.volatileVarC')]"
"When other.volatileVarC is read in from main memory, the other.nonVolatileB and other.nonVolatileA are also read in from main memory.","[('other.volatileVarC', 'is read from', 'main memory'), ('other.nonVolatileB', 'is read from', 'main memory'), ('other.nonVolatileA', 'is read from', 'main memory')]"
"To illustrate why this guarantee is necessary, let us modify the FrameExchanger class from earlier in this tutorial to have the hasNewFrame variable be declared volatile:","[('FrameExchanger class', 'has variable', 'hasNewFrame'), ('hasNewFrame', 'declared as', 'volatile')]"
"Additionally, every time the drawing thread reads the hasNewFrame variable in the while-loop inside the takeFrame() method, the frame and framesStoredCount will also be refreshed from main memory.","[('drawing thread', 'reads', 'hasNewFrame variable'), ('hasNewFrame variable', 'located in', 'while-loop'), ('while-loop', 'located in', 'takeFrame() method'), ('frame', 'refreshed from', 'main memory'), ('framesStoredCount', 'refreshed from', 'main memory')]"
"Imagine if the Java VM reordered the instructions inside the storeFrame() method, like this:","[('Java VM', 'can reorder instructions in', 'storeFrame() method')]"
"This means, that the drawing thread executing the takeFrame() method may exit the while-loop before the new value is assigned to the frame variable.","[('drawing thread', 'executes', 'takeFrame() method'), ('takeFrame() method', 'may exit', 'while-loop'), ('new value', 'is assigned to', 'frame variable')]"
"As you can see, the reordering of the instructions inside storeFrame() method may make the application malfunction.","[('storeFrame() method', 'contains', 'instructions'), ('reordering', 'affects', 'instructions'), ('reordering', 'may cause', 'application malfunction')]"
"In the case of the storeFrame() method that means that the two first write instructions cannot be reordered to happen after the last write to hasNewFrame, since hasNewFrame is a volatile variable.","[('storeFrame() method', 'contains', 'two first write instructions'), ('two first write instructions', 'cannot be reordered to happen after', 'last write to hasNewFrame'), ('hasNewFrame', 'is a', 'volatile variable')]"
"This reordering does not break the code in the takeFrame() method, as the frame variable is still written to before the hasNewFrame variable is written to.","[('reordering', 'does not break', 'code in the takeFrame() method'), ('frame variable', 'is written to before', 'hasNewFrame variable')]"
"Because of the volatile read visibility guarantee, when this.volatileVarA is read from main memory, so are all other variables visible to the thread at that time.","[('volatile read visibility guarantee', 'affects', 'this.volatileVarA'), ('this.volatileVarA', 'is read from', 'main memory'), ('all other variables', 'are visible to', 'the thread')]"
"Thus, this.nonVolatileVarB and this.nonVolatileVarC are also read in from main memory at the same time.","[('this.nonVolatileVarB', 'read in from', 'main memory'), ('this.nonVolatileVarC', 'read in from', 'main memory')]"
"With regards to the takeFrame() method, the first read of a volatile variable is the read of the hasNewFrame field inside the while-loop.","[('takeFrame() method', 'has part', 'read of a volatile variable'), ('read of a volatile variable', 'is', 'read of the hasNewFrame field'), ('read of the hasNewFrame field', 'occurs in', 'while-loop')]"
Notice the two synchronized blocks inside the set() and get() method.,"[('synchronized blocks', 'located inside', 'set() method'), ('synchronized blocks', 'located inside', 'get() method')]"
In the set() method the synchronized block at the end of the method will force all the variables to be synchronized to main memory after being updated.,"[('set() method', 'contains', 'synchronized block'), ('synchronized block', 'located at', 'end of the method'), ('synchronized block', 'forces', 'variables to be synchronized to main memory'), ('variables', 'updated', 'before being synchronized to main memory')]"
In the get() method the synchronized block is placed at the beginning of the method.,"[('get() method', 'contains', 'synchronized block'), ('synchronized block', 'located at', 'beginning of the method')]"
"When the thread calling get() enters the synchronized block, all variables are re-read in from main memory.","[('thread calling get()', 'enters', 'synchronized block'), ('variables', 'are re-read in from', 'main memory')]"
"To illustrate why, I will use the get() method of the ValueExchanger shown earlier:","[('I', 'will use', 'get() method'), ('get() method', 'of', 'ValueExchanger')]"
"As you can see, the synchronized block at the beginning of the method will guarantee that all of the variables this.valC, this.valB and this.valA are refreshed (read in) from main memory.","[('synchronized block', 'located at the beginning of', 'method'), ('synchronized block', 'guarantees', 'variables are refreshed'), ('variables', 'includes', 'this.valC'), ('variables', 'includes', 'this.valB'), ('variables', 'includes', 'this.valA'), ('variables', 'refreshed from', 'main memory')]"
"To illustrate why, I will use the set() method of the ValueExchanger shown earlier:","[('I', 'will use', 'set() method'), ('set() method', 'of', 'ValueExchanger')]"
"As you can see, the synchronized block at the end of the method will guarantee that all of the changed variables this.valA, this.valB and this.valC will be written back to (flushed) to main memory when the thread calling set() exits the synchronized blocks.","[('synchronized block', 'located at', 'end of the method'), ('synchronized block', 'guarantees', 'variables written back to main memory'), ('changed variables', 'includes', 'this.valA'), ('changed variables', 'includes', 'this.valB'), ('changed variables', 'includes', 'this.valC'), ('thread', 'calls', 'set()'), ('thread', 'exits', 'synchronized blocks')]"
"The original Java memory model was insufficient, so the Java memory model was revised in Java 1.5.","[('Java memory model', 'was revised in', 'Java 1.5')]"
Static class variables are also stored on the heap along with the class definition.,"[('Static class variables', 'stored on', 'heap'), ('Static class variables', 'stored with', 'class definition')]"
If two threads were executing the run() method then the diagram shown earlier would be the outcome.,"[('two threads', 'execute', 'run() method'), ('diagram', 'is outcome of', 'two threads executing run() method')]"
methodOne() declares a primitive local variable (localVariable1 of type int) and an local variable which is an object reference (localVariable2).,"[('methodOne()', 'declares', 'localVariable1'), ('localVariable1', 'type', 'int'), ('methodOne()', 'declares', 'localVariable2'), ('localVariable2', 'type', 'object reference')]"
Each thread executing methodOne() will create its own copy of localVariable1 and localVariable2 on their respective thread stacks.,"[('thread', 'executes', 'methodOne()'), ('thread', 'creates', 'copy of localVariable1'), ('thread', 'creates', 'copy of localVariable2'), ('copy of localVariable1', 'located on', 'thread stack'), ('copy of localVariable2', 'located on', 'thread stack')]"
Each thread executing methodOne() will also create their own copy of localVariable2.,"[('thread', 'executes', 'methodOne()'), ('thread', 'creates', 'copy of localVariable2')]"
The localVariable1 reference will be stored in one copy per thread executing methodTwo().,"[('localVariable1 reference', 'stored in', 'one copy per thread'), ('one copy per thread', 'executes', 'methodTwo()')]"
The Integer objects created inside methodTwo() correspond to Object 1 and Object 5 in the diagram above.,"[('Integer objects', 'created inside', 'methodTwo()'), ('Integer objects', 'correspond to', 'Object 1'), ('Integer objects', 'correspond to', 'Object 5')]"
Notice also the two member variables in the class MySharedObject of type long which is a primitive type.,"[('MySharedObject', 'has member variable', 'type long'), ('type long', 'is a', 'primitive type')]"
That is why Java 5 got a whole set of concurrency utility classes to help developers implement more fine grained concurrency control than what you get with synchronized.,"[('Java 5', 'has feature', 'concurrency utility classes'), ('concurrency utility classes', 'help', 'developers'), ('developers', 'implement', 'fine grained concurrency control'), ('fine grained concurrency control', 'compared to', 'synchronized')]"
Notice the use of the synchronized keyword in the add() method declaration.,"[('add() method', 'uses', 'synchronized keyword')]"
Also here the synchronized keyword tells Java that the add() method is synchronized.,"[('synchronized keyword', 'tells', 'Java')]"
Synchronized static methods are synchronized on the class object of the class the synchronized static method belongs to.,"[('Synchronized static methods', 'are synchronized on', 'class object'), ('Synchronized static methods', 'belong to', 'class')]"
"Since only one class object exists in the Java VM per class, only one thread can execute inside a static synchronized method in the same class.","[('Java VM', 'contains', 'class object'), ('class object', 'exists in', 'Java VM'), ('thread', 'can execute inside', 'static synchronized method'), ('static synchronized method', 'is in', 'same class')]"
"In case a class contains more than one static synchronized method, only one thread can execute inside any of these methods at the same time.","[('class', 'contains', 'static synchronized method'), ('static synchronized method', 'executed by', 'one thread'), ('one thread', 'can execute inside', 'static synchronized method'), ('static synchronized method', 'limited to', 'one thread at the same time')]"
Only one thread can execute inside any of the two add() and subtract() methods at any given time.,"[('thread', 'can execute inside', 'add() method'), ('thread', 'can execute inside', 'subtract() method'), ('add() method', 'execution limited to', 'one thread at any given time'), ('subtract() method', 'execution limited to', 'one thread at any given time')]"
If Thread A is executing add() then Thread B cannot execute neither add() nor subtract() until Thread A has exited add().,"[('Thread A', 'is executing', 'add()'), ('Thread B', 'cannot execute', 'add()'), ('Thread B', 'cannot execute', 'subtract()'), ('Thread A', 'has exited', 'add()')]"
"If the static synchronized methods are located in different classes, then one thread can execute inside the static synchronized methods of each class.","[('static synchronized methods', 'located in', 'different classes'), ('one thread', 'can execute inside', 'static synchronized methods of each class')]"
One thread per class regardless of which static synchronized method it calls.,"[('Thread', 'applies to', 'Class'), ('Method', 'type', 'Static Synchronized'), ('Thread', 'calls', 'Method')]"
These methods are synchronized on the class object of the class the methods belong to:,"[('methods', 'are synchronized on', 'class object'), ('methods', 'belong to', 'class')]"
"Had the second synchronized block been synchronized on a different object than MyClass.class, then one thread could execute inside each method at the same time.","[('second synchronized block', 'synchronized on', 'object'), ('object', 'different from', 'MyClass.class'), ('thread', 'could execute inside', 'each method'), ('thread', 'could execute at the same time', 'another thread')]"
It is even possible to use synchronized blocks inside a Java Lambda Expression as well as inside anonymous classes.,"[('synchronized blocks', 'can be used inside', 'Java Lambda Expression'), ('synchronized blocks', 'can be used inside', 'anonymous classes')]"
Notice that the synchronized block is synchronized on the class object of the class containing the lambda expression.,"[('synchronized block', 'synchronized on', 'class object'), ('class object', 'belongs to', 'class'), ('class', 'contains', 'lambda expression')]"
"It could have been synchronized on another object too, if that would have made more sense (given a specific use case), but using the class object is fine for this example.","[('synchronized', 'could have been on', 'another object'), ('using', 'is fine for', 'this example'), ('another object', 'given', 'a specific use case')]"
"Here are the two classes used in the example above, Counter and CounterThread.","[('Counter', 'used in', 'example'), ('CounterThread', 'used in', 'example')]"
"The Counter.add() method is synchronized on the instance, because the add method is an instance method, and marked as synchronized.","[('Counter.add() method', 'is synchronized on', 'instance'), ('add method', 'is', 'instance method'), ('add method', 'is marked as', 'synchronized')]"
Therefore only one of the threads can call the add() method at a time.,"[('threads', 'can call', 'add() method'), ('add() method', 'called by', 'threads'), ('threads', 'one at a time', 'call add() method')]"
"The other thread will wait until the first thread leaves the add() method, before it can execute the method itself.","[('other thread', 'waits until', 'first thread leaves add() method'), ('first thread', 'leaves', 'add() method'), ('other thread', 'executes', 'method')]"
"If the two threads had referenced two separate Counter instances, there would have been no problems calling the add() methods simultaneously.","[('two threads', 'reference', 'two separate Counter instances'), ('two threads', 'call', 'add() methods simultaneously'), ('two separate Counter instances', 'prevent', 'problems')]"
Calling add() on counterA will thus not block a call to add() on counterB.,"[('add() on counterA', 'will not block', 'add() on counterB')]"
Without the use of the synchronized keyword (or the Java volatile keyword) there is no guarantee that when one thread changes the value of a variable shared with other threads (e.g.,"[('synchronized keyword', 'used in', 'Java'), ('Java', 'contains keyword', 'synchronized keyword'), ('Java', 'contains keyword', 'volatile keyword'), ('volatile keyword', 'used in', 'Java'), ('thread', 'changes value of', 'variable'), ('variable', 'shared with', 'other threads')]"
"If you call Integer.valueOf(1) multiple times, it might actually return the same wrapper object instance for the same input parameter values.","[('Integer.valueOf(1)', 'called multiple times', 'wrapper object instance'), ('wrapper object instance', 'returned for', 'same input parameter values')]"
"That means, that if you are synchronizing multiple blocks on the same primitive wrapper object (e.g.","[('multiple blocks', 'are synchronizing on', 'same primitive wrapper object')]"
"use Integer.valueOf(1) multiple times as monitor object), then you risk that those synchronized blocks all get synchronized on the same object.","[('Integer.valueOf(1)', 'used as', 'monitor object'), ('synchronized blocks', 'get synchronized on', 'same object')]"
"To be on the safe side, synchronize on this - or on a new Object() .","[('synchronize', 'action on', 'this'), ('synchronize', 'action on', 'new Object()')]"
Java actually comes with a built in ReadWriteLock class you can use.,"[('Java', 'comes with', 'ReadWriteLock class'), ('ReadWriteLock class', 'is a', 'built in class')]"
Java actually comes with a built-in Java Semaphore class you can use.,"[('Java', 'comes with', 'Java Semaphore class'), ('Java Semaphore class', 'is a', 'built-in class')]"
Just focus on how inside the synchronized block inside the count() method calls the count() method recursively.,"[('synchronized block', 'located inside', 'count() method'), ('count() method', 'calls', 'count() method'), ('count() method', 'calls recursively', 'count() method')]"
"Thus, the thread calling count() may eventually enter the same synchronized block multiple times.","[('thread', 'calls', 'count()'), ('thread', 'may enter', 'synchronized block'), ('synchronized block', 'entered by', 'thread'), ('thread', 'enters', 'multiple times')]"
The Java ThreadLocal class enables you to create variables that can only be read and written by the same thread.,"[('Java ThreadLocal class', 'enables', 'create variables'), ('variables', 'can only be read and written by', 'the same thread')]"
"Thus, the Java ThreadLocal class provides a simple way to make code thread safe that would not otherwise be so.","[('Java ThreadLocal class', 'provides', 'simple way to make code thread safe')]"
Once a ThreadLocal has been created you can set the value to be stored in it using its set() method.,"[('ThreadLocal', 'has method', 'set()'), ('set()', 'sets value in', 'ThreadLocal')]"
You read the value stored in a ThreadLocal using its get() method.,"[('ThreadLocal', 'has method', 'get()'), ('get()', 'used for', 'read value')]"
"Additionally, you do not have to typecast the value returned by get().","[('you', 'do not have to', 'typecast the value returned by get()')]"
It is possible to set an initial value for a Java ThreadLocal which will get used the first time get() is called - before set() has been called with a new value.,"[('Java ThreadLocal', 'has property', 'initial value'), ('initial value', 'used when', 'first time get() is called'), ('get()', 'called before', 'set()')]"
The first way to specify an initial value for a Java ThreadLocal variable is to create a subclass of ThreadLocal which overrides its initialValue() method.,"[('Java ThreadLocal variable', 'has initial value specified by', 'subclass of ThreadLocal'), ('subclass of ThreadLocal', 'overrides method', 'initialValue()')]"
"The easiest way to create a subclass of ThreadLocal is to simply create an anonymous subclass, right where you create the ThreadLocal variable.","[('subclass', 'is a type of', 'ThreadLocal'), ('anonymous subclass', 'is a type of', 'subclass'), ('create', 'action on', 'anonymous subclass'), ('create', 'action on', 'ThreadLocal variable')]"
Here is an example of creating an anonymous subclass of ThreadLocal which overrides the initialValue() method:,"[('anonymous subclass of ThreadLocal', 'overrides', 'initialValue() method')]"
"Only if you return the exact same object from the initialValue() method, will all threads see the same object.","[('initialValue() method', 'returns', 'object'), ('threads', 'see', 'object')]"
"Here is an example of creating a ThreadLocal using its withInitial() static factory method, passing a simple Supplier implementation as parameter:","[('ThreadLocal', 'created using', 'withInitial() static factory method'), ('withInitial() static factory method', 'parameter', 'simple Supplier implementation')]"
Here is how providing a Supplier implementation as a lambda expression to withInitial() looks:,"[('Supplier implementation', 'provided as', 'lambda expression'), ('lambda expression', 'used with', 'withInitial()')]"
Notice how the format() method calls the getThreadLocalSimpleDateFormat() method to obtain a Java SimpleDatFormat instance.,"[('format() method', 'calls', 'getThreadLocalSimpleDateFormat() method'), ('getThreadLocalSimpleDateFormat() method', 'obtains', 'Java SimpleDateFormat instance')]"
"The SimpleDateFormat class is not thread safe, so multiple threads cannot use it at the same time.","[('SimpleDateFormat class', 'is not', 'thread safe'), ('multiple threads', 'cannot use', 'SimpleDateFormat class at the same time')]"
"To solve this problem, the MyDateFormatter class above creates a SimpleDateFormat per thread, so each thread calling the format() method will use its own SimpleDateFormat instance.","[('MyDateFormatter class', 'creates', 'SimpleDateFormat'), ('SimpleDateFormat', 'used by', 'each thread'), ('each thread', 'calls', 'format() method'), ('format() method', 'used by', 'each thread'), ('each thread', 'uses', 'its own SimpleDateFormat instance')]"
"Both threads execute the run() method, and thus sets different values on the ThreadLocal instance.","[('threads', 'execute', 'run() method'), ('threads', 'set', 'different values'), ('different values', 'set on', 'ThreadLocal instance')]"
"If the access to the set() call had been synchronized, and it had not been a ThreadLocal object, the second thread would have overridden the value set by the first thread.","[('it', 'had not been', 'ThreadLocal object'), ('second thread', 'would have overridden', 'value set by the first thread')]"
"The udpate() method writes three variables, of which only days is volatile.","[('udpate() method', 'writes', 'three variables'), ('three variables', 'includes', 'days'), ('days', 'is', 'volatile')]"
Notice the totalDays() method starts by reading the value of days into the total variable.,"[('totalDays() method', 'starts by reading', 'value of days'), ('value of days', 'read into', 'total variable')]"
Let us look at the MyClass class from the example earlier in this Java volatile tutorial:,"[('MyClass', 'is a type of', 'class'), ('MyClass', 'mentioned in', 'Java volatile tutorial')]"
"Once the update() method writes a value to days, the newly written values to years and months are also written to main memory.","[('update() method', 'writes value to', 'days'), ('newly written values', 'are written to', 'years'), ('newly written values', 'are written to', 'months'), ('newly written values', 'are written to', 'main memory')]"
As an alternative to a synchronized block you could also use one of the many atomic data types found in the java.util.concurrent package.,"[('synchronized block', 'alternative to', 'atomic data types'), ('atomic data types', 'found in', 'java.util.concurrent package')]"
"From Java 5 the package java.util.concurrent.locks contains several lock implementations, so you may not have to implement your own locks.","[('java.util.concurrent.locks', 'contains', 'lock implementations'), ('Java 5', 'introduced', 'java.util.concurrent.locks')]"
"The Counter class could have been written like this instead, using a Lock instead of a synchronized block:","[('Counter class', 'could have been written like', 'this'), ('Counter class', 'uses', 'Lock'), ('Counter class', 'does not use', 'synchronized block')]"
The lock() method locks the Lock instance so that all threads calling lock() are blocked until unlock() is executed.,"[('lock() method', 'locks', 'Lock instance'), ('threads', 'are blocked until', 'unlock() is executed')]"
Spin locks and the methods wait() and notify() are covered in more detail in the text Thread Signaling.,"[('Spin locks', 'covered in', 'Thread Signaling'), ('methods wait() and notify()', 'covered in', 'Thread Signaling')]"
"While isLocked is true, the thread calling lock() is parked waiting in the wait() call.","[('isLocked', 'state', 'true'), ('thread', 'calls', 'lock()'), ('thread', 'is parked', 'waiting'), ('waiting', 'occurs in', 'wait() call')]"
"In case the thread should return unexpectedly from the wait() call without having received a notify() call (AKA a Spurious Wakeup) the thread re-checks the isLocked condition to see if it is safe to proceed or not, rather than just assume that being awakened means it is safe to proceed.","[('thread', 'returns unexpectedly from', 'wait() call'), ('thread', 're-checks', 'isLocked condition'), ('thread', 'receives', 'notify() call'), ('thread', 'experiences', 'Spurious Wakeup'), ('Spurious Wakeup', 'also known as', 'unexpected return from wait() call'), ('thread', 'determines if', 'safe to proceed')]"
"If isLocked is false, the thread exits the while(isLocked) loop, and sets isLocked back to true, to lock the Lock instance for other threads calling lock().","[('isLocked', 'is', 'false'), ('thread', 'exits', 'while(isLocked) loop'), ('thread', 'sets', 'isLocked'), ('isLocked', 'set to', 'true'), ('Lock instance', 'locked for', 'other threads'), ('other threads', 'call', 'lock()')]"
"When the thread is done with the code in the critical section (the code between lock() and unlock()), the thread calls unlock().","[('thread', 'is done with', 'code in the critical section'), ('code in the critical section', 'is between', 'lock() and unlock()'), ('thread', 'calls', 'unlock()')]"
"Executing unlock() sets isLocked back to false, and notifies (awakens) one of the threads waiting in the wait() call in the lock() method, if any.","[('unlock()', 'sets', 'isLocked back to false'), ('unlock()', 'notifies', 'one of the threads waiting in the wait() call'), ('threads', 'waiting in', 'wait() call'), ('wait() call', 'in', 'lock() method')]"
"Notice how both outer() and inner() are declared synchronized, which in Java is equivalent to a synchronized(this) block.","[('outer()', 'declared', 'synchronized'), ('inner()', 'declared', 'synchronized'), ('synchronized', 'equivalent to', 'synchronized(this) block'), ('outer()', 'is a', 'method'), ('inner()', 'is a', 'method')]"
"If a thread calls outer() there is no problem calling inner() from inside outer(), since both methods (or blocks) are synchronized on the same monitor object (""this"").",
"However, even if synchronized blocks are reentrant, the Lock class shown earlier is not reentrant.","[('synchronized blocks', 'are', 'reentrant'), ('Lock class', 'is not', 'reentrant')]"
"If we rewrite the Reentrant class like below, the thread calling outer() will be blocked inside the lock.lock() in the inner() method.","[('Reentrant class', 'contains method', 'outer()'), ('Reentrant class', 'contains method', 'inner()'), ('thread', 'calls', 'outer()'), ('thread', 'blocked inside', 'lock.lock()'), ('lock.lock()', 'located in', 'inner()')]"
Inside the inner() method the thread will again try to lock the Lock instance.,"[('inner() method', 'contains', 'thread'), ('thread', 'tries to lock', 'Lock instance')]"
"This will fail (meaning the thread will be blocked), since the Lock instance was locked already in the outer() method.","[('Lock instance', 'was locked in', 'outer() method'), ('thread', 'will be', 'blocked')]"
"The reason the thread will be blocked the second time it calls lock() without having called unlock() in between, is apparent when we look at the lock() implementation:","[('thread', 'will be blocked', 'second time it calls lock()'), ('thread', 'calls', 'lock()'), ('thread', 'without having called', 'unlock()'), ('we', 'look at', 'lock() implementation')]"
It is the condition inside the while loop (spin lock) that determines if a thread is allowed to exit the lock() method or not.,"[('condition', 'located in', 'while loop'), ('while loop', 'type', 'spin lock'), ('condition', 'determines', 'if a thread is allowed to exit the lock() method')]"
To make the Lock class reentrant we need to make a small change:,"[('Lock class', 'requires change', 'to be reentrant')]"
"If either the lock is unlocked (isLocked = false) or the calling thread is the thread that locked the Lock instance, the while loop will not execute, and the thread calling lock() will be allowed to exit the method.","[('lock', 'has property', 'isLocked'), ('isLocked', 'equals', 'false'), ('calling thread', 'is', 'thread that locked the Lock instance'), ('while loop', 'will not execute', 'if either the lock is unlocked or the calling thread is the thread that locked the Lock instance'), ('thread calling lock()', 'will be allowed to exit', 'method')]"
"Otherwise, a single call to unlock() will unlock the lock, even if the lock has been locked multiple times.","[('unlock()', 'action', 'unlock the lock'), ('the lock', 'state', 'locked multiple times')]"
"We don't want the lock to be unlocked until the thread that locked it, has executed the same amount of unlock() calls as lock() calls.","[('lock', 'unlocked until', 'thread'), ('thread', 'locked', 'lock'), ('thread', 'executed', 'unlock() calls'), ('thread', 'executed', 'lock() calls'), ('unlock() calls', 'same amount as', 'lock() calls')]"
"When guarding a critical section with a Lock, and the critical section may throw exceptions, it is important to call the unlock() method from inside a finally-clause.","[('critical section', 'guarded by', 'Lock'), ('critical section', 'may throw', 'exceptions'), ('unlock() method', 'called from', 'finally-clause')]"
"If unlock() was not called from inside a finally-clause, and an exception was thrown from the critical section, the Lock would remain locked forever, causing all threads calling lock() on that Lock instance to halt indefinately.","[('unlock()', 'not called from', 'finally-clause'), ('exception', 'thrown from', 'critical section'), ('Lock', 'would remain', 'locked'), ('threads', 'calling', 'lock()'), ('threads', 'halt', 'indefinately')]"
"If you click a button that starts a long task, and the thread executing the task is the thread updating the windows, buttons etc., then the application will appear unresponsive while the task executes.","[('button', 'starts', 'long task'), ('thread', 'executes', 'task'), ('thread', 'updates', 'windows'), ('thread', 'updates', 'buttons'), ('application', 'appears', 'unresponsive'), ('task', 'executes', 'while application appears unresponsive')]"
"Imagine then, that one of the clients sends a request that takes a long time to process - e.g.","[('client', 'sends', 'request'), ('request', 'takes', 'long time to process')]"
"Notice how the lock() method first synchronizes on ""this"", then synchronizes on the monitorObject member.",
"If isLocked is true however, the thread calling lock() is parked waiting in the monitorObject.wait() call.","[('isLocked', 'is', 'true'), ('thread', 'calls', 'lock()'), ('thread', 'is parked waiting in', 'monitorObject.wait() call')]"
"The problem with this is, that the call to monitorObject.wait() only releases the synchronization monitor on the monitorObject member, and not the synchronization monitor associated with ""this"".",
When the thread that locked the Lock in the first place tries to unlock it by calling unlock() it will be blocked trying to enter the synchronized(this) block in the unlock() method.,"[('thread', 'locks', 'Lock'), ('thread', 'tries to unlock', 'Lock'), ('thread', 'calls', 'unlock()'), ('thread', 'blocked by', 'synchronized(this) block'), ('synchronized(this) block', 'contained in', 'unlock() method')]"
It will remain blocked until the thread waiting in lock() leaves the synchronized(this) block.,"[('thread', 'waiting in', 'lock()'), ('thread', 'leaves', 'synchronized(this) block'), ('synchronized(this) block', 'remains', 'blocked')]"
"But the thread waiting in the lock() method will not leave that block until the isLocked is set to false, and a monitorObject.notify() is executed, as it happens in unlock().","[('thread', 'waiting in', 'lock() method'), ('isLocked', 'set to', 'false'), ('monitorObject.notify()', 'executed in', 'unlock()')]"
"Put shortly, the thread waiting in lock() needs an unlock() call to execute successfully for it to exit lock() and the synchronized blocks inside it.","[('thread', 'waiting in', 'lock()'), ('thread', 'needs', 'unlock() call'), ('unlock() call', 'execute successfully for', 'thread'), ('thread', 'exit', 'lock()'), ('synchronized blocks', 'inside', 'lock()')]"
"But, no thread can actually execute unlock() until the thread waiting in lock() leaves the outer synchronized block.","[('thread', 'can execute', 'unlock()'), ('thread', 'waiting in', 'lock()'), ('thread', 'leaves', 'outer synchronized block')]"
This result is that any thread calling either lock() or unlock() will become blocked indefinately.,"[('thread', 'calls', 'lock()'), ('thread', 'calls', 'unlock()'), ('thread', 'becomes', 'blocked indefinitely')]"
"That you would not call wait() and notify() on an internal monitor object, but rather on the This is probably true.","[('you', 'would not call', 'wait()'), ('you', 'would not call', 'notify()'), ('wait()', 'called on', 'internal monitor object'), ('notify()', 'called on', 'internal monitor object')]"
"When doing so you want each thread to call wait() on each their own queue object, so that you can notify the threads one at a time.","[('thread', 'calls', 'wait()'), ('thread', 'has', 'queue object'), ('you', 'notify', 'threads')]"
"At first glance this implementation may look fine, but notice how the lock() method calls queueObject.wait(); from inside two synchronized blocks.","[('implementation', 'may look', 'fine'), ('lock() method', 'calls', 'queueObject.wait()'), ('queueObject.wait()', 'from inside', 'two synchronized blocks')]"
"When a thread calls queueObject.wait()it releases the lock on the QueueObject instance, but not the lock associated with ""this"".",
"Notice too, that the unlock() method is declared synchronized which equals a synchronized(this) block.","[('unlock() method', 'is declared', 'synchronized'), ('synchronized', 'equals', 'synchronized(this) block')]"
"This means, that if a thread is waiting inside lock() the monitor object associated with ""this"" will be locked by the waiting thread.",
"All threads calling unlock() will remain blocked indefinately, waiting for the waiting thread to release the lock on ""this"".",
"But this will never happen, since this only happens if a thread succeeds in sending a signal to the waiting thread, and this can only be sent by executing the unlock() method.","[('thread', 'sends signal to', 'waiting thread'), ('signal', 'sent by', 'executing unlock() method')]"
"For instance, the different implementations of the java.util.concurrent.BlockingQueue interface are all blocking data structures.","[('java.util.concurrent.BlockingQueue', 'has implementation', 'blocking data structures')]"
"Other threads will read the value of the volatile from main memory every time, instead of from e.g.","[('threads', 'read value from', 'main memory'), ('value', 'stored in', 'volatile')]"
"Thus, this code may still lead to race conditions if performed by more than one thread: volatile myVar = 0; ... int temp = myVar; temp++; myVar = temp; First the value of the volatile variable myVar is read from main memory into a temp variable.","[('code', 'may lead to', 'race conditions'), ('race conditions', 'occur if', 'performed by more than one thread'), ('myVar', 'is a', 'volatile variable'), ('volatile variable', 'is read from', 'main memory'), ('value', 'is read into', 'temp variable')]"
"If two threads execute this code and both of them read the value of myVar, add one to it and write the value back to main memory, then you risk that instead of 2 being added to the myVar variable, only 1 will be added (e.g.","[('two threads', 'execute', 'this code'), ('threads', 'read', 'value of myVar'), ('threads', 'add', 'one to value of myVar'), ('threads', 'write', 'value back to main memory'), ('risk', 'is', 'only 1 will be added to myVar')]"
"Here is a single writer counter which does not use synchronization but is still concurrent: public class SingleWriterCounter { private volatile long count = 0; /** * Only one thread may ever call this method, * or it will lead to race conditions.","[('SingleWriterCounter', 'has method', 'method'), ('method', 'called by', 'one thread'), ('method', 'leads to', 'race conditions')]"
"I mean, only the same, single thread is ever allowed to call inc().","[('single thread', 'allowed to call', 'inc()')]"
"Here is a simple double writer counter class that shows how that could look: public class DoubleWriterCounter { private volatile long countA = 0; private volatile long countB = 0; /** * Only one (and the same from thereon) thread may ever call this method, * or it will lead to race conditions.","[('DoubleWriterCounter', 'has method', 'method'), ('method', 'may be called by', 'one thread'), ('calling by', 'one thread', 'prevents race conditions')]"
"*/ public void incA() { this.countA++; } /** * Only one (and the same from thereon) thread may ever call this method, * or it will lead to race conditions.","[('incA', 'is a method of', 'public void'), ('this.countA', 'is incremented by', 'incA'), ('thread', 'may call', 'incA'), ('race conditions', 'are caused by', 'multiple threads calling incA')]"
"*/ public void incB() { this.countB++; } /** * Many reading threads may call this method */ public long countA() { return this.countA; } /** * Many reading threads may call this method */ public long countB() { return this.countB; } } As you can see, the DoubleWriterCounter now contains two volatile variables, and two pairs of incrementation and read methods.","[('DoubleWriterCounter', 'contains', 'two volatile variables'), ('DoubleWriterCounter', 'contains', 'two pairs of incrementation and read methods')]"
"Only a single thread may ever call incA(), and only a single thread may ever call incB().","[('single thread', 'may call', 'incA()'), ('single thread', 'may call', 'incB()')]"
This is how such exclusive access could look using a synchronized block in Java: public class SynchronizedCounter { long count = 0; public void inc() { synchronized(this) { count++; } } public long count() { synchronized(this) { return this.count; } } } Notice how the inc() and count() methods both contain a synchronized block.,"[('SynchronizedCounter', 'has method', 'inc()'), ('SynchronizedCounter', 'has method', 'count()'), ('inc()', 'contains', 'synchronized block'), ('count()', 'contains', 'synchronized block')]"
This is what we want to avoid - synchronized blocks and wait() - notify() calls etc.,"[('synchronized blocks', 'related to', 'wait()'), ('synchronized blocks', 'related to', 'notify()'), ('wait()', 'related to', 'notify()')]"
What is interesting about this version is the implementation of the inc() method.,"[('version', 'has implementation', 'inc() method')]"
"Instead it contains these lines: boolean updated = false; while(!updated){ long prevCount = this.count.get(); updated = this.count.compareAndSet(prevCount, prevCount + 1); } These lines are not an atomic operation.","[('lines', 'contains', 'boolean updated = false'), ('lines', 'contains', 'while(!updated){ long prevCount = this.count.get(); updated = this.count.compareAndSet(prevCount, prevCount + 1); }'), ('lines', 'are not', 'an atomic operation')]"
"That means, that it is possible for two different threads to call the inc() method and execute the long prevCount = this.count.get() statement, and thus both obtain the previous count for the counter.","[('two different threads', 'can call', 'inc() method'), ('two different threads', 'can execute', 'long prevCount = this.count.get() statement'), ('two different threads', 'obtain', 'previous count for the counter')]"
The compareAndSet() method is typically supported by compare-and-swap instructions directly in the CPU.,"[('compareAndSet() method', 'supported by', 'compare-and-swap instructions'), ('compare-and-swap instructions', 'located in', 'CPU')]"
"Since compareAndSet() is an atomic operation, the threads will execute this method sequentially (one at a time).","[('compareAndSet()', 'is', 'atomic operation'), ('threads', 'will execute', 'compareAndSet()'), ('threads', 'execute method', 'sequentially')]"
"If no other thread has called inc() in the meantime, the second iteration will succeed in updating the AtomicLong to 22.","[('thread', 'calls', 'inc()'), ('iteration', 'succeeds in updating', 'AtomicLong'), ('AtomicLong', 'updated to', '22')]"
Instead Java provides the AtomicStampedReference class which can swap a reference and a stamp atomically using a compare-and-swap operation.,"[('Java', 'provides', 'AtomicStampedReference class'), ('AtomicStampedReference class', 'can swap', 'reference'), ('AtomicStampedReference class', 'can swap', 'stamp'), ('AtomicStampedReference class', 'using', 'compare-and-swap operation')]"
"import java.util.concurrent.atomic.AtomicBoolean; import java.util.concurrent.atomic.AtomicStampedReference; public class NonblockingTemplate { public static class IntendedModification { public AtomicBoolean completed = new AtomicBoolean(false); } private AtomicStampedReference<IntendedModification> ongoingMod = new AtomicStampedReference<IntendedModification>(null, 0); //declare the state of the data structure here.","[('NonblockingTemplate', 'contains', 'IntendedModification'), ('IntendedModification', 'has attribute', 'completed'), ('completed', 'instance of', 'AtomicBoolean'), ('ongoingMod', 'instance of', 'AtomicStampedReference'), ('AtomicStampedReference', 'contains', 'IntendedModification')]"
"public void modify() { while(!attemptModifyASR()); } public boolean attemptModifyASR(){ boolean modified = false; IntendedModification currentlyOngoingMod = ongoingMod.getReference(); int stamp = ongoingMod.getStamp(); if(currentlyOngoingMod == null){ //copy data structure state - for use //in intended modification //prepare intended modification IntendedModification newMod = new IntendedModification(); boolean modSubmitted = ongoingMod.compareAndSet(null, newMod, stamp, stamp + 1); if(modSubmitted){ //complete modification via a series of compare-and-swap operations.","[('modify', 'calls', 'attemptModifyASR'), ('attemptModifyASR', 'returns', 'boolean'), ('attemptModifyASR', 'modifies', 'modified'), ('ongoingMod', 'has reference', 'currentlyOngoingMod'), ('ongoingMod', 'has stamp', 'stamp'), ('currentlyOngoingMod', 'equals', nan), ('IntendedModification', 'instance of', 'newMod'), ('ongoingMod', 'compares and sets', 'newMod'), ('modSubmitted', 'equals', 'true')]"
"Multiple threads can access the same instance of this counter, as long as only one thread calls inc().","[('Multiple threads', 'can access', 'same instance of this counter'), ('one thread', 'calls', 'inc()')]"
Here is a simple double writer counter class that shows how that could look:,"[('double writer counter class', 'shows', 'how that could look')]"
Notice how the inc() and count() methods both contain a synchronized block.,"[('inc()', 'contains', 'synchronized block'), ('count()', 'contains', 'synchronized block')]"
Here is how the same counter class could look using an AtomicLong instead:,"[('counter class', 'could use', 'AtomicLong')]"
"The check-then-act pattern means, that two or more threads check a given condition, for instance if a Map contains a given value, and then go on to act based on that information, e.g.","[('check-then-act pattern', 'involves', 'two or more threads'), ('two or more threads', 'check', 'given condition'), ('Map', 'contains', 'given value'), ('threads', 'act based on', 'information')]"
"Imagine if two threads, A and B, are executing the add method on the same instance of the Counter class.","[('Thread A', 'executes method', 'add'), ('Thread B', 'executes method', 'add'), ('add', 'method of', 'Counter class'), ('Thread A', 'operates on', 'same instance of Counter class'), ('Thread B', 'operates on', 'same instance of Counter class')]"
The code in the add() method is not executed as a single atomic instruction by the Java virtual machine.,"[('add() method', 'code execution', 'not atomic'), ('Java virtual machine', 'executes', 'add() method')]"
"Instead of 5, the value left in this.count will be the value written by the last thread to write its value.","[('this.count', 'value', 'value written by the last thread')]"
The code in the add() method in the example earlier contains a critical section.,"[('add() method', 'contains', 'critical section')]"
"If two or more threads call the checkThenAct() method on the same CheckThenActExample object, then two or more threads may execute the if-statement at the same time, evaluate sharedMap.containsKey(""key"") to true, and thus move into the body code block of the if-statement.",
Thread synchronization can also be achieved using other synchronization constructs like locks or atomic variables like java.util.concurrent.atomic.AtomicInteger.,"[('Thread synchronization', 'can be achieved using', 'synchronization constructs'), ('synchronization constructs', 'include', 'locks'), ('synchronization constructs', 'include', 'atomic variables'), ('atomic variables', 'include', 'java.util.concurrent.atomic.AtomicInteger')]"
Notice how the add() method adds values to two different sum member variables.,"[('add() method', 'adds values to', 'sum member variables'), ('sum member variables', 'quantity', 'two')]"
Now two threads can execute the add() method at the same time.,"[('two threads', 'can execute', 'add() method')]"
This way threads will have to wait less for each other to execute the add() method.,"[('threads', 'have to wait less for', 'each other'), ('threads', 'execute', 'add() method')]"
Java 5 comes with read / write lock implementations in the java.util.concurrent package.,"[('Java 5', 'comes with', 'read / write lock implementations'), ('read / write lock implementations', 'located in', 'java.util.concurrent package')]"
The rules for read access are implemented in the lockRead() method.,"[('rules for read access', 'implemented in', 'lockRead() method')]"
The rules for write access are implemented in the lockWrite() method.,"[('rules for write access', 'implemented in', 'lockWrite() method')]"
It is worth noting that both unlockRead() and unlockWrite() calls notifyAll() rather than notify().,"[('unlockRead()', 'calls', 'notifyAll()'), ('unlockWrite()', 'calls', 'notifyAll()')]"
"If a thread awakened by notify() was a read access thread, it would be put back to waiting because there are threads waiting for write access.","[('thread awakened by notify()', 'type', 'read access thread'), ('read access thread', 'action', 'put back to waiting'), ('threads', 'waiting for', 'write access')]"
By calling noftifyAll() all waiting threads are awakened and check if they can get the desired access.,"[('notifyAll()', 'awakens', 'all waiting threads'), ('all waiting threads', 'check', 'if they can get the desired access')]"
"If multiple threads are waiting for read access and none for write access, and unlockWrite() is called, all threads waiting for read access are granted read access at once - not one by one.","[('multiple threads', 'waiting for', 'read access'), ('none', 'waiting for', 'write access'), ('unlockWrite()', 'is called', 'all threads waiting for read access'), ('all threads waiting for read access', 'are granted', 'read access')]"
Here is how the lockRead() and unlockRead() methods looks after that change:,"[('lockRead()', 'method after change', 'unlockRead()')]"
Here is how the lockWrite() and unlockWrite() methods look after that change:,
To achieve this the writeLock() method should be changed a bit.,"[('writeLock() method', 'should be changed', 'a bit')]"
Here is how the canGrantReadAccess() method will look with that change:,"[('canGrantReadAccess()', 'method will look with', 'that change')]"
"When guarding a critical section with a ReadWriteLock, and the critical section may throw exceptions, it is important to call the readUnlock() and writeUnlock() methods from inside a finally-clause.","[('ReadWriteLock', 'guards', 'critical section'), ('critical section', 'may throw', 'exceptions'), ('readUnlock()', 'called from', 'finally-clause'), ('writeUnlock()', 'called from', 'finally-clause')]"
"If unlockWrite() was not called from inside a finally-clause, and an exception was thrown from the critical section, the ReadWriteLock would remain write locked forever, causing all threads calling lockRead() or lockWrite() on that ReadWriteLock instance to halt indefinately.","[('unlockWrite()', 'not called from', 'finally-clause'), ('exception', 'thrown from', 'critical section'), ('ReadWriteLock', 'remains', 'write locked'), ('threads', 'calling', 'lockRead()'), ('threads', 'calling', 'lockWrite()'), ('threads', 'halt', 'indefinately'), ('lockRead()', 'called on', 'ReadWriteLock instance'), ('lockWrite()', 'called on', 'ReadWriteLock instance')]"
"The only thing that could unlock the ReadWriteLockagain would be if the ReadWriteLock is reentrant, and the thread that had it locked when the exception was thrown, later succeeds in locking it, executing the critical section and calling unlockWrite() again afterwards.","[('ReadWriteLock', 'is', 'reentrant'), ('thread', 'had locked', 'ReadWriteLock'), ('exception', 'was thrown by', 'thread'), ('thread', 'succeeds in locking', 'ReadWriteLock'), ('thread', 'executes', 'critical section'), ('thread', 'calls', 'unlockWrite()')]"
Calling unlockWrite() from a finally-clause is a much more robust solution.,"[('unlockWrite()', 'called from', 'finally-clause'), ('solution', 'is', 'robust')]"
"If a thread calls lock() twice without calling unlock() in between, the second call to lock() will block.","[('thread', 'calls', 'lock()'), ('thread', 'calls', 'lock()'), ('lock()', 'without calling', 'unlock()')]"
Java 5 comes with semaphore implementations in the java.util.concurrent package so you don't have to implement your own semaphores.,"[('Java 5', 'includes', 'semaphore implementations'), ('semaphore implementations', 'located in', 'java.util.concurrent package')]"
"You can read more about it in the java.util.concurrent.Semaphore text, in my java.util.concurrent tutorial.","[('java.util.concurrent.Semaphore', 'mentioned in', 'java.util.concurrent tutorial'), ('java.util.concurrent tutorial', 'contains', 'java.util.concurrent.Semaphore')]"
The take() method sends a signal which is stored internally in the Semaphore.,"[('take() method', 'sends', 'signal'), ('signal', 'stored in', 'Semaphore')]"
"When received the signal flag is cleared again, and the release() method exited.","[('signal flag', 'is cleared', 'again')]"
You will call take() instead of notify() and release() instead of wait().,"[('You', 'will call', 'take()'), ('You', 'will call', 'release()'), ('take()', 'instead of', 'notify()'), ('release()', 'instead of', 'wait()')]"
"If the call to take() happens before the call to release() the thread calling release() will still know that take() was called, because the signal is stored internally in the signal variable.","[('call to take()', 'happens before', 'call to release()'), ('thread calling release()', 'will know', 'take() was called'), ('signal', 'is stored in', 'signal variable')]"
The names take() and release() may seem a bit odd when using a semaphore for signaling.,"[('take()', 'used for', 'semaphore signaling'), ('release()', 'used for', 'semaphore signaling')]"
The Semaphore implementation in the previous section does not count the number of signals sent to it by take() method calls.,"[('Semaphore implementation', 'mentioned in', 'previous section'), ('take() method calls', 'send signals to', 'Semaphore implementation'), ('Semaphore implementation', 'does not count', 'number of signals')]"
Notice how the take() method now blocks if the number of signals is equal to the upper bound.,"[('take() method', 'blocks if', 'number of signals is equal to the upper bound')]"
"Not until a thread has called release() will the thread calling take() be allowed to deliver its signal, if the BoundedSemaphore has reached its upper signal limit.","[('thread', 'calls', 'release()'), ('thread', 'calls', 'take()'), ('BoundedSemaphore', 'has reached', 'upper signal limit'), ('thread calling take()', 'allowed to deliver', 'signal')]"
"To do so, set the upper bound to 1, and have the call to take() and release() guard the critical section.","[('upper bound', 'set to', '1'), ('call to take()', 'guard', 'critical section'), ('call to release()', 'guard', 'critical section')]"
In contrast to the signaling use case the methods take() and release() are now called by the same thread.,"[('methods take() and release()', 'called by', 'same thread')]"
"Since only one thread is allowed to take the semaphore, all other threads calling take() will be blocked until release() is called.","[('one thread', 'allowed to take', 'semaphore'), ('other threads', 'calling', 'take()'), ('other threads', 'will be blocked until', 'release() is called')]"
The call to release() will never block since there has always been a call to take() first.,"[('call to take()', 'happens before', 'call to release()')]"
The relase() method is called from inside a finally-block to make sure it is called even if an exception is thrown from the critical section.,"[('relase() method', 'is called from', 'finally-block'), ('finally-block', 'ensures', 'relase() method is called'), ('exception', 'is thrown from', 'critical section')]"
In a classic multi-threaded architecture you will typically assign each task to a separate thread for execution.,"[('multi-threaded architecture', 'contains', 'thread'), ('thread', 'executes', 'task')]"
A classic multi-threaded architecture can also sometimes lead to congestion when multiple threads try to access the same data structure at the same time.,"[('classic multi-threaded architecture', 'can lead to', 'congestion'), ('multiple threads', 'try to access', 'same data structure'), ('multiple threads', 'can lead to', 'congestion')]"
The alternative to a classic multithreaded architecture is a single-threaded or same-threaded.,"[('alternative', 'to', 'classic multithreaded architecture'), ('alternative', 'is', 'single-threaded'), ('alternative', 'is', 'same-threaded')]"
"This kind of thread loop is both used in server applications (web services, services etc.)","[('thread loop', 'used in', 'server applications'), ('server applications', 'includes', 'web services'), ('server applications', 'includes', 'services')]"
"For instance, the task executor could keep the tasks in different lists internally, and e.g.","[('task executor', 'could keep', 'tasks'), ('tasks', 'in', 'different lists')]"
"If a one-off task is waiting for some asynchronous operation to finish, e.g.","[('one-off task', 'waiting for', 'asynchronous operation')]"
"Imagine that isLocked is false, and two threads call lock() at the same time.","[('isLocked', 'state', 'false'), ('two threads', 'call', 'lock()')]"
"Notice how the synchronized(queueObject) with its queueObject.wait() call is nested inside the synchronized(this) block, resulting in the nested monitor lockout problem.","[('synchronized(queueObject)', 'contains', 'queueObject.wait()'), ('queueObject.wait()', 'call is nested inside', 'synchronized(this) block'), ('synchronized(queueObject)', 'results in', 'nested monitor lockout problem')]"
"Note: Only the lock() method is shown, since it is the only method I have changed.","[('lock()', 'is a', 'method'), ('lock()', 'is shown', 'Note'), ('lock()', 'is the only method', 'changed')]"
The first synchronized(this) block checks the condition by setting mustWait = isLocked || waitingThreads.get(0) != queueObject.,"[('first synchronized(this) block', 'checks', 'condition'), ('mustWait', 'set by', 'first synchronized(this) block'), ('mustWait', 'equals', 'isLocked || waitingThreads.get(0) != queueObject')]"
Imagine what will happen if two threads call lock() at the same time when the lock is unlocked.,"[('two threads', 'call', 'lock()'), ('lock()', 'state', 'unlocked')]"
Imagine that the FairLock instance is locked when a thread calls lock().,"[('FairLock instance', 'is locked when', 'thread calls lock()')]"
"Then imagine that the thread calling lock() is preempted, and the thread that locked the lock calls unlock().","[('thread', 'calls', 'lock()'), ('thread', 'locked', 'lock'), ('thread', 'calls', 'unlock()')]"
"If you look at the unlock() implementation shown earlier, you will notice that it calls queueObject.notify().","[('unlock() implementation', 'calls', 'queueObject.notify()')]"
"But, since the thread waiting in lock() has not yet called queueObject.wait(), the call to queueObject.notify() passes into oblivion.","[('thread', 'waiting in', 'lock()'), ('thread', 'has not yet called', 'queueObject.wait()'), ('call', 'passes into', 'oblivion'), ('call', 'to', 'queueObject.notify()')]"
"When the thread calling lock() right after calls queueObject.wait() it will remain blocked until some other thread calls unlock(), which may never happen.","[('thread', 'calls', 'lock()'), ('thread', 'calls', 'queueObject.wait()'), ('thread', 'remains blocked until', 'some other thread calls unlock()')]"
The missed signals problems is the reason that the FairLock implementation shown in the text Starvation and Fairness has turned the QueueObject class into a semaphore with two methods: doWait() and doNotify().,"[('missed signals problems', 'is reason for', 'FairLock implementation'), ('FairLock implementation', 'shown in', 'text Starvation and Fairness'), ('FairLock implementation', 'turned', 'QueueObject class'), ('QueueObject class', 'turned into', 'semaphore'), ('semaphore', 'has method', 'doWait()'), ('semaphore', 'has method', 'doNotify()')]"
"That way the signal is not missed, even if doNotify() is called before doWait().","[('doNotify()', 'is called before', 'doWait()')]"
The notify() method makes no guarantee about what thread is awakened if multiple thread have called wait() on the object notify() is called on.,"[('notify() method', 'makes no guarantee about', 'what thread is awakened'), ('multiple threads', 'have called', 'wait()'), ('notify()', 'is called on', 'object')]"
"If more than one thread call the doSynchronized() method, some of them will be blocked until the first thread granted access has left the method.","[('thread', 'calls', 'doSynchronized() method'), ('doSynchronized() method', 'blocks', 'some threads'), ('first thread', 'granted access', 'doSynchronized() method'), ('first thread', 'leaves', 'doSynchronized() method')]"
Instead the critical section is guarded by the lock.lock() and lock.unlock() calls.,"[('critical section', 'guarded by', 'lock.lock()'), ('critical section', 'guarded by', 'lock.unlock()')]"
A simple implementation of the Lock class could look like this:,"[('Lock class', 'has implementation', 'simple implementation')]"
"If you look at the Synchronizer class above and look into this Lock implementation you will notice that threads are now blocked trying to access the lock() method, if more than one thread calls lock() simultanously.","[('Synchronizer class', 'contains', 'Lock implementation'), ('threads', 'are blocked by', 'lock() method'), ('more than one thread', 'calls', 'lock() method')]"
"Second, if the lock is locked, the threads are blocked in the wait() call inside the while(isLocked) loop in the lock() method.","[('lock', 'state', 'locked'), ('threads', 'blocked in', 'wait() call'), ('wait() call', 'inside', 'while(isLocked) loop'), ('while(isLocked) loop', 'in', 'lock() method')]"
"Remember that a thread calling wait() releases the synchronization lock on the Lock instance, so threads waiting to enter lock() can now do so.","[('thread', 'calls', 'wait()'), ('thread', 'releases', 'synchronization lock'), ('synchronization lock', 'belongs to', 'Lock instance'), ('threads', 'wait to enter', 'lock()')]"
The result is that multiple threads can end up having called wait() inside lock().,"[('multiple threads', 'can end up having called', 'wait()'), ('wait()', 'inside', 'lock()')]"
"If you look back at the doSynchronized() method you will notice that the comment between lock() and unlock() states, that the code in between these two calls take a ""long"" time to execute.",
Let us further assume that this code takes long time to execute compared to entering the lock() method and calling wait() because the lock is locked.,"[('code', 'takes', 'long time to execute'), ('code', 'compared to', 'entering the lock() method'), ('code', 'compared to', 'calling wait()'), ('lock', 'is', 'locked')]"
"This means that the majority of the time waited to be able to lock the lock and enter the critical section is spent waiting in the wait() call inside the lock() method, not being blocked trying to enter the lock() method.","[('majority of the time', 'spent waiting in', 'wait() call'), ('wait() call', 'located inside', 'lock() method'), ('time', 'not being blocked trying to enter', 'lock() method')]"
Nor does wait() make any guarantees about what thread is awakened when notify() is called.,"[('wait()', 'does not make guarantees about', 'what thread is awakened')]"
"So, the current version of the Lock class makes no different guarantees with respect to fairness than synchronized version of doSynchronized().","[('Lock class', 'makes no different guarantees with respect to', 'fairness'), ('synchronized version of doSynchronized()', 'makes no different guarantees with respect to', 'fairness')]"
The current version of the Lock class calls its own wait() method.,"[('Lock class', 'calls method', 'wait()')]"
"If instead each thread calls wait() on a separate object, so that only one thread has called wait() on each object, the Lock class can decide which of these objects to call notify() on, thereby effectively selecting exactly what thread to awaken.","[('thread', 'calls', 'wait()'), ('thread', 'has called', 'wait()'), ('Lock class', 'can decide', 'which of these objects to call notify() on'), ('Lock class', 'selects', 'what thread to awaken')]"
Below is shown the previous Lock class turned into a fair lock called FairLock.,"[('Lock class', 'turned into', 'FairLock')]"
You will notice that the implementation has changed a bit with respect to synchronization and wait() / notify() compared to the Lock class shown earlier.,"[('implementation', 'has changed with respect to', 'synchronization'), ('implementation', 'has changed with respect to', 'wait() / notify()'), ('implementation', 'compared to', 'Lock class')]"
"Exactly how I arrived at this design beginning from the previous Lock class is a longer story involving several incremental design steps, each fixing the problem of the previous step: Nested Monitor Lockout, Slipped Conditions, and Missed Signals.","[('design', 'originated from', 'previous Lock class'), ('design', 'involves', 'incremental design steps'), ('incremental design steps', 'fix', 'Nested Monitor Lockout'), ('incremental design steps', 'fix', 'Slipped Conditions'), ('incremental design steps', 'fix', 'Missed Signals')]"
"What is important is, that every thread calling lock() is now queued, and only the first thread in the queue is allowed to lock the FairLock instance, if it is unlocked.","[('thread', 'calls', 'lock()'), ('thread', 'is queued', 'queue'), ('first thread', 'is allowed to lock', 'FairLock instance'), ('FairLock instance', 'is', 'unlocked')]"
First you might notice that the lock() method is no longer declared synchronized.,"[('lock() method', 'no longer declared', 'synchronized')]"
FairLock creates a new instance of QueueObject and enqueue it for each thread calling lock().,"[('FairLock', 'creates', 'QueueObject'), ('QueueObject', 'is enqueued for', 'each thread calling lock()')]"
"The thread calling unlock() will take the top QueueObject in the queue and call doNotify() on it, to awaken the thread waiting on that object.","[('thread', 'calls', 'unlock()'), ('unlock()', 'takes', 'top QueueObject'), ('top QueueObject', 'located in', 'queue'), ('thread', 'calls', 'doNotify()'), ('doNotify()', 'awakens', 'thread'), ('thread', 'waits on', 'QueueObject')]"
The doWait() and doNotify() methods store the signal internally in the QueueObject.,"[('doWait()', 'method stores signal in', 'QueueObject'), ('doNotify()', 'method stores signal in', 'QueueObject')]"
"This is done to avoid missed signals caused by a thread being preempted just before calling queueObject.doWait(), by another thread which calls unlock() and thereby queueObject.doNotify().","[('thread', 'can be', 'preempted'), ('thread', 'calls', 'queueObject.doWait()'), ('another thread', 'calls', 'unlock()'), ('another thread', 'calls', 'queueObject.doNotify()'), ('queueObject.doNotify()', 'caused by', 'unlock()'), ('missed signals', 'caused by', 'thread being preempted')]"
"The queueObject.doWait() call is placed outside the synchronized(this) block to avoid nested monitor lockout, so another thread can actually call unlock() when no thread is executing inside the synchronized(this) block in lock() method.","[('queueObject.doWait()', 'is placed outside', 'synchronized(this) block'), ('another thread', 'can call', 'unlock()'), ('no thread', 'is executing inside', 'synchronized(this) block'), ('synchronized(this) block', 'is in', 'lock() method')]"
"Finally, notice how the queueObject.doWait() is called inside a try - catch block.","[('queueObject.doWait()', 'is called inside', 'try - catch block')]"
"In case an InterruptedException is thrown the thread leaves the lock() method, and we need to dequeue it.","[('InterruptedException', 'is thrown', 'thread'), ('thread', 'leaves', 'lock() method'), ('we', 'need to dequeue', 'thread')]"
If you compare the Lock and FairLock classes you will notice that there is somewhat more going on inside the lock() and unlock() in the FairLock class.,"[('Lock', 'compared to', 'FairLock'), ('FairLock', 'contains', 'lock()'), ('FairLock', 'contains', 'unlock()')]"
Threads waiting on an object (called wait() on it) remain waiting indefinitely,"[('Threads', 'waiting on', 'object'), ('Threads', 'called', 'wait()'), ('Threads', 'remain', 'waiting indefinitely')]"
"In a desktop app the foreground thread (UI thread) could be responding to the user events - a.g. opening a file, or downloading a file, or saving a file etc.","[('foreground thread', 'part of', 'desktop app'), ('UI thread', 'is a type of', 'foreground thread'), ('foreground thread', 'responds to', 'user events'), ('user events', 'include', 'opening a file'), ('user events', 'include', 'downloading a file'), ('user events', 'include', 'saving a file')]"
"Each thread consumes a certain amount of computer resources, such as memory (RAM), so if you have too many threads active at the same time, the total amount of resources (e.g.","[('Thread', 'consumes', 'Computer resources'), ('Computer resources', 'includes', 'Memory (RAM)'), ('Thread', 'active at the same time', 'Too many threads'), ('Too many threads', 'affects', 'Total amount of resources')]"
RAM) that is consumed may cause the computer to slow down - e.g.,"[('RAM', 'consumed by', 'computer')]"
"Java comes with built in thread pools in the java.util.concurrent package, so you don't have to implement your own thread pool.","[('Java', 'comes with', 'built in thread pools'), ('built in thread pools', 'located in', 'java.util.concurrent package')]"
You can read more about it in my text on the java.util.concurrent.ExecutorService.,"[('text', 'mentions', 'java.util.concurrent.ExecutorService')]"
"Below here is the PoolThreadRunnable class which implements the Runnable interface, so it can be executed by a Java thread:","[('PoolThreadRunnable', 'is a', 'class'), ('PoolThreadRunnable', 'implements', 'Runnable'), ('Runnable', 'is a', 'interface'), ('PoolThreadRunnable', 'can be executed by', 'Java thread')]"
"A ThreadPool class which is the public interface to the thread pool, and a PoolThread class which implements the threads that execute the tasks.","[('ThreadPool', 'is a', 'public interface'), ('ThreadPool', 'related to', 'thread pool'), ('PoolThread', 'implements', 'threads'), ('threads', 'execute', 'tasks')]"
To execute a task the method ThreadPool.execute(Runnable r) is called with a Runnable implementation as parameter.,"[('ThreadPool', 'has method', 'execute'), ('execute', 'called with', 'Runnable implementation'), ('Runnable implementation', 'is parameter of', 'execute')]"
Then each thread in the pool is stopped by calling doStop() on each thread.,"[('thread', 'part of', 'pool'), ('doStop()', 'called on', 'thread')]"
Notice how the execute() method will throw an IllegalStateException if execute() is called after stop() has been called.,"[('execute()', 'method will throw', 'IllegalStateException'), ('execute()', 'is called after', 'stop()')]"
"This makes sure that a thread blocked in a wait() call inside the taskQueue.dequeue() call breaks out of the wait() call, and leaves the dequeue() method call with an InterruptedException thrown.","[('thread', 'blocked in', 'wait() call'), ('wait() call', 'inside', 'taskQueue.dequeue() call'), ('thread', 'breaks out of', 'wait() call'), ('thread', 'leaves', 'dequeue() method call'), ('InterruptedException', 'thrown in', 'dequeue() method call')]"
"This exception is caught in the PoolThread.run() method, reported, and then the isStopped variable is checked.","[('exception', 'caught in', 'PoolThread.run() method'), ('exception', 'reported', nan), ('isStopped variable', 'checked', nan)]"
"Since isStopped is now true, the PoolThread.run() will exit and the thread dies.","[('isStopped', 'is now', 'true')]"
"Notice how the add() method returns a new ImmutableValue instance with the result of the add operation, rather than adding the value to itself.","[('add() method', 'returns', 'new ImmutableValue instance'), ('new ImmutableValue instance', 'contains', 'result of the add operation')]"
Notice how it is possible to change that reference through both the setValue() and add() methods.,"[('reference', 'can be changed through', 'setValue() method'), ('reference', 'can be changed through', 'add() method')]"
"Therefore, even if the Calculator class uses an immutable object internally, it is not itself immutable, and therefore not thread safe.","[('Calculator class', 'uses', 'immutable object'), ('Calculator class', 'is not', 'immutable'), ('Calculator class', 'is not', 'thread safe')]"
"In other words: The ImmutableValue class is thread safe, but the use of it is not.","[('ImmutableValue class', 'is', 'thread safe'), ('use of ImmutableValue class', 'is not', 'thread safe')]"
"To make the Calculator class thread safe you could have declared the getValue(), setValue(), and add() methods synchronized.","[('Calculator class', 'has method', 'getValue()'), ('Calculator class', 'has method', 'setValue()'), ('Calculator class', 'has method', 'add()'), ('getValue()', 'can be', 'synchronized'), ('setValue()', 'can be', 'synchronized'), ('add()', 'can be', 'synchronized'), ('Calculator class', 'can be', 'thread safe')]"
"The LocalObject instance in this example is not returned from the method, nor is it passed to any other objects that are accessible from outside the someMethod() method.","[('LocalObject instance', 'is not returned from', 'method'), ('LocalObject instance', 'is not passed to', 'any other objects'), ('any other objects', 'are accessible from outside', 'someMethod() method')]"
Each thread executing the someMethod() method will create its own LocalObject instance and assign it to the localObject reference.,"[('thread', 'executes', 'someMethod() method'), ('someMethod() method', 'creates', 'LocalObject instance'), ('LocalObject instance', 'assigned to', 'localObject reference')]"
"Even if the LocalObject instance is passed as parameter to other methods in the same class, or in other classes, the use of it is thread safe.","[('LocalObject instance', 'is passed as parameter to', 'other methods'), ('LocalObject instance', 'is passed as parameter to', 'other classes'), ('use of LocalObject instance', 'is', 'thread safe')]"
If two threads call the add() method simultaneously on the same NotThreadSafe instance then it leads to race conditions.,"[('two threads', 'call', 'add() method'), ('add() method', 'called on', 'NotThreadSafe instance'), ('two threads', 'call simultaneously on', 'same NotThreadSafe instance'), ('calling add() method simultaneously', 'leads to', 'race conditions')]"
"Therefore, when they call the add() method on the NotThreadSafe instance it leads to race condition.","[('they', 'call method', 'add()'), ('add()', 'method of', 'NotThreadSafe instance'), ('call', 'leads to', 'race condition')]"
"However, if two threads call the add() method simultaneously on different instances then it does not lead to race condition.","[('two threads', 'call', 'add() method'), ('add() method', 'called by', 'two threads'), ('two threads', 'act on', 'different instances'), ('different instances', 'acted upon by', 'two threads'), ('calling add() method on different instances', 'does not lead to', 'race condition')]"
"In other words, it is waiting for a signal from thread A which causes hasDataToProcess() to return true.","[('it', 'waiting for signal from', 'thread A'), ('signal', 'causes', 'hasDataToProcess() to return true')]"
Notice how the while loop keeps executing until hasDataToProcess() returns true.,"[('while loop', 'keeps executing until', 'hasDataToProcess() returns true')]"
"The class java.lang.Object defines three methods, wait(), notify(), and notifyAll(), to facilitate this.","[('java.lang.Object', 'defines method', 'wait()'), ('java.lang.Object', 'defines method', 'notify()'), ('java.lang.Object', 'defines method', 'notifyAll()')]"
A thread that calls wait() on any object becomes inactive until another thread calls notify() on that object.,"[('thread', 'calls', 'wait()'), ('thread', 'becomes', 'inactive'), ('another thread', 'calls', 'notify()'), ('wait()', 'on object', 'any object'), ('notify()', 'on object', 'that object')]"
In order to call either wait() or notify the calling thread must first obtain the lock on that object.,"[('calling thread', 'must obtain', 'lock on that object'), ('calling thread', 'can call', 'wait()'), ('calling thread', 'can call', 'notify')]"
"In other words, the calling thread must call wait() or notify() from inside a synchronized block.","[('calling thread', 'must call', 'wait()'), ('calling thread', 'must call', 'notify()'), ('wait()', 'called from inside', 'synchronized block'), ('notify()', 'called from inside', 'synchronized block')]"
Here is a modified version of MySignal called MyWaitNotify that uses wait() and notify().,"[('MySignal', 'has modified version', 'MyWaitNotify'), ('MyWaitNotify', 'uses', 'wait()'), ('MyWaitNotify', 'uses', 'notify()')]"
"The waiting thread would call doWait(), and the notifying thread would call doNotify().","[('waiting thread', 'would call', 'doWait()'), ('notifying thread', 'would call', 'doNotify()')]"
"When a thread calls notify() on an object, one of the threads waiting on that object are awakened and allowed to execute.","[('thread', 'calls', 'notify()'), ('notify()', 'called on', 'object'), ('threads', 'waiting on', 'object'), ('threads', 'are awakened and allowed to execute', 'when notify() is called')]"
There is also a notifyAll() method that will wake all threads waiting on a given object.,"[('notifyAll() method', 'wakes', 'all threads'), ('all threads', 'waiting on', 'a given object')]"
As you can see both the waiting and notifying thread calls wait() and notify() from within a synchronized block.,"[('waiting thread', 'calls', 'wait()'), ('notifying thread', 'calls', 'notify()'), ('wait()', 'called from', 'synchronized block'), ('notify()', 'called from', 'synchronized block')]"
"A thread cannot call wait(), notify() or notifyAll() without holding the lock on the object the method is called on.","[('thread', 'cannot call', 'wait()'), ('thread', 'cannot call', 'notify()'), ('thread', 'cannot call', 'notifyAll()'), ('method', 'called on', 'object'), ('thread', 'holding the lock on', 'object')]"
Will the waiting thread not block the notifying thread from ever entering the synchronized block in doNotify()?,"[('waiting thread', 'potentially blocks', 'notifying thread'), ('notifying thread', 'enters', 'synchronized block'), ('synchronized block', 'part of', 'doNotify()')]"
Once a thread calls wait() it releases the lock it holds on the monitor object.,"[('thread', 'calls', 'wait()'), ('thread', 'releases', 'lock'), ('lock', 'held by', 'thread'), ('lock', 'on', 'monitor object')]"
"This allows other threads to call wait() or notify() too, since these methods must be called from inside a synchronized block.","[('threads', 'can call', 'wait()'), ('threads', 'can call', 'notify()'), ('wait()', 'must be called from inside', 'synchronized block'), ('notify()', 'must be called from inside', 'synchronized block')]"
Once a thread is awakened it cannot exit the wait() call until the thread calling notify() has left its synchronized block.,"[('thread', 'is awakened', 'thread'), ('thread', 'cannot exit', 'wait() call'), ('thread', 'calls', 'notify()'), ('thread', 'has left', 'synchronized block'), ('thread', 'is awakened', 'thread'), ('thread', 'cannot exit', 'wait() call'), ('thread', 'calls', 'notify()'), ('thread', 'has left', 'synchronized block')]"
"In other words: The awakened thread must reobtain the lock on the monitor object before it can exit the wait() call, because the wait call is nested inside a synchronized block.","[('awakened thread', 'must reobtain', 'lock on the monitor object'), ('awakened thread', 'can exit', 'wait() call'), ('wait() call', 'is nested inside', 'synchronized block')]"
"If multiple threads are awakened using notifyAll() only one awakened thread at a time can exit the wait() method, since each thread must obtain the lock on the monitor object in turn before exiting wait().","[('multiple threads', 'are awakened using', 'notifyAll()'), ('one awakened thread', 'can exit', 'wait() method'), ('each thread', 'must obtain', 'lock on the monitor object'), ('each thread', 'must obtain before exiting', 'wait()')]"
The methods notify() and notifyAll() do not save the method calls to them in case no threads are waiting when they are called.,"[('methods notify() and notifyAll()', 'do not save', 'method calls'), ('threads', 'are waiting', 'when they are called')]"
"Therefore, if a thread calls notify() before the thread to signal has called wait(), the signal will be missed by the waiting thread.","[('thread', 'calls', 'notify()'), ('thread', 'to signal', 'waiting thread'), ('waiting thread', 'has called', 'wait()'), ('signal', 'will be missed by', 'waiting thread')]"
To avoid losing signals they should be stored inside the signal class.,"[('signals', 'should be stored inside', 'signal class')]"
Notice how the doNotify() method now sets the wasSignalled variable to true before calling notify().,"[('doNotify() method', 'sets variable', 'wasSignalled'), ('wasSignalled', 'set to', 'true'), ('doNotify() method', 'calls method', 'notify()')]"
"Also, notice how the doWait() method now checks the wasSignalled variable before calling wait().","[('doWait() method', 'checks', 'wasSignalled variable'), ('doWait() method', 'calls', 'wait()')]"
In fact it only calls wait() if no signal was received in between the previous doWait() call and this.,"[('it', 'calls', 'wait()'), ('signal', 'received in between', 'previous doWait() call')]"
For inexplicable reasons it is possible for threads to wake up even if notify() and notifyAll() has not been called.,"[('threads', 'can wake up', 'even if notify() and notifyAll() has not been called')]"
If a spurious wakeup occurs in the MyWaitNofity2 class's doWait() method the waiting thread may continue processing without having received a proper signal to do so!,"[('spurious wakeup', 'occurs in', ""MyWaitNofity2 class's doWait() method""), ('waiting thread', 'may continue processing without', 'having received a proper signal')]"
Notice how the wait() call is now nested inside a while loop instead of an if-statement.,"[('wait() call', 'nested inside', 'while loop'), ('wait() call', 'not nested inside', 'if-statement')]"
"The while loop is also a nice solution if you have multiple threads waiting, which are all awakened using notifyAll(), but only one of them should be allowed to continue.","[('while loop', 'is a solution for', 'multiple threads waiting'), ('multiple threads', 'are awakened using', 'notifyAll()'), ('only one of them', 'should be allowed to', 'continue')]"
"Only one thread at a time will be able to obtain the lock on the monitor object, meaning only one thread can exit the wait() call and clear the wasSignalled flag.","[('thread', 'able to obtain', 'lock on the monitor object'), ('one thread', 'can exit', 'wait() call'), ('one thread', 'can clear', 'wasSignalled flag')]"
"Once this thread then exits the synchronized block in the doWait() method, the other threads can exit the wait() call and check the wasSignalled member variable inside the while loop.","[('thread', 'exits', 'synchronized block'), ('synchronized block', 'located in', 'doWait() method'), ('other threads', 'can exit', 'wait() call'), ('other threads', 'check', 'wasSignalled member variable'), ('wasSignalled member variable', 'located inside', 'while loop')]"
"An earlier version of this text had an edition of the MyWaitNotify example class which used a constant string ( """" ) as monitor object.",
"The problem with calling wait() and notify() on the empty string, or any other constant string is, that the JVM/Compiler internally translates constant strings into the same object.","[('wait()', 'called on', 'empty string'), ('notify()', 'called on', 'empty string'), ('wait()', 'called on', 'constant string'), ('notify()', 'called on', 'constant string'), ('JVM/Compiler', 'translates', 'constant strings'), ('constant strings', 'translated into', 'same object')]"
This also means that threads calling doWait() on the first MyWaitNotify instance risk being awakened by doNotify() calls on the second MyWaitNotify instance.,"[('threads', 'call', 'doWait()'), ('doWait()', 'called on', 'first MyWaitNotify instance'), ('threads', 'risk', 'being awakened'), ('being awakened', 'caused by', 'doNotify() calls'), ('doNotify() calls', 'called on', 'second MyWaitNotify instance')]"
"Remember, that even if the 4 threads call wait() and notify() on the same shared string instance, the signals from the doWait() and doNotify() calls are stored individually in the two MyWaitNotify instances.","[('4 threads', 'call', 'wait()'), ('4 threads', 'call', 'notify()'), ('wait()', 'called on', 'shared string instance'), ('notify()', 'called on', 'shared string instance'), ('signals', 'from', 'doWait() calls'), ('signals', 'from', 'doNotify() calls'), ('signals', 'stored in', 'two MyWaitNotify instances')]"
"A doNotify() call on the MyWaitNotify 1 may wake threads waiting in MyWaitNotify 2, but the signal will only be stored in MyWaitNotify 1.","[('doNotify() call', 'may wake threads waiting in', 'MyWaitNotify 2'), ('doNotify() call', 'stored in', 'MyWaitNotify 1')]"
"After all, if doNotify() is called on the second MyWaitNotify instance all that can really happen is that Thread A and B are awakened by mistake.","[('doNotify()', 'is called on', 'second MyWaitNotify instance'), ('Thread A', 'can be awakened by', 'doNotify()'), ('Thread B', 'can be awakened by', 'doNotify()')]"
"This awakened thread (A or B) will check its signal in the while loop, and go back to waiting because doNotify() was not called on the first MyWaitNotify instance, in which they are waiting.","[('thread', 'will check', 'signal'), ('thread', 'go back to', 'waiting'), ('doNotify()', 'was not called on', 'first MyWaitNotify instance'), ('thread', 'are waiting in', 'first MyWaitNotify instance')]"
"The problem is, that since the doNotify() call only calls notify() and not notifyAll(), only one thread is awakened even if 4 threads are waiting on the same string instance (the empty string).","[('doNotify() call', 'calls', 'notify()'), ('doNotify() call', 'does not call', 'notifyAll()'), ('one thread', 'is awakened', 'doNotify() call'), ('4 threads', 'are waiting on', 'same string instance'), ('same string instance', 'is', 'the empty string')]"
"If the doNotify() method had called notifyAll() instead of notify(), all waiting threads had been awakened and checked for signals in turn.","[('doNotify() method', 'called', 'notifyAll()'), ('doNotify() method', 'called', 'notify()'), ('notifyAll()', 'awakens', 'all waiting threads'), ('all waiting threads', 'checked for', 'signals')]"
"Thread A and B would have gone back to waiting, but one of either C or D would have noticed the signal and left the doWait() method call.","[('Thread A', 'would have gone back to', 'waiting'), ('Thread B', 'would have gone back to', 'waiting'), ('Thread C', 'would have noticed', 'the signal'), ('Thread D', 'would have noticed', 'the signal'), ('Thread C', 'would have left', 'doWait() method call'), ('Thread D', 'would have left', 'doWait() method call')]"
"The other of C and D would go back to waiting, because the thread discovering the signal clears it on the way out of doWait().","[('C', 'would go back to', 'waiting'), ('D', 'would go back to', 'waiting'), ('thread', 'discovers', 'signal'), ('thread', 'clears', 'signal'), ('signal', 'is cleared on the way out of', 'doWait()')]"
"You may be tempted then to always call notifyAll() instead notify(), but this is a bad idea performance wise.","[('You', 'may be tempted to', 'call notifyAll()'), ('call notifyAll()', 'instead of', 'notify()'), ('call notifyAll()', 'is a bad idea', 'performance wise')]"
"For instance, each MyWaitNotify3 (example from earlier sections) instance has its own MonitorObject instance rather than using the empty string for wait() / notify() calls.","[('MyWaitNotify3', 'has instance', 'MonitorObject'), ('MyWaitNotify3', 'uses for wait() / notify() calls', 'MonitorObject')]"
"The AtomicBoolean class provides you with a boolean variable which can be read and written atomically, and which also contains advanced atomic operations like compareAndSet().","[('AtomicBoolean', 'provides', 'boolean variable'), ('boolean variable', 'can be', 'read atomically'), ('boolean variable', 'can be', 'written atomically'), ('AtomicBoolean', 'contains', 'advanced atomic operations'), ('advanced atomic operations', 'includes', 'compareAndSet()')]"
"The AtomicBoolean class is located in the java.util.concurrent.atomic package, so the full class name is java.util.concurrent.atomic.AtomicBoolean .","[('AtomicBoolean', 'located in package', 'java.util.concurrent.atomic'), ('java.util.concurrent.atomic.AtomicBoolean', 'full class name of', 'AtomicBoolean')]"
You can get the value of an AtomicBoolean using the get() method.,"[('AtomicBoolean', 'has method', 'get()'), ('get()', 'returns', 'value of AtomicBoolean')]"
You can set the value of an AtomicBoolean using the set() method.,"[('AtomicBoolean', 'has method', 'set()'), ('set()', 'sets value of', 'AtomicBoolean')]"
You can swap the value of an AtomicBoolean using the getAndSet() method.,"[('AtomicBoolean', 'method', 'getAndSet()'), ('getAndSet()', 'action', 'swap value')]"
"The getAndSet() method returns the AtomicBoolean's current value, and sets a new value for it.","[('getAndSet() method', 'returns', ""AtomicBoolean's current value""), ('getAndSet() method', 'sets', 'new value')]"
"The method compareAndSet() allows you to compare the current value of the AtomicBoolean to an expected value, and if current value is equal to the expected value, a new value can be set on the AtomicBoolean.","[('compareAndSet()', 'allows', 'compare current value of AtomicBoolean to expected value'), ('current value of AtomicBoolean', 'is compared to', 'expected value'), ('current value', 'is equal to', 'expected value'), ('new value', 'can be set on', 'AtomicBoolean')]"
"The compareAndSet() method is atomic, so only a single thread can execute it at the same time.","[('compareAndSet() method', 'is', 'atomic'), ('compareAndSet() method', 'can be executed by', 'single thread')]"
"Thus, the compareAndSet() method can be used to implemented simple synchronizers like locks.","[('compareAndSet()', 'can be used to implement', 'simple synchronizers'), ('simple synchronizers', 'example of', 'locks')]"
"The AtomicInteger class provides you with a int variable which can be read and written atomically, and which also contains advanced atomic operations like compareAndSet().","[('AtomicInteger', 'provides', 'int variable'), ('int variable', 'can be', 'read atomically'), ('int variable', 'can be', 'written atomically'), ('AtomicInteger', 'contains', 'advanced atomic operations'), ('advanced atomic operations', 'includes', 'compareAndSet()')]"
"The AtomicInteger class is located in the java.util.concurrent.atomic package, so the full class name is java.util.concurrent.atomic.AtomicInteger .","[('AtomicInteger', 'located in package', 'java.util.concurrent.atomic'), ('java.util.concurrent.atomic.AtomicInteger', 'full class name', 'AtomicInteger')]"
You can get the value of an AtomicInteger instance via the get() method.,"[('AtomicInteger instance', 'has method', 'get()'), ('get()', 'returns', 'value of AtomicInteger instance')]"
You can set the value of an AtomicInteger instance via the set() method.,"[('AtomicInteger instance', 'has method', 'set()'), ('set()', 'sets value of', 'AtomicInteger instance')]"
The AtomicInteger class contains a few methods you can use to add a value to the AtomicInteger and get its value returned.,"[('AtomicInteger class', 'contains', 'methods'), ('methods', 'can be used to', 'add a value to the AtomicInteger'), ('methods', 'can be used to', 'get its value returned')]"
"The first method, addAndGet() adds a number to the AtomicInteger and returns its value after the addition.","[('addAndGet()', 'adds', 'number'), ('addAndGet()', 'returns', 'value'), ('value', 'occurs after', 'addition'), ('addition', 'involves', 'AtomicInteger')]"
"The second method, getAndAdd() also adds a number to the AtomicInteger but returns the value the AtomicInteger had before the value was added.","[('getAndAdd()', 'adds number to', 'AtomicInteger'), ('getAndAdd()', 'returns value', 'value AtomicInteger had before')]"
The methods getAndIncrement() and incrementAndGet() works like getAndAdd() and addAndGet() but just add 1 to the value of the AtomicInteger.,"[('getAndIncrement()', 'works like', 'getAndAdd()'), ('incrementAndGet()', 'works like', 'addAndGet()'), ('getAndIncrement()', 'adds', '1'), ('incrementAndGet()', 'adds', '1'), ('getAndIncrement()', 'adds to', 'AtomicInteger'), ('incrementAndGet()', 'adds to', 'AtomicInteger')]"
The AtomicInteger class also contains a few methods for subtracting values from the AtomicInteger value atomically.,"[('AtomicInteger class', 'contains', 'methods'), ('methods', 'used for', 'subtracting values'), ('subtracting values', 'from', 'AtomicInteger value'), ('subtracting values', 'performed', 'atomically')]"
The decrementAndGet() subtracts 1 from the AtomicInteger value and returns its value after the subtraction.,"[('decrementAndGet()', 'subtracts', '1'), ('decrementAndGet()', 'operates on', 'AtomicInteger value'), ('decrementAndGet()', 'returns', 'value after the subtraction')]"
The getAndDecrement() also subtracts 1 from the AtomicInteger value but returns the value the AtomicInteger had before the subtraction.,"[('getAndDecrement()', 'subtracts', '1'), ('getAndDecrement()', 'operates on', 'AtomicInteger'), ('getAndDecrement()', 'returns', 'value before subtraction')]"
The Java AtomicIntegerArray class (java.util.concurrent.atomic.AtomicIntegerArray) represents an array of int .,"[('Java AtomicIntegerArray class', 'represents', 'array of int')]"
You can get the value of a given element using the get() method on the AtomicIntegerArray.,"[('get() method', 'used on', 'AtomicIntegerArray'), ('get() method', 'retrieves', 'value of a given element')]"
Here is an example showing how calling the get() method looks:,"[('example', 'shows', 'calling the get() method')]"
You can set the value of a given element using the set() method on the AtomicIntegerArray.,"[('set()', 'method of', 'AtomicIntegerArray'), ('set()', 'sets value of', 'element')]"
Here is an example showing how calling the set() method looks:,"[('example', 'shows', 'how calling the set() method looks')]"
"The compareAndSet() method is used to compare the value of a given element with a specified value, and if the two values are equal, set a new value for that element.","[('compareAndSet() method', 'used to', 'compare value of a given element with a specified value'), ('compareAndSet() method', 'used to', 'set a new value for that element if the two values are equal')]"
Only one thread at a time can execute the compareAndSet() method.,"[('thread', 'can execute', 'compareAndSet() method')]"
"The compareAndSet() method returns a boolean with the value true if the element had a new value set, and false if not (if the element did not have the expected value).","[('compareAndSet() method', 'returns', 'boolean'), ('boolean', 'has value', 'true'), ('boolean', 'has value', 'false'), ('element', 'had new value set', 'true'), ('element', 'did not have expected value', 'false')]"
Calling addAndGet() is also an atomic operation (like all operations on the AtomicIntegerArray).,"[('addAndGet()', 'is a', 'atomic operation'), ('all operations on the AtomicIntegerArray', 'are', 'atomic operation')]"
"The getAndAdd() method does the same as the addAndGet() method, except the getAndAdd() method returns the value of the element before a value is added to it.","[('getAndAdd()', 'does the same as', 'addAndGet()'), ('getAndAdd()', 'returns', 'value of the element before a value is added')]"
The incrementAndGet() method increments (adds 1) to the value of a given element and returns the new value of that element.,"[('incrementAndGet() method', 'increments', 'value of a given element'), ('incrementAndGet() method', 'returns', 'new value of that element')]"
"The getAndIncrement() method does the same as the incrementAndGet() method, except the getAndIncrement() method returns the value of the element before it is incremented.","[('getAndIncrement()', 'does the same as', 'incrementAndGet()'), ('getAndIncrement()', 'returns', 'value of the element before it is incremented')]"
The decrementAndGet() method decrements (subtracts 1) to the value of a given element and returns the new value of that element.,"[('decrementAndGet() method', 'decrements', 'value of a given element'), ('decrementAndGet() method', 'returns', 'new value of that element')]"
"The getAndDecrement() method does the same as the decrementAndGet() method, except the getAndDecrement() method returns the value of the element before it is decremented.","[('getAndDecrement() method', 'does the same as', 'decrementAndGet() method'), ('getAndDecrement() method', 'returns', 'value of the element before it is decremented')]"
You should check out the JavaDoc for the AtomicIntegerArray class to learn more about those methods.,"[('JavaDoc', 'provides information about', 'AtomicIntegerArray class'), ('AtomicIntegerArray class', 'has', 'methods')]"
"The AtomicLong class provides you with a long variable which can be read and written atomically, and which also contains advanced atomic operations like compareAndSet().","[('AtomicLong class', 'provides', 'long variable'), ('long variable', 'can be', 'read atomically'), ('long variable', 'can be', 'written atomically'), ('long variable', 'contains', 'advanced atomic operations'), ('advanced atomic operations', 'include', 'compareAndSet()')]"
"The AtomicLong class is located in the java.util.concurrent.atomic package, so the full class name is java.util.concurrent.atomic.AtomicLong .","[('AtomicLong', 'located in package', 'java.util.concurrent.atomic'), ('java.util.concurrent.atomic.AtomicLong', 'full class name', 'AtomicLong')]"
You can get the value of an AtomicLong instance via the get() method.,"[('AtomicLong instance', 'has method', 'get()'), ('get()', 'returns', 'value')]"
You can set the value of an AtomicLong instance via the set() method.,"[('AtomicLong instance', 'has method', 'set()'), ('set()', 'sets value of', 'AtomicLong instance')]"
The AtomicLong class contains a few methods you can use to add a value to the AtomicLong and get its value returned.,"[('AtomicLong class', 'contains', 'methods'), ('methods', 'can be used to', 'add a value to the AtomicLong'), ('methods', 'can be used to', 'get its value returned')]"
"The first method, addAndGet() adds a number to the AtomicLong and returns its value after the addition.","[('addAndGet()', 'is a method of', 'AtomicLong'), ('addAndGet()', 'adds', 'number'), ('addAndGet()', 'returns', 'value after addition')]"
"The second method, getAndAdd() also adds a number to the AtomicLong but returns the value the AtomicLong had before the value was added.","[('getAndAdd()', 'adds number to', 'AtomicLong'), ('getAndAdd()', 'returns value', 'value AtomicLong had before the value was added')]"
The methods getAndIncrement() and incrementAndGet() works like getAndAdd() and addAndGet() but just add 1 to the value of the AtomicLong.,"[('getAndIncrement()', 'works like', 'getAndAdd()'), ('incrementAndGet()', 'works like', 'addAndGet()'), ('getAndIncrement()', 'adds', '1'), ('incrementAndGet()', 'adds', '1'), ('getAndIncrement()', 'adds to', 'value of AtomicLong'), ('incrementAndGet()', 'adds to', 'value of AtomicLong')]"
The AtomicLong class also contains a few methods for subtracting values from the AtomicLong value atomically.,"[('AtomicLong class', 'contains', 'methods'), ('methods', 'used for', 'subtracting values'), ('subtracting values', 'from', 'AtomicLong value'), ('subtracting values', 'performed', 'atomically')]"
The decrementAndGet() subtracts 1 from the AtomicLong value and returns its value after the subtraction.,"[('decrementAndGet()', 'subtracts', '1'), ('decrementAndGet()', 'operates on', 'AtomicLong value'), ('decrementAndGet()', 'returns', 'value after subtraction')]"
The getAndDecrement() also subtracts 1 from the AtomicLong value but returns the value the AtomicLong had before the subtraction.,"[('getAndDecrement()', 'subtracts', '1'), ('getAndDecrement()', 'operates on', 'AtomicLong value'), ('getAndDecrement()', 'returns', 'value AtomicLong had before subtraction')]"
The Java AtomicLongArray class (java.util.concurrent.atomic.AtomicLongArray) represents an array of long .,"[('Java AtomicLongArray class', 'represents', 'array of long')]"
You can get the value of a given element using the get() method on the AtomicLongArray.,"[('get() method', 'used on', 'AtomicLongArray'), ('get() method', 'retrieves', 'value of a given element')]"
You can set the value of a given element using the set() method on the AtomicLongArray.,"[('set()', 'method of', 'AtomicLongArray'), ('set()', 'sets value of', 'element')]"
Calling addAndGet() is also an atomic operation (like all operations on the AtomicLongArray).,"[('addAndGet()', 'is a', 'atomic operation'), ('all operations on the AtomicLongArray', 'are', 'atomic operation')]"
You should check out the JavaDoc for the AtomicLongArray class to learn more about those methods.,"[('JavaDoc', 'provides information about', 'AtomicLongArray class'), ('AtomicLongArray class', 'has', 'methods')]"
The AtomicReference class provides an object reference variable which can be read and written atomically.,"[('AtomicReference class', 'provides', 'object reference variable'), ('object reference variable', 'can be', 'read'), ('object reference variable', 'can be', 'written'), ('read', 'manner', 'atomically'), ('written', 'manner', 'atomically')]"
By atomic is meant that multiple threads attempting to change the same AtomicReference (e.g.,"[('multiple threads', 'attempt to change', 'AtomicReference')]"
"AtomicReference even has an advanced compareAndSet() method which lets you compare the reference to an expected value (reference) and if they are equal, set a new reference inside the AtomicReference object.","[('AtomicReference', 'has method', 'compareAndSet()'), ('compareAndSet()', 'lets you compare', 'reference'), ('compareAndSet()', 'lets you compare', 'expected value'), ('compareAndSet()', 'set', 'new reference'), ('new reference', 'inside', 'AtomicReference object')]"
You can get the reference stored in an AtomicReference using the AtomicReference's get() method.,"[('AtomicReference', 'has method', 'get()'), ('get()', 'retrieves', 'reference')]"
If you have an untyped AtomicReference then the get() method returns an Object reference.,"[('untyped AtomicReference', 'has method', 'get()'), ('get()', 'returns', 'Object reference')]"
If you have a typed AtomicReference then get() returns a reference to the type you declared on the AtomicReference variable when you created it.,"[('AtomicReference', 'has method', 'get()'), ('get()', 'returns', 'reference'), ('reference', 'type', 'declared on AtomicReference variable')]"
Notice how it is necessary to cast the reference returned by get() to a String because get() returns an Object reference when the AtomicReference is untyped.,"[('get()', 'returns', 'Object reference'), ('reference', 'cast to', 'String'), ('AtomicReference', 'is', 'untyped')]"
Notice how it is no longer necessary to cast the referenced returned by get() because the compiler knows it will return a String reference.,"[('get()', 'returns', 'String reference'), ('compiler', 'knows', 'get() returns String reference')]"
You can set the reference stored in an AtomicReference instance using its set() method.,"[('AtomicReference instance', 'has method', 'set()'), ('set()', 'used for', 'set the reference')]"
In an untyped AtomicReference instance the set() method takes an Object reference as parameter.,"[('untyped AtomicReference instance', 'method', 'set()'), ('set()', 'takes parameter', 'Object reference')]"
In a typed AtomicReference the set() method takes whatever type as parameter you declared as its type when you declared the AtomicReference.,"[('set() method', 'takes parameter', 'type'), ('type', 'declared as', 'AtomicReference')]"
There is no difference to see in the use of the set() method for an untyped or typed reference.,"[('set() method', 'used for', 'untyped reference'), ('set() method', 'used for', 'typed reference')]"
"The compareAndSet() method can compare the reference stored in the AtomicReference instance with an expected reference, and if they two references are the same (not equal as in equals() but same as in ==), then a new reference can be set on the AtomicReference instance.","[('compareAndSet()', 'method of', 'AtomicReference'), ('compareAndSet()', 'compares', 'reference stored in AtomicReference'), ('compareAndSet()', 'compares with', 'expected reference'), ('compareAndSet()', 'sets', 'new reference on AtomicReference'), ('reference stored in AtomicReference', 'compared with', 'expected reference'), ('two references', 'are same as in', '==')]"
If compareAndSet() sets a new reference in the AtomicReference the compareAndSet() method returns true.,"[('compareAndSet()', 'sets new reference in', 'AtomicReference'), ('compareAndSet()', 'method returns', 'true')]"
"Then it calls comparesAndSet() two times to compare the stored reference to the initial reference, and set a new reference if the stored reference is equal to the initial reference.","[('it', 'calls', 'comparesAndSet()'), ('comparesAndSet()', 'compares', 'stored reference'), ('comparesAndSet()', 'compares', 'initial reference'), ('comparesAndSet()', 'sets', 'new reference'), ('stored reference', 'is equal to', 'initial reference')]"
"The second time the stored reference is the new reference just set in the call to compareAndSet() before, so the stored reference is of course not equal to the initial reference.","[('stored reference', 'is', 'new reference'), ('new reference', 'set in', 'call to compareAndSet()'), ('stored reference', 'not equal to', 'initial reference')]"
"Thus, a new reference is not set on the AtomicReference and the compareAndSet() method returns false.","[('compareAndSet()', 'returns', 'false'), ('new reference', 'is not set on', 'AtomicReference')]"
The AtomicReferenceArray in the java.util.concurrent.atomic package is an array of object references which can be updated atomically.,"[('AtomicReferenceArray', 'part of', 'java.util.concurrent.atomic package'), ('AtomicReferenceArray', 'is a', 'array of object references'), ('array of object references', 'can be', 'updated atomically')]"
"The second constructor takes a E[] array as parameter, where E is the type (class) of the object references.","[('second constructor', 'takes', 'E[] array'), ('E[] array', 'parameter of', 'second constructor'), ('E', 'type of', 'object references')]"
The get() method returns the value of the element with the given index.,"[('get() method', 'returns', 'value of the element with the given index')]"
"If the AtomicReferenceArray has a generic type, the get() method returns objects of that type.","[('AtomicReferenceArray', 'has generic type', 'generic type'), ('get() method', 'returns objects of type', 'generic type')]"
"For instance, if the generic type is String, then you can call get() like this:","[('generic type', 'example of', 'String')]"
The set() method sets the value of an element with a specific index.,"[('set() method', 'sets value of', 'element'), ('element', 'has attribute', 'specific index')]"
The index and value is passed as parameters to the set() method.,"[('index', 'is passed as parameter to', 'set() method'), ('value', 'is passed as parameter to', 'set() method')]"
"The compareAndSet() method of the AtomicReferenceArray can compare the current reference stored in a given element with an expected reference, and if the references are the same, swap the current reference with a new reference.","[('compareAndSet()', 'method of', 'AtomicReferenceArray'), ('compareAndSet()', 'compares', 'current reference'), ('current reference', 'stored in', 'given element'), ('compareAndSet()', 'compares', 'expected reference'), ('current reference', 'swapped with', 'new reference'), ('references', 'are the same', 'swap occurs')]"
You should check out the JavaDoc for the AtomicReferenceArray class to learn more about those methods.,"[('JavaDoc', 'provides information about', 'AtomicReferenceArray class'), ('AtomicReferenceArray class', 'has', 'methods')]"
The AtomicStampedReference class provides an object reference variable which can be read and written atomically.,"[('AtomicStampedReference', 'provides', 'object reference variable'), ('object reference variable', 'can be', 'read atomically'), ('object reference variable', 'can be', 'written atomically')]"
"The reference and stamp can be swapped using a single atomic compare-and-swap operation, via the compareAndSet() method.","[('reference', 'can be swapped using', 'single atomic compare-and-swap operation'), ('stamp', 'can be swapped using', 'single atomic compare-and-swap operation'), ('single atomic compare-and-swap operation', 'via', 'compareAndSet() method')]"
You can get the reference stored in an AtomicStampedReference using the AtomicStampedReference's getReference() method.,"[('AtomicStampedReference', 'has method', 'getReference()'), ('getReference()', 'retrieves', 'reference')]"
If you have an untyped AtomicStampedReference then the getReference() method returns an Object reference.,"[('untyped AtomicStampedReference', 'has method', 'getReference()'), ('getReference()', 'returns', 'Object reference')]"
If you have a typed AtomicStampedReference then getReference() returns a reference to the type you declared on the AtomicStampedReference variable when you created it.,"[('AtomicStampedReference', 'has method', 'getReference()'), ('getReference()', 'returns', 'reference'), ('reference', 'has type', 'type declared on AtomicStampedReference')]"
Notice how it is necessary to cast the reference returned by getReference() to a String because getReference() returns an Object reference when the AtomicStampedReference is untyped.,"[('getReference()', 'returns', 'Object reference'), ('reference', 'cast to', 'String'), ('AtomicStampedReference', 'is', 'untyped')]"
Notice how it is no longer necessary to cast the referenced returned by getReference() because the compiler knows it will return a String reference.,"[('getReference()', 'returns', 'String reference'), ('compiler', 'knows', 'getReference() returns String reference')]"
The AtomicStampedReference also contains a getStamp() method which can be used to obtain the internally stored stamp.,"[('AtomicStampedReference', 'contains', 'getStamp() method'), ('getStamp() method', 'used to obtain', 'internally stored stamp')]"
"You can obtain both reference and stamp from an AtomicStampedReference in a single, atomic operation using the get() method.","[('AtomicStampedReference', 'provides method', 'get()'), ('get()', 'operation type', 'atomic'), ('get()', 'returns', 'reference'), ('get()', 'returns', 'stamp')]"
The get() method returns the reference as return value from the method.,"[('get() method', 'returns', 'reference'), ('reference', 'is', 'return value'), ('return value', 'from', 'method')]"
The stamp is inserted into an int[] array that is passed as parameter to the get() method.,"[('stamp', 'inserted into', 'int[] array'), ('int[] array', 'passed as parameter to', 'get() method')]"
You can set the reference stored in an AtomicStampedReference instance using its set() method.,"[('AtomicStampedReference', 'has method', 'set()'), ('set()', 'used for', 'set the reference')]"
In an untyped AtomicStampedReference instance the set() method takes an Object reference as first parameter.,"[('untyped AtomicStampedReference instance', 'method', 'set()'), ('set()', 'takes', 'Object reference'), ('Object reference', 'parameter of', 'set()')]"
In a typed AtomicStampedReference the set() method takes whatever type as parameter you declared as its type when you declared the AtomicStampedReference.,"[('AtomicStampedReference', 'has method', 'set()'), ('set()', 'takes parameter type', 'whatever type'), ('AtomicStampedReference', 'declared as type', 'whatever type')]"
"The compareAndSet() method can compare the reference stored in the AtomicStampedReference instance with an expected reference, and the stored stamp with an expected stamp, and if they two references and stamps are the same (not equal as in equals() but same as in ==), then a new reference can be set on the AtomicStampedReference instance.","[('compareAndSet()', 'method of', 'AtomicStampedReference'), ('compareAndSet()', 'compares', 'reference'), ('compareAndSet()', 'compares', 'stamp'), ('reference', 'stored in', 'AtomicStampedReference'), ('stamp', 'stored in', 'AtomicStampedReference'), ('compareAndSet()', 'compares with', 'expected reference'), ('compareAndSet()', 'compares with', 'expected stamp'), ('references', 'compared as', '=='), ('stamps', 'compared as', '=='), ('new reference', 'can be set on', 'AtomicStampedReference')]"
If compareAndSet() sets a new reference in the AtomicStampedReference the compareAndSet() method returns true.,"[('compareAndSet()', 'sets new reference in', 'AtomicStampedReference'), ('compareAndSet()', 'method returns', 'true')]"
This example first creates an AtomicStampedReference and then uses compareAndSet() to swap the reference and stamp.,"[('example', 'creates', 'AtomicStampedReference'), ('example', 'uses', 'compareAndSet()'), ('compareAndSet()', 'swaps', 'reference'), ('compareAndSet()', 'swaps', 'stamp')]"
After the first compareAndSet() call the example attempts to swap the reference and stamp two times without success.,"[('example', 'attempts to swap', 'reference'), ('example', 'attempts to swap', 'stamp'), ('compareAndSet() call', 'precedes', 'attempts to swap')]"
"The first time the initialRef is passed as expected reference, but the internally stored reference is newRef at this time, so the compareAndSet() call fails.","[('initialRef', 'passed as', 'expected reference'), ('internally stored reference', 'is', 'newRef')]"
"The second time the initialStamp is passed as the expected stamp, but the internally stored stamp is newStamp at this time, so the compareAndSet() call fails.","[('initialStamp', 'passed as', 'expected stamp'), ('internally stored stamp', 'is', 'newStamp')]"
"The final compareAndSet() call will succeed, because the expected reference is newRef and the expected stamp is newStamp.","[('compareAndSet() call', 'will succeed', 'final compareAndSet() call'), ('expected reference', 'is', 'newRef'), ('expected stamp', 'is', 'newStamp')]"
Thread 1 can copy the reference and stamp out of the AtomicStampedReference atomically using get().,"[('Thread 1', 'can copy', 'reference'), ('Thread 1', 'can copy', 'stamp'), ('reference', 'part of', 'AtomicStampedReference'), ('stamp', 'part of', 'AtomicStampedReference'), ('Thread 1', 'uses', 'get()')]"
"If another thread changes the reference from A to B and then back to A, then the stamp will have changed (provided threads update the stamp sensibly - e.g increment it).","[('another thread', 'changes reference from', 'A'), ('another thread', 'changes reference to', 'B'), ('another thread', 'changes reference back to', 'A')]"
"The BlockingDeque interface in the java.util.concurrent class represents a deque which is thread safe to put into, and take instances from.","[('BlockingDeque', 'part of', 'java.util.concurrent'), ('BlockingDeque', 'represents', 'deque'), ('deque', 'is', 'thread safe')]"
"The BlockingDeque class is a Deque which blocks threads tring to insert or remove elements from the deque, in case it is either not possible to insert or remove elements from the deque.","[('BlockingDeque', 'is a', 'Deque'), ('BlockingDeque', 'blocks', 'threads'), ('threads', 'try to insert elements into', 'BlockingDeque'), ('threads', 'try to remove elements from', 'BlockingDeque')]"
The java.util.concurrent package has the following implementations of the BlockingDeque interface:,"[('java.util.concurrent package', 'has implementation', 'BlockingDeque interface')]"
The java.util.concurrent.ConcurrentMap interface represents a Map which is capable of handling concurrent access (puts and gets) to it.,"[('java.util.concurrent.ConcurrentMap', 'represents', 'Map'), ('java.util.concurrent.ConcurrentMap', 'capable of', 'handling concurrent access'), ('handling concurrent access', 'includes', 'puts'), ('handling concurrent access', 'includes', 'gets')]"
"The ConcurrentMap has a few extra atomic methods in addition to the methods it inherits from its superinterface, java.util.Map.","[('ConcurrentMap', 'has extra methods', 'atomic methods'), ('ConcurrentMap', 'inherits methods from', 'java.util.Map'), ('java.util.Map', 'superinterface of', 'ConcurrentMap')]"
The java.util.concurrent package contains the following implementations of the ConcurrentMap interface:,"[('java.util.concurrent package', 'contains implementation', 'ConcurrentMap interface')]"
"The ConcurrentHashMap is very similar to the java.util.HashTable class, except that ConcurrentHashMap offers better concurrency than HashTable does.","[('ConcurrentHashMap', 'is similar to', 'java.util.HashTable'), ('ConcurrentHashMap', 'offers', 'better concurrency'), ('ConcurrentHashMap', 'offers better concurrency than', 'HashTable')]"
"The java.util.concurrent.ConcurrentNavigableMap class is a java.util.NavigableMap with support for concurrent access, and which has concurrent access enabled for its submaps.","[('java.util.concurrent.ConcurrentNavigableMap', 'is a', 'java.util.NavigableMap'), ('java.util.concurrent.ConcurrentNavigableMap', 'supports', 'concurrent access'), ('java.util.concurrent.ConcurrentNavigableMap', 'has', 'concurrent access enabled for its submaps')]"
"The ""submaps"" are the maps returned by various methods like headMap(), subMap() and tailMap().",
Here is an example illustrating the use of the headMap() method.,"[('example', 'illustrates', 'use of the headMap() method')]"
Here is an example illustrating the use of the tailMap() method:,"[('example', 'illustrates', 'use of the tailMap() method')]"
"The subMap() method returns a view of the original map which contains all keys from (including), to (excluding) two keys given as parameters to the method.","[('subMap() method', 'returns', 'view of the original map'), ('view of the original map', 'contains', 'all keys from (including), to (excluding) two keys'), ('two keys', 'given as parameters to', 'the method')]"
A java.util.concurrent.CountDownLatch is a concurrency construct that allows one or more threads to wait for a given set of operations to complete.,"[('java.util.concurrent.CountDownLatch', 'is a', 'concurrency construct'), ('concurrency construct', 'allows', 'threads to wait for operations to complete')]"
Threads waiting for this count to reach zero can call one of the await() methods.,"[('Threads', 'can call', 'await() methods'), ('Threads', 'waiting for', 'count to reach zero')]"
"After the Decrementer has called countDown() 3 times on the CountDownLatch, the waiting Waiter is released from the await() call.","[('Decrementer', 'calls', 'countDown()'), ('countDown()', 'called times', '3'), ('CountDownLatch', 'receives call', 'countDown()'), ('Waiter', 'is released from', 'await() call')]"
The java.util.concurrent.CyclicBarrier class is a synchronization mechanism that can synchronize threads progressing through some algorithm.,"[('java.util.concurrent.CyclicBarrier', 'is a', 'synchronization mechanism'), ('synchronization mechanism', 'can synchronize', 'threads'), ('threads', 'progressing through', 'algorithm')]"
The threads wait for each other by calling the await() method on the CyclicBarrier.,"[('threads', 'wait for each other by calling', 'await() method'), ('await() method', 'called on', 'CyclicBarrier')]"
The value returned by the getDelay() method should be the delay remaining before this element can be released.,"[('getDelay() method', 'returns', 'value'), ('value', 'should be', 'delay remaining'), ('delay remaining', 'before', 'element can be released')]"
"If 0 or a negative value is returned, the delay will be considered expired, and the element released at the next take() etc.","[('0 or a negative value', 'is returned', 'delay considered expired'), ('delay', 'will be considered', 'expired'), ('element', 'released at', 'next take()')]"
The TimeUnit instance passed to the getDelay() method is an Enum that tells which time unit the delay should be returned in.,"[('TimeUnit instance', 'passed to method', 'getDelay()'), ('TimeUnit instance', 'is a', 'Enum'), ('Enum', 'tells', 'time unit'), ('time unit', 'determines', 'delay return unit')]"
"The Delayed interface also extends the java.lang.Comparable interface, as you can see, which means that Delayed objects can be compared to each other.","[('Delayed interface', 'extends', 'java.lang.Comparable interface'), ('Delayed objects', 'can be compared to', 'each other')]"
You will have to create your own implementation of the Delayed interface to use the DelayQueue class.,"[('Delayed interface', 'used by', 'DelayQueue class'), ('You', 'create implementation of', 'Delayed interface')]"
The java.util.concurrent.Exchanger class represents a kind of rendezvous point where two threads can exchange objects.,"[('java.util.concurrent.Exchanger', 'represents', 'rendezvous point'), ('rendezvous point', 'allows', 'threads to exchange objects')]"
Exchanging objects is done via one of the two exchange() methods.,"[('Exchanging objects', 'is done via', 'exchange() methods'), ('exchange() methods', 'quantity', 'two')]"
"The Java BlockingQueue interface, java.util.concurrent.BlockingQueue, represents a queue which is thread safe to put elements into, and take elements out of from.","[('Java BlockingQueue interface', 'part of', 'java.util.concurrent.BlockingQueue'), ('java.util.concurrent.BlockingQueue', 'represents', 'queue'), ('queue', 'is', 'thread safe')]"
The java.util.concurrent package has the following implementations of the BlockingQueue interface:,"[('java.util.concurrent package', 'has implementation', 'BlockingQueue interface')]"
"First, the BlockingQueueExample class which starts a Producer and a Consumer in separate threads.","[('BlockingQueueExample class', 'starts', 'Producer'), ('BlockingQueueExample class', 'starts', 'Consumer'), ('Producer', 'runs in', 'separate threads'), ('Consumer', 'runs in', 'separate threads')]"
"It just takes out the objects from the queue, and prints them to System.out.","[('It', 'takes out', 'objects'), ('It', 'prints', 'objects'), ('objects', 'from', 'queue'), ('objects', 'to', 'System.out')]"
The Java BlockingQueue add() method will add the element passed as parameter to this method if the BlockingQueue has space for it internally.,"[('Java BlockingQueue', 'method', 'add()'), ('add()', 'adds element', 'parameter'), ('BlockingQueue', 'has space for', 'element')]"
"If the BlockingQueue does not have space internally for this new element, the add() method throws an IllegalStateException.","[('BlockingQueue', 'method', 'add()'), ('add()', 'throws', 'IllegalStateException'), ('BlockingQueue', 'does not have space for', 'new element')]"
The BlockingQueue offer() method will add the element passed as parameter to this method if the BlockingQueue has space for it internally.,"[('BlockingQueue', 'has method', 'offer()'), ('offer()', 'adds element', 'parameter'), ('BlockingQueue', 'has space for', 'element')]"
"If the BlockingQueue does not have space internally for this new element, the offer() method return false.","[('BlockingQueue', 'has method', 'offer()'), ('offer()', 'returns', 'false'), ('BlockingQueue', 'does not have', 'space internally for new element')]"
The BlockingQueue offer() method exists in a version which takes a time out as parameter.,"[('BlockingQueue offer() method', 'exists in version', 'version which takes a time out as parameter')]"
"This version of the offer() method will add the element passed as parameter if the BlockingQueue has space for it internally, or space becomes available.","[('offer() method', 'adds', 'element'), ('element', 'passed as', 'parameter'), ('BlockingQueue', 'has space for', 'element'), ('space', 'becomes', 'available')]"
"If the BlockingQueue does not have or get space internally for this new element within the time out, this version of the offer() method returns false.","[('BlockingQueue', 'does not have space for', 'new element'), ('BlockingQueue', 'does not get space for', 'new element'), ('offer() method', 'returns', 'false')]"
The BlockingQueue put() method inserts the element into the BlockingQueue if it has space for it internally.,"[('BlockingQueue', 'has method', 'put()'), ('put()', 'inserts element into', 'BlockingQueue'), ('BlockingQueue', 'has space for', 'element')]"
"If the BlockingQueue does not have space for the new element, the put() method will block the thread calling the put() method until the BlockingQueue as space internally for the new element.","[('BlockingQueue', 'method', 'put()'), ('put()', 'action', 'block thread'), ('BlockingQueue', 'has space for', 'new element'), ('put()', 'waits until', 'BlockingQueue has space')]"
The Java BlockingQueue take() method will remove the first element in the BlockingQueue.,"[('Java BlockingQueue', 'method', 'take()'), ('take()', 'action', 'remove'), ('remove', 'object', 'first element'), ('first element', 'located in', 'BlockingQueue')]"
"If the BlockingQueue does not contain any elements, the take() method will block the thread calling take() until an element is inserted into the BlockingQueue.","[('BlockingQueue', 'does not contain', 'elements'), ('take() method', 'will block', 'thread'), ('thread', 'calls', 'take()'), ('element', 'is inserted into', 'BlockingQueue')]"
The BlockingQueue poll() method will remove the first element in the BlockingQueue.,"[('BlockingQueue', 'method', 'poll()'), ('poll()', 'removes', 'first element'), ('first element', 'located in', 'BlockingQueue')]"
"If the BlockingQueue does not contain any elements, the poll() method will return null.","[('BlockingQueue', 'does not contain', 'elements'), ('poll() method', 'will return', nan)]"
"If the BlockingQueue does not contain any elements, this version of the poll() method will wait for an element to become available for the given amount of time passed to it as parameter.","[('BlockingQueue', 'does not contain', 'elements'), ('poll() method', 'waits for', 'element'), ('amount of time', 'passed to', 'poll() method')]"
The remove() method will use the o.equals(element) to decide if the object o passed as parameter matches a given element in the BlockingQueue.,"[('remove() method', 'uses', 'o.equals(element)'), ('o.equals(element)', 'decides if', 'object o matches a given element'), ('object o', 'passed as', 'parameter'), ('object o', 'matches', 'given element'), ('given element', 'in', 'BlockingQueue')]"
"The remove() method will return true if an element was removed, and false if not.","[('remove() method', 'will return', 'true if an element was removed'), ('remove() method', 'will return', 'false if not')]"
The BlockingQueue peek() method will return the first element of the BlockingQueue without removing it.,"[('BlockingQueue', 'has method', 'peek()'), ('peek()', 'returns', 'first element of BlockingQueue'), ('peek()', 'does not remove', 'first element of BlockingQueue')]"
"If the BlockingQueue does not contain any elements, the peek() method will return null.","[('BlockingQueue', 'does not contain', 'elements'), ('peek() method', 'will return', nan)]"
The BlockingQueue element() method will return the first element of the BlockingQueue without removing it.,"[('BlockingQueue', 'method', 'element()'), ('element()', 'returns', 'first element of BlockingQueue'), ('element()', 'does not remove', 'first element of BlockingQueue')]"
"If the BlockingQueue does not contain any elements, the element() method will throw a NoSuchElementException.","[('BlockingQueue', 'does not contain', 'elements'), ('element() method', 'will throw', 'NoSuchElementException')]"
The BlockingQueue contains(Object o) method will return true if the BlockingQueue contains an object matching the object passed as parameter to the contains() method.,"[('BlockingQueue', 'has method', 'contains(Object o)'), ('contains(Object o)', 'returns', 'true'), ('BlockingQueue', 'contains', 'object'), ('object', 'matches', 'object passed as parameter')]"
"The Objects.equals(o, element) statement is used to check if the parameter object o matches a given element in the BlockingQueue.","[('Objects.equals(o, element)', 'used to', 'check if the parameter object o matches a given element'), ('parameter object o', 'matches', 'given element'), ('given element', 'located in', 'BlockingQueue')]"
The BlockingQueue size() method returns the number of elements stored in BlockingQueue.,"[('BlockingQueue', 'has method', 'size()'), ('size()', 'returns', 'number of elements'), ('number of elements', 'stored in', 'BlockingQueue')]"
The BlockingQueue remainingCapacity() method returns the remaining (unused) capacity of the BlockingQueue.,"[('BlockingQueue', 'has method', 'remainingCapacity()'), ('remainingCapacity()', 'returns', 'remaining (unused) capacity'), ('remaining (unused) capacity', 'of', 'BlockingQueue')]"
"The Java Callable interface, java.util.concurrent.Callable, represents an asynchronous task which can be executed by a separate thread.","[('Java Callable interface', 'is represented by', 'java.util.concurrent.Callable'), ('Java Callable interface', 'represents', 'asynchronous task'), ('asynchronous task', 'can be executed by', 'separate thread')]"
The call() method is called in order to execute the asynchronous task.,"[('call() method', 'is called to', 'execute asynchronous task')]"
The call() method can also thrown an Exception in case the task fails during execution.,"[('call() method', 'can throw', 'Exception'), ('task', 'fails during', 'execution')]"
The result of that is that the call() method will return a String.,"[('call() method', 'will return', 'String')]"
The call() implementation just returns a String representation of the current time in milliseconds.,"[('call() implementation', 'returns', 'String representation of the current time in milliseconds')]"
"A Java Callable is different from a Runnable in that the Runnable interface's run() method does not return a value, and it cannot throw checked exceptions (only RuntimeExceptions).","[('Java Callable', 'is different from', 'Runnable'), ('Runnable', 'has method', 'run()'), ('run()', 'does not return', 'value'), ('run()', 'cannot throw', 'checked exceptions'), ('run()', 'can throw', 'RuntimeExceptions')]"
"Additionally, a Runnable was originally designed for long running concurrent execution, e.g.","[('Runnable', 'designed for', 'long running concurrent execution')]"
"Java 5 added a new Java package to the Java platform, the java.util.concurrent package.","[('Java 5', 'added package to platform', 'Java platform'), ('Java platform', 'contains package', 'java.util.concurrent package')]"
This package contains a set of classes that makes it easier to develop concurrent (multithreaded) applications in Java.,"[('This package', 'contains', 'a set of classes'), ('a set of classes', 'makes it easier to develop', 'concurrent (multithreaded) applications'), ('concurrent (multithreaded) applications', 'developed in', 'Java')]"
"Before this package was added, you would have to program your utility classes yourself.","[('this package', 'added before', 'program your utility classes yourself')]"
"In this tutorial I will take you through the new java.util.concurrent classes, one by one, so you can learn how to use them.","[('tutorial', 'includes', 'java.util.concurrent classes'), ('java.util.concurrent classes', 'used in', 'tutorial')]"
Here is a list of the topics covered in this java.util.concurrent trail.,"[('java.util.concurrent trail', 'covers topic', 'list of topics')]"
"If you disagree with anything I write here about the java.util.concurrent utilities, or just have comments, questions, etc, feel free to send me an email.","[('you', 'disagree with', 'anything I write here about the java.util.concurrent utilities'), ('you', 'have', 'comments'), ('you', 'have', 'questions'), ('you', 'feel free to send', 'me an email')]"
"The Java ExecutorService interface, java.util.concurrent.ExecutorService, represents an asynchronous execution mechanism which is capable of executing tasks concurrently in the background.","[('Java ExecutorService interface', 'part of', 'java.util.concurrent.ExecutorService'), ('Java ExecutorService interface', 'represents', 'asynchronous execution mechanism'), ('asynchronous execution mechanism', 'capable of', 'executing tasks concurrently in the background')]"
First an ExecutorService is created using the Executors newFixedThreadPool() factory method.,"[('ExecutorService', 'is created using', 'Executors newFixedThreadPool() factory method')]"
"Second, an anonymous implementation of the Runnable interface is passed to the execute() method.","[('Anonymous implementation of the Runnable interface', 'is passed to', 'execute() method'), ('Anonymous implementation', 'implements', 'Runnable interface')]"
"In fact, the implementation of the ExecutorService interface present in the java.util.concurrent package is a thread pool implementation.","[('ExecutorService interface', 'present in', 'java.util.concurrent package'), ('ExecutorService interface', 'is a', 'thread pool implementation')]"
"However, you can use the Executors factory class to create ExecutorService instances too.","[('Executors factory class', 'can create', 'ExecutorService instances')]"
"The Java ExecutorService execute(Runnable) method takes a java.lang.Runnable object, and executes it asynchronously.","[('Java ExecutorService', 'method', 'execute(Runnable)'), ('execute(Runnable)', 'takes', 'java.lang.Runnable object'), ('execute(Runnable)', 'executes', 'java.lang.Runnable object'), ('execute(Runnable)', 'executes', 'asynchronously')]"
The submit() method returns a Java Future object which can be used to check when the Runnable has completed.,"[('submit() method', 'returns', 'Java Future object'), ('Java Future object', 'used to check', 'Runnable completion')]"
"The invokeAny() method takes a collection of Callable objects, or subinterfaces of Callable.","[('invokeAny() method', 'takes', 'collection of Callable objects'), ('collection of Callable objects', 'includes', 'subinterfaces of Callable')]"
"If one Callable finishes, so that a result is returned from invokeAny(), then the rest of the Callable instances are cancelled.","[('Callable', 'returns result from', 'invokeAny()'), ('invokeAny()', 'cancels', 'Callable instances')]"
The invokeAll() method invokes all of the Callable objects you pass to it in the collection passed as parameter.,"[('invokeAll() method', 'invokes', 'Callable objects'), ('Callable objects', 'passed to', 'invokeAll() method'), ('collection', 'passed as parameter to', 'invokeAll() method')]"
The invokeAll() returns a list of Future objects via which you can obtain the results of the executions of each Callable.,"[('invokeAll()', 'returns', 'list of Future objects'), ('list of Future objects', 'obtain results of', 'executions of each Callable')]"
The main difference between the Runnable run() method and the Callable call() method is that the call() method can return an Object from the method call.,"[('Runnable run() method', 'difference with', 'Callable call() method'), ('Callable call() method', 'can return', 'Object')]"
"Another difference between call() and run() is that call() can throw an exception, whereas run() cannot (except for unchecked exceptions - subclasses of RuntimeException).","[('call()', 'can throw', 'exception'), ('run()', 'cannot throw', 'exception'), ('unchecked exceptions', 'are', 'subclasses of RuntimeException')]"
You can cancel a task (Runnable or Callable) submitted to a Java ExecutorService by calling the cancel() method on the Future returned when the task is submitted.,"[('task', 'type', 'Runnable'), ('task', 'type', 'Callable'), ('task', 'submitted to', 'Java ExecutorService'), ('Java ExecutorService', 'returns', 'Future'), ('Future', 'method', 'cancel()'), ('cancel()', 'action', 'cancel task')]"
Here is an example of cancelling a task by calling the Future.cancel() method:,"[('Future', 'has method', 'cancel()'), ('cancel()', 'used for', 'cancelling a task')]"
"If your application is started via a main() method and your main thread exits your application, the application will keep running if you have an active ExexutorService in your application.","[('application', 'started via', 'main() method'), ('main thread', 'exits', 'application'), ('application', 'keeps running if', 'active ExecutorService')]"
To terminate the threads inside the ExecutorService you call its shutdown() method.,"[('ExecutorService', 'has method', 'shutdown()'), ('shutdown()', 'terminates', 'threads')]"
"All tasks submitted to the ExecutorService before shutdown() is called, are executed.","[('tasks', 'submitted to', 'ExecutorService'), ('tasks', 'executed before', 'shutdown() is called')]"
"If you want to shut down the ExecutorService immediately, you can call the shutdownNow() method.","[('ExecutorService', 'can be shut down by', 'shutdownNow() method')]"
"The ExecutorService awaitTermination() method will block the thread calling it until either the ExecutorService has shutdown completely, or until a given time out occurs.","[('ExecutorService', 'has method', 'awaitTermination()'), ('awaitTermination()', 'blocks', 'thread'), ('thread', 'calls', 'awaitTermination()'), ('ExecutorService', 'shutdown completely', 'condition'), ('given time out', 'occurs', 'condition')]"
The awaitTermination() method is typically called after calling shutdown() or shutdownNow().,"[('awaitTermination()', 'is called after', 'shutdown()'), ('awaitTermination()', 'is called after', 'shutdownNow()')]"
"The ForkJoinPool located in the java.util.concurrent package, so the full class name is java.util.concurrent.ForkJoinPool.","[('ForkJoinPool', 'located in', 'java.util.concurrent package'), ('ForkJoinPool', 'full class name', 'java.util.concurrent.ForkJoinPool')]"
These two types of tasks are represented by the RecursiveAction and RecursiveTask classes.,"[('RecursiveAction', 'represents', 'type of task'), ('RecursiveTask', 'represents', 'type of task')]"
"If the workLoad is above a certain threshold, the work is split into subtasks which are also scheduled for execution (via the .fork() method of the subtasks.","[('workLoad', 'is above', 'certain threshold'), ('work', 'is split into', 'subtasks'), ('subtasks', 'are scheduled for', 'execution'), ('execution', 'via method', '.fork()'), ('.fork()', 'method of', 'subtasks')]"
The class MyRecursiveTask extends RecursiveTask<Long> which means that the result returned from the task is a Long .,"[('MyRecursiveTask', 'extends', 'RecursiveTask<Long>'), ('MyRecursiveTask', 'returns', 'Long')]"
"The MyRecursiveTask example also breaks the work down into subtasks, and schedules these subtasks for execution using their fork() method.","[('The MyRecursiveTask example', 'breaks down work into', 'subtasks'), ('The MyRecursiveTask example', 'schedules', 'subtasks'), ('subtasks', 'scheduled for execution using', 'fork() method')]"
"Additionally, this example then receives the result returned by each subtask by calling the join() method of each subtask.","[('example', 'receives', 'result'), ('result', 'returned by', 'subtask'), ('example', 'calls', 'join() method'), ('join() method', 'of', 'subtask')]"
Notice how you get the final result out from the ForkJoinPool.invoke() method call.,"[('ForkJoinPool', 'method', 'invoke()'), ('invoke()', 'produces', 'final result')]"
"A Java Future, java.util.concurrent.Future, represents the result of an asynchronous computation.","[('Java Future', 'is represented by', 'java.util.concurrent.Future'), ('java.util.concurrent.Future', 'represents', 'result of an asynchronous computation')]"
"To obtain the result, you call one of the two get() methods on the Future.","[('you', 'call', 'get() methods'), ('get() methods', 'part of', 'Future')]"
"The get() methods both return an Object, but the return type can also be a generic return type (meaning an object of a specific class, and not just an Object).","[('get() methods', 'return', 'Object'), ('return type', 'can be', 'generic return type'), ('generic return type', 'means', 'object of a specific class'), ('generic return type', 'is not', 'just an Object')]"
Here is an example of obtaining the result from a Java Future via its get() method:,"[('Java Future', 'has method', 'get()'), ('get()', 'used for', 'obtaining the result')]"
"If you call the get() method before the asynchronous task has completed, the get() method will block until the result is ready.","[('get() method', 'called before', 'asynchronous task completed'), ('get() method', 'will block until', 'result is ready')]"
There is a version of the get() method which can time out after an amount of time has passed which you can specify via method parameters.,"[('get() method', 'has version', 'version of get() method'), ('version of get() method', 'can', 'time out'), ('time out', 'occurs after', 'amount of time'), ('amount of time', 'specified via', 'method parameters')]"
You can cancel the asynchronous task represented by a Java Future instance by calling the Future cancel() method.,"[('Java Future instance', 'represents', 'asynchronous task'), ('Future cancel() method', 'cancels', 'asynchronous task')]"
Here is an example of canceling a task via the Java Future cancel() method:,"[('Java Future', 'has method', 'cancel()'), ('cancel()', 'used for', 'canceling a task')]"
You can check if the asynchronous task is done (and a result available) by calling the Future isDone() method.,"[('asynchronous task', 'checked by', 'calling the Future isDone() method'), ('result', 'available by', 'calling the Future isDone() method')]"
Here is an example of calling the Java Future isDone() method:,"[('Java Future', 'has method', 'isDone()')]"
"The Java Lock interface, java.util.concurrent.locks.Lock, represents a concurrent lock which can be used to guard against race conditions inside critical sections.","[('Java Lock interface', 'is represented by', 'java.util.concurrent.locks.Lock'), ('java.util.concurrent.locks.Lock', 'is a type of', 'concurrent lock'), ('concurrent lock', 'used to guard against', 'race conditions'), ('race conditions', 'occur inside', 'critical sections')]"
You must create an instance of a class that implements the Lock interface.,"[('instance', 'implements', 'Lock interface'), ('class', 'contains', 'instance')]"
The java.util.concurrent.locks package has the following implementations of the Lock interface:,"[('java.util.concurrent.locks package', 'has implementation', 'Lock interface')]"
In the following sections I will explain how to use the ReentrantLock class as a Lock.,"[('ReentrantLock class', 'used as', 'Lock')]"
"To create an instance of the ReentrantLock class you simply use the new operator, like this:","[('ReentrantLock', 'instance creation method', 'new operator')]"
To lock the Lock instance you must call its lock() method.,"[('Lock instance', 'has method', 'lock()'), ('lock()', 'action', 'lock the Lock instance')]"
To unlock the Lock instance you must call its unlock() method.,"[('Lock instance', 'has method', 'unlock()'), ('unlock()', 'action', 'unlock'), ('you', 'must call', 'unlock()')]"
Any other thread calling lock() will be blocked until the thread that locked the lock calls unlock().,"[('Thread', 'calls', 'lock()'), ('Thread', 'will be blocked until', 'thread that locked the lock calls unlock()'), ('Thread', 'locked', 'lock'), ('Thread', 'calls', 'unlock()')]"
"Finally unlock() is called, and the Lock is now unlocked so other threads can lock it.","[('unlock()', 'is called', 'Finally'), ('Lock', 'is now', 'unlocked'), ('other threads', 'can lock', 'Lock')]"
"If you look at the example in the previous section, imagine what happens if an exception is thrown between the call to lock.lock() and lock.unlock() .","[('exception', 'thrown between', 'call to lock.lock()'), ('exception', 'thrown between', 'lock.unlock()')]"
"The exception would interrupt the program flow, and the call to lock.unlock() would never be executed.","[('exception', 'would interrupt', 'program flow'), ('call to lock.unlock()', 'would never be', 'executed')]"
"To better understand how using a Lock looks different from using a synchronized block, I have created two simple concurrent Counter classes which protects their internal count in different ways.","[('Lock', 'used in', 'concurrent Counter classes'), ('synchronized block', 'used in', 'concurrent Counter classes'), ('concurrent Counter classes', 'protects', 'internal count')]"
"The first class uses a synchronized block, and the second class uses a Java Lock:","[('first class', 'uses', 'synchronized block'), ('second class', 'uses', 'Java Lock')]"
Notice that the CounterLock class is longer than the CounterSynchronized class.,"[('CounterLock', 'is longer than', 'CounterSynchronized')]"
"Notice how the calculate() method both locks the Calculator instance's Lock before performing any calculations, and also call the add() and subtract() methods which also locks the lock.","[('calculate() method', 'locks', ""Calculator instance's Lock""), ('calculate() method', 'performs', 'calculations'), ('calculate() method', 'calls', 'add() method'), ('calculate() method', 'calls', 'subtract() method'), ('add() method', 'locks', ""Calculator instance's Lock""), ('subtract() method', 'locks', ""Calculator instance's Lock"")]"
The ReentrantLock class has a constructor that takes a boolean parameter specifying whether the ReentrantLock should provide fairness or not to waiting threads.,"[('ReentrantLock class', 'has constructor', 'constructor'), ('constructor', 'takes parameter', 'boolean parameter'), ('boolean parameter', 'specifies', 'fairness to waiting threads'), ('ReentrantLock', 'provides', 'fairness to waiting threads')]"
"Please note, that the method tryLock() (covered later in this Java Lock tutorial) with no parameters does not respect the fairness mode of the ReentrantLock.","[('tryLock()', 'is a method of', 'ReentrantLock'), ('tryLock()', 'covered in', 'Java Lock tutorial'), ('tryLock()', 'does not respect', 'fairness mode')]"
"If the Lock instance is already locked, the thread calling lock() is blocked until the Lock is unlocked.","[('Lock instance', 'state', 'locked'), ('thread', 'action', 'calling lock()'), ('thread', 'state', 'blocked'), ('Lock', 'state', 'unlocked')]"
The lockInterruptibly() method locks the Lock unless the thread calling the method has been interrupted.,"[('lockInterruptibly() method', 'locks', 'Lock'), ('thread', 'calls', 'lockInterruptibly() method'), ('thread', 'has been', 'interrupted')]"
"The tryLock(long timeout, TimeUnit timeUnit) works like the tryLock() method, except it waits up the given timeout before giving up trying to lock the Lock.","[('tryLock(long timeout, TimeUnit timeUnit)', 'works like', 'tryLock() method'), ('tryLock(long timeout, TimeUnit timeUnit)', 'waits up to', 'given timeout'), ('tryLock(long timeout, TimeUnit timeUnit)', 'tries to lock', 'Lock')]"
The Java ReentrantLock getHoldCount() method returns the number of times a given thread has locked this Lock instance.,"[('Java ReentrantLock', 'has method', 'getHoldCount()'), ('getHoldCount()', 'returns', 'number of times a given thread has locked this Lock instance')]"
The ReentrantLock getQueueLength() method returns the number of threads waiting to lock the Lock.,"[('ReentrantLock', 'has method', 'getQueueLength()'), ('getQueueLength()', 'returns', 'number of threads waiting'), ('threads', 'waiting to lock', 'Lock')]"
"The ReentrantLock hasQueuedThreads() method returns true if any threads are queued up waiting to lock this Lock, and false if not.","[('ReentrantLock', 'has method', 'hasQueuedThreads()'), ('hasQueuedThreads()', 'returns', 'true'), ('hasQueuedThreads()', 'returns', 'false'), ('threads', 'queued up waiting to lock', 'Lock')]"
"The ReentrantLock isFair() method returns true if this Lock guarantees fairness among threads waiting to lock it, and false if not.","[('ReentrantLock', 'has method', 'isFair()'), ('isFair()', 'returns', 'true'), ('isFair()', 'returns', 'false'), ('Lock', 'guarantees', 'fairness among threads')]"
"The ReentrantLock isHeldByCurrentThread() method returns true if the Lock is held (locked) by the thread calling isHeldByCurrentThread(), and false if not.","[('ReentrantLock', 'has method', 'isHeldByCurrentThread()'), ('isHeldByCurrentThread()', 'returns', 'true'), ('Lock', 'is held by', 'thread calling isHeldByCurrentThread()'), ('isHeldByCurrentThread()', 'returns', 'false')]"
"The ReentrantLock isLocked() method returns true if the Lock is currently locked, and false if not.","[('ReentrantLock', 'has method', 'isLocked()'), ('isLocked()', 'returns', 'true'), ('isLocked()', 'returns', 'false'), ('Lock', 'is currently', 'locked')]"
"If no upper bound is specified, Integer.MAX_VALUE is used as the upper bound.","[('upper bound', 'not specified', 'Integer.MAX_VALUE'), ('Integer.MAX_VALUE', 'used as', 'upper bound')]"
All elements inserted into the PriorityBlockingQueue must implement the java.lang.Comparable interface.,"[('elements', 'inserted into', 'PriorityBlockingQueue'), ('elements', 'must implement', 'java.lang.Comparable interface')]"
Notice that the PriorityBlockingQueue does not enforce any specific behaviour for elements that have equal priority (compare() == 0).,"[('PriorityBlockingQueue', 'does not enforce', 'specific behaviour for elements with equal priority'), ('elements with equal priority', 'compare()', '0')]"
"The java.util.concurrent.ScheduledExecutorService is an ExecutorService which can schedule tasks to run after a delay, or to execute repeatedly with a fixed interval of time in between each execution.","[('java.util.concurrent.ScheduledExecutorService', 'is a type of', 'ExecutorService'), ('java.util.concurrent.ScheduledExecutorService', 'can schedule', 'tasks'), ('tasks', 'can run after', 'a delay'), ('tasks', 'can execute repeatedly with', 'a fixed interval of time')]"
Then an anonymous implementation of the Callable interface is created and passed to the schedule() method.,"[('Anonymous implementation', 'implements', 'Callable interface'), ('Anonymous implementation', 'passed to', 'schedule() method')]"
"Since ScheduledExecutorService is an interface, you will have to use its implementation in the java.util.concurrent package, in order to use it.","[('ScheduledExecutorService', 'is a', 'interface'), ('ScheduledExecutorService', 'has implementation in', 'java.util.concurrent package')]"
"However, you can use the Executors factory class to create ScheduledExecutorService instances too.","[('Executors', 'can create', 'ScheduledExecutorService instances'), ('ScheduledExecutorService instances', 'created by', 'Executors')]"
"This method works like the method version taking a Callable as parameter, except a Runnable cannot return a value, so the ScheduledFuture.get() method returns null when the task is finished.","[('method', 'works like', 'method version taking a Callable as parameter'), ('Runnable', 'cannot return', 'value'), ('ScheduledFuture.get() method', 'returns', nan), ('task', 'is finished', nan)]"
This method works very much like scheduleAtFixedRate() except that the period is interpreted differently.,"[('This method', 'works like', 'scheduleAtFixedRate()')]"
"In the scheduleAtFixedRate() method the period is interpreted as a delay between the start of the previous execution, until the start of the next execution.","[('scheduleAtFixedRate() method', 'interprets', 'period as a delay'), ('period', 'is between', 'start of the previous execution'), ('period', 'is until', 'start of the next execution')]"
You shut down a ScheduledExecutorService using the shutdown() or shutdownNow() methods which are inherited from the ExecutorService interface.,"[('ScheduledExecutorService', 'shut down using', 'shutdown()'), ('ScheduledExecutorService', 'shut down using', 'shutdownNow()'), ('shutdown()', 'inherited from', 'ExecutorService'), ('shutdownNow()', 'inherited from', 'ExecutorService')]"
For each call to acquire() a permit is taken by the calling thread.,"[('acquire()', 'action', 'call'), ('permit', 'is taken by', 'calling thread'), ('calling thread', 'takes', 'permit')]"
For each call to release() a permit is returned to the semaphore.,"[('release()', 'returns', 'permit'), ('permit', 'returned to', 'semaphore')]"
"Thus, at most N threads can pass the acquire() method without any release() calls, where N is the number of permits the semaphore was initialized with.","[('N threads', 'can pass', 'acquire() method'), ('N threads', 'without', 'release() calls'), ('N', 'is the number of', 'permits'), ('permits', 'initialized with', 'semaphore')]"
"If you use a semaphore to send signals between threads, then you would typically have one thread call the acquire() method, and the other thread to call the release() method.","[('semaphore', 'used to send signals between', 'threads'), ('thread', 'calls method', 'acquire()'), ('other thread', 'calls method', 'release()')]"
"If no permits are available, the acquire() call will block until a permit is released by another thread.","[('acquire() call', 'will block if', 'no permits are available'), ('permit', 'is released by', 'another thread'), ('acquire() call', 'will block until', 'permit is released')]"
"Similarly, a release() calls is blocked if no more permits can be released into this semaphore.","[('release() calls', 'is blocked if', 'no more permits can be released into this semaphore')]"
"For instance, if acquire was called after Thread 1 had inserted an object in a shared list, and Thread 2 had called release() just before taking an object from that list, you had essentially created a blocking queue.","[('Thread 1', 'inserted', 'object'), ('object', 'located in', 'shared list'), ('Thread 2', 'called', 'release()'), ('Thread 2', 'taking', 'object'), ('object', 'located in', 'shared list'), ('you', 'created', 'blocking queue')]"
"That is, there is no guarantee that the first thread to call acquire() is also the first thread to obtain a permit.","[('first thread to call acquire()', 'is not guaranteed to be', 'first thread to obtain a permit')]"
"If you want to enforce fairness, the Semaphore class has a constructor that takes a boolean telling if the semaphore should enforce fairness.","[('Semaphore class', 'has constructor', 'constructor'), ('constructor', 'takes', 'boolean'), ('boolean', 'tells if', 'semaphore should enforce fairness')]"
Calling this class a queue is a bit of an overstatement.,"[('this class', 'is a', 'queue')]"
"However, unless you need to specify all these parameters explicitly for your ThreadPoolExecutor, it is often easier to use one of the factory methods in the java.util.concurrent.Executors class, as shown in the ExecutorService text.","[('ThreadPoolExecutor', 'has parameter', 'parameters'), ('java.util.concurrent.Executors', 'contains', 'factory methods'), ('factory methods', 'used in', 'ExecutorService text')]"
"A Java Certificate class instance contains name plus other details of the entity it identifies, plus possibly a digital signature from a Certificate Authority (CA).","[('Java Certificate class instance', 'contains', 'name'), ('Java Certificate class instance', 'contains', 'other details'), ('Java Certificate class instance', 'identifies', 'entity'), ('Java Certificate class instance', 'possibly contains', 'digital signature'), ('digital signature', 'from', 'Certificate Authority (CA)')]"
"The Java Certificate class is an abstract class, so while you may use Certificate as variable type, your variable will always point to a subclass of Certificate.","[('Java Certificate class', 'is a', 'abstract class'), ('Certificate', 'used as', 'variable type'), ('variable', 'points to', 'subclass of Certificate')]"
The Java Certificate class has one subclass - the X509Certificate class.,"[('Java Certificate class', 'has subclass', 'X509Certificate class')]"
This class represents an X.509 certificate which is used as identity certificate in HTTPS and TLS.,"[('This class', 'represents', 'X.509 certificate'), ('X.509 certificate', 'used as', 'identity certificate'), ('identity certificate', 'used in', 'HTTPS'), ('identity certificate', 'used in', 'TLS')]"
The Java Certificate getEncoded() method returns an encoded version of the Certificate as a byte array.,"[('getEncoded() method', 'returns', 'encoded version of the Certificate'), ('encoded version of the Certificate', 'format', 'byte array')]"
"For instance, if the Certificate is an X509Certificate the returned byte array will contain an X.590 (ASN.1 DER) encoded version of the Certificate instance.","[('Certificate', 'instance of', 'X509Certificate'), ('returned byte array', 'contains', 'X.590 (ASN.1 DER) encoded version'), ('X.590 (ASN.1 DER) encoded version', 'version of', 'Certificate instance')]"
The Java Certificate getPublicKey() method returns the PublicKey of this Certificate instance.,"[('getPublicKey() method', 'returns', 'PublicKey'), ('PublicKey', 'part of', 'Certificate instance')]"
The Java Certificate getType() method returns the type of the Certificate instance.,"[('getType() method', 'returns', 'type of the Certificate instance'), ('Certificate instance', 'has type', 'type returned by getType() method')]"
The Java CertificateFactory class (java.security.cert.CertificateFactory) is capable of creating Java Certificate instances from binary certificate encodings like X.509 (ASN.1 DER).,"[('Java CertificateFactory class', 'capable of creating', 'Java Certificate instances'), ('Java Certificate instances', 'created from', 'binary certificate encodings'), ('binary certificate encodings', 'example', 'X.509 (ASN.1 DER)')]"
"To read more about the Java Certificate class, see the Java Certificate tutorial.","[('Java Certificate class', 'related to', 'Java Certificate tutorial')]"
See the Java CertPath tutorial for more information about the CertPath class.,"[('Java CertPath tutorial', 'provides information about', 'CertPath class')]"
This example creates a CertificateFactory instance capable of creating X.509 certificate instances (X509Certificate - a subclass of Certificate).,"[('CertificateFactory', 'capable of creating', 'X.509 certificate instances'), ('X.509 certificate instances', 'instance of', 'X509Certificate'), ('X509Certificate', 'subclass of', 'Certificate')]"
You create a CertPath instance by calling the CertificateFactory generateCertPath() method.,"[('You', 'create', 'CertPath instance'), ('CertificateFactory', 'has method', 'generateCertPath()'), ('generateCertPath()', 'creates', 'CertPath instance')]"
"The Java CertPath class (java.security.cert.CertPath represents a chain of cryptographic identity certificates (Java Certificate objects), where each certificate is the digital signer of the next certificate in the chain.","[('Java CertPath class', 'represents', 'chain of cryptographic identity certificates'), ('chain of cryptographic identity certificates', 'consists of', 'Java Certificate objects'), ('Java Certificate objects', 'is digital signer of', 'next certificate in the chain')]"
The Java CertPath class is typically used to verify an identity certificate along with the certificates of the Certificate Authorities (CAs) that signed the certificate.,"[('Java CertPath class', 'used to', 'verify an identity certificate'), ('Java CertPath class', 'used to', 'verify certificates of Certificate Authorities'), ('Certificate Authorities', 'signed', 'the certificate')]"
Once you have a Java CertPath instance you can obtain the Certificate instances the CertPath consists of by calling the CertPath getCertificates() method.,"[('Java CertPath instance', 'can obtain', 'Certificate instances'), ('CertPath', 'consists of', 'Certificate instances'), ('CertPath', 'method', 'getCertificates()')]"
The CertPath getType() method returns a string telling what type of certificates (e.g.,"[('CertPath', 'has method', 'getType()'), ('getType()', 'returns', 'string'), ('string', 'describes', 'type of certificates')]"
Here is an example of obtaining the CertPath type via getType():,"[('CertPath', 'obtained via', 'getType()')]"
That is why the Java class is called Cipher and not e.g.,"[('Java class', 'is called', 'Cipher')]"
This Java Cipher tutorial will explain how the Cipher class of the Java Cryptography API works.,"[('Java Cipher tutorial', 'will explain', 'how the Cipher class works'), ('Cipher class', 'part of', 'Java Cryptography API')]"
Before you can use a Java Cipher you just create an instance of the Cipher class.,"[('Java Cipher', 'requires', 'instance of Cipher class'), ('Cipher class', 'used by', 'Java Cipher')]"
You create a Cipher instance by calling its getInstance() method with a parameter telling what type of encryption algorithm you want to use.,"[('Cipher', 'has method', 'getInstance()'), ('getInstance()', 'requires parameter', 'type of encryption algorithm')]"
There are several overridden versions of both update() and doFinal() which takes different parameters.,"[('update()', 'has overridden version', 'update() with different parameters'), ('doFinal()', 'has overridden version', 'doFinal() with different parameters')]"
"If you have to encrypt or decrypt a single block of data, just call the doFinal() with the data to encrypt or decrypt.","[('you', 'have to', 'encrypt or decrypt a single block of data'), ('call', 'method', 'doFinal()'), ('doFinal()', 'action', 'encrypt or decrypt'), ('doFinal()', 'object', 'data')]"
"If you have to encrypt or decrypt multiple blocks of data, e.g.","[('you', 'have to encrypt or decrypt', 'multiple blocks of data')]"
"multiple blocks from a large file, you call the update() once for each block of data, and finish with a call to doFinal() with the last data block.","[('you', 'call', 'update()'), ('update()', 'used for', 'block of data'), ('you', 'finish with', 'call to doFinal()'), ('call to doFinal()', 'used with', 'last data block')]"
"The reason a call to doFinal() is needed for the last block of data is, that some encryption algorithms need to pad the the data to fit a certain cipher block size (e.g.","[('call to doFinal()', 'needed for', 'last block of data'), ('encryption algorithms', 'need to', 'pad the data'), ('data', 'fit', 'certain cipher block size')]"
"Hence the calls to update() for intermediate blocks of data, and the call to doFinal() for the last block of data.","[('update()', 'called for', 'intermediate blocks of data'), ('doFinal()', 'called for', 'last block of data')]"
"When decrypting multiple blocks of data you also call the Cipher update() method for intermediate data blocks, and the doFinal() method for the last block.","[('decrypting', 'involves', 'multiple blocks of data'), ('Cipher', 'has method', 'update()'), ('Cipher', 'has method', 'doFinal()'), ('update()', 'used for', 'intermediate data blocks'), ('doFinal()', 'used for', 'last block')]"
The Java Cipher class encryption and decryption methods can encrypt or decrypt part of the data stored in a byte array.,"[('Java Cipher class', 'has method', 'encryption'), ('Java Cipher class', 'has method', 'decryption'), ('encryption', 'can encrypt', 'part of the data'), ('decryption', 'can decrypt', 'part of the data'), ('part of the data', 'stored in', 'byte array')]"
You simply pass an offset and length to the update() and / or doFinal() method.,"[('offset', 'passed to', 'update() method'), ('length', 'passed to', 'update() method'), ('offset', 'passed to', 'doFinal() method'), ('length', 'passed to', 'doFinal() method')]"
You can encrypt or decrypt data into an existing byte array by passing the destination byte array as parameter to the update() and / or doFinal() method.,"[('encrypt or decrypt data', 'method', 'update()'), ('encrypt or decrypt data', 'method', 'doFinal()'), ('update()', 'parameter', 'destination byte array'), ('doFinal()', 'parameter', 'destination byte array')]"
If you want to set a different offset for the dest byte array there is a version of update() and doFinal() which takes an offset parameter extra.,"[('update()', 'has version with parameter', 'offset'), ('doFinal()', 'has version with parameter', 'offset'), ('offset', 'applies to', 'dest byte array')]"
Here is an example of calling the doFinal() method with an offset into the dest array:,"[('doFinal() method', 'called with', 'offset into the dest array')]"
"When you call the doFinal() method on a Cipher instance, the Cipher instance is returned to the state it had just after initialization.","[('doFinal() method', 'called on', 'Cipher instance'), ('Cipher instance', 'returned to state', 'state after initialization')]"
Notice the call to update() and then doFinal() for these two blocks of data.,"[('update()', 'called for', 'block of data'), ('doFinal()', 'called for', 'block of data')]"
This is done with the doFinal() call with the third data block.,"[('doFinal() call', 'performed with', 'third data block')]"
After this doFinal() call you can encrypt yet another block of data with the same Java Cipher instance.,"[('doFinal() call', 'allows', 'encrypt another block of data'), ('Java Cipher instance', 'used with', 'doFinal() call')]"
JCA is structured around some central general purpose classes and interfaces.,"[('JCA', 'structured around', 'central general purpose classes'), ('JCA', 'structured around', 'interfaces')]"
"Thus, you may use a Cipher class to encrypt and decrypt some data, but the concrete cipher implementation (encryption algorithm) depends on the concrete provider used.","[('Cipher class', 'used to', 'encrypt data'), ('Cipher class', 'used to', 'decrypt data'), ('encryption algorithm', 'depends on', 'concrete provider')]"
The most commonly used of these classes are covered throughout the rest of this Java Cryptography tutorial.,"[('classes', 'are covered in', 'Java Cryptography tutorial')]"
The Provider (java.security.Provider) class is a central class in the Java cryptography API.,"[('The Provider (java.security.Provider) class', 'is a central class in', 'Java cryptography API')]"
"The Cipher class is explained in more detail in the text on the Java Cipher class, but I will give a brief introduction to the Cipher class in the following sections.","[('Cipher class', 'explained in', 'text on the Java Cipher class'), ('text on the Java Cipher class', 'explains', 'Cipher class'), ('introduction', 'given to', 'Cipher class')]"
"The Cipher.getInstance(...) method take a String identifying which encryption algorithm to use, as well as a few other configurations of the algorithm.","[('Cipher.getInstance(...) method', 'takes', 'String'), ('String', 'identifies', 'encryption algorithm'), ('Cipher.getInstance(...) method', 'uses', 'encryption algorithm'), ('Cipher.getInstance(...) method', 'takes', 'configurations of the algorithm')]"
"To initialize a Cipher instance to decrypt data you have to use the Cipher.DECRYPT_MODE, like this:","[('Cipher instance', 'initialized to', 'decrypt data'), ('Cipher instance', 'use mode', 'Cipher.DECRYPT_MODE')]"
You do so by calling the Cipher update() or doFinal() methods.,"[('You', 'perform action by', 'calling the Cipher update() methods'), ('You', 'perform action by', 'calling the Cipher doFinal() methods')]"
The update() method is used if you are encrypting or decrypting part of a bigger chunk of data.,"[('update() method', 'used for', 'encrypting part of a bigger chunk of data'), ('update() method', 'used for', 'decrypting part of a bigger chunk of data')]"
"The doFinal() method is called when you are encrypting the last part of the big chunk of data, or if the block you pass to doFinal() represents the complete data block to encrypt.","[('doFinal() method', 'is called when', 'encrypting the last part of the big chunk of data'), ('doFinal() method', 'is called when', 'block you pass to doFinal() represents the complete data block to encrypt')]"
Here is an example of encrypting some data with the doFinal() method,"[('doFinal() method', 'used for', 'encrypting data')]"
To decrypt data you would have passed cipher text (encrypted data) into the doFinal() or doUpdate() method instead.,"[('cipher text', 'is a type of', 'encrypted data'), ('doFinal()', 'method used for', 'decrypt data'), ('doUpdate()', 'method used for', 'decrypt data')]"
"The example in the previous section about the Cipher class used a very simple, hardcoded key.","[('example', 'mentioned in', 'previous section'), ('Cipher class', 'used in', 'example'), ('example', 'used', 'simple key'), ('example', 'used', 'hardcoded key')]"
You can use the Java KeyGenerator class to generate more random encryption keys.,"[('Java KeyGenerator class', 'used to', 'generate encryption keys'), ('encryption keys', 'characteristic', 'random')]"
"The resulting SecretKey instance can be passed to the Cipher.init() method, like this:","[('SecretKey instance', 'can be passed to', 'Cipher.init() method')]"
To generate an asymmetric key pair you can use the KeyPairGenerator (java.security.KeyPairGenerator).,"[('KeyPairGenerator', 'used for', 'generate asymmetric key pair'), ('KeyPairGenerator', 'part of', 'java.security.KeyPairGenerator')]"
The KeyStore class is quite advanced so it is described in more detail in its own Java KeyStore Tutorial.,"[('KeyStore class', 'described in', 'Java KeyStore Tutorial')]"
You can use the Java MessageDigest (java.security.MessageDigest) to calculate message digests.,"[('Java MessageDigest', 'used for', 'calculate message digests'), ('java.security.MessageDigest', 'alternative name', 'Java MessageDigest')]"
In order to calculate a message digest of some data you call the update() or digest() method.,"[('you', 'call method', 'update()'), ('you', 'call method', 'digest()'), ('update()', 'calculates', 'message digest'), ('digest()', 'calculates', 'message digest'), ('message digest', 'of', 'some data')]"
"The update() method can be called multiple times, and the message digest is updated internally.","[('update() method', 'can be called', 'multiple times'), ('update() method', 'updates', 'message digest')]"
"When you have passed all the data you want to include in the message digest, you call digest() and get the resulting message digest data out.","[('you', 'have passed', 'all the data'), ('all the data', 'to include in', 'the message digest'), ('you', 'call', 'digest()'), ('you', 'get', 'the resulting message digest data')]"
Here is an example of calling update() several times followed by a digest() call:,"[('update()', 'followed by', 'digest() call')]"
You can also call digest() a single time passing all the data to calculate the message digest from.,"[('digest()', 'can be called', 'a single time'), ('digest()', 'requires', 'all the data'), ('digest()', 'calculates', 'message digest')]"
The Java Mac class is used to create a MAC from a message.,"[('Java Mac class', 'used to', 'create a MAC'), ('MAC', 'created from', 'message')]"
"The Mac class is described in more detail in the Java Mac tutorial, but below is a short introduction.","[('Mac class', 'described in', 'Java Mac tutorial')]"
"You create a Java Mac instance by calling the Mac.getInstance() method, passing as parameter the name of the algorithm to use.","[('You', 'create', 'Java Mac instance'), ('Java Mac instance', 'created by', 'calling Mac.getInstance() method'), ('Mac.getInstance() method', 'requires parameter', 'name of the algorithm')]"
Once the Mac instance is initialized you can calculate a MAC from data by calling the update() and doFinal() method.,"[('Mac instance', 'can calculate', 'MAC'), ('MAC', 'calculated from', 'data'), ('update()', 'method of', 'Mac instance'), ('doFinal()', 'method of', 'Mac instance')]"
"If you have all the data to calculate the MAC for, you can call the doFinal() method immediately.","[('you', 'have', 'all the data'), ('you', 'can call', 'doFinal() method')]"
"If you only have the access to the data in separate blocks, call update() multiple times with the data, and finish off with a call to doFinal().","[('you', 'have access to', 'data in separate blocks'), ('you', 'call', 'update()'), ('update()', 'used with', 'data'), ('you', 'finish off with', 'call to doFinal()')]"
You do so by calling the initSign(...) method passing the private key to use to sign the data.,"[('initSign(...) method', 'requires', 'private key'), ('private key', 'used to', 'sign the data')]"
You do so by calling update() passing the data to sign as parameter.,"[('You', 'perform action', 'calling update()'), ('calling update()', 'requires', 'passing the data to sign as parameter')]"
You can call the update() method several times with more data to include when creating the signature.,"[('update() method', 'can be called', 'several times'), ('update() method', 'used for', 'creating the signature'), ('creating the signature', 'includes', 'more data')]"
When all the data has been passed to the update() method you call the sign() method to obtain the digital signature.,"[('data', 'passed to method', 'update()'), ('sign()', 'obtains', 'digital signature')]"
This is done by calling the initVerify(...) method passing as parameter the public key to use to verify the signature.,"[('initVerify(...) method', 'used for', 'verify the signature'), ('initVerify(...) method', 'requires parameter', 'public key')]"
"Once initialized into verification mode, you call the update() method with the data the signature is signing, and finish with a call to verify() which returns true or false depending on whether the signature could be verified or not.","[('update() method', 'used with', 'data the signature is signing'), ('verify()', 'returns', 'true or false'), ('signature', 'could be', 'verified')]"
Here is a full example of both creating and verifying a digital signature with the Signature class:,"[('Signature class', 'used for', 'creating digital signature'), ('Signature class', 'used for', 'verifying digital signature')]"
The Java KeyGenerator class (javax.crypto.KeyGenerator) is used to generate symmetric encryption keys.,"[('Java KeyGenerator class', 'used to', 'generate symmetric encryption keys'), ('Java KeyGenerator class', 'part of', 'javax.crypto.KeyGenerator')]"
Before you can use the Java KeyGenerator class you must create a KeyGenerator instance.,"[('Java KeyGenerator class', 'requires', 'create a KeyGenerator instance')]"
You create a KeyGenerator instance by calling the static method getInstance() passing as parameter the name of the encryption algorithm to create a key for.,"[('KeyGenerator', 'created by', 'calling the static method getInstance()'), ('calling the static method getInstance()', 'requires parameter', 'name of the encryption algorithm')]"
Initializing a KeyGenerator instance is done by calling its init() method.,"[('KeyGenerator instance', 'initialized by', 'calling init() method')]"
"The KeyGenerator init() method takes two parameters: The bit size of the keys to generate, and a SecureRandom that is used during key generation.","[('KeyGenerator', 'has method', 'init()'), ('init()', 'takes parameter', 'bit size of the keys'), ('init()', 'takes parameter', 'SecureRandom'), ('SecureRandom', 'used during', 'key generation')]"
Generating a key is done by calling the KeyGenerator generateKey() method.,"[('Key', 'generated by', 'KeyGenerator generateKey() method')]"
You can access the PublicKey of a KeyPair by calling its getPublic() method.,"[('KeyPair', 'has method', 'getPublic()'), ('getPublic()', 'returns', 'PublicKey')]"
You can access the PrivateKey of a KeyPair by calling the getPrivate() method.,"[('KeyPair', 'has method', 'getPrivate()'), ('getPrivate()', 'accesses', 'PrivateKey')]"
The Java KeyPairGenerator class (java.security.KeyPairGenerator) is used to generate asymmetric encryption / decryption key pairs.,"[('Java KeyPairGenerator class', 'used for', 'generate asymmetric encryption / decryption key pairs'), ('Java KeyPairGenerator class', 'part of', 'java.security.KeyPairGenerator')]"
Creating a KeyPairGenerator instance is done by calling the method getInstance() method.,"[('KeyPairGenerator', 'created by', 'calling getInstance() method')]"
The getInstance() method takes the name of the encryption algorithm to generate the key pair for.,"[('getInstance() method', 'takes', 'name of the encryption algorithm'), ('name of the encryption algorithm', 'used to', 'generate the key pair')]"
To generate a KeyPair with a KeyPairGenerator you call the generateKeyPair() method.,"[('KeyPairGenerator', 'method', 'generateKeyPair()'), ('generateKeyPair()', 'generates', 'KeyPair')]"
This makes the KeyStore class a useful mechanism to handle encryption keys securely.,"[('KeyStore class', 'is a', 'useful mechanism'), ('KeyStore class', 'handles', 'encryption keys'), ('KeyStore class', 'handles securely', 'encryption keys')]"
You can create a Java KeyStore instance by calling its getInstance() method.,"[('Java KeyStore', 'can be created by calling', 'getInstance() method')]"
It is also possible to create other types of KeyStore instance by passing a different parameter to the getInstance() method.,"[('KeyStore instance', 'can be created by', 'passing a different parameter'), ('passing a different parameter', 'to method', 'getInstance()')]"
That is why the KeyStore class assumes that you must read its data in before you can use it.,"[('KeyStore class', 'assumes', 'you must read its data in before you can use it')]"
Loading the KeyStore data from a file or other storage is done by calling the KeyStore load() method.,"[('KeyStore', 'has method', 'load()'), ('load()', 'used for', 'Loading the KeyStore data from a file or other storage')]"
This example loads the KeyStore file located in the keystore.ks file.,"[('KeyStore file', 'located in', 'keystore.ks file')]"
You can get the keys of a Java KeyStore instance via its getEntry() method.,"[('Java KeyStore instance', 'has method', 'getEntry()'), ('getEntry()', 'returns', 'keys')]"
"Thus, to access a key you must pass the key alias and password to the getEntry() method.","[('you', 'must pass', 'key alias'), ('you', 'must pass', 'password'), ('key alias', 'to', 'getEntry() method'), ('password', 'to', 'getEntry() method')]"
"If you know that the key entry you want to access is a private key, you can cast the KeyStore.Entry instance to a KeyStore.PrivateKeyEntry.","[('key entry', 'is a type of', 'private key'), ('KeyStore.Entry instance', 'can be cast to', 'KeyStore.PrivateKeyEntry')]"
"After casting to a KeyStore.PrivateKeyEntry you can access the private key, certificate and certificate chain via these methods:","[('KeyStore.PrivateKeyEntry', 'allows access to', 'private key'), ('KeyStore.PrivateKeyEntry', 'allows access to', 'certificate'), ('KeyStore.PrivateKeyEntry', 'allows access to', 'certificate chain')]"
"Sometimes you may want to store a KeyStore to some storage (disk, database etc.)","[('KeyStore', 'may be stored in', 'storage'), ('storage', 'includes', 'disk'), ('storage', 'includes', 'database')]"
"To execute it, open a command line (cmd, console, shell etc.).","[('command line', 'includes', 'cmd'), ('command line', 'includes', 'console'), ('command line', 'includes', 'shell')]"
This Keytool -delete command will remove the KeyStore entry with the alias testkey from the KeyStore stored in the file keystore.jks .,"[('Keytool -delete command', 'will remove', 'KeyStore entry'), ('KeyStore entry', 'has alias', 'testkey'), ('KeyStore entry', 'is from', 'KeyStore'), ('KeyStore', 'is stored in', 'file keystore.jks')]"
"Once generated, the certificate request should be sent to the CA you want to create a certificate for you (e.g.","[('certificate request', 'should be sent to', 'CA'), ('CA', 'creates', 'certificate')]"
"This command will generate a certificate request for the key stored with alias testkey in the keystore file keystore.jks, and write the certificate request into the file named certreq.certreq .","[('command', 'will generate', 'certificate request'), ('key', 'stored with alias', 'testkey'), ('keystore file', 'contains', 'key'), ('keystore file', 'named', 'keystore.jks'), ('certificate request', 'written into file', 'certreq.certreq')]"
The Java Mac (javax.crypto.Mac class can create a Message Authentication Code (MAC) from binary data.,"[('Java Mac', 'is a', 'javax.crypto.Mac class'), ('javax.crypto.Mac class', 'can create', 'Message Authentication Code'), ('Message Authentication Code', 'is created from', 'binary data')]"
Before you can use the Java Mac class you must create a Mac instance.,"[('Java Mac class', 'requires', 'Mac instance')]"
The String parameter passed to the Mac getInstance() method contains the name of the MAC algorithm to use.,"[('String parameter', 'passed to method', 'Mac getInstance()'), ('Mac getInstance()', 'contains', 'name of MAC algorithm')]"
You initialize the Mac instance by calling its init() method passing as parameter the secret key to be used by the Mac instance.,"[('You', 'initialize', 'Mac instance'), ('Mac instance', 'method', 'init()'), ('init()', 'parameter', 'secret key'), ('secret key', 'used by', 'Mac instance')]"
To calculate a MAC value you call the Mac update() or doFinal() method.,"[('MAC value', 'calculated by calling', 'Mac update()'), ('MAC value', 'calculated by calling', 'doFinal() method')]"
"If you only have a single block of data to calculate the MAC for, you can call doFinal() directly, like this:","[('you', 'have', 'single block of data'), ('single block of data', 'used for', 'calculate the MAC'), ('you', 'can call', 'doFinal()')]"
"If you have multiple blocks of data to calculate the MAC for, e.g.","[('multiple blocks of data', 'used to calculate', 'MAC')]"
"if you are reading a file block by block, then you must call the update() method with each block, and finish with a call to doFinal().","[('you', 'are reading', 'file'), ('file', 'read by', 'block'), ('you', 'must call', 'update() method'), ('update() method', 'called with', 'each block'), ('you', 'finish with', 'call to doFinal()')]"
The Java MessageDigest class represents a cryptographic hash function which can calculate a message digest from binary data.,"[('Java MessageDigest class', 'represents', 'cryptographic hash function'), ('cryptographic hash function', 'can calculate', 'message digest'), ('message digest', 'calculated from', 'binary data')]"
This tutorial only explains how to use the Java Cryptography API representation of a message digest in the MessageDigest class.,"[('tutorial', 'explains', 'how to use Java Cryptography API representation of a message digest'), ('Java Cryptography API representation of a message digest', 'used in', 'MessageDigest class')]"
To create a Java MessageDigest instance you call the static getInstance() method of the MessageDigest class.,"[('Java MessageDigest instance', 'created by calling', 'static getInstance() method'), ('static getInstance() method', 'belongs to', 'MessageDigest class')]"
The text parameter passed to the getInstance() method is the name of the concrete message digest algorithm to use.,"[('text parameter', 'passed to method', 'getInstance()'), ('text parameter', 'is name of', 'concrete message digest algorithm')]"
"If you have a single block of data to calculate a message digest from, use the digest() method.","[('single block of data', 'used to calculate', 'message digest'), ('digest() method', 'used for', 'calculate message digest')]"
"If you have multiple blocks of data to include in the same message digest, call the update() method and finish off with a call to digest().","[('multiple blocks of data', 'to include in', 'same message digest'), ('call', 'method', 'update()'), ('finish off with', 'call', 'digest()')]"
The Java Signature class (java.security.Signature) can create a digital signature for binary data.,"[('Java Signature class', 'can create', 'digital signature'), ('digital signature', 'for', 'binary data')]"
Before you can use the Java Signature class you must create a Signature instance.,"[('Java Signature class', 'requires', 'create a Signature instance')]"
You create a Signature instance by calling the static getInstance() method.,"[('You', 'create', 'Signature instance'), ('Signature instance', 'created by', 'calling getInstance() method')]"
The String passed as parameter to the getInstance() method is the name of the digital signature algorithm to use.,"[('String', 'passed as parameter to', 'getInstance() method'), ('String', 'is the name of', 'digital signature algorithm')]"
"You create a digital signature by calling the update() method one or more times, finishing with a call to sign().","[('You', 'create', 'digital signature'), ('digital signature', 'created by', 'calling update() method'), ('calling update() method', 'followed by', 'call to sign()')]"
Therefore I have put together this little trail on Java's date and time classes.,"[('I', 'put together', 'trail'), ('trail', 'topic', ""Java's date and time classes"")]"
Hopefully that will help you get an overview of Java's date and time classes.,"[('Java', 'has topic', 'date and time classes')]"
I also hope it may clear up some of the confusion Sun has created with Java's many date and time classes.,"[('Sun', 'created', ""Java's many date and time classes""), (""Java's many date and time classes"", 'caused', 'confusion')]"
"Actually, the Java date time API has been changed (cleaned up) in Java 8 with the introduction of a whole new set of classes.","[('Java date time API', 'changed in', 'Java 8'), ('Java 8', 'introduced', 'new set of classes')]"
The new Java date time API is located in the Java package java.time which is part of the standard Java 8 class library.,"[('Java date time API', 'located in', 'Java package java.time'), ('Java package java.time', 'part of', 'standard Java 8 class library')]"
You will see this new date and time representation in many of the classes in the new Java date time API.,"[('new date and time representation', 'seen in', 'many of the classes'), ('many of the classes', 'part of', 'new Java date time API')]"
The java.time package also contains a set of subpackages which contain more utilities etc.,"[('java.time package', 'contains', 'set of subpackages'), ('set of subpackages', 'contain', 'more utilities')]"
"For instance the java.time.chrono contains classes to work with Japanese, Thai, Taiwanese and Islamic calendars.","[('java.time.chrono', 'contains', 'classes'), ('classes', 'work with', 'Japanese calendars'), ('classes', 'work with', 'Thai calendars'), ('classes', 'work with', 'Taiwanese calendars'), ('classes', 'work with', 'Islamic calendars')]"
The java.time.format package contains classes used to parse and format dates from and to strings.,"[('java.time.format package', 'contains', 'classes'), ('classes', 'used to', 'parse dates'), ('classes', 'used to', 'format dates'), ('parse dates', 'from', 'strings'), ('format dates', 'to', 'strings')]"
The core of the Java 8 date time API consists of the following classes:,"[('Java 8 date time API', 'has core consisting of', 'classes')]"
Java 7 has the following date and time classes and methods.,"[('Java 7', 'has feature', 'date and time classes'), ('Java 7', 'has feature', 'methods')]"
"Each of these classes are also explained in their own pages, later.","[('classes', 'explained in', 'pages')]"
If you need to do simple timing the System.currentTimeMillis() method will do just fine.,"[('System.currentTimeMillis()', 'used for', 'simple timing')]"
"If you just need an object to hold a date, for instance as a property in a simple domain model object, you can use the java.util.Date class.","[('object', 'used to hold', 'date'), ('date', 'used as', 'property'), ('property', 'part of', 'simple domain model object'), ('java.util.Date class', 'used for', 'object')]"
"If you need to read and write the date and time to a database, use the java.sql.Date and java.sql.Timestamp classes.","[('java.sql.Date', 'used for', 'read and write date and time to a database'), ('java.sql.Timestamp', 'used for', 'read and write date and time to a database')]"
"If you need to do date calculations like adding days or months to another date, or check what weekday (monday, tuesday etc.)","[('date calculations', 'involves', 'adding days'), ('date calculations', 'involves', 'adding months'), ('date calculations', 'involves', 'check weekday'), ('weekday', 'includes', 'monday'), ('weekday', 'includes', 'tuesday')]"
"a given date is, or convert dates and times between time zones, use the java.util.Calendar and java.util.GregorianCalendar classes.","[('java.util.Calendar', 'used for', 'convert dates and times between time zones'), ('java.util.GregorianCalendar', 'used for', 'convert dates and times between time zones')]"
The Java DateTimeFormatter class is used to parse and format dates represented with the classes in the Java 8 date time API.,"[('Java DateTimeFormatter class', 'used to', 'parse dates'), ('Java DateTimeFormatter class', 'used to', 'format dates'), ('dates', 'represented with', 'classes in the Java 8 date time API')]"
The DateTimeFormatter is located in the java.time.format package so the fully qualified class name is java.time.format.DateTimeFormatter.,"[('DateTimeFormatter', 'located in', 'java.time.format package'), ('java.time.format package', 'contains', 'DateTimeFormatter'), ('DateTimeFormatter', 'fully qualified class name', 'java.time.format.DateTimeFormatter')]"
The DateTimeFormatter class contains a set of predefined (constant) instances which can parse and format dates from standard date formats.,"[('DateTimeFormatter class', 'contains', 'set of predefined (constant) instances'), ('set of predefined (constant) instances', 'can parse and format', 'dates'), ('dates', 'from', 'standard date formats')]"
You can read about them in the JavaDoc for the DateTimeFormatter class.,"[('JavaDoc', 'contains information about', 'DateTimeFormatter class')]"
Once you have an instance of a DateTimeFormatter you can format a date using its format() method.,"[('DateTimeFormatter', 'has method', 'format()'), ('format()', 'formats', 'date')]"
A Duration object (java.time.Duration) represents a period of time between two Instant objects.,"[('Duration object', 'represents', 'period of time'), ('period of time', 'between', 'two Instant objects')]"
The Duration class was added to the Java date time API from Java 8.,"[('Duration class', 'added to', 'Java date time API'), ('Java date time API', 'updated in', 'Java 8')]"
Creating a Duration object is done using one of the Duration class factory methods.,"[('Duration object', 'created using', 'Duration class factory methods')]"
Here is an example of how to create a Duration object using the between() method:,"[('Duration object', 'created using method', 'between()')]"
This is somewhat different from what we are used to with System.getCurrentTimeMillis() where a moment in time (or a period between two moments) is represented as a number of milliseconds.,"[('System.getCurrentTimeMillis()', 'represents', 'moment in time'), ('System.getCurrentTimeMillis()', 'represents', 'period between two moments'), ('moment in time', 'represented as', 'number of milliseconds'), ('period between two moments', 'represented as', 'number of milliseconds')]"
The toNanos() is different from the getNano() in that the getNano() only returns the part of the Duration which is less than one second.,"[('toNanos()', 'is different from', 'getNano()'), ('getNano()', 'returns', 'part of the Duration'), ('part of the Duration', 'is less than', 'one second')]"
The toNanos() method returns the full time interval converted to nanoseconds.,"[('toNanos() method', 'returns', 'full time interval converted to nanoseconds')]"
You might be asking yourself if there is not a toSeconds() method.,"[('You', 'might be asking', 'yourself'), ('toSeconds()', 'is a', 'method')]"
You can obtain the seconds part of the Duration using the getSeconds() method as explained earlier.,"[('getSeconds() method', 'used for', 'obtain the seconds part of the Duration')]"
The Duration class contains a set of methods you can use to perform calculations based on a Duration object.,"[('Duration class', 'contains', 'set of methods'), ('set of methods', 'used to', 'perform calculations'), ('perform calculations', 'based on', 'Duration object')]"
The Instant class in the Java date time API (java.time.Instant) represents a specific moment on the time line.,"[('Instant class', 'part of', 'Java date time API'), ('Java date time API', 'contains', 'Instant class'), ('Instant class', 'represents', 'specific moment on the time line')]"
"Time is measured using 86.400 seconds per day, moving forward from the origin.","[('Time', 'measured using', '86.400 seconds per day'), ('86.400 seconds per day', 'moves forward from', 'the origin')]"
You create an Instant instance using one of the Instant class factory methods.,"[('You', 'create', 'Instant instance'), ('Instant instance', 'created using', 'Instant class factory methods')]"
"For instance, to create an Instant which represents this exact moment of now, call Instant.now(), like this:","[('Instant', 'method', 'now()'), ('Instant.now()', 'represents', 'exact moment of now')]"
The Instant class also has several methods which can be used to make calculations relative to an Instant.,"[('Instant class', 'has method', 'several methods'), ('several methods', 'used for', 'make calculations'), ('make calculations', 'relative to', 'Instant')]"
The LocalDate class in the Java 8 date time API represents a local date which is a date without time zone information.,"[('LocalDate', 'part of', 'Java 8 date time API'), ('LocalDate', 'represents', 'local date'), ('local date', 'is a', 'date without time zone information')]"
"The LocalDate Java class is located in the java.time package, so its fully qualified class name is java.time.LocalDate.","[('LocalDate', 'located in package', 'java.time'), ('LocalDate', 'has fully qualified class name', 'java.time.LocalDate')]"
Here is an example of creating a LocalDate using the now() method:,"[('LocalDate', 'created using method', 'now()')]"
"The LocalDate's of() method creates a LocalDate instance representing a specific day of a specific month of a specific year, but without time zone information.","[('of() method', 'creates', 'LocalDate instance'), ('LocalDate instance', 'represents', 'specific day'), ('specific day', 'part of', 'specific month'), ('specific month', 'part of', 'specific year'), ('LocalDate instance', 'lacks', 'time zone information')]"
Notice how the getMonth() and getDayOfWeek() methods return an enum instead of an int.,"[('getMonth()', 'returns', 'enum'), ('getDayOfWeek()', 'returns', 'enum')]"
From these enums you can obtain their information as int values by calling their getValue() methods.,"[('enums', 'provide information as', 'int values'), ('int values', 'obtained by calling', 'getValue() methods')]"
You can perform a set of simple date calculations with the LocalDate class using one or more of the following methods:,"[('LocalDate class', 'can perform', 'simple date calculations'), ('simple date calculations', 'using method', 'one or more of the following methods')]"
The LocalDateTime class in the Java 8 date time API (java.time.LocalDateTime) represents a local date and time without any time zone information.,"[('LocalDateTime class', 'part of', 'Java 8 date time API'), ('Java 8 date time API', 'contains', 'LocalDateTime class'), ('LocalDateTime class', 'represents', 'local date and time'), ('local date and time', 'lacks', 'time zone information')]"
You could view the LocalDateTime as a combination of the LocalDate and LocalTime classes of the Java 8 date time API.,"[('LocalDateTime', 'combination of', 'LocalDate'), ('LocalDateTime', 'combination of', 'LocalTime'), ('LocalDate', 'part of', 'LocalDateTime'), ('LocalTime', 'part of', 'LocalDateTime'), ('LocalDateTime', 'part of', 'Java 8 date time API'), ('Java 8 date time API', 'contains', 'LocalDateTime')]"
Here is an example that shows how to create a LocalDateTime object via the now() method:,"[('LocalDateTime object', 'created via', 'now() method')]"
"The parameters to the of() method are year, month, day (of month), hours, minutes, seconds and nanoseconds.","[('of() method', 'has parameter', 'year'), ('of() method', 'has parameter', 'month'), ('of() method', 'has parameter', 'day (of month)'), ('of() method', 'has parameter', 'hours'), ('of() method', 'has parameter', 'minutes'), ('of() method', 'has parameter', 'seconds'), ('of() method', 'has parameter', 'nanoseconds')]"
Via the methods that return an enum you can get an int representation of the enum by calling the getValue() of the enum .,"[('methods', 'return', 'enum'), ('enum', 'has method', 'getValue()'), ('getValue()', 'returns', 'int representation')]"
The LocalTime class in the Java 8 date time API represents a specific time of day without any time zone information.,"[('LocalTime class', 'part of', 'Java 8 date time API'), ('LocalTime class', 'represents', 'specific time of day'), ('specific time of day', 'lacks', 'time zone information')]"
"The LocalTime class is immutable, so all calculations on LocalTime objects return a new LocalTime instance.","[('LocalTime class', 'is', 'immutable'), ('calculations', 'performed on', 'LocalTime objects'), ('calculations', 'return', 'new LocalTime instance')]"
"There are also other versions of the of() method that only takes hours and minutes, or hours, minutes and seconds as parameters.","[('of() method', 'has version', 'version with hours and minutes'), ('of() method', 'has version', 'version with hours, minutes and seconds')]"
The LocalTime class contains a set of methods that enable you to perform local time calculations.,"[('LocalTime class', 'contains', 'set of methods'), ('set of methods', 'enable', 'perform local time calculations')]"
The static method System.currentTimeMillis() returns the time since January 1st 1970 in milliseconds.,"[('System.currentTimeMillis()', 'is a', 'static method'), ('System.currentTimeMillis()', 'returns', 'time since January 1st 1970 in milliseconds')]"
"The returned long value can be used to initialize java.util.Date, java.sql.Date, java.sql.Timestamp and java.util.GregorianCalendar objects.","[('long value', 'can be used to initialize', 'java.util.Date'), ('long value', 'can be used to initialize', 'java.sql.Date'), ('long value', 'can be used to initialize', 'java.sql.Timestamp'), ('long value', 'can be used to initialize', 'java.util.GregorianCalendar')]"
The granularity of the System.currentTimeMillis() method is larger than 1 millisecond.,"[('System.currentTimeMillis() method', 'has granularity larger than', '1 millisecond')]"
Measuring time in Java is easiest to do with the System.currentTimeMillis() method.,"[('Measuring time', 'easiest to do with', 'System.currentTimeMillis() method'), ('System.currentTimeMillis() method', 'used in', 'Java')]"
The variable totalTime will now contain the total time it took to execute the callOperationToTime() method.,"[('totalTime', 'contains', 'total time'), ('callOperationToTime() method', 'execution time', 'total time')]"
"Because System.currentTimeMillis() does not return the time that accurately, it is a good idea to execute the operation to measure more than once.","[('System.currentTimeMillis()', 'does not return', 'time accurately'), ('execute operation', 'to measure', 'more than once')]"
"Another good reason to repeat the operation to measure a lot of times is to allow the Java virtual machine to load the classes containing the code, JIT-compile it, and perhaps even optimize it.","[('operation', 'reason', 'repeat'), ('operation', 'purpose', 'measure'), ('Java virtual machine', 'action', 'load'), ('Java virtual machine', 'action', 'JIT-compile'), ('Java virtual machine', 'action', 'optimize'), ('classes', 'contain', 'code')]"
"The calculations listed earlier in this text are rather trivial yet tedious to do, and could be encapsulated in a Timer class.","[('calculations', 'described as', 'trivial'), ('calculations', 'described as', 'tedious'), ('calculations', 'could be encapsulated in', 'Timer class')]"
The ZonedDateTime class in the Java 8 date time API represents a date and time with time zone information.,"[('ZonedDateTime class', 'part of', 'Java 8 date time API'), ('ZonedDateTime class', 'represents', 'date and time with time zone information')]"
The first way is to call the now() method of the ZonedDateTime class.,"[('ZonedDateTime class', 'has method', 'now()')]"
Here is an example of creating a ZonedDateTime object using the now() method:,"[('ZonedDateTime object', 'created using', 'now() method')]"
Another way to create a ZonedDateTime object is to use the of() method which can create a ZonedDateTime object from a concrete date and time.,"[('ZonedDateTime object', 'can be created by', 'of() method'), ('of() method', 'creates', 'ZonedDateTime object'), ('ZonedDateTime object', 'created from', 'concrete date and time')]"
Here is an example of creating a ZonedDateTime object using the of() method:,"[('ZonedDateTime object', 'created using', 'of() method')]"
From the enums you can return an int representation of their value using their getValue() methods.,"[('enums', 'have method', 'getValue()'), ('getValue()', 'returns', 'int representation of their value')]"
The ZonedDateTime class contains a set of methods used for date time calculations.,"[('ZonedDateTime class', 'contains', 'set of methods'), ('set of methods', 'used for', 'date time calculations')]"
The time zones are represented by the ZoneId class as shown in the earlier example.,"[('time zones', 'represented by', 'ZoneId class')]"
The parameter passed to the of() method is the ID of the time zone to create a ZoneId for.,"[('of() method', 'has parameter', 'ID of the time zone'), ('ID of the time zone', 'used to create', 'ZoneId')]"
"You can find the UTC offset for the desired time zone and create an ID matching it by combining ""UTC"" with the offset (e.g.",
"If you need to set a date on a java.sql.PreparedStatement or get a date from a java.sql.ResultSet, you will interact with java.sql.Date.","[('java.sql.PreparedStatement', 'interact with', 'java.sql.Date'), ('java.sql.ResultSet', 'interact with', 'java.sql.Date')]"
"Actually, java.sql.Date extends java.util.Date, so anything you can do with a java.util.Date you can also do with a java.sql.Date.","[('java.sql.Date', 'extends', 'java.util.Date'), ('java.util.Date', 'can do anything with', 'java.sql.Date')]"
"The biggest difference between java.sql.Date and java.util.Date is that the java.sql.Date only keeps the date, not the time, of the date it represents.","[('java.sql.Date', 'difference', 'java.util.Date'), ('java.sql.Date', 'keeps', 'date'), ('java.sql.Date', 'does not keep', 'time')]"
"So, for instance, if you create a java.sql.Date using the date and time 2009-12-24 23:20, then the time (23:20) would be cut off.","[('java.sql.Date', 'created using', 'date and time 2009-12-24 23:20'), ('time 23:20', 'would be cut off', 'java.sql.Date')]"
"If you need to keep the time, use a java.sql.Timestamp instead.","[('you', 'need', 'keep the time'), ('use', 'alternative', 'java.sql.Timestamp')]"
"If you need to set a date + time on a java.sql.PreparedStatement or get a date + time from a java.sql.ResultSet, you will interact with java.sql.Timestamp.","[('java.sql.PreparedStatement', 'interacts with', 'java.sql.Timestamp'), ('java.sql.ResultSet', 'interacts with', 'java.sql.Timestamp')]"
"Actually, java.sql.Timestamp extends java.util.Date, so anything you can do with a java.util.Date you can also do with a java.sql.Timestamp.","[('java.sql.Timestamp', 'extends', 'java.util.Date'), ('java.util.Date', 'can do with', 'java.sql.Timestamp')]"
"The biggest difference between java.sql.Date and java.sql.Timestamp is that the java.sql.Date only keeps the date, not the time, of the date it represents.","[('java.sql.Date', 'difference', 'java.sql.Timestamp'), ('java.sql.Date', 'keeps', 'date'), ('java.sql.Date', 'does not keep', 'time')]"
One difference in the java.sql.Timestamp from its superclass java.util.Date is its ability to hold the nanoseconds of a date too.,"[('java.sql.Timestamp', 'is a subclass of', 'java.util.Date'), ('java.sql.Timestamp', 'has ability', 'hold the nanoseconds of a date')]"
You can get and set the nanoseconds using the getNanos() and setNanos().,"[('getNanos()', 'can get', 'nanoseconds'), ('setNanos()', 'can set', 'nanoseconds')]"
Java's java.util.Calendar class is used to do date and time arithmetic.,"[('java.util.Calendar', 'is used to', 'do date and time arithmetic')]"
"Whenever you have something slightly more advanced than just representing a date and time, this is the class to use.","[('you', 'have', 'something slightly more advanced than just representing a date and time'), ('this', 'is the class to use', 'something slightly more advanced than just representing a date and time')]"
"Java only comes with a Gregorian calendar implementation, the java.util.GregorianCalendar class.","[('Java', 'comes with', 'Gregorian calendar implementation'), ('Gregorian calendar implementation', 'implemented by', 'java.util.GregorianCalendar class')]"
"The Calendar class has a couple of methods you can use to access the year, month, day, hour, minutes, seconds, milliseconds and time zone of a given date.","[('Calendar class', 'has method', 'access year'), ('Calendar class', 'has method', 'access month'), ('Calendar class', 'has method', 'access day'), ('Calendar class', 'has method', 'access hour'), ('Calendar class', 'has method', 'access minutes'), ('Calendar class', 'has method', 'access seconds'), ('Calendar class', 'has method', 'access milliseconds'), ('Calendar class', 'has method', 'access time zone'), ('Calendar class', 'access', 'given date')]"
The Calendar class has a corresponding set() method so you can set these fields too.,"[('Calendar class', 'has method', 'set() method'), ('set() method', 'corresponds to', 'Calendar class')]"
"The add() method is really handy when doing date arithmetics like adding or subtracting years, months, days, hours etc.","[('add() method', 'is handy for', 'date arithmetics'), ('date arithmetics', 'includes', 'adding years'), ('date arithmetics', 'includes', 'subtracting years'), ('date arithmetics', 'includes', 'adding months'), ('date arithmetics', 'includes', 'subtracting months'), ('date arithmetics', 'includes', 'adding days'), ('date arithmetics', 'includes', 'subtracting days'), ('date arithmetics', 'includes', 'adding hours'), ('date arithmetics', 'includes', 'subtracting hours')]"
"To subtract from the fields call the add() method with negative values, like this:","[('fields', 'method', 'add()'), ('add()', 'operation', 'subtract'), ('subtract', 'values', 'negative')]"
There are a few minor traps in the Calendar class that you should be aware of to avoid unnecessary headaches.,"[('Calendar class', 'contains', 'minor traps'), ('minor traps', 'cause', 'unnecessary headaches')]"
The MONTH field of the Calendar class does not go from 1 to 12 like they do when we write dates otherwise.,"[('MONTH field', 'part of', 'Calendar class'), ('Calendar class', 'contains', 'MONTH field')]"
"That means that 1 = sunday, 2 = monday, ..., 7 = saturday.","[('1', 'equals', 'sunday'), ('2', 'equals', 'monday'), ('7', 'equals', 'saturday')]"
If you need to do heavy or complex date and time calculations it is a good idea to read the class documentation for java.util.Calendar in the official JavaDoc's.,"[('heavy or complex date and time calculations', 'requires', 'java.util.Calendar'), ('java.util.Calendar', 'documented in', 'official JavaDoc')]"
The class documentation contains more detail about the specific behaviour of the class.,"[('class documentation', 'contains', 'detail'), ('detail', 'about', 'specific behaviour'), ('specific behaviour', 'of', 'class')]"
Today most of the methods in the class are deprecated in favor of the java.util.Calendar class.,"[('methods', 'deprecated in favor of', 'java.util.Calendar class'), ('methods', 'part of', 'class')]"
You can still use the java.util.Date class to represent a date though.,"[('java.util.Date class', 'used to represent', 'date')]"
"You can access the date and time contained in a java.util.Date instance using the getTime() method, like this:","[('java.util.Date', 'contains', 'date and time'), ('getTime()', 'accesses', 'date and time'), ('getTime()', 'method of', 'java.util.Date')]"
"You can also create a java.util.Date from a time in milliseconds, like this:","[('java.util.Date', 'can be created from', 'time in milliseconds')]"
You can compare java.util.Date instance because the class implements the java.lang.Comparable interface.,"[('java.util.Date', 'implements', 'java.lang.Comparable')]"
"The comparison follows the rules for the Comparable interface, meaning the compareTo() method returns:","[('comparison', 'follows', 'rules for the Comparable interface')]"
"The Java TimeZone class is a class that represents time zones, and is helpful when doing calendar arithmetics across time zones.","[('Java TimeZone class', 'represents', 'time zones'), ('Java TimeZone class', 'is helpful when doing', 'calendar arithmetics across time zones')]"
The java.util.TimeZone class is used in conjunction with the java.util.Calendar class.,"[('java.util.TimeZone', 'used in conjunction with', 'java.util.Calendar')]"
Note: In the Java 8 date time API the time zones are represented by the java.time.ZoneId class.,"[('Java 8 date time API', 'represents time zones by', 'java.time.ZoneId class')]"
But you only need to use the ZoneId class if you are using the Java 8 date time classes (like the ZonedDateTime class).,"[('ZoneId class', 'used with', 'Java 8 date time classes'), ('Java 8 date time classes', 'include', 'ZonedDateTime class')]"
If you use a Calendar (from the Java 7 and earlier date time API) you can still use the java.util.TimeZone class.,"[('Calendar', 'part of', 'Java 7 and earlier date time API'), ('Calendar', 'can use', 'java.util.TimeZone class')]"
The first method (TimeZone.getDefault()) returns the default time zone for the system (computer) this program is running on.,"[('TimeZone.getDefault()', 'returns', 'default time zone'), ('default time zone', 'for', 'system'), ('system', 'is running on', 'computer')]"
"The second method (TimeZone.getTimeZone(""Europe/Copenhagen"")) returns the TimeZone corresponding to the given time zone ID (in this example ""Europe/Copenhagen"").",
"The getOffset() method returns the offset in milliseconds for the given time zone to UTC, at the given time.","[('getOffset() method', 'returns', 'offset in milliseconds'), ('offset in milliseconds', 'for', 'given time zone'), ('offset in milliseconds', 'to', 'UTC'), ('offset in milliseconds', 'at', 'given time')]"
The Calendar class is capable of converting the date and time between time zones.,"[('Calendar class', 'capable of', 'converting the date and time between time zones')]"
"Here is a list of the available time zone ids in the TimeZone class, printed as returned by TimeZone.getAvailableIDs().","[('TimeZone', 'contains', 'time zone ids'), ('TimeZone', 'method', 'getAvailableIDs')]"
"It is possible to both parse dates from strings, and format dates to strings, using Java's java.text.SimpleDateFormat class.","[('java.text.SimpleDateFormat', 'used for', 'parsing dates from strings'), ('java.text.SimpleDateFormat', 'used for', 'formatting dates to strings'), ('Java', 'contains class', 'java.text.SimpleDateFormat')]"
It is also possible to parse and format dates using the newer Java DateTimeFormatter which is able to parse and format dates from and to the newer date time classes added in Java 8.,"[('Java DateTimeFormatter', 'can parse', 'dates'), ('Java DateTimeFormatter', 'can format', 'dates'), ('Java DateTimeFormatter', 'added in', 'Java 8'), ('Java 8', 'added', 'newer date time classes')]"
"Even though both classes for parsing and formatting dates are covered in more detail in their own texts, I will show you a few examples of how to use them below.","[('classes for parsing and formatting dates', 'covered in', 'their own texts'), ('I', 'will show', 'examples'), ('examples', 'demonstrate', 'how to use classes for parsing and formatting dates')]"
Here is an example of how to format and parse a date using the SimpleDateFormat class.,"[('SimpleDateFormat class', 'used for', 'format a date'), ('SimpleDateFormat class', 'used for', 'parse a date')]"
The string passed as parameter to the SimpleDateFormat class is a pattern that tells how the instance is to parse and format dates.,"[('string', 'passed as parameter to', 'SimpleDateFormat class'), ('string', 'is', 'pattern'), ('pattern', 'tells how', 'instance'), ('instance', 'is to parse and format', 'dates')]"
"For a full list, see the official JavaDoc for the SimpleDateFormat class.","[('SimpleDateFormat class', 'has documentation', 'official JavaDoc')]"
Another way to format dates is to use the DateTimeFormatter which works with the newer date time classes added in Java 8.,"[('DateTimeFormatter', 'used for', 'format dates'), ('DateTimeFormatter', 'works with', 'newer date time classes'), ('newer date time classes', 'added in', 'Java 8')]"
In the example above we use the DateTimeFormatter.BASIC_ISO_DATE instance which is configured to parse and format dates using the ISO date time format.,"[('DateTimeFormatter.BASIC_ISO_DATE', 'used in', 'example above'), ('DateTimeFormatter.BASIC_ISO_DATE', 'configured to', 'parse dates'), ('DateTimeFormatter.BASIC_ISO_DATE', 'configured to', 'format dates'), ('DateTimeFormatter.BASIC_ISO_DATE', 'uses', 'ISO date time format')]"
"Exceptions are regular Java classes that extends java.lang.Exception, or any of the other built-in exception classes.","[('Exceptions', 'are', 'regular Java classes'), ('regular Java classes', 'extends', 'java.lang.Exception'), ('regular Java classes', 'extends', 'built-in exception classes')]"
"If a method declares that it throws an exception A, then it is also legal to throw subclasses of A.","[('method', 'declares', 'throws exception A'), ('throws exception A', 'legal to throw', 'subclasses of A')]"
"In the example above the ""System.out.println(result);"" statement will not get executed if an exception is thrown fromt the divide method.",
"In the example above the ""System.out.println(""Division attempt done"");"" statement will always get executed.",
Here is how the callDivide() method would look in that case.,"[('callDivide()', 'is a', 'method')]"
"Thus the ""System.out.println(result);"" method will not get executed if an exception is thrown from the divide method.",
"If the reader.read() method call throws an IOException, the following System.out.println((char) i ); is not executed.","[('reader.read() method call', 'throws', 'IOException'), ('System.out.println((char) i )', 'is not executed', 'if IOException is thrown')]"
"Neither is the last reader.close() or the System.out.println(""--- File End ---""); statements.",
Instead the program skips directly to the catch(IOException e){ ... } catch clause.,"[('program', 'skips to', 'catch(IOException e) catch clause')]"
"If an exception is thrown from the reader.read() method then program execution is halted, and the exception is passed up the call stack to the method that called openFile().","[('exception', 'thrown from', 'reader.read() method'), ('program execution', 'halted by', 'exception'), ('exception', 'passed up', 'call stack'), ('call stack', 'leads to', 'method that called openFile()')]"
"If the calling method also just throws the method on, the calling method is also interrupted at the openFile() method call, and the exception passed on up the call stack.","[('calling method', 'throws', 'method'), ('calling method', 'interrupted at', 'openFile() method call'), ('exception', 'passed on up', 'call stack')]"
That is why the previous example had the reader.close() method call in the finally block wrapped in a try-catch block:,"[('previous example', 'had', 'reader.close() method call'), ('reader.close() method call', 'located in', 'finally block'), ('finally block', 'wrapped in', 'try-catch block')]"
"That way the System.out.println(""--- File End ---""); method call will always be executed.",
Notice how the two exception class names in the first catch block are separated by the pipe character |.,"[('exception class names', 'separated by', 'pipe character |'), ('two exception class names', 'located in', 'first catch block')]"
The pipe character between exception class names is how you declare multiple exceptions to be caught by the same catch clause.,"[('pipe character', 'used for', 'declare multiple exceptions'), ('exception class names', 'connected by', 'pipe character'), ('multiple exceptions', 'caught by', 'same catch clause')]"
If storeDataFromUrl() wants to call readDataFromUrl() it has only two choices.,"[('storeDataFromUrl()', 'wants to call', 'readDataFromUrl()')]"
Notice how the readDataFromUrl() method no longer declares that it throws BadUrlException.,"[('readDataFromUrl()', 'no longer declares', 'throws BadUrlException')]"
"The storeDataFromUrl() method can still choose to catch the exception but it no longer has to, and it no longer has to declare that it propagates the exception.","[('storeDataFromUrl() method', 'can choose to', 'catch the exception'), ('storeDataFromUrl() method', 'no longer has to', 'catch the exception'), ('storeDataFromUrl() method', 'no longer has to declare', 'it propagates the exception')]"
As you can see the readNumberFromUrl() needs to declare throwing both the BadUrlException and the BadNumberException that are thrown from the readDataFromUrl() and converData() methods.,"[('readNumberFromUrl()', 'throws', 'BadUrlException'), ('readNumberFromUrl()', 'throws', 'BadNumberException'), ('readDataFromUrl()', 'throws', 'BadUrlException'), ('converData()', 'throws', 'BadNumberException')]"
Imagine how many exceptions would need to be declared at the top level methods of an application with thousands of classes.,"[('application', 'contains', 'thousands of classes'), ('top level methods', 'require', 'exceptions to be declared')]"
As you can see the readNumberFromUrl() method now only declares throwing ApplicationException.,"[('readNumberFromUrl() method', 'declares throwing', 'ApplicationException')]"
Notice how the readNumberFromUrl() method does not declare throwing the ApplicationException even if it throws it.,"[('readNumberFromUrl()', 'method does not declare throwing', 'ApplicationException'), ('readNumberFromUrl()', 'method throws', 'ApplicationException')]"
All exceptions thrown in the application must be a subclass of the base exception.,"[('exceptions', 'thrown in', 'application'), ('exceptions', 'subclass of', 'base exception')]"
As you know a method throwing Exception may also throw any subclass of Exception.,"[('method', 'may throw', 'Exception'), ('method', 'may throw', 'subclass of Exception'), ('subclass of Exception', 'is a', 'Exception')]"
They are subclasses of the ApplicationException so they will get propagated up the call stack.,"[('They', 'are subclasses of', 'ApplicationException'), ('They', 'will get propagated up', 'call stack')]"
Argument 5 (Pro Unchecked Exceptions) Checked exceptions declared on methods become part of a the class or interface contract.,"[('Argument 5', 'supports', 'Unchecked Exceptions'), ('Checked exceptions', 'declared on', 'methods'), ('Checked exceptions', 'become part of', 'class or interface contract')]"
The only requirement is that the new exceptions thrown are subclasses of the base exception.,"[('new exceptions', 'are subclasses of', 'base exception')]"
Anders Hejlsberg on checked vs. unchecked exceptions http://www.artima.com/intv/handcuffs.html James Gosling on checked exceptions http://www.artima.com/intv/solid.html Bill Venners on Exceptions http://www.artima.com/interfacedesign/exceptions.html Bruce Eckel on checked exceptions http://www.artima.com/intv/typingP.html Designing with Exceptions (Bill Venners - www.artima.com) http://www.artima.com/designtechniques/desexcept.html Effective Java (Joshua Bloch - Addison Wesley 2001) Daniel Pietraru - in favor of checked exceptions Exceptional Java - Checked exceptions are priceless茂驴�?For everything else there is the RuntimeException,"[('Anders Hejlsberg', 'discusses', 'checked vs. unchecked exceptions'), ('James Gosling', 'discusses', 'checked exceptions'), ('Bill Venners', 'discusses', 'Exceptions'), ('Bruce Eckel', 'discusses', 'checked exceptions'), ('Bill Venners', 'author of', 'Designing with Exceptions'), ('Joshua Bloch', 'author of', 'Effective Java'), ('Joshua Bloch', 'published by', 'Addison Wesley'), ('Daniel Pietraru', 'supports', 'checked exceptions'), ('Exceptional Java', 'topic', 'Checked exceptions are priceless')]"
Checked exceptions declared on methods become part of a the class or interface contract.,"[('Checked exceptions', 'declared on', 'methods'), ('Checked exceptions', 'become part of', 'class or interface contract')]"
As you can see the method1() throws an EnrichableException which is a superclass for enrichable exceptions.,"[('method1()', 'throws', 'EnrichableException'), ('EnrichableException', 'is a superclass for', 'enrichable exceptions')]"
"Notice how method2() calls the addInfo() method on the caught EnrichableException, and rethrow it afterwards.","[('method2()', 'calls method', 'addInfo()'), ('method2()', 'calls method on', 'EnrichableException'), ('method2()', 'rethrows', 'EnrichableException')]"
"Notice how method1() adds the code ""ERROR1"" to the thrown EnrichableException to uniquely identify that error cause.",
But notice too that method1() is called from both method2() and method3().,"[('method2()', 'calls', 'method1()'), ('method3()', 'calls', 'method1()')]"
"Though the error may seem the same to method1() no matter which of method2() and method3() that called it, this may important to know for the developer investigating the error.","[('method2()', 'calls', 'method1()'), ('method3()', 'calls', 'method1()'), ('developer', 'investigates', 'error')]"
Here is an example where the addInfo() method has been changed to accommodate this:,"[('addInfo() method', 'has been changed to accommodate', 'this')]"
Two new parameters have been added to the addInfo() method and the constructor of the EnrichableException.,"[('addInfo() method', 'has parameter', 'new parameter'), ('constructor of the EnrichableException', 'has parameter', 'new parameter'), ('new parameter', 'added to', 'addInfo() method'), ('new parameter', 'added to', 'constructor of the EnrichableException')]"
An error identification for an exception thrown by method1() when called from method2() will now look like this:,"[('method1()', 'throws exception', 'error identification'), ('method2()', 'calls', 'method1()')]"
When method1() is called from method3() the error identification will look like this:,"[('method3()', 'calls', 'method1()'), ('error identification', 'will look like', 'this')]"
As you can see it is now possible to distinguish an exception thrown from method1() via method2() from the same exception thrown from method1() via method3().,"[('exception', 'thrown from', 'method1() via method2()'), ('exception', 'thrown from', 'method1() via method3()')]"
"Here is an example where method1() catches a non-enrichable exception and wraps it in an enrichable exception, and throws the enrichable exception:","[('method1()', 'catches', 'non-enrichable exception'), ('method1()', 'wraps', 'non-enrichable exception'), ('method1()', 'throws', 'enrichable exception'), ('non-enrichable exception', 'wrapped in', 'enrichable exception')]"
Exceptions caught in the program will be passed to the handleException() which will decide what concrete exception to throw instead.,"[('Exceptions', 'caught in', 'program'), ('Exceptions', 'passed to', 'handleException()'), ('handleException()', 'decide', 'what concrete exception to throw')]"
If the EnrichableException is unchecked it is not necessary to declare it in the handleException() method.,"[('EnrichableException', 'is', 'unchecked'), ('EnrichableException', 'is not necessary to declare in', 'handleException() method')]"
You may need to change the class definition to suit your own needs.,"[('You', 'may need to change', 'class definition'), ('class definition', 'suit', 'your own needs')]"
"If an exception is thrown from within the try block, and another exception is thrown from the input.close() call in the finally block, both exceptions are preserved in the MyException instance, and propagated up the call stack.","[('exception', 'thrown from', 'try block'), ('exception', 'thrown from', 'input.close() call'), ('input.close() call', 'located in', 'finally block'), ('both exceptions', 'preserved in', 'MyException instance'), ('MyException instance', 'propagated up', 'call stack')]"
"RuntimeExceptions thrown from the try-block are not preserved, if the input.close() call also throws an exception.","[('RuntimeExceptions', 'thrown from', 'try-block'), ('input.close()', 'throws', 'exception'), ('RuntimeExceptions', 'are not preserved if', 'input.close() throws exception')]"
Notice how the process() method calls the doProcess() method inside the try-catch block.,"[('process() method', 'calls', 'doProcess() method'), ('doProcess() method', 'is called inside', 'try-catch block')]"
"You will use the template by subclassing it, and overriding the doProcess() method.","[('You', 'will use', 'template'), ('template', 'subclassed by', 'You'), ('You', 'override', 'doProcess() method')]"
"This example creates an anonymous subclass of the InputStreamProcessingTemplate class, instantiates an instance of the subclass, and calls its process() method.","[('anonymous subclass', 'subclass of', 'InputStreamProcessingTemplate class'), ('instance', 'instance of', 'anonymous subclass'), ('process() method', 'called by', 'instance')]"
"You will typically also get more help from your IDE's code completion when writing it, because the IDE will recognize both the doProcess() and process() methods.","[('IDE', 'provides', 'code completion'), ('code completion', 'helps with', 'writing'), ('IDE', 'recognizes', 'doProcess() method'), ('IDE', 'recognizes', 'process() method')]"
Instead of subclassing the InputStreamProcessingTempate you could rewrite it to take an instance of an InputStreamProcessor interface.,"[('InputStreamProcessingTempate', 'can be rewritten to take an instance of', 'InputStreamProcessor interface')]"
"This is the InputStreamProcessor, which is called from inside the try block (processor.process(input)).","[('InputStreamProcessor', 'is called from', 'inside the try block'), ('processor', 'processes', 'input')]"
"It doesn't look much different from the previous usage, except the call to the InputStreamProcessingTemplate.process() method is now closer to the top of the code.","[('InputStreamProcessingTemplate.process()', 'is called in', 'code')]"
Notice how the call to the template's process() method is now a static method call.,"[('call', 'method', 'process()'), ('process()', 'type', 'static method')]"
"The advantage of exception hierarchies is that if you decide to catch (using try-catch) a certain exception in the hierarchy, then you will automatically also catch all subclasses of that exception too.","[('exception hierarchies', 'have advantage', 'catch a certain exception'), ('catch a certain exception', 'method', 'try-catch'), ('catch a certain exception', 'includes', 'catch all subclasses of that exception')]"
"In the example with FileNotFoundException, if you catch IOException which is the superclass of FileNotFoundException, you will also catch FileNotFoundException.","[('FileNotFoundException', 'is a subclass of', 'IOException'), ('IOException', 'is a superclass of', 'FileNotFoundException'), ('catch', 'action', 'IOException'), ('catch', 'action', 'FileNotFoundException')]"
"But, multiple catch blocks can also be used in the case where all the exceptions thrown inside the try-block are the same type or subclasses of that type.","[('multiple catch blocks', 'can be used in', 'case where all the exceptions thrown inside the try-block are the same type or subclasses of that type')]"
"The fact that FileNotFoundException is a subclass of IOException gives us the choice of either treating all IOExceptions the same, or catch some of IOExceptions subclasses individually, as is done in the code example above.","[('FileNotFoundException', 'subclass of', 'IOException'), ('IOException', 'has subclass', 'FileNotFoundException')]"
"If the catch(FileNotFoundException e) block is removed any FileNotFoundException will be caught by the catch(IOException e) block, since FileNotFoundException is a subclass of IOException.","[('FileNotFoundException', 'will be caught by', 'catch(IOException e) block'), ('FileNotFoundException', 'is a subclass of', 'IOException')]"
"If a method can throw either a certain exception A, or any subclasses of A (Asub), then it is enough to declare in the method declaration that the method throws A.","[('method', 'can throw', 'exception A'), ('method', 'can throw', 'subclasses of A'), ('subclasses of A', 'subclass of', 'exception A'), ('method declaration', 'declares', 'method throws A')]"
It is then allowed to throw subclasses of A from the method too.,"[('subclasses', 'is a type of', 'A'), ('method', 'allows', 'throw subclasses of A')]"
"You are allowed to declare the subclasses in the throws clause of the method, even if you don't really need to.","[('You', 'are allowed to declare', 'subclasses in the throws clause of the method')]"
"As long as the superclass of any declared exception is also declared thrown, it doesn't have any effect on the code to include the throwing of the subclass.","[('superclass', 'is declared', 'thrown'), ('subclass', 'is declared', 'thrown'), ('throwing of the subclass', 'does not have effect on', 'code')]"
"It is still possible to handle the two exceptions with each their own catch-block as shown earlier, even if only the superclass is declared thrown.","[('two exceptions', 'can be handled with', 'each their own catch-block'), ('superclass', 'is declared', 'thrown')]"
"If you need more granularity on the exceptions thrown, for instance because you think the exceptions may be handled differently, then add new exceptions as subclasses of your API or application base exception.","[('exceptions', 'thrown by', 'API'), ('exceptions', 'thrown by', 'application'), ('exceptions', 'handled differently', 'think'), ('new exceptions', 'subclass of', 'API base exception'), ('new exceptions', 'subclass of', 'application base exception')]"
"In Mr. Persister we could add a ConnectionOpenException, QueryException, UpdateException, CommitException, and ConnectionCloseException as subclasses of PersistenceException.","[('ConnectionOpenException', 'subclass of', 'PersistenceException'), ('QueryException', 'subclass of', 'PersistenceException'), ('UpdateException', 'subclass of', 'PersistenceException'), ('CommitException', 'subclass of', 'PersistenceException'), ('ConnectionCloseException', 'subclass of', 'PersistenceException')]"
Summary In this text we have seen that exception hierarchies can be created by subclassing exception classes.,"[('exception hierarchies', 'can be created by', 'subclassing exception classes')]"
"It is a good idea to create a base exception for your API or application, and have all other exceptions subclass this base exception.","[('base exception', 'is created for', 'API'), ('base exception', 'is created for', 'application'), ('other exceptions', 'subclass', 'base exception')]"
Individual subclasses makes it possible (but not obligatory) to catch and handle these individual exceptions differently.,"[('Individual subclasses', 'makes possible', 'catch and handle individual exceptions differently')]"
In this text we have seen that exception hierarchies can be created by subclassing exception classes.,"[('exception hierarchies', 'can be created by', 'subclassing exception classes')]"
Exception wrapping is a standard feature in Java since JDK 1.4.,"[('Exception wrapping', 'is a feature in', 'Java'), ('Java', 'has feature', 'Exception wrapping'), ('Exception wrapping', 'introduced in', 'JDK 1.4')]"
They also have a getCause() method that will return the wrapped exception.,"[('getCause() method', 'returns', 'wrapped exception')]"
"When a request is successfully processed, you can write the whole execution context object to a log file, as a single, coherent structure (e.g.","[('request', 'is processed', 'successfully'), ('you', 'can write', 'execution context object'), ('execution context object', 'written to', 'log file')]"
"It's implemented as a single class called ExecutionContext, which keeps all calls to it internally in a list.","[('ExecutionContext', 'is a', 'class'), ('ExecutionContext', 'keeps', 'calls'), ('calls', 'stored in', 'list')]"
Notice how each method ( level1() to level3() ) calls the ExecutionContext.,"[('level1()', 'calls', 'ExecutionContext'), ('level2()', 'calls', 'ExecutionContext'), ('level3()', 'calls', 'ExecutionContext')]"
"Therefore, I have developed an ExecutionContextTree class, which can contain this information.","[('ExecutionContextTree', 'can contain', 'information')]"
"The pre() call creates a new node, and attaches it to the parent node (if any).","[('pre() call', 'creates', 'new node'), ('new node', 'attaches to', 'parent node')]"
"Any calls to pre() after this one, will result in new nodes being attached to the newly created node.","[('calls', 'result in', 'new nodes being attached'), ('new nodes', 'being attached to', 'newly created node')]"
The post() call removes the node as the current parent in the execution tree.,"[('post() call', 'removes', 'node'), ('node', 'is current parent in', 'execution tree')]"
The next call to pre() will now attach a node to the parent of the node just removed as parent node.,"[('pre()', 'next call', 'attach a node'), ('node', 'attached to', 'parent of the node just removed'), ('parent of the node just removed', 'is', 'parent node')]"
"As you can see, the pre() and post() calls are very often insert at the start and end of a method call.","[('pre()', 'is often inserted at', 'start of a method call'), ('post()', 'is often inserted at', 'end of a method call')]"
"If the input.close() call fails, and an IOException is thrown, then it is caught, wrapped and rethrown.",
All classes implementing this interface can be used inside the try-with-resources construct.,"[('Classes', 'implement', 'Interface'), ('Classes', 'can be used inside', 'Try-with-resources construct')]"
The Java try-with-resources construct does not just work with Java's built-in classes.,"[('Java try-with-resources construct', 'works with', ""Java's built-in classes"")]"
"You can also implement the java.lang.AutoCloseable interface in your own classes, and use them with the try-with-resources construct.","[('java.lang.AutoCloseable', 'can be implemented in', 'your own classes'), ('your own classes', 'can implement', 'java.lang.AutoCloseable'), ('your own classes', 'can be used with', 'try-with-resources construct')]"
Any class that implements this interface can be used with the Java try-with-resources construct.,"[('class', 'implements', 'interface'), ('class', 'can be used with', 'Java try-with-resources construct')]"
Here is the output printed to System.out when the method myAutoClosable() is called:,"[('myAutoClosable()', 'output printed to', 'System.out')]"
"If an exception is thrown both from inside the try-with-resources block, and when a resource is closed (when close() is called), the exception thrown inside the try block will be propagated up the call stack.","[('exception', 'thrown from', 'inside the try-with-resources block'), ('exception', 'thrown when', 'resource is closed'), ('close()', 'called when', 'resource is closed'), ('exception', 'propagated up', 'call stack')]"
"In that case, the exception thrown when attempted closed will be propagated up the call stack to the main() method where the try-catch block will catch it.","[('exception', 'thrown when', 'attempted closed'), ('exception', 'propagated up', 'call stack'), ('call stack', 'to', 'main() method'), ('try-catch block', 'will catch', 'exception')]"
"In that case, the Throwable array returned from e.getSuppessed() will be an empty array (size of 0).","[('Throwable array', 'returned from', 'e.getSuppressed()'), ('Throwable array', 'size', '0')]"
"In case the parameter to resourceOne.doOp() was changed to true also, the doOp() method would throw an exception.","[('parameter to resourceOne.doOp()', 'changed to', 'true'), ('doOp() method', 'would throw', 'exception')]"
"In that case, it is this exception that is propagated up the call stack to the main() method.","[('exception', 'is propagated up', 'call stack'), ('call stack', 'to', 'main() method')]"
The exception thrown when attempting to close the resource would be available inside the Throwable array returned by e.getSuppressed().,"[('exception', 'thrown when', 'attempting to close the resource'), ('exception', 'available inside', 'Throwable array'), ('Throwable array', 'returned by', 'e.getSuppressed()')]"
"However, in the example above I have forced both resources to throw an exception when attempted closed, and the first resource to throw an exception when used (when doOp() is called).","[('resources', 'throw', 'exception'), ('first resource', 'throw', 'exception'), ('doOp()', 'is called', 'first resource')]"
The two exceptions thrown when attempting to close the resources are available in the Throwable array returned by e.getSuppressed().,"[('exceptions', 'thrown when', 'attempting to close the resources'), ('exceptions', 'available in', 'Throwable array'), ('Throwable array', 'returned by', 'e.getSuppressed()')]"
"In case an exception is thrown when attempting to close one of the resources, these exceptions will be available from the exception's getSuppressed() method inside the catch block.","[('exception', 'is thrown when attempting to close', 'resources'), ('exceptions', 'will be available from', ""exception's getSuppressed() method""), (""exception's getSuppressed() method"", 'is inside', 'catch block')]"
"In the example above, the AutoClosableResource is configured to throw an exception both when doOp() is called, and when it is attempted closed (via close()).","[('AutoClosableResource', 'configured to throw exception', 'when doOp() is called'), ('AutoClosableResource', 'configured to throw exception', 'when it is attempted closed')]"
"The exception thrown from doOp() is caught in the catch block, its getSuppressed() method returns an array with the exception thrown when the resource was attempted closed.","[('exception', 'thrown from', 'doOp()'), ('exception', 'caught in', 'catch block'), ('exception', 'has method', 'getSuppressed()'), ('getSuppressed()', 'returns', 'array'), ('array', 'contains', 'exception'), ('exception', 'thrown when', 'resource was attempted closed')]"
"The getSuppressed() method of that exception will return an empty array, since no exceptions where suppressed.","[('getSuppressed() method', 'returns', 'empty array'), ('empty array', 'is returned by', 'getSuppressed() method'), ('exception', 'has method', 'getSuppressed() method'), ('no exceptions', 'were', 'suppressed')]"
The Throwable class has a method named addSuppressed() which takes a Throwable object as parameter.,"[('Throwable class', 'has method', 'addSuppressed()'), ('addSuppressed()', 'takes parameter', 'Throwable object')]"
"Using the addSuppressed() method it is possible to add suppressed exceptions to another exception, in case you need that.","[('addSuppressed() method', 'used for', 'add suppressed exceptions'), ('add suppressed exceptions', 'to', 'another exception')]"
"To understand why, look at the following method which reads a file and prints it to the System.out:","[('method', 'reads', 'file'), ('method', 'prints', 'file'), ('method', 'prints to', 'System.out')]"
"The InputStream's close() method may throw an exception too, if closing it fails.","[('InputStream', 'has method', 'close()'), ('close()', 'may throw', 'exception')]"
You will have to code your own exception class in order to make exception enrichment possible.,"[('You', 'have to code', 'exception class'), ('exception class', 'purpose', 'exception enrichment')]"
"However, the ExceptionHandler can throw all the unchecked exceptions it wants (RuntimeException and subclasses of it).","[('ExceptionHandler', 'can throw', 'unchecked exceptions'), ('unchecked exceptions', 'includes', 'RuntimeException'), ('RuntimeException', 'has subclass', 'subclasses of RuntimeException')]"
"In contrast, inside a DAO class you will most likely not be able to interact with the user to correct the error.","[('DAO class', 'contains', 'error'), ('DAO class', 'unable to interact with', 'user')]"
In this example the validate() method throws an exception as soon as an validation error is found.,"[('validate() method', 'throws', 'exception'), ('validation error', 'is found', 'exception')]"
"Notice how it is not necessary to cast the object obtained from the List.get() method call, as is normally necessary.","[('List.get() method', 'obtains', 'object')]"
Notice how it is not necessary to cast the object returned from the iterator.next() next call.,"[('object', 'returned from', 'iterator.next() next call')]"
"Adding and getting elements to a generic Map is done using the put() and get() methods, just like you have always done:","[('Adding elements', 'method used', 'put()'), ('Getting elements', 'method used', 'get()'), ('put()', 'used for', 'Adding elements'), ('get()', 'used for', 'Getting elements')]"
Also notice how it is not necessary to cast the String instance returned by the get() method.,"[('get() method', 'returns', 'String instance')]"
Most often you iterate the key Set and access the values for each key via the Map.get() method.,"[('you', 'iterate', 'key Set'), ('you', 'access', 'values'), ('Map.get() method', 'used for', 'accessing values')]"
"Adding elements to a generic Set is done using the add() method, just like you have always done:","[('elements', 'added to', 'generic Set'), ('adding', 'method used', 'add()')]"
Generics is not restricted to the predefined classes in the Java API's.,"[('Generics', 'not restricted to', 'predefined classes'), ('predefined classes', 'part of', ""Java API's"")]"
The <T> is a type token that signals that this class can have a type set when instantiated.,"[('<T>', 'is a', 'type token'), ('type token', 'signals', 'class can have a type set when instantiated')]"
Notice how it is not necessary to cast the object returned from the factory.createInstance() method.,"[('factory', 'has method', 'createInstance()'), ('createInstance()', 'returns', 'object')]"
Notice how we can call the addAndReturn() method using both String's and Integer's and their corresponding collections.,"[('addAndReturn()', 'can be called using', ""String's""), ('addAndReturn()', 'can be called using', ""Integer's""), ('addAndReturn()', 'can be called using', 'String collections'), ('addAndReturn()', 'can be called using', 'Integer collections')]"
"Java Generic's wildcards is a mechanism in Java Generics aimed at making it possible to cast a collection of a certain class, e.g A, to a collection of a subclass or superclass of A.","[(""Java Generic's wildcards"", 'is a mechanism in', 'Java Generics'), ('Java Generics', 'aimed at', 'making it possible to cast a collection of a certain class'), ('collection of a certain class', 'example', 'A'), ('collection of a certain class', 'cast to', 'collection of a subclass of A'), ('collection of a certain class', 'cast to', 'collection of a superclass of A')]"
"In listA you can insert objects that are either instances of A, or subclasses of A (B and C).","[('listA', 'can insert objects', 'instances of A'), ('listA', 'can insert objects', 'subclasses of A'), ('subclasses of A', 'includes', 'B'), ('subclasses of A', 'includes', 'C')]"
When you then try to take objects out of listB you could risk to get non-B objects out (e.g.,"[('listB', 'contains', 'objects'), ('objects', 'type', 'non-B objects')]"
Thus you could insert non-B objects into a list declared to hold B (or B subclass) instances.,"[('non-B objects', 'can be inserted into', 'list'), ('list', 'declared to hold', 'B instances'), ('list', 'declared to hold', 'B subclass instances')]"
"Imagine you have a method that processes the elements of a List, e.g.","[('method', 'processes', 'elements'), ('elements', 'part of', 'List')]"
The processElements() method can now be called with any generic List as parameter.,"[('processElements() method', 'can be called with', 'any generic List')]"
"When you know that the instances in the collection are of instances of A or subclasses of A, it is safe to read the instances of the collection and cast them to A instances.","[('instances in the collection', 'are of instances of', 'A'), ('instances in the collection', 'are of instances of', 'subclasses of A'), ('it', 'is safe to read', 'instances of the collection'), ('it', 'is safe to cast', 'instances of the collection to A instances')]"
"You can now call the processElements() method with either a List<A>, List<B> or List<C>.","[('processElements()', 'can be called with', 'List<A>'), ('processElements()', 'can be called with', 'List<B>'), ('processElements()', 'can be called with', 'List<C>')]"
"super A> means that the list is typed to either the A class, or a superclass of A.","[('list', 'typed to', 'A class'), ('list', 'typed to', 'superclass of A')]"
"When you know that the list is typed to either A, or a superclass of A, it is safe to insert instances of A or subclasses of A (e.g.","[('list', 'typed to', 'A'), ('list', 'typed to', 'superclass of A'), ('instances', 'insert into', 'list'), ('instances', 'instance of', 'A'), ('instances', 'instance of', 'subclasses of A')]"
"All of the elements inserted here are either A instances, or instances of A's superclass.","[('elements', 'are instances of', 'A'), ('elements', 'are instances of', ""A's superclass"")]"
"Since both B and C extend A, if A had a superclass, B and C would also be instances of that superclass.","[('B', 'extends', 'A'), ('C', 'extends', 'A'), ('A', 'has superclass', 'superclass'), ('B', 'instance of', 'superclass'), ('C', 'instance of', 'superclass')]"
"You can now call insertElements() with either a List<A>, or a List typed to a superclass of A.","[('insertElements()', 'can be called with', 'List<A>'), ('insertElements()', 'can be called with', 'List typed to a superclass of A')]"
"The insertElements() method cannot read from the list though, except if it casts the read objects to Object.","[('insertElements() method', 'cannot read from', 'list'), ('insertElements() method', 'casts read objects to', 'Object')]"
"The elements already present in the list when insertElements() is called could be of any type that is either an A or superclass of A, but it is not possible to know exactly which class it is.","[('elements', 'present in', 'list'), ('insertElements()', 'called on', 'list'), ('elements', 'could be of type', 'A'), ('elements', 'could be of type', 'superclass of A')]"
"However, since any class eventually subclass Object you can read objects from the list if you cast them to Object.","[('class', 'subclass', 'Object'), ('objects', 'can be read from', 'list'), ('you', 'cast', 'objects'), ('objects', 'cast to', 'Object')]"
Here are a few examples of calls to the getInstance() method:,"[('getInstance()', 'has example', 'calls')]"
As you can see the return type changes depending on what class object you pass in as parameter to the method.,"[('return type', 'changes depending on', 'class object'), ('class object', 'passed as parameter to', 'method')]"
It is possible to use your own collection type classes with the new for-loop.,"[('your own collection type classes', 'can be used with', 'the new for-loop')]"
And here is the corresponding implementation skeleton of the MyIterator class:,"[('MyIterator', 'has implementation', 'skeleton')]"
Generics add a way to specify concrete types to general purpose classes and methods that operated on Object before.,"[('Generics', 'add a way to specify', 'concrete types'), ('concrete types', 'applied to', 'general purpose classes'), ('concrete types', 'applied to', 'methods'), ('general purpose classes', 'operated on', 'Object'), ('methods', 'operated on', 'Object')]"
"Note: Java generics can be used with other classes than the collection classes, but it is easiest to show the basics of Java generics using collections.","[('Java generics', 'can be used with', 'other classes'), ('Java generics', 'can be used with', 'collection classes'), ('Java generics', 'show basics using', 'collections')]"
"When you just write a diamond operator as generic type, the Java compiler will assume that the class instantiated is to have the same type as the variable it is assigned to.","[('diamond operator', 'used as', 'generic type'), ('Java compiler', 'assume', 'class instantiated has same type as variable assigned to')]"
This for-loop is shorter than original while-loop where you would iterate the collections Iterator and call Iterator.next() to obtain the next instance.,"[('for-loop', 'is shorter than', 'while-loop'), ('while-loop', 'iterates', 'collections Iterator'), ('Iterator', 'provides method', 'Iterator.next()'), ('Iterator.next()', 'obtains', 'next instance')]"
It is of course possible to use Generics for other classes than the Java collections.,"[('Generics', 'can be used for', 'other classes'), ('Generics', 'can be used for', 'Java collections')]"
"Using Java generics in your own classes is described in more detail in the tutorials about generic classes, generic methods and using class objects as type literals.","[('Java generics', 'used in', 'own classes'), ('Java generics', 'described in', 'tutorials about generic classes'), ('Java generics', 'described in', 'tutorials about generic methods'), ('Java generics', 'described in', 'tutorials about using class objects as type literals')]"
The java.text.DateFormat class is used to format dates as strings according to a specific Locale.,"[('java.text.DateFormat', 'used to', 'format dates as strings'), ('format dates as strings', 'according to', 'specific Locale')]"
You create a DateFormat using the getDateInstance() and getTimeInstance() method of the DateFormat class.,"[('You', 'create', 'DateFormat'), ('DateFormat', 'created using', 'getDateInstance()'), ('DateFormat', 'created using', 'getTimeInstance()'), ('getDateInstance()', 'method of', 'DateFormat class'), ('getTimeInstance()', 'method of', 'DateFormat class')]"
The date format parameter can be chosen among the following constants in the DateFormat class:,"[('date format parameter', 'can be chosen among', 'constants'), ('constants', 'located in', 'DateFormat class')]"
"In order to format only time and not the date itself, you need a time instance of the DateFormat class.","[('time instance', 'instance of', 'DateFormat class')]"
The java.text.DecimalFormat class is used to format numbers using a formatting pattern you specify yourself.,"[('java.text.DecimalFormat', 'used to', 'format numbers'), ('format numbers', 'using', 'formatting pattern')]"
This text explains how to use the DecimalFormat class to format different types of numbers.,"[('DecimalFormat class', 'used to', 'format different types of numbers')]"
You can change this pattern later using the applyPattern() or applyLocalizedPattern() method.,"[('You', 'can change', 'pattern'), ('pattern', 'can be changed using', 'applyPattern() method'), ('pattern', 'can be changed using', 'applyLocalizedPattern() method')]"
The applyPattern() method simply applies a new pattern to the DecimalFormat instance as if it were created with that pattern.,"[('applyPattern() method', 'applies', 'new pattern'), ('new pattern', 'applied to', 'DecimalFormat instance')]"
The applyLocalizedPattern() does the same as applyPattern() except it interpretes the characters in the pattern according to the Locale the DecimalFormat was created with.,"[('applyLocalizedPattern()', 'does the same as', 'applyPattern()'), ('applyLocalizedPattern()', 'interprets characters in pattern according to', 'Locale'), ('DecimalFormat', 'created with', 'Locale')]"
You format a number using the format() method of the DecimalFormat instance.,"[('DecimalFormat instance', 'has method', 'format()'), ('format()', 'used for', 'format a number')]"
"For a full explanation of what these methods do, see the JavaDoc for the DecimalFormatSymbols class.","[('methods', 'explained in', 'JavaDoc'), ('JavaDoc', 'contains information about', 'DecimalFormatSymbols class')]"
The DecimalFormat class has a method called setGroupingSize() which sets how many digits of the integer part to group.,"[('DecimalFormat', 'has method', 'setGroupingSize()'), ('setGroupingSize()', 'sets', 'grouping size of integer part')]"
"The java.text.BreakIterator class is used to find character, word and sentence boundaries across different languages.","[('java.text.BreakIterator class', 'used to find', 'character boundaries'), ('java.text.BreakIterator class', 'used to find', 'word boundaries'), ('java.text.BreakIterator class', 'used to find', 'sentence boundaries'), ('java.text.BreakIterator class', 'used across', 'different languages')]"
You create an instance that can recognize one of the above boundaries using the corresponding factory method in the BreakIterator class.,"[('You', 'create', 'instance'), ('instance', 'can recognize', 'one of the above boundaries'), ('instance', 'using', 'corresponding factory method'), ('corresponding factory method', 'in', 'BreakIterator class')]"
"A character instance of the BreakIterator class finds character boundaries for user characters, not unicode characters.","[('BreakIterator class', 'has function', 'finds character boundaries'), ('character instance', 'instance of', 'BreakIterator class'), ('character boundaries', 'for', 'user characters'), ('character boundaries', 'not for', 'unicode characters')]"
"This example creates a BreakIterator targeted at the British language, and sets the text to find character breaks in using the setText() method.","[('example', 'creates', 'BreakIterator'), ('BreakIterator', 'targeted at', 'British language'), ('setText() method', 'used for', 'set the text'), ('setText() method', 'find', 'character breaks')]"
"Again, here the first() and next() methods return the unicode index of the found word boundary.","[('first()', 'returns', 'unicode index'), ('next()', 'returns', 'unicode index'), ('unicode index', 'of', 'found word boundary')]"
"Notice how the isWord() method uses the Character.isLetterOrDigit() method to determine if a character is a letter or digit, or something else (like semicolon, quote etc.).","[('isWord() method', 'uses', 'Character.isLetterOrDigit() method'), ('Character.isLetterOrDigit() method', 'determines if', 'character is a letter or digit'), ('character', 'can be', 'letter'), ('character', 'can be', 'digit'), ('character', 'can be', 'something else')]"
"The Character.isLetterOrDigit() checks according to the unicode characters if a character is a letter or digit - and thus not just in the english language, but also in other languages.","[('Character.isLetterOrDigit()', 'checks', 'unicode characters'), ('unicode characters', 'determine if', 'character is a letter or digit'), ('character', 'is a letter or digit', 'in english language'), ('character', 'is a letter or digit', 'in other languages')]"
Java has some methods in the java.lang.Character class that are useful in internationalization of Java applications.,"[('Java', 'has methods in class', 'java.lang.Character'), ('java.lang.Character', 'useful in', 'internationalization of Java applications')]"
"To safely check if a character is a letter, number or space character you need to use the methods in java.lang.Character to do so.","[('character', 'can be', 'letter'), ('character', 'can be', 'number'), ('character', 'can be', 'space character'), ('methods', 'located in', 'java.lang.Character'), ('methods', 'used to', 'check if a character is a letter, number or space character')]"
The Character class also has a getType() method which returns the type of a certain character.,"[('Character class', 'has method', 'getType()'), ('getType()', 'returns', 'type of a certain character')]"
The returned type is an int which matches a set of predefined constants in the Character class.,"[('returned type', 'is a', 'int'), ('int', 'matches', 'set of predefined constants'), ('set of predefined constants', 'in', 'Character class')]"
Look in the JavaDoc for the Character class for more constants.,"[('JavaDoc', 'contains information about', 'Character class'), ('Character class', 'contains', 'constants')]"
The Character class also has a method that enables you to determine if the value of a given int defines a character in unicode.,"[('Character class', 'has method', 'method that enables you to determine if the value of a given int defines a character in unicode'), ('method that enables you to determine if the value of a given int defines a character in unicode', 'determines', 'if the value of a given int defines a character in unicode')]"
"Thus, simply using the String.compareTo() method may not work for all languages.","[('String.compareTo() method', 'may not work for', 'all languages')]"
"To sort a collection of strings according to the rules of a certain Locale, you use a java.text.Collator instance created for that specific Locale.","[('collection of strings', 'sorted according to rules of', 'Locale'), ('java.text.Collator instance', 'created for', 'Locale')]"
To compare two strings using the Collator instance you call the compare() method.,"[('Collator instance', 'used to', 'compare two strings'), ('compare()', 'method of', 'Collator instance')]"
The compare() method returns an int with the same meaning as the String.compareTo() method:,"[('compare() method', 'returns', 'int'), ('int', 'has meaning as', 'String.compareTo() method')]"
A 0 means that the two strings have the same order - e.g.,"[('0', 'means', 'two strings have the same order')]"
There are more rules you can use with the RuleBasedCollator class.,"[('RuleBasedCollator class', 'has feature', 'more rules')]"
You normalize a string using the static normalize() method of the java.text.Normalizer class.,"[('You', 'use method', 'normalize()'), ('normalize()', 'is a method of', 'java.text.Normalizer class'), ('normalize()', 'is static method', 'java.text.Normalizer class'), ('java.text.Normalizer class', 'contains method', 'normalize()')]"
The first parameter to the normalize() method is the text to normalize.,"[('normalize() method', 'has parameter', 'first parameter'), ('first parameter', 'is for', 'text to normalize')]"
You can use the String class to convert a byte array to a String instance.,"[('String class', 'used to convert', 'byte array'), ('byte array', 'converted to', 'String instance')]"
You can convert the text of a String to another format using the getBytes() method.,"[('String', 'has method', 'getBytes()'), ('getBytes()', 'converts text to', 'another format')]"
The Reader and Writer classes are stream oriented classes that enable a Java application to read and write streams of characters.,"[('Reader and Writer classes', 'are', 'stream oriented classes'), ('stream oriented classes', 'enable', 'Java application'), ('Java application', 'to read', 'streams of characters'), ('Java application', 'to write', 'streams of characters')]"
This is done using the second constructor paramter in the InputStreamReader class.,"[('second constructor parameter', 'used in', 'InputStreamReader class')]"
"Input is everything that your application receives from its users, either directly through the user interface, sent to it via service calls (e.g.","[('application', 'receives', 'input'), ('input', 'comes from', 'users'), ('users', 'provide', 'input'), ('input', 'received through', 'user interface'), ('input', 'sent via', 'service calls')]"
"The internationalization layer should convert from whatever character encoding the input comes in (ascii, UTF-8 etc.)","[('internationalization layer', 'should convert from', 'character encoding'), ('character encoding', 'includes', 'ascii'), ('character encoding', 'includes', 'UTF-8'), ('input', 'comes in', 'character encoding')]"
Java has a set of built-in classes that can help you handle internationalization of your application.,"[('Java', 'has', 'set of built-in classes'), ('set of built-in classes', 'can help', 'handle internationalization'), ('set of built-in classes', 'related to', 'application')]"
Each of these classes are covered in more detail in later texts in this trail.,"[('classes', 'covered in', 'texts'), ('texts', 'part of', 'trail')]"
In Java you can convert between time zones using the java.util.Calendar class.,"[('Java', 'allows', 'convert between time zones'), ('convert between time zones', 'using', 'java.util.Calendar class')]"
"Please not, that the Calendar.getTimeInMillis() always returns the time in UTC, regardless of the time zone set on the Calendar instance.","[('Calendar.getTimeInMillis()', 'returns time in', 'UTC'), ('Calendar instance', 'has setting', 'time zone')]"
"As you saw in the example, you get the time zone from the java.util.TimeZone class.","[('java.util.TimeZone', 'provides', 'time zone')]"
You can obtain a list of the available time zone ID's using the TimeZone.getAvailableIDs() .,"[('TimeZone', 'provides method', 'getAvailableIDs()'), ('getAvailableIDs()', 'returns', 'list of available time zone IDs')]"
"This examples obtains all the available time zone ID's, and then prints them to System.out.","[('This example', 'obtains', ""all the available time zone ID's""), ('This example', 'prints', 'them to System.out')]"
"I have described the java.util.TimeZone class in more detail in my Java Date Time tutorial, in the TimeZone class.","[('java.util.TimeZone', 'described in', 'Java Date Time tutorial'), ('Java Date Time tutorial', 'contains', 'TimeZone class')]"
"This Java internationalization tutorial is ""work in progress"", so if you spot a a missing description of a feature etc., please be patient.",
"The Java Locale class, java.util.Locale, is used to represent a ""geographical, political or cultural"" region to localize a given text, number, date or operation to.",
The Locale class cannot do any internationalization or localization by itself.,"[('Locale class', 'cannot do', 'internationalization'), ('Locale class', 'cannot do', 'localization')]"
"The Locale class complies with the BCP 47 (IETF BCP 47, ""Tags for Identifying Languages"") standard.",
"The Locale class also has support for the LDML (UTS#35 ""Unicode Locale Data Markup Language"") standard, which is a BCP 47-compatible extension for locale data exchange.",
"Language codes are case insensitive, but the Locale class always use lowercase versions of the language codes.","[('Language codes', 'are', 'case insensitive'), ('Locale class', 'use', 'lowercase versions of the language codes')]"
"Script codes are case insensitive, but the Locale class always uses a version with the first letter in uppercase, and the rest in lowercase.","[('Script codes', 'are', 'case insensitive'), ('Locale class', 'uses', 'version with the first letter in uppercase and the rest in lowercase')]"
"The country code is a 2 character code following the ISO 3166 standard, or a UN M.49 numeric area code.","[('country code', 'follows standard', 'ISO 3166'), ('country code', 'is a type of', '2 character code'), ('country code', 'is a type of', 'UN M.49 numeric area code')]"
"The country code is case insensitive, but the Locale class uses an uppercase version of the country code.","[('country code', 'is', 'case insensitive'), ('Locale class', 'uses', 'uppercase version of the country code')]"
See the JavaDoc for the Locale class for more detail about variant.,"[('JavaDoc', 'provides detail about', 'Locale class'), ('Locale class', 'has detail about', 'variant')]"
"For instance, what calendar to use when displaying dates (Gregorian, Arab, Japanese etc.).","[('calendar', 'example of', 'Gregorian'), ('calendar', 'example of', 'Arab'), ('calendar', 'example of', 'Japanese')]"
See the JavaDoc for the Locale class for more detail about extensions.,"[('JavaDoc', 'provides detail about', 'Locale class'), ('Locale class', 'has detail in', 'JavaDoc')]"
Creating a java.util.Locale instance can be done in four different ways:,"[('java.util.Locale', 'can be created in', 'four different ways')]"
The java.util.Locale class contains a set of constants that represent the most commonly used languages in the world.,"[('java.util.Locale class', 'contains', 'set of constants'), ('set of constants', 'represent', 'most commonly used languages in the world')]"
You can also create a java.util.Locale instance by using one of its constructors.,"[('java.util.Locale', 'can be created by', 'using one of its constructors')]"
From Java 7 you can use the Locale.Builder class to build a Locale instance.,"[('Java 7', 'allows use of', 'Locale.Builder class'), ('Locale.Builder class', 'used to build', 'Locale instance')]"
The factory method Locale.forLanguageTag() can also be used to create a Locale instance.,"[('factory method Locale.forLanguageTag()', 'can be used to create', 'Locale instance')]"
The ResourceBundle class is covered in more detail in the text about the ResourceBundle class.,"[('ResourceBundle class', 'is covered in', 'text about the ResourceBundle class')]"
"Finally, I may want to show how a given application works to a person who doesn't speak the language that my application is localized to (e.g.","[('I', 'want to show', 'how a given application works'), ('application', 'localized to', 'language'), ('person', 'does not speak', 'language')]"
"English or Danish), so I may want to temporarily change language to e.g.","[('I', 'may want to change language to', 'English'), ('I', 'may want to change language to', 'Danish')]"
The java.text.NumberFormat class is used to format numbers according to a specific Locale.,"[('java.text.NumberFormat', 'used to', 'format numbers'), ('format numbers', 'according to', 'Locale')]"
Formatting a number using a NumberFormatter is done using the format() method.,"[('NumberFormatter', 'used for', 'formatting a number'), ('formatting a number', 'done using', 'format() method')]"
"Notice that numbers like 100.00 might be formatted without the decimals, as 100.","[('numbers like 100.00', 'might be formatted without', 'the decimals'), ('numbers like 100.00', 'might be formatted as', '100')]"
Formatting a number as a currency is still done using the format() method.,"[('format() method', 'used for', 'formatting a number as a currency')]"
"You can also set the Currency object to use for formatting a number as a currency, using the setCurrency() method on the NumberFormat class.","[('Currency object', 'used for', 'formatting a number as a currency'), ('setCurrency() method', 'used on', 'NumberFormat class'), ('setCurrency() method', 'sets', 'Currency object')]"
Formatting a number as a percentage is also done using the format() method.,"[('format() method', 'used for', 'formatting a number as a percentage')]"
You can set the rounding mode using the setRoundingMode() method of the NumberFormat class.,"[('setRoundingMode()', 'method of', 'NumberFormat class'), ('You', 'can set', 'rounding mode')]"
"Had the NumberFormat instance been created using a UK Locale instance, the number had been parsed to 10000, because the comma would have been interpreted as a integer separator (e.g.","[('NumberFormat instance', 'created using', 'UK Locale instance'), ('number', 'parsed to', '10000'), ('comma', 'interpreted as', 'integer separator')]"
"The Java ResourceBundle class, java.util.ResourceBundle, is used to store texts and components that are locale sensitive.","[('Java ResourceBundle class', 'is a', 'java.util.ResourceBundle'), ('Java ResourceBundle class', 'used to store', 'texts'), ('Java ResourceBundle class', 'used to store', 'components'), ('texts', 'are', 'locale sensitive'), ('components', 'are', 'locale sensitive')]"
"A user's locale is represented by the Java Locale class, by the way.","[('user', 'locale represented by', 'Java Locale class')]"
This text takes a closer look at the ResourceBundle class and its subclasses.,"[('ResourceBundle class', 'has subclass', 'subclasses')]"
The PropertyResourceBundle class stores localized texts in standard Java property files.,"[('PropertyResourceBundle', 'stores', 'localized texts'), ('localized texts', 'stored in', 'Java property files')]"
Then you pass that Locale instance to the ResourceBundle.getBundle() method along with the name of the resource bundle to load.,"[('Locale instance', 'passed to method', 'ResourceBundle.getBundle()'), ('ResourceBundle.getBundle()', 'requires', 'name of the resource bundle')]"
Finally you can access the localized values in the ResourceBundle via its different getString() and getObject() etc.,"[('ResourceBundle', 'provides method', 'getString()'), ('ResourceBundle', 'provides method', 'getObject()'), ('getString()', 'accesses', 'localized values'), ('getObject()', 'accesses', 'localized values')]"
"You are never actually creating a ResourceBundle instance, but an instance of one of its two subclasses.","[('ResourceBundle', 'has subclass', 'subclass'), ('subclass', 'instance of', 'ResourceBundle')]"
"First the ResourceBundle class will look for a ListResourceBundle, and then for a PropertyResourceBundle.","[('ResourceBundle class', 'looks for', 'ListResourceBundle'), ('ResourceBundle class', 'looks for', 'PropertyResourceBundle')]"
"It does so by matching the name of the requested resource bundle (first parameter in the getBundle() method) against the class names of a ListResourceBundle first, and if none found, against a property file resource bundle.","[('getBundle() method', 'has parameter', 'name of the requested resource bundle'), ('name of the requested resource bundle', 'matched against', 'class names of a ListResourceBundle'), ('name of the requested resource bundle', 'matched against', 'property file resource bundle')]"
For this example to work you should put a standard Java property file named MyBundle.properties in a Java package named i18n.,"[('MyBundle.properties', 'is a', 'Java property file'), ('MyBundle.properties', 'located in', 'i18n'), ('i18n', 'contains', 'MyBundle.properties')]"
"Make sure this property file is available on your class path when you run the above code, meaning the property file should be located among the classes of your application, and in the i18n package.","[('property file', 'should be located among', 'classes of your application'), ('property file', 'should be located in', 'i18n package')]"
The name of a resource bundle is like a class name.,"[('resource bundle', 'has name', 'class name')]"
"Thus, i18n.MyBundle means a property file named MyBundle.properties in the package (directory) i18n.","[('i18n.MyBundle', 'means', 'MyBundle.properties'), ('MyBundle.properties', 'located in', 'package i18n')]"
"In case no property file is available for the language (Locale) passed to the ResourceBundle.getBundle() method, and the system has no default Locale set (e.g.","[('ResourceBundle.getBundle()', 'requires', 'property file'), ('property file', 'associated with', 'language (Locale)'), ('system', 'may not have', 'default Locale')]"
You can also use a set of classes to contain your resources.,"[('set of classes', 'used to contain', 'resources')]"
"Like with the property files, you create a set of classes with a bundle base name and language suffixes.","[('property files', 'are similar to', 'set of classes'), ('set of classes', 'have', 'bundle base name'), ('set of classes', 'have', 'language suffixes')]"
Here is an example implementation of the default bundle class file:,"[('example implementation', 'is a type of', 'default bundle class file')]"
"You can also obtain a set of all keys contained in the ResourceBundle using the keySet() method, like this:","[('keySet() method', 'used for', 'obtain a set of all keys'), ('set of all keys', 'contained in', 'ResourceBundle')]"
The java.text.SimpleDateFormat class is used to both parse and format dates according to a formatting pattern you specify yourself.,"[('java.text.SimpleDateFormat', 'used to', 'parse dates'), ('java.text.SimpleDateFormat', 'used to', 'format dates'), ('java.text.SimpleDateFormat', 'according to', 'formatting pattern')]"
This text explains how to use the SimpleDateFormat class to format dates.,"[('SimpleDateFormat class', 'used to', 'format dates')]"
Once you have created a SimpleDateFormat instance you can format dates using its format() method.,"[('SimpleDateFormat instance', 'can format', 'dates'), ('SimpleDateFormat instance', 'uses method', 'format()')]"
The Date instance passed to the format() method is a java.util.Date instance.,"[('Date instance', 'passed to method', 'format()'), ('format()', 'method of', 'java.util.Date'), ('Date instance', 'instance of', 'java.util.Date')]"
"The Java SimpleDateFormat class is also capable of formatting a Date object into a StringBuffer, instead of returning an individual String with the date formatted.","[('Java SimpleDateFormat class', 'capable of', 'formatting a Date object into a StringBuffer'), ('Java SimpleDateFormat class', 'capable of', 'returning an individual String with the date formatted')]"
"The SimpleDateFormat class does this via a version of the format() method that takes the Date, StringBuffer and a FieldPosition instance as parameters.","[('SimpleDateFormat class', 'has method', 'format()'), ('format()', 'takes parameter', 'Date'), ('format()', 'takes parameter', 'StringBuffer'), ('format()', 'takes parameter', 'FieldPosition instance')]"
It seems the format() method appends the formatted String to the end of the StringBuffer no matter what the int value passed to the FieldPosition constructor is.,"[('format() method', 'appends', 'formatted String'), ('formatted String', 'appends to', 'end of the StringBuffer'), ('int value', 'passed to', 'FieldPosition constructor')]"
You can parse a String into a java.util.Date instance using the parse() method of the SimpleDateFormat instance.,"[('String', 'can be parsed into', 'java.util.Date instance'), ('parse() method', 'is used by', 'SimpleDateFormat instance'), ('SimpleDateFormat instance', 'uses', 'parse() method')]"
"For instance, you can write either yy for a 2-character version of the year (e.g.","[('yy', 'represents', '2-character version of the year')]"
"12), or you can write yyyy for a 4-character version of the year (e.g.","[('yyyy', 'is a version of', 'year'), ('year', 'has version', 'yyyy')]"
"For more information about the patterns accepted, see the JavaDoc for the SimpleDateFormat class.","[('patterns', 'accepted by', 'SimpleDateFormat class'), ('JavaDoc', 'contains information about', 'patterns'), ('JavaDoc', 'contains information about', 'SimpleDateFormat class')]"
"The indices in this array must start from one, to be indexable by the Calendar.SUNDAY, Calendar.MONDAY etc.","[('indices', 'must start from', 'one'), ('indices', 'to be indexable by', 'Calendar.SUNDAY'), ('indices', 'to be indexable by', 'Calendar.MONDAY')]"
See the JavaDoc for the java.text.DateFormatSymbols class for more details about these methods and symbols.,"[('JavaDoc', 'provides details about', 'java.text.DateFormatSymbols class'), ('java.text.DateFormatSymbols class', 'contains', 'methods'), ('java.text.DateFormatSymbols class', 'contains', 'symbols')]"
You can set the time zone of a SimpleDateFormat using its setTimeZone() method.,"[('SimpleDateFormat', 'has method', 'setTimeZone()'), ('setTimeZone()', 'sets', 'time zone')]"
The setTimeZone() method takes an Java TimeZone instance (java.util.TimeZone) as parameter.,"[('setTimeZone() method', 'takes as parameter', 'Java TimeZone instance'), ('Java TimeZone instance', 'instance of', 'java.util.TimeZone')]"
"Of these ISO time zone formats, the Java SimpleDateFormat class only supports the second format (+hhmm), or the format ending with the Z character.","[('Java SimpleDateFormat class', 'supports', 'second format (+hhmm)'), ('Java SimpleDateFormat class', 'supports', 'format ending with the Z character')]"
"This is to make the SimpleDateFormat class treat them as literal characters to be inserted, instead of trying to interpret them as representing some part of the date.","[('SimpleDateFormat class', 'treat', 'literal characters'), ('literal characters', 'to be inserted', 'SimpleDateFormat class'), ('SimpleDateFormat class', 'interpret', 'some part of the date')]"
"The Java BufferedInputStream class, java.io.BufferedInputStream, provides transparent reading of chunks of bytes and buffering for a Java InputStream, including any subclasses of InputStream.","[('Java BufferedInputStream class', 'provides', 'transparent reading of chunks of bytes'), ('Java BufferedInputStream class', 'provides', 'buffering for a Java InputStream'), ('Java BufferedInputStream class', 'includes', 'any subclasses of InputStream')]"
"The BufferedInputStream creates a byte array internally, and attempts to fill the array by calling the InputStream.read(byte[]) methods on the underlying InputStream.","[('BufferedInputStream', 'creates', 'byte array'), ('BufferedInputStream', 'calls', 'InputStream.read(byte[]) methods'), ('InputStream.read(byte[]) methods', 'called on', 'underlying InputStream')]"
An interesting aspect to note about the BufferedInputStream is that is supports the mark() and reset() methods inherited from the InputStream.,"[('BufferedInputStream', 'supports', 'mark()'), ('BufferedInputStream', 'supports', 'reset()'), ('mark()', 'inherited from', 'InputStream'), ('reset()', 'inherited from', 'InputStream')]"
"In general you can call the markSupported() method to find out if mark() and reset() are supported on a given InputStream or not, but the BufferedInputStream supports them.","[('BufferedInputStream', 'supports', 'mark()'), ('BufferedInputStream', 'supports', 'reset()'), ('markSupported()', 'determines if', 'mark()'), ('markSupported()', 'determines if', 'reset()'), ('markSupported()', 'applies to', 'InputStream')]"
You close a BufferedInputStream by calling the close() method inherited from InputStream.,"[('BufferedInputStream', 'method', 'close()'), ('close()', 'inherited from', 'InputStream')]"
Notice how the while loop continues until a -1 value is read from the BufferedInputStream read() method.,"[('while loop', 'continues until', '-1 value is read'), ('-1 value', 'is read from', 'BufferedInputStream read() method')]"
"After that, the while loop exits, and the BufferedInputStream close() method is called.","[('while loop', 'exits after', 'that'), ('BufferedInputStream', 'has method', 'close()'), ('close()', 'is called after', 'while loop exits')]"
"If an exception is thrown while reading data from the BufferedInputStream, the close() method is never called.","[('exception', 'thrown while', 'reading data from the BufferedInputStream'), ('close() method', 'never called if', 'exception is thrown')]"
Proper exception handling for use of Java IO classes is also explained in my tutorial on Java IO Exception Handling.,"[('Proper exception handling', 'related to', 'use of Java IO classes'), ('tutorial on Java IO Exception Handling', 'explains', 'Proper exception handling'), ('tutorial on Java IO Exception Handling', 'topic', 'Java IO Exception Handling')]"
"The setSource() method actually returns a reference to the ReusableBufferedInputStream, so you can actually create a ReusableBufferedInputStream and set the source in a single instruction:","[('setSource()', 'returns reference to', 'ReusableBufferedInputStream'), ('ReusableBufferedInputStream', 'can create', 'ReusableBufferedInputStream'), ('ReusableBufferedInputStream', 'can set', 'source')]"
"Note, that this implementation only overrides the read() method of the InputStream class that it extends.","[('this implementation', 'overrides', 'read() method'), ('read() method', 'of', 'InputStream class'), ('this implementation', 'extends', 'InputStream class')]"
"The Java BufferedOutputStream class, java.io.BufferedOutputStream, is used to capture bytes written to the BufferedOutputStream in a buffer, and write the whole buffer in one batch to an underlying Java OutputStream for increased performance.","[('Java BufferedOutputStream class', 'is used to', 'capture bytes'), ('java.io.BufferedOutputStream', 'is a', 'Java BufferedOutputStream class'), ('BufferedOutputStream', 'writes to', 'underlying Java OutputStream'), ('BufferedOutputStream', 'contains', 'buffer'), ('buffer', 'is written in', 'one batch'), ('one batch', 'is written to', 'underlying Java OutputStream'), ('BufferedOutputStream', 'increases', 'performance')]"
The only difference is that you may need to call flush() if you need to be absolutely sure that the data written until now is flushed out of the buffer and onto the network or disk.,"[('you', 'may need to call', 'flush()'), ('data', 'is written to', 'buffer'), ('data', 'is flushed out of', 'buffer'), ('data', 'is flushed onto', 'network'), ('data', 'is flushed onto', 'disk')]"
To write data to a Java BufferedOutputStream you can use its write() method.,"[('Java BufferedOutputStream', 'has method', 'write()'), ('write()', 'used for', 'write data')]"
The write() method takes an int which contains the byte value of the byte to write.,"[('write() method', 'takes', 'int'), ('int', 'contains', 'byte value'), ('byte value', 'of', 'byte to write')]"
Here is an example of writing data to a Java BufferedOutputStream using its write() method:,"[('Java BufferedOutputStream', 'method', 'write()'), ('write()', 'used for', 'writing data')]"
"Since the Java BufferedOutputStream is a subclass of OutputStream, you can write arrays of bytes to the BufferedOutputStream too, instead of just a single byte at a time.","[('Java BufferedOutputStream', 'is a subclass of', 'OutputStream'), ('Java BufferedOutputStream', 'can write', 'arrays of bytes'), ('Java BufferedOutputStream', 'can write', 'single byte')]"
If you want to make sure that all written data is written to disk without having to close the BufferedOutputStream you can call its flush() method.,"[('BufferedOutputStream', 'has method', 'flush()'), ('flush()', 'ensures', 'all written data is written to disk')]"
"Calling flush() will make sure that all data which has been written to the BufferedOutputStream so far, is fully written to the underlying OutputStream too, plus flush() will also have been called on the underlying OutputStream.","[('flush()', 'ensures', 'all data written to BufferedOutputStream is fully written to OutputStream'), ('flush()', 'called on', 'underlying OutputStream')]"
Here is an example of calling the Java BufferedOutputStream flush() method:,"[('Java', 'has method', 'BufferedOutputStream'), ('BufferedOutputStream', 'has method', 'flush()')]"
"The concrete implementations of hasMoreData() and getMoreData() are left out, but they are not really super important to understand the principle of this example.","[('hasMoreData()', 'is a concrete implementation of', 'principle of this example'), ('getMoreData()', 'is a concrete implementation of', 'principle of this example')]"
"What matters is, that once the while loop ends, and you are done writing data to the BufferedOutputStream, its close() method is called, which closes the BufferedOutputStream .","[('while loop', 'ends', 'done writing data to the BufferedOutputStream'), ('close() method', 'called', 'closes the BufferedOutputStream')]"
"In case the write() method throws an exception, the close() method will never get called.","[('write() method', 'throws', 'exception'), ('close() method', 'will never get called', 'exception')]"
"Once the try block is exited, the close() method of the BufferedOutputStream is called automatically, because the BufferedOutputStream was declared inside the parentheses of the try block.","[('try block', 'contains', 'BufferedOutputStream'), ('BufferedOutputStream', 'declared inside', 'parentheses of the try block'), ('close() method', 'called automatically after exiting', 'try block'), ('BufferedOutputStream', 'has method', 'close() method')]"
"Even if an exception is thrown from inside the try block, the close() method is still called before the exception is propagated up the call stack.","[('exception', 'thrown from', 'try block'), ('close() method', 'called before', 'exception is propagated'), ('exception', 'propagated up', 'call stack')]"
"The Java BufferedReader class, java.io.BufferedReader, provides buffering for your Java Reader instances.","[('Java BufferedReader class', 'provides', 'buffering'), ('buffering', 'for', 'Java Reader instances'), ('Java BufferedReader class', 'part of', 'java.io.BufferedReader')]"
"The Java BufferedReader class is a subclass of the Java Reader class, so you can use a BufferedReader anywhere a Reader is required.","[('Java BufferedReader class', 'is a subclass of', 'Java Reader class'), ('Java BufferedReader class', 'can be used anywhere', 'Java Reader class is required')]"
Each character returned from read() is thus returned from this internal array.,"[('character', 'returned from', 'read()'), ('character', 'returned from', 'internal array')]"
The readLine() method will return a textual line (all text until at line break is found) read from the BufferedReader.,"[('readLine() method', 'returns', 'textual line'), ('textual line', 'read from', 'BufferedReader')]"
"If there is no more data to read from the underlying Reader, then the BufferedReader's readLine() method will return null .","[('BufferedReader', 'has method', 'readLine()'), ('readLine()', 'returns', nan), ('BufferedReader', 'reads from', 'underlying Reader'), ('underlying Reader', 'provides data to', 'BufferedReader')]"
The read() method of a Java BufferedReader returns an int which contains the char value of the next character read.,"[('read() method', 'part of', 'Java BufferedReader'), ('Java BufferedReader', 'has method', 'read() method'), ('read() method', 'returns', 'int'), ('int', 'contains', 'char value'), ('char value', 'of', 'next character read')]"
"If the read() method returns -1, there is no more data to read in the BufferedReader, and it can be closed.","[('read() method', 'returns', '-1'), ('BufferedReader', 'has no more data', 'read() method returns -1'), ('BufferedReader', 'can be', 'closed')]"
"If not, it processes that char and continues reading until -1 is returned from the BufferedReader read() method.","[('BufferedReader', 'method', 'read()'), ('read()', 'returns', '-1'), ('it', 'processes', 'char'), ('it', 'continues reading until', '-1')]"
"As mentioned earlier, the BufferedReader will actually read an array of characters from the underlying Reader and return these characters one by one, rather than forwarding every read() call to the underlying Reader.","[('BufferedReader', 'reads', 'array of characters'), ('BufferedReader', 'reads from', 'underlying Reader'), ('BufferedReader', 'returns', 'characters'), ('BufferedReader', 'does not forward', 'every read() call'), ('every read() call', 'to', 'underlying Reader')]"
"The Java BufferedReader class also has a read() method that takes a char array as parameter, as well as a start offset and length.","[('Java BufferedReader class', 'has method', 'read()'), ('read()', 'takes parameter', 'char array'), ('read()', 'takes parameter', 'start offset'), ('read()', 'takes parameter', 'length')]"
The char array is where the read() method will read the characters into.,"[('read() method', 'reads into', 'char array')]"
The offset parameter is where in the char array the read() method should start reading into.,"[('offset parameter', 'is where', 'char array'), ('read() method', 'should start reading into', 'offset parameter')]"
The length parameter is how many characters the read() method should read into the char array from the offset and forward.,"[('length parameter', 'determines', 'how many characters the read() method should read'), ('read() method', 'reads into', 'char array'), ('read() method', 'reads from', 'offset')]"
The Java BufferedReader has a special read method named readLine() which reads a full line of text from the BufferedReader's internal buffer.,"[('Java BufferedReader', 'has method', 'readLine()'), ('readLine()', 'reads', 'full line of text'), ('full line of text', 'from', ""BufferedReader's internal buffer"")]"
"If there are no more lines to read from the BufferedReader, the readLine() method returns null.","[('BufferedReader', 'method', 'readLine()'), ('readLine()', 'returns', nan), ('BufferedReader', 'contains', 'lines')]"
The Java BufferedReader class has a method named skip() which can be used to skip over a number of characters in the input that you do not want to read.,"[('Java BufferedReader class', 'has method', 'skip()'), ('skip()', 'used to', 'skip over a number of characters in the input')]"
You pass the number of characters to skip as parameter to the skip() method.,"[('You', 'pass', 'number of characters'), ('number of characters', 'to skip', 'parameter'), ('parameter', 'to', 'skip() method')]"
Notice how there is no longer any explicit close() method call.,"[('close() method', 'is', 'explicit')]"
"The setSource() method actually returns a reference to the ReusableBufferedReader, so you can actually create a ReusableBufferedReader and set the source in a single instruction:","[('setSource() method', 'returns', 'reference to the ReusableBufferedReader'), ('ReusableBufferedReader', 'can set', 'source')]"
"Note, that this implementation only overrides the read() and read(char[] dest, int offset, int length) methods of the Reader class that it extends.","[('this implementation', 'overrides', 'read() method'), ('this implementation', 'overrides', 'read(char[] dest, int offset, int length) method'), ('this implementation', 'extends', 'Reader class')]"
"The Java BufferedWriter is a Java Writer subclass, so it can be used anywhere a Writer is required.","[('Java BufferedWriter', 'is a subclass of', 'Java Writer'), ('Java BufferedWriter', 'can be used anywhere', 'Writer is required')]"
The BufferedWriter adds one extra method though: The newLine() method which can write a new-line character to the underlying Writer.,"[('BufferedWriter', 'adds method', 'newLine()'), ('newLine()', 'can write', 'new-line character'), ('new-line character', 'to', 'underlying Writer')]"
"In addition, you may need to call flush() if you need to be absolutely sure that the characters written until now is flushed out of the buffer and onto the network or disk.","[('you', 'may need to call', 'flush()'), ('characters', 'written until now', 'flushed out of the buffer'), ('characters', 'flushed out of the buffer', 'onto the network'), ('characters', 'flushed out of the buffer', 'onto the disk')]"
"Since the BufferedWriter collects the characters written internally in a buffer before writing them to the underlying Writer, the speedup is not as noticeable as with other Writer classes (that do not use buffering).","[('BufferedWriter', 'collects', 'characters'), ('characters', 'written in', 'buffer'), ('buffer', 'before writing to', 'underlying Writer'), ('BufferedWriter', 'provides', 'speedup'), ('speedup', 'not as noticeable as with', 'other Writer classes'), ('other Writer classes', 'do not use', 'buffering')]"
The Java BufferedWriter's flush() method flushes all data written to the BufferedWriter to the underlying data destination.,"[('Java BufferedWriter', 'has method', 'flush()'), ('flush()', 'flushes data to', 'underlying data destination'), ('data', 'written to', 'BufferedWriter')]"
"By calling flush() you can assure that any buffered data will be flushed (written) to disk (or network, or whatever else the destination of your BufferedWriter has).","[('flush()', 'action', 'assure'), ('buffered data', 'will be', 'flushed'), ('flushed', 'means', 'written'), ('written', 'destination', 'disk'), ('written', 'destination', 'network'), ('written', 'destination', 'whatever else the destination of your BufferedWriter has')]"
Here is an example of flushing data written to a Java BufferedWriter by calling its flush() method:,"[('BufferedWriter', 'has method', 'flush()'), ('flush()', 'used for', 'flushing data'), ('flushing data', 'performed by', 'BufferedWriter')]"
"The Java ByteArrayInputStream class, java.io.ByteArrayInputStream, of the Java IO API enables you to read data from byte arrays as streams of bytes.","[('Java ByteArrayInputStream class', 'part of', 'Java IO API'), ('java.io.ByteArrayInputStream', 'enables', 'read data from byte arrays as streams of bytes')]"
"In other words, the ByteArrayInputStream class can turn a byte array into an InputStream.","[('ByteArrayInputStream class', 'can turn', 'byte array'), ('byte array', 'into', 'InputStream')]"
"The ByteArrayInputStream class is a subclass of the InputStream class, so you can use a ByteArrayInputStream as an InputStream.","[('ByteArrayInputStream', 'is a subclass of', 'InputStream'), ('ByteArrayInputStream', 'can be used as', 'InputStream')]"
The ByteArrayInputStream also has a set of additional methods that are specific to the ByteArrayInputStream class.,"[('ByteArrayInputStream', 'has additional methods', 'ByteArrayInputStream class')]"
To use a Java ByteArrayInputStream you must first create an instance of the ByteArrayInputStream class.,"[('Java ByteArrayInputStream', 'requires', 'create an instance'), ('create an instance', 'of', 'ByteArrayInputStream class')]"
"You read bytes from a Java ByteArrayInputStream just like you would from a regular InputStream, via its read() method.","[('Java ByteArrayInputStream', 'is a type of', 'InputStream'), ('Java ByteArrayInputStream', 'has method', 'read()')]"
"The read() will return the next byte from the byte array, or -1 if the end of the byte array (or byte array section) has been reached.","[('read()', 'returns', 'next byte'), ('read()', 'returns', '-1'), ('-1', 'indicates', 'end of byte array')]"
The Java ByteArrayInputStream available() method tells you how many bytes are still available in the ByteArrayInputStream.,"[('Java ByteArrayInputStream', 'has method', 'available()'), ('available()', 'tells', 'how many bytes are still available'), ('how many bytes are still available', 'in', 'ByteArrayInputStream')]"
The mark() method of the ByteArrayInputStream class sets an internal mark at the current byte position - meaning right after the previous byte read.,"[('mark() method', 'part of', 'ByteArrayInputStream class'), ('mark() method', 'sets', 'internal mark'), ('internal mark', 'located at', 'current byte position'), ('current byte position', 'after', 'previous byte read')]"
"The mark() method takes a parameter telling how many bytes can be read past this mark, before this mark becomes invalid.","[('mark() method', 'takes parameter', 'number of bytes'), ('number of bytes', 'determines', 'read past mark'), ('mark', 'becomes', 'invalid')]"
Here is an example of setting a mark in a ByteArrayInputStream via its mark() method:,"[('ByteArrayInputStream', 'has method', 'mark()'), ('mark()', 'used for', 'setting a mark')]"
The reset() method of the ByteArrayInputStream resets how far it has read into the byte array.,"[('reset() method', 'belongs to', 'ByteArrayInputStream'), ('reset() method', 'resets', 'how far it has read into the byte array')]"
The Java ByteArrayInputStream skip() method enables you to skip over a number of bytes from the underlying byte array.,"[('Java ByteArrayInputStream skip() method', 'enables', 'skip over a number of bytes'), ('skip over a number of bytes', 'from', 'underlying byte array')]"
Here is an example of skipping over a number of bytes using the ByteArrayInputStream skip() method:,"[('ByteArrayInputStream', 'method', 'skip()'), ('skip()', 'used for', 'skipping over a number of bytes')]"
Notice how the while loop continues until a -1 value is read from the ByteArrayInputStream read() method.,"[('while loop', 'continues until', '-1 value'), ('-1 value', 'read from', 'ByteArrayInputStream read() method')]"
"After that, the while loop exits, and the ByteArrayInputStream close() method is called.","[('while loop', 'followed by', 'ByteArrayInputStream close() method'), ('ByteArrayInputStream close() method', 'called after', 'while loop exits')]"
"If an exception is thrown while reading data from the ByteArrayInputStream, the close() method is never called.","[('exception', 'thrown while', 'reading data from ByteArrayInputStream'), ('close() method', 'never called if', 'exception is thrown')]"
"The Java ByteArrayOutputStream class, java.io.ByteArrayOutputStream of the Java IO API enables you to capture data written to a stream in a byte array.","[('Java ByteArrayOutputStream class', 'is a', 'java.io.ByteArrayOutputStream'), ('java.io.ByteArrayOutputStream', 'part of', 'Java IO API'), ('Java IO API', 'enables', 'capture data written to a stream in a byte array')]"
You write your data to the ByteArrayOutputStream and when you are done you call the its toByteArray() method to obtain all the written data in a byte array.,"[('You', 'write data to', 'ByteArrayOutputStream'), ('You', 'call method', 'toByteArray()'), ('toByteArray()', 'obtains data in', 'byte array')]"
"Since the Java ByteArrayOutputStream class is a subclass of the Java OutputStream class, you write bytes to it using the same write methods that OutputStream has:","[('Java ByteArrayOutputStream class', 'subclass of', 'Java OutputStream class'), ('Java ByteArrayOutputStream class', 'uses method', 'write methods'), ('Java OutputStream class', 'has method', 'write methods')]"
"Once you have finished writing to the ByteArrayOutputStream you can obtain all the bytes written as a Java byte array, using the ByteArrayOutputStream toByteArray() method.","[('ByteArrayOutputStream', 'method', 'toByteArray()'), ('toByteArray()', 'returns', 'Java byte array'), ('ByteArrayOutputStream', 'contains', 'bytes')]"
Being a subclass of OutputStream the ByteArrayOutputStream also has a close() method.,"[('ByteArrayOutputStream', 'subclass of', 'OutputStream'), ('ByteArrayOutputStream', 'has method', 'close()')]"
But calling the close() method has no effect on the ByteArrayOutputStream.,"[('close() method', 'has no effect on', 'ByteArrayOutputStream')]"
"The Java DataInputStream class, java.io.DataInputStream, enables you to read Java primitives (int, float, long etc.)","[('Java DataInputStream class', 'enables', 'read Java primitives'), ('Java primitives', 'includes', 'int'), ('Java primitives', 'includes', 'float'), ('Java primitives', 'includes', 'long')]"
"The Java DataInputStream class is a subclass of InputStream, so DataInputStream also has the basic read methods that enable you to read a single byte or an array of bytes from the underlying InputStream, in case you need that.","[('Java DataInputStream class', 'is a subclass of', 'InputStream'), ('DataInputStream', 'has method', 'read'), ('read', 'enables', 'read a single byte'), ('read', 'enables', 'read an array of bytes'), ('read', 'from', 'underlying InputStream')]"
"As mentioned earlier, the DataInputStream class is often used together with a DataOutputStream.","[('DataInputStream', 'used together with', 'DataOutputStream')]"
You can read a Java boolean from the DataInputStream using its readBoolean() method.,"[('DataInputStream', 'has method', 'readBoolean()'), ('readBoolean()', 'reads', 'Java boolean')]"
Here is an example of reading a boolean from a Java DataInputStream using readBoolean():,"[('Java DataInputStream', 'method', 'readBoolean()'), ('readBoolean()', 'reads', 'boolean')]"
You can read a Java byte from the DataInputStream using its readByte() method.,"[('DataInputStream', 'has method', 'readByte()'), ('readByte()', 'reads', 'Java byte')]"
Here is an example of reading a byte from a Java DataInputStream using readByte():,"[('Java DataInputStream', 'operation', 'readByte()'), ('readByte()', 'action', 'reading a byte')]"
You can read a Java unsigned byte (only positive values) from the DataInputStream using its readUnsignedByte() method.,"[('DataInputStream', 'has method', 'readUnsignedByte()'), ('readUnsignedByte()', 'reads', 'Java unsigned byte'), ('Java unsigned byte', 'has property', 'only positive values')]"
Here is an example of reading an unsigned byte from a Java DataInputStream using readUnsignedByte():,"[('Java DataInputStream', 'operation', 'readUnsignedByte()'), ('readUnsignedByte()', 'reads', 'unsigned byte')]"
You can read a Java char from the DataInputStream using its readChar() method.,"[('DataInputStream', 'has method', 'readChar()'), ('readChar()', 'reads', 'Java char')]"
Here is an example of reading a char from a Java DataInputStream using readChar():,"[('Java DataInputStream', 'method', 'readChar()'), ('readChar()', 'action', 'reading a char')]"
You can read a Java double from the DataInputStream using its readDouble() method.,"[('DataInputStream', 'has method', 'readDouble()'), ('readDouble()', 'reads', 'Java double')]"
Here is an example of reading a double from a Java DataInputStream using readDouble():,"[('Java DataInputStream', 'method', 'readDouble()'), ('readDouble()', 'reads', 'double')]"
You can read a Java float from the DataInputStream using its readFloat() method.,"[('DataInputStream', 'has method', 'readFloat()'), ('readFloat()', 'reads', 'Java float')]"
Here is an example of reading a float from a Java DataInputStream using readFloat():,"[('Java DataInputStream', 'method', 'readFloat()'), ('readFloat()', 'reads', 'float')]"
You can read a Java short from the DataInputStream using its readShort() method.,"[('DataInputStream', 'has method', 'readShort()'), ('readShort()', 'reads', 'Java short')]"
Here is an example of reading a short from a Java DataInputStream using readShort():,"[('Java DataInputStream', 'method', 'readShort()'), ('readShort()', 'used for', 'reading a short')]"
You can read a Java unsigned short (only positive values) from the DataInputStream using its readUnsignedShort() method.,"[('DataInputStream', 'has method', 'readUnsignedShort()'), ('readUnsignedShort()', 'reads', 'Java unsigned short')]"
Here is an example of reading an unsigned short from a Java DataInputStream using readUnsignedShort():,"[('Java DataInputStream', 'method', 'readUnsignedShort()'), ('readUnsignedShort()', 'reads', 'unsigned short')]"
You can read a Java int from the DataInputStream using its readInt() method.,"[('DataInputStream', 'has method', 'readInt()'), ('readInt()', 'reads', 'Java int')]"
Here is an example of reading an int from a Java DataInputStream using readInt():,"[('Java DataInputStream', 'method', 'readInt()'), ('readInt()', 'reads', 'int')]"
You can read a Java long from the DataInputStream using its readLong() method.,"[('DataInputStream', 'has method', 'readLong()'), ('readLong()', 'reads', 'Java long')]"
Here is an example of reading an int from a Java DataInputStream using readLong():,"[('Java DataInputStream', 'method', 'readLong()'), ('readLong()', 'reads', 'int')]"
You can read a Java String from the DataInputStream using its readUTF() method.,"[('DataInputStream', 'has method', 'readUTF()'), ('readUTF()', 'reads', 'Java String')]"
Here is an example of reading a String from a Java DataInputStream using readUTF():,"[('Java DataInputStream', 'method', 'readUTF()'), ('readUTF()', 'reads', 'String')]"
"The Java File class, java.io.File in the Java IO API gives you access to the underlying file system.","[('Java File class', 'part of', 'Java IO API'), ('java.io.File', 'is', 'Java File class'), ('Java IO API', 'gives access to', 'underlying file system')]"
Note: The Java File class only gives you access to the file and directory meta data.,"[('Java File class', 'provides access to', 'file meta data'), ('Java File class', 'provides access to', 'directory meta data')]"
Note: If you are want to Java NIO (Java's non-blocking IO API) you will have to use the java.nio.FileChannel class instead.,"[('Java NIO', 'is', ""Java's non-blocking IO API""), ('java.nio.FileChannel', 'used for', 'Java NIO')]"
"Both Java File and FileChannel works, but in case you want a pure Java NIO solution use the Java NIO FileChannel class.","[('Java File', 'works with', 'FileChannel'), ('Java NIO', 'provides', 'FileChannel class'), ('FileChannel', 'is part of', 'Java NIO')]"
"Before you can do anything with the file system or File class, you must create a Java File instance.","[('You', 'must create', 'Java File instance'), ('Java File instance', 'related to', 'file system'), ('Java File instance', 'related to', 'File class')]"
The Java File class also has a few other constructors you can use to instantiate File instances in different ways.,"[('Java File class', 'has', 'constructors'), ('constructors', 'used to', 'instantiate File instances')]"
You can check if a file referenced by a Java File object exists using the File exists() method.,"[('Java File object', 'references', 'file'), ('File', 'has method', 'exists()'), ('exists()', 'checks', 'file existence')]"
You can use the Java File class to create directories if they don't already exists.,"[('Java File class', 'can be used to', 'create directories')]"
The File class contains the method mkdir() and mkdirs() for that purpose.,"[('File class', 'contains method', 'mkdir()'), ('File class', 'contains method', 'mkdirs()')]"
The mkdir() method creates a single directory if it does not already exist.,"[('mkdir() method', 'creates', 'single directory'), ('single directory', 'existence', 'does not already exist')]"
Here is an example of creating a single directory via the Java File class:,"[('Java File class', 'used for', 'creating a single directory')]"
"The mkdir() returns true if the directory was created, and false if not.","[('mkdir()', 'returns', 'true if the directory was created'), ('mkdir()', 'returns', 'false if not')]"
The mkdirs() will create all directories that are missing in the path the File object represents.,"[('mkdirs()', 'creates', 'directories'), ('directories', 'are missing in', 'path'), ('path', 'is represented by', 'File object')]"
Here is an example of creating multiple directories via the Java File class:,"[('Java File class', 'used for', 'creating multiple directories')]"
"The mkdirs() method will return true if all the directories were created, and false if not.","[('mkdirs() method', 'will return', 'true'), ('mkdirs() method', 'will return', 'false'), ('directories', 'were created', 'true')]"
The Java File class enables you to read the length in bytes of a file.,"[('Java File class', 'enables', 'read the length in bytes of a file')]"
"To read the length of a file, call the File length() method.","[('File', 'has method', 'length()'), ('length()', 'reads', 'length of a file')]"
Here is an example of reading the length of a file via the Java File length() method:,"[('Java', 'has method', 'File length()'), ('File length()', 'used for', 'reading the length of a file')]"
"To rename (or move) a file, call the method renameTo() on the File class.","[('renameTo()', 'is a method of', 'File class'), ('File class', 'has method', 'renameTo()'), ('renameTo()', 'used for', 'rename a file'), ('renameTo()', 'used for', 'move a file')]"
"As briefly mentioned earlier, the renameTo() method can also be used to move a file to a different directory.","[('renameTo() method', 'can be used to', 'move a file'), ('renameTo() method', 'can be used to', 'move a file to a different directory')]"
The new file name passed to the renameTo() method does not have to be in the same directory as the file was already residing in.,"[('new file name', 'passed to method', 'renameTo()'), ('new file name', 'does not have to be in the same directory as', 'file')]"
"The renameTo() method returns boolean (true or false), indicating whether the renaming was successful.","[('renameTo() method', 'returns', 'boolean'), ('boolean', 'indicates', 'whether the renaming was successful')]"
"The Java File renameTo() method also works for directories, by the way.","[('Java File renameTo() method', 'works for', 'directories')]"
"The delete() method returns boolean (true or false), indicating whether the deletion was successful.","[('delete() method', 'returns', 'boolean'), ('boolean', 'indicates', 'whether the deletion was successful')]"
"The Java File delete() method also works for directories, meaning you can also delete directories with it.","[('Java File delete() method', 'works for', 'directories'), ('Java File delete() method', 'can delete', 'directories')]"
The Java File delete() method can only delete a directory if the directory is empty.,"[('Java File delete() method', 'can delete', 'directory'), ('directory', 'condition', 'empty')]"
"You can check if a File object points to a file or directory, by calling its isDirectory() method.","[('File object', 'has method', 'isDirectory()'), ('isDirectory()', 'determines if', 'file or directory')]"
You can obtain a list of all the files in a directory by calling either the Java File list() method or the listFiles() method.,"[('Java File', 'has method', 'list()'), ('Java File', 'has method', 'listFiles()'), ('list()', 'used for', 'obtain a list of all the files in a directory'), ('listFiles()', 'used for', 'obtain a list of all the files in a directory')]"
The list() method returns an array of String's with the file and / or directory names of directory the File object points to.,"[('list() method', 'returns', ""array of String's""), (""array of String's"", 'contains', 'file and / or directory names'), ('File object', 'points to', 'directory')]"
The listFiles() returns an array of File objects representing the files and / or directories in the directory the File points to.,"[('listFiles()', 'returns', 'array of File objects'), ('array of File objects', 'representing', 'files'), ('array of File objects', 'representing', 'directories'), ('File', 'points to', 'directory')]"
Here is an example of listing all files in a directory via the Java File list() and listFiles() methods:,"[('Java', 'has method', 'File list()'), ('Java', 'has method', 'listFiles()'), ('File list()', 'used for', 'listing all files in a directory'), ('listFiles()', 'used for', 'listing all files in a directory')]"
"The Java FileInputStream class, java.io.FileInputStream, makes it possible to read the contents of a file as a stream of bytes.","[('Java FileInputStream class', 'is a', 'java.io.FileInputStream'), ('Java FileInputStream class', 'makes it possible to', 'read the contents of a file as a stream of bytes')]"
"Note also, that since FileInputStream is a subclass of InputStream, we can cast the created FileInputStream to an InputStream everywhere we want to, as we do in the example above.","[('FileInputStream', 'is a subclass of', 'InputStream'), ('FileInputStream', 'can be cast to', 'InputStream')]"
The FileInputStream class has a three different constructors you can use to create a FileInputStream instance.,"[('FileInputStream class', 'has', 'three different constructors'), ('three different constructors', 'used to create', 'FileInputStream instance')]"
"Actually, in my experience Java will also understand if you use a / as directory separator on Windows (e.g.","[('Java', 'understands', 'use a / as directory separator on Windows')]"
The read() method of a FileInputStream returns an int which contains the byte value of the byte read.,"[('read() method', 'part of', 'FileInputStream'), ('read() method', 'returns', 'int'), ('int', 'contains', 'byte value'), ('byte value', 'of', 'byte read')]"
"If the read() method returns -1, there is no more data to read in the FileInputStream, and it can be closed.","[('read() method', 'returns', '-1'), ('-1', 'indicates', 'no more data to read'), ('no more data to read', 'occurs in', 'FileInputStream'), ('FileInputStream', 'can be', 'closed')]"
You use the read() method just like the read() method of an InputStream.,"[('read() method', 'used like', 'read() method of an InputStream')]"
Being an InputStream the FileInputStream also has two read() methods which can read data into a byte array.,"[('FileInputStream', 'is a type of', 'InputStream'), ('FileInputStream', 'has method', 'read()'), ('read()', 'can read data into', 'byte array')]"
"These methods are inherited from the Java InputStream class, by the way.","[('methods', 'are inherited from', 'Java InputStream class')]"
"If all bytes have been read from the FileInputStream, these read() methods will return -1.","[('bytes', 'read from', 'FileInputStream'), ('read() methods', 'return', '-1')]"
Therefore it is necessary to inspect the value returned from these read() method calls.,"[('read() method calls', 'return', 'value'), ('inspect', 'necessary for', 'value')]"
The doSomethingWithData() method implementation has been left out of this example to keep it short.,"[('doSomethingWithData()', 'is a', 'method'), ('method', 'has implementation', 'left out')]"
"Notice, that a BufferedInputStream is an InputStream subclass and can be used in any place where an InputStream can be used.","[('BufferedInputStream', 'is a subclass of', 'InputStream'), ('BufferedInputStream', 'can be used in', 'any place where an InputStream can be used')]"
You close a FileInputStream by calling the close() method inherited from InputStream.,"[('FileInputStream', 'inherits method', 'close()'), ('close()', 'method of', 'InputStream')]"
Notice how the while loop continues until a -1 value is read from the FileInputStream read() method.,"[('while loop', 'continues until', '-1 value is read'), ('-1 value', 'is read from', 'FileInputStream read() method')]"
"After that, the while loop exits, and the FileInputStream close() method is called.","[('while loop', 'exits after', 'that'), ('FileInputStream', 'method called', 'close()')]"
"If an exception is thrown while reading data from the FileInputStream, the close() method is never called.","[('exception', 'thrown while', 'reading data from the FileInputStream'), ('close() method', 'is never called if', 'exception is thrown')]"
"The Java FileOutputStream class, java.io.FileOutputStream, makes it possible to write a file as a stream of bytes.","[('Java FileOutputStream class', 'is a', 'java.io.FileOutputStream'), ('Java FileOutputStream class', 'makes possible', 'write a file as a stream of bytes')]"
The Java FileOutputStream class is a subclass of Java OutputStream meaning you can use a FileOutputStream as an OutputStream.,"[('Java FileOutputStream', 'is a subclass of', 'Java OutputStream'), ('Java FileOutputStream', 'can be used as', 'OutputStream')]"
The Java FileOutputStream class contains a set of different useful constructors.,"[('Java FileOutputStream class', 'contains', 'set of different useful constructors')]"
To write data to a Java FileOutputStream you can use its write() method.,"[('Java FileOutputStream', 'has method', 'write()'), ('write()', 'used for', 'write data')]"
Here is an example of writing data to a Java FileOutputStream using its write() method:,"[('Java FileOutputStream', 'method', 'write()'), ('write()', 'used for', 'writing data')]"
"Since the Java FileOutputStream is a subclass of OutputStream, you can write arrays of bytes to the FileOutputStream too, instead of just a single byte at a time.","[('Java FileOutputStream', 'subclass of', 'OutputStream'), ('Java FileOutputStream', 'can write', 'arrays of bytes'), ('Java FileOutputStream', 'can write', 'single byte')]"
If you want to make sure that all written data is written to disk without having to close the FileOutputStream you can call its flush() method.,"[('FileOutputStream', 'has method', 'flush()'), ('flush()', 'ensures', 'all written data is written to disk')]"
"Calling flush() will make sure that all data which has been written to the FileOutputStream so far, is fully written to disk too.","[('flush()', 'ensures', 'all data is fully written to disk'), ('all data', 'written to', 'FileOutputStream'), ('all data', 'fully written to', 'disk')]"
Here is an example of calling the Java FileOutputStream flush() method:,"[('Java', 'has method', 'FileOutputStream'), ('FileOutputStream', 'has method', 'flush()')]"
Here is an example of closing a Java FileOutputStream by calling its close() method:,"[('Java FileOutputStream', 'has method', 'close()'), ('close()', 'used for', 'closing Java FileOutputStream')]"
"Unfortunately, if an exception is thrown during the write() call in the example above, that exception will cause the program flow to break before the close() method is called.","[('exception', 'thrown during', 'write() call'), ('exception', 'cause', 'program flow to break'), ('program flow', 'break before', 'close() method is called')]"
"In other words, the FileOutputStream close() will be called automatically for you.","[('FileOutputStream', 'method', 'close()'), ('close()', 'called automatically', 'FileOutputStream')]"
You can convert a FileOutputStream to a character based Writer using the Java OutputStreamWriter class.,"[('FileOutputStream', 'can be converted to', 'Writer'), ('OutputStreamWriter', 'used for conversion', 'FileOutputStream to Writer'), ('OutputStreamWriter', 'part of', 'Java')]"
"The Java FileReader class, java.io.FileReader makes it possible to read the contents of a file as a stream of characters.","[('Java FileReader class', 'part of', 'java.io.FileReader'), ('java.io.FileReader', 'enables', 'read the contents of a file as a stream of characters')]"
"The Java FileReader is a subclass of the Java Reader class, so it has many of the same methods.","[('Java FileReader', 'subclass of', 'Java Reader class'), ('Java FileReader', 'has methods', 'same methods')]"
The read() method of the Java FileReader returns an int which contains the char value of the character read.,"[('read() method', 'part of', 'Java FileReader'), ('Java FileReader', 'has method', 'read() method'), ('read() method', 'returns', 'int'), ('int', 'contains', 'char value'), ('char value', 'of', 'character read')]"
"If the read() method returns -1, there is no more data to read in the FileReader, and it can be closed.","[('read() method', 'returns', '-1'), ('-1', 'indicates', 'no more data to read'), ('no more data to read', 'occurs in', 'FileReader'), ('FileReader', 'can be', 'closed')]"
"Notice, that a BufferedReader is a Reader subclass and can be used in any place where an Reader can be used.","[('BufferedReader', 'subclass of', 'Reader'), ('BufferedReader', 'can be used in', 'any place where a Reader can be used')]"
Notice how there is no longer any explicit close() method call to the FileReader instance.,"[('FileReader instance', 'no longer has', 'explicit close() method call')]"
"The Java FileWriter class, java.io.FileWriter, makes it possible to write characters to a file.","[('Java FileWriter class', 'is a', 'java.io.FileWriter'), ('Java FileWriter class', 'makes possible', 'write characters to a file')]"
"The Java FileWriter class is a subclass of the Java Writer class, by the way.","[('Java FileWriter class', 'subclass of', 'Java Writer class')]"
The Java FileWriter's flush() method flushes all data written to the FileWriter to the underlying file.,"[('Java FileWriter', 'has method', 'flush()'), ('flush()', 'flushes data to', 'underlying file'), ('data', 'written to', 'FileWriter')]"
By calling flush() you can assure that any buffered data will be flushed (written) to disk.,"[('flush()', 'action', 'assure'), ('buffered data', 'will be', 'flushed'), ('buffered data', 'will be', 'written to disk')]"
Here is an example of flushing data written to a Java FileWriter by calling its flush() method:,"[('flush() method', 'used for', 'flushing data'), ('flushing data', 'written to', 'Java FileWriter')]"
Notice how there is no longer any explicit close() method call to the FileWriter instance.,"[('FileWriter instance', 'no longer has', 'explicit close() method call')]"
"The Java InputStream class, java.io.InputStream, represents an ordered stream of bytes.","[('Java InputStream class', 'is a', 'java.io.InputStream'), ('java.io.InputStream', 'represents', 'ordered stream of bytes')]"
The Java InputStream class is the base class (superclass) of all input streams in the Java IO API.,"[('Java InputStream class', 'is base class of', 'all input streams'), ('all input streams', 'are in', 'Java IO API')]"
"Each subclass of InputStream typically has a very specific use, but can be used as an InputStream.","[('Subclass of InputStream', 'has use', 'specific use'), ('Subclass of InputStream', 'can be used as', 'InputStream')]"
FileInputStream is a subclass of InputStream so it is safe to assign an instance of FileInputStream to an InputStream variable (the inputstream variable).,"[('FileInputStream', 'subclass of', 'InputStream'), ('FileInputStream', 'can be assigned to', 'InputStream variable')]"
The read() method of an InputStream returns an int which contains the byte value of the byte read.,"[('read() method', 'part of', 'InputStream'), ('read() method', 'returns', 'int'), ('int', 'contains', 'byte value'), ('byte value', 'of', 'byte read')]"
"If the read() method returns -1, the end of stream has been reached, meaning there is no more data to read in the InputStream.","[('read() method', 'returns', '-1'), ('-1', 'indicates', 'end of stream'), ('end of stream', 'means', 'no more data to read'), ('no more data to read', 'in', 'InputStream')]"
The InputStream class also contains two read() methods which can read data from the InputStream's source into a byte array.,"[('InputStream class', 'contains', 'read() methods'), ('read() methods', 'can read data from', ""InputStream's source""), ('read() methods', 'read data into', 'byte array')]"
"Inside the while loop the doSomethingWithData() method is called, passing along the data byte array as well as how many bytes were read into the array as parameters.","[('while loop', 'contains', 'doSomethingWithData() method'), ('doSomethingWithData() method', 'called with', 'data byte array'), ('doSomethingWithData() method', 'called with', 'number of bytes read into the array')]"
The Java InputStream class contains a method called readAllBytes() (since Java 9).,"[('Java InputStream class', 'contains method', 'readAllBytes()'), ('readAllBytes()', 'introduced in version', 'Java 9')]"
Here is an example of reading all bytes from a Java InputStream via readAllBytes():,"[('Java InputStream', 'method', 'readAllBytes')]"
The InputStream class has two methods called mark() and reset() which subclasses of InputStream may or may not support.,"[('InputStream', 'has method', 'mark()'), ('InputStream', 'has method', 'reset()'), ('mark()', 'may be supported by', 'subclasses of InputStream'), ('reset()', 'may be supported by', 'subclasses of InputStream')]"
"If an InputStream subclass supports the mark() and reset() methods, then that subclass should override the markSupported() to return true.","[('InputStream subclass', 'supports', 'mark()'), ('InputStream subclass', 'supports', 'reset()'), ('InputStream subclass', 'should override', 'markSupported()'), ('markSupported()', 'should return', 'true')]"
If the markSupported() method returns false then mark() and reset() are not supported.,"[('markSupported() method', 'returns', 'false'), ('markSupported() method', 'not supports', 'mark()'), ('markSupported() method', 'not supports', 'reset()')]"
The mark() sets a mark internally in the InputStream which marks the point in the stream to which data has been read so far.,"[('mark()', 'sets', 'mark'), ('mark', 'located in', 'InputStream'), ('mark', 'marks point in', 'stream'), ('data', 'has been read to', 'point in stream')]"
"If the code using the InputStream wants to go back to the point in the stream where the mark was set, the code calls reset() on the InputStream.","[('code', 'uses', 'InputStream'), ('code', 'calls', 'reset()'), ('reset()', 'operates on', 'InputStream'), ('mark', 'set in', 'stream')]"
The methods mark() and reset() methods are typically used when implementing parsers.,"[('mark()', 'used in', 'implementing parsers'), ('reset()', 'used in', 'implementing parsers')]"
Notice how the while loop continues until a -1 value is read from the InputStream read() method.,"[('while loop', 'continues until', '-1 value is read'), ('-1 value', 'is read from', 'InputStream read() method')]"
"After that, the while loop exits, and the InputStream close() method is called.","[('while loop', 'exits after', 'that'), ('InputStream', 'method called', 'close()')]"
"If an exception is thrown while reading data from the InputStream, the close() method is never called.","[('exception', 'thrown while', 'reading data from the InputStream'), ('close() method', 'is never called if', 'exception is thrown')]"
"The Java InputStreamReader class, java.io.InputStreamReader, wraps a Java InputStream, thereby turning the byte based InputStream into a character based Reader.","[('Java InputStreamReader class', 'wraps', 'Java InputStream'), ('java.io.InputStreamReader', 'is a', 'Java InputStreamReader class'), ('Java InputStream', 'is turned into', 'character based Reader')]"
The Java InputStreamReader class is thus a subclass of the Java Reader class.,"[('Java InputStreamReader class', 'subclass of', 'Java Reader class')]"
You can get the character encoding used by a Java InputStreamReader instance via its getEncoding() method.,"[('Java InputStreamReader instance', 'has method', 'getEncoding()'), ('getEncoding()', 'provides', 'character encoding')]"
The read() method of an InputStreamReader returns an int which contains the char value of the char read.,"[('read() method', 'part of', 'InputStreamReader'), ('read() method', 'returns', 'int'), ('int', 'contains', 'char value'), ('char value', 'of', 'char read')]"
"If the read() method returns -1, the end of stream has been reached, meaning there is no more data to read in the InputStreamReader.","[('read() method', 'returns', '-1'), ('end of stream', 'has been reached', 'if read() method returns -1'), ('InputStreamReader', 'contains', 'data'), ('end of stream', 'means', 'no more data to read in the InputStreamReader')]"
"As you can see, the while loop keeps running until a -1 is read from the InputStreamReader read() method.","[('while loop', 'keeps running until', '-1'), ('-1', 'is read from', 'InputStreamReader read() method')]"
"Once all the data is written to it, simply call the method toByteArray() or toCharArray, and all the data written is returned in array form.","[('data', 'is written to', 'it'), ('call', 'method', 'toByteArray()'), ('call', 'method', 'toCharArray'), ('data', 'is returned in', 'array form')]"
The Java CharArrayReader class (java.io.CharArrayReader) enables you to read the contents of a char array as a character stream.,"[('Java CharArrayReader class', 'enables', 'read contents of char array'), ('Java CharArrayReader class', 'is a', 'character stream')]"
"The Java CharArrayReader is handy when you have data in a char array, but need to pass that data to some component which can only read from a Reader (or a Reader subclass).","[('Java CharArrayReader', 'used for', 'data in a char array'), ('Java CharArrayReader', 'passes data to', 'component'), ('component', 'can read from', 'Reader'), ('Reader', 'subclass of', 'Reader')]"
Closing a CharArrayReader can be done using the close() method like this:,"[('CharArrayReader', 'can be closed using', 'close() method')]"
Notice that there is no explicit close() call on the CharArrayReader.,"[('CharArrayReader', 'does not have explicit call', 'close()')]"
The Java CharArrayWriter class (java.io.CharArrayWriter) makes it possible to write characters via the Writer methods (CharArrayWriter is a subclass of Writer) and convert the written characters into a char array.,"[('Java CharArrayWriter class', 'is a subclass of', 'Writer'), ('Java CharArrayWriter class', 'makes it possible to', 'write characters'), ('Java CharArrayWriter class', 'convert', 'written characters into a char array')]"
"The Java CharArrayWriter class is handy when you have a component that can only write characters to a Writer, but you need the characters as a char array.","[('Java CharArrayWriter class', 'is handy when', 'you have a component that can only write characters to a Writer'), ('Java CharArrayWriter class', 'provides', 'characters as a char array')]"
"Simply pass that component a CharArrayWriter and when all characters are written to it, call toCharArray() on the CharArrayWriter.","[('component', 'receives', 'CharArrayWriter'), ('characters', 'are written to', 'CharArrayWriter'), ('call', 'action', 'toCharArray()'), ('toCharArray()', 'called on', 'CharArrayWriter')]"
"Third, the written characters are obtained as a char array by calling the toCharArray() method on the CharArrayWriter.","[('written characters', 'obtained as', 'char array'), ('char array', 'obtained by calling', 'toCharArray() method'), ('toCharArray() method', 'called on', 'CharArrayWriter')]"
Notice how there is no longer any explicit close() method call to the CharArrayWriter instance.,"[('CharArrayWriter instance', 'no longer has', 'explicit close() method call')]"
The Java DataOutputStream class enables you to write Java primitives to OutputStream's instead of only bytes.,"[('Java DataOutputStream class', 'enables', 'write Java primitives'), ('write Java primitives', 'to', ""OutputStream's"")]"
"As mentioned earlier, the DataOutputStream class is often used together with a DataInputStream.","[('DataOutputStream', 'used together with', 'DataInputStream')]"
But what happens if an exception is thrown from inside the doSomethingWithData() method?,"[('exception', 'thrown from', 'doSomethingWithData() method')]"
"Well, to catch that situation you will have to wrap the call to close() in a try-catch block too, like this:","[('you', 'have to wrap', 'call to close()'), ('call to close()', 'in', 'try-catch block')]"
"But, what happens if an exception is also thrown from the input.close() method?","[('exception', 'thrown from', 'input.close() method')]"
"Separate pages will describe each of these methods or classes in more detail, including examples of their usage etc.","[('Separate pages', 'will describe', 'methods'), ('Separate pages', 'will describe', 'classes'), ('methods', 'include', 'examples of their usage'), ('classes', 'include', 'examples of their usage')]"
The Java IO API contains the following classes which are relevant to working with files in Java:,"[('Java IO API', 'contains class', 'classes relevant to working with files in Java')]"
"These classes are explained in more detail in their own texts, but the sections below will give a brief introduction to these classes.","[('Classes', 'explained in', 'texts'), ('Sections', 'give introduction to', 'classes')]"
"These two classes lets you read a file one byte or character at a time from the start to the end of the file, or read the bytes into an array of byte or char, again from start towards the end of the file.","[('Classes', 'allow', 'read a file one byte or character at a time'), ('Classes', 'allow', 'read bytes into an array of byte or char'), ('Read a file one byte or character at a time', 'direction', 'from start to end of the file'), ('Read bytes into an array of byte or char', 'direction', 'from start to end of the file')]"
"As I have already mentioned, you can get random access to files with Java IO via the RandomAccessFile class.","[('RandomAccessFile class', 'provides', 'random access to files'), ('random access to files', 'achieved with', 'Java IO')]"
Both file and directory information is available via the File class.,"[('File class', 'provides information about', 'file'), ('File class', 'provides information about', 'directory')]"
The FilterInputStream is a base class for implementing your own filtering input streams.,"[('FilterInputStream', 'is a', 'base class'), ('FilterInputStream', 'used for', 'implementing filtering input streams')]"
"It is intended to be a base class for your own subclasses, but in my opinion you might as well just subclass InputStream directly.","[('base class', 'intended to be', 'your own subclasses'), ('subclass', 'might as well', 'InputStream')]"
I cannot see that this class actually adds or changes any behaviour in InputStream except that it takes an InputStream in its constructor.,"[('class', 'adds or changes behaviour in', 'InputStream'), ('class', 'takes', 'InputStream'), ('InputStream', 'is taken by', 'class')]"
The FilterOutputStream is a base class for implementing your own filtering output streams.,"[('FilterOutputStream', 'is a', 'base class'), ('FilterOutputStream', 'used for', 'implementing filtering output streams')]"
I cannot see that this class actually adds or changes any behaviour in OutputStream except that it takes an OutputStream in its constructor.,"[('this class', 'adds or changes behaviour in', 'OutputStream'), ('this class', 'takes', 'OutputStream'), ('OutputStream', 'is taken in', 'constructor')]"
"If you choose to extend this class you might as well extend the OutputStream class directly, and avoid the extra class in the hierarchy.","[('this class', 'can be extended to', 'OutputStream class'), ('extending this class', 'results in', 'extra class in the hierarchy')]"
The FilterReader is a base class for implementing your own filtering readers.,"[('FilterReader', 'is a', 'base class'), ('FilterReader', 'used for', 'implementing filtering readers')]"
"Like with FilterInputStream, I see no sensible purpose for this class.","[('FilterInputStream', 'has no sensible purpose', 'this class')]"
I cannot see that this class actually adds or changes any behaviour in Reader except that it takes a Reader in its constructor.,"[('this class', 'adds or changes behaviour in', 'Reader'), ('this class', 'takes', 'Reader'), ('Reader', 'is taken in', 'constructor')]"
"If you choose to extend this class you might as well extend the Reader class directly, and avoid the extra class in the hierarchy.","[('this class', 'can be extended to', 'Reader class'), ('extending', 'avoids', 'extra class in the hierarchy')]"
The FilterWriter is a base class for implementing your own filtering Writer's.,"[('FilterWriter', 'is a', 'base class'), ('FilterWriter', 'used for', 'implementing filtering Writer')]"
"Like with FilterOutputStream, I see no sensible purpose for this class.","[('FilterOutputStream', 'compared to', 'this class')]"
I cannot see that this class actually adds or changes any behaviour in Writer except that it takes a Writer in its constructor.,"[('this class', 'adds or changes behaviour in', 'Writer'), ('this class', 'takes', 'Writer'), ('Writer', 'is taken in', 'constructor')]"
"If you choose to extend this class you might as well extend the Writer class directly, and avoid the extra class in the hierarchy.","[('this class', 'can be extended to', 'Writer class'), ('extending this class', 'results in', 'extra class in the hierarchy')]"
Some of the classes in the Java IO API are designed to help you parse input.,"[('classes in the Java IO API', 'designed to', 'help you parse input')]"
The purpose was rather to give you above quick list of classes related to parsing of input data.,"[('purpose', 'related to', 'parsing of input data'), ('purpose', 'related to', 'quick list of classes')]"
If you have to parse data you will often end up writing your own classes that use some of the classes in this list.,"[('You', 'have to', 'parse data'), ('You', 'end up', 'writing your own classes'), ('Your own classes', 'use', 'some of the classes in this list')]"
The Java LineNumberReader class (java.io.LineNumberReader is a BufferedReader that keeps track of line numbers of the read characters.,"[('Java LineNumberReader class', 'is a', 'BufferedReader'), ('Java LineNumberReader class', 'keeps track of', 'line numbers'), ('Java LineNumberReader class', 'reads', 'characters')]"
You can get the current line number from the LineNumberReader by calling the getLineNumber() method.,"[('LineNumberReader', 'provides method', 'getLineNumber()'), ('getLineNumber()', 'returns', 'current line number')]"
"You can also set the current line number, should you need to, by calling the setLineNumber() method.","[('You', 'can set', 'current line number'), ('You', 'can call', 'setLineNumber() method')]"
Since FileOutputStream is a subclass of OutputStream this should be no problem.,"[('FileOutputStream', 'is a subclass of', 'OutputStream')]"
In this example the process() method cannot see if the InputStream it gets as parameter comes from the file system or the network (the example only shows the file system version).,"[('process() method', 'cannot see if', 'InputStream comes from file system'), ('process() method', 'cannot see if', 'InputStream comes from network'), ('example', 'shows', 'file system version')]"
The Java ObjectInputStream class (java.io.ObjectInputStream) enables you to read Java objects from an InputStream instead of just raw bytes.,"[('Java ObjectInputStream class', 'enables', 'read Java objects from an InputStream'), ('Java ObjectInputStream class', 'part of', 'java.io.ObjectInputStream')]"
"For this ObjectInputStream example to work the object you read must be an instance of MyClass, and must have been serialized into the file ""object.data"" via an ObjectOutputStream.",
Before you can serialize and de-serialize objects the class of the object must implement java.io.Serializable.,"[('class of the object', 'must implement', 'java.io.Serializable'), ('serialize', 'requires', 'class of the object to implement java.io.Serializable'), ('de-serialize', 'requires', 'class of the object to implement java.io.Serializable')]"
"After that the ObjectInputStream is also closed, and the values read into the Person object are printed to System.out.","[('values', 'read into', 'Person object'), ('values', 'printed to', 'System.out')]"
The Java ObjectOutputStream class (java.io.ObjectOutputStream) enables you to write Java objects to an OutputStream instead of just raw bytes.,"[('Java ObjectOutputStream class', 'enables', 'write Java objects to an OutputStream'), ('Java ObjectOutputStream class', 'part of', 'java.io.ObjectOutputStream')]"
In this text I will try to give you an overview of the classes in the Java IO (java.io) package.,"[('Java IO', 'is a package in', 'Java'), ('java.io', 'is an alias for', 'Java IO')]"
"More specifically, I will try to group the classes after their purpose.","[('I', 'will try to group', 'the classes'), ('the classes', 'grouped after', 'their purpose')]"
"This grouping should make it easier for you in the future, to determine the purpose of a class, or find the class you need for a specific purpose.","[('grouping', 'should make easier', 'determine the purpose of a class'), ('grouping', 'should make easier', 'find the class you need for a specific purpose')]"
"Java IO contains many subclasses of the InputStream, OutputStream, Reader and Writer classes.","[('Java IO', 'contains', 'InputStream'), ('Java IO', 'contains', 'OutputStream'), ('Java IO', 'contains', 'Reader'), ('Java IO', 'contains', 'Writer'), ('InputStream', 'is a subclass of', 'Java IO'), ('OutputStream', 'is a subclass of', 'Java IO'), ('Reader', 'is a subclass of', 'Java IO'), ('Writer', 'is a subclass of', 'Java IO')]"
"The reason is, that all of these subclasses are addressing various different purposes.","[('subclasses', 'addressing', 'various different purposes')]"
These purposes are nice to know about when reading through the Java IO classes.,"[('purposes', 'are nice to know about when reading through', 'Java IO classes')]"
They make it somewhat easier to understand what the classes are targeting.,"[('They', 'make easier to understand', 'what the classes are targeting')]"
"Having discussed sources, destinations, input, output and the various IO purposes targeted by the Java IO classes, here is a table listing most (if not all) Java IO classes divided by input, output, being byte based or character based, and any more specific purpose they may be addressing, like buffering, parsing etc.","[('Java IO classes', 'target', 'sources'), ('Java IO classes', 'target', 'destinations'), ('Java IO classes', 'target', 'input'), ('Java IO classes', 'target', 'output'), ('Java IO classes', 'target', 'IO purposes'), ('Java IO classes', 'divided by', 'input'), ('Java IO classes', 'divided by', 'output'), ('Java IO classes', 'divided by', 'byte based'), ('Java IO classes', 'divided by', 'character based'), ('Java IO classes', 'address', 'buffering'), ('Java IO classes', 'address', 'parsing')]"
The PipedInputStream class makes it possible to read the contents of a pipe as a stream of bytes.,"[('PipedInputStream class', 'makes possible', 'read the contents of a pipe as a stream of bytes')]"
The read() method of a PipedInputStream returns an int which contains the byte value of the byte read.,"[('read() method', 'part of', 'PipedInputStream'), ('read() method', 'returns', 'int'), ('int', 'contains', 'byte value'), ('byte value', 'of', 'byte read')]"
"If the read() method returns -1, there is no more data to read in the stream, and it can be closed.","[('read() method', 'returns', '-1'), ('-1', 'indicates', 'no more data to read'), ('stream', 'can be', 'closed')]"
"Since PipedInputStream is a subclass of InputStream, PipedInputStream has the same basic methods and use patterns as an InputStream.","[('PipedInputStream', 'is a subclass of', 'InputStream'), ('PipedInputStream', 'has methods and use patterns as', 'InputStream')]"
The PipedOutputStream class makes it possible to write to a Java pipe as a stream of bytes.,"[('PipedOutputStream', 'makes possible', 'write to Java pipe'), ('write to Java pipe', 'as', 'stream of bytes')]"
The write() method of a PipedOutputStream takes an int which contains the byte value of the byte to write.,"[('write() method', 'part of', 'PipedOutputStream'), ('write() method', 'takes', 'int'), ('int', 'contains', 'byte value'), ('byte value', 'of', 'byte'), ('write() method', 'action', 'write')]"
"Since PipedOutputStream is a subclass of OutputStream, PipedOutputStream has the same basic methods and use patterns as an OutputStream.","[('PipedOutputStream', 'subclass of', 'OutputStream'), ('PipedOutputStream', 'has methods and use patterns as', 'OutputStream')]"
The Java PipedReader class (java.io.PipedReader) makes it possible to read the contents of a pipe as a stream of characters.,"[('Java PipedReader class', 'makes possible', 'read contents of a pipe as a stream of characters'), ('Java PipedReader class', 'part of', 'java.io.PipedReader')]"
The read() method of a Java PipedReader returns an int which contains the char value of the character read.,"[('read() method', 'part of', 'Java PipedReader'), ('read() method', 'returns', 'int'), ('int', 'contains', 'char value'), ('char value', 'of', 'character read')]"
"If the read() method returns -1, there is no more data to read in the PipedReader, and it can be closed.","[('read() method', 'returns', '-1'), ('-1', 'indicates', 'no more data to read'), ('no more data to read', 'occurs in', 'PipedReader'), ('PipedReader', 'can be', 'closed')]"
Notice how there is no longer any explicit close() method call to the PipedReader instance.,"[('PipedReader instance', 'has method', 'close()')]"
The Java PipedWriter class (java.io.PipedWriter) makes it possible to write to a Java pipe as a stream of characters.,"[('Java PipedWriter class', 'makes possible', 'write to a Java pipe'), ('write to a Java pipe', 'as', 'stream of characters')]"
The write() method of a PipedWriter takes an int which contains the byte value of the byte to write.,"[('write() method', 'part of', 'PipedWriter'), ('write() method', 'takes', 'int'), ('int', 'contains', 'byte value'), ('byte value', 'of', 'byte to write')]"
"There are also versions of the write() method that take a String, char array etc.","[('write() method', 'has version', 'version that takes a String'), ('write() method', 'has version', 'version that takes a char array')]"
Notice how there is no longer any explicit close() method call to the PipedWriter instance.,"[('PipedWriter instance', 'has method', 'close()')]"
Creating a pipe using Java IO is done via the PipedOutputStream and PipedInputStream classes.,"[('Creating a pipe', 'done via', 'PipedOutputStream'), ('Creating a pipe', 'done via', 'PipedInputStream'), ('PipedOutputStream', 'used in', 'Java IO'), ('PipedInputStream', 'used in', 'Java IO')]"
You can also connect the two pipe streams using their connect() methods.,"[('pipe stream', 'can be connected using', 'connect() method'), ('connect() method', 'connects', 'pipe stream')]"
Both PipedInputStream and PipedOutputStream has a connect() method that can connect one to the other.,"[('PipedInputStream', 'has method', 'connect()'), ('PipedOutputStream', 'has method', 'connect()'), ('connect()', 'can connect', 'PipedInputStream'), ('connect()', 'can connect', 'PipedOutputStream')]"
"The read() and write() calls on the streams are blocking, meaning if you try to use the same thread to both read and write, this may result in the thread deadlocking itself.","[('read()', 'is a call on', 'streams'), ('write()', 'is a call on', 'streams'), ('thread', 'may deadlock', 'itself')]"
The Java PrintStream class (java.io.PrintStream) enables you to write formatted data to an underlying OutputStream.,"[('Java PrintStream class', 'enables', 'write formatted data'), ('Java PrintStream class', 'writes to', 'underlying OutputStream')]"
"The PrintStream class can format primitive types like int, long etc.","[('PrintStream class', 'can format', 'primitive types'), ('primitive types', 'includes', 'int'), ('primitive types', 'includes', 'long')]"
You may be familiar with these two well-known PrintStream instances in Java: System.out and System.err .,"[('System.out', 'instance of', 'PrintStream'), ('System.err', 'instance of', 'PrintStream'), ('PrintStream', 'related to', 'Java')]"
"The Java PrintStream class contains the powerful format() and printf() methods (they do exactly the same, but the name ""printf"" is more familiar to C-programmers).",
The Java PrintWriter class (java.io.PrintWriter) enables you to write formatted data to an underlying Writer.,"[('Java PrintWriter class', 'enables', 'write formatted data'), ('write formatted data', 'to', 'underlying Writer')]"
The PrintWriter class has all the same methods as the PrintStream except for the methods to write raw bytes.,"[('PrintWriter', 'has methods', 'PrintStream'), ('PrintWriter', 'lacks methods', 'write raw bytes')]"
Being a Writer subclass the PrintWriter is intended to write text.,"[('PrintWriter', 'subclass of', 'Writer'), ('PrintWriter', 'intended to', 'write text')]"
"Third, the example calls the advanced printf() method of the PrintWriter which can insert formatted numbers into a text string.","[('example', 'calls method', 'advanced printf()'), ('advanced printf()', 'method of', 'PrintWriter'), ('advanced printf()', 'can insert', 'formatted numbers'), ('formatted numbers', 'into', 'text string')]"
"In that way the PrintWriter is a bit different from other Writer subclasses which tend to have mostly constructors that can take other Writer instances as parameters (except for a few, like OutputStreamWriter).","[('PrintWriter', 'is a bit different from', 'other Writer subclasses'), ('Writer subclasses', 'have constructors that can take', 'Writer instances'), ('OutputStreamWriter', 'is an exception to', 'Writer subclasses')]"
The Java PrintWriter class contains the powerful format() and printf() methods.,"[('Java PrintWriter class', 'contains', 'format() method'), ('Java PrintWriter class', 'contains', 'printf() method')]"
"The format() and printf() methods allow you to mix text and data in very advanced ways, using a formatting string.","[('format()', 'allows', 'mix text and data'), ('printf()', 'allows', 'mix text and data'), ('format()', 'uses', 'formatting string'), ('printf()', 'uses', 'formatting string')]"
The Java Reader (java.io.Reader) and Java Writer class (java.io.Writer) in Java IO work much like the InputStream and OutputStream with the exception that Reader and Writer are character based.,"[('Java Reader', 'part of', 'java.io.Reader'), ('Java Writer class', 'part of', 'java.io.Writer'), ('Java Reader', 'works like', 'InputStream'), ('Java Writer class', 'works like', 'OutputStream'), ('Java Reader', 'character based', 'True'), ('Java Writer class', 'character based', 'True')]"
The Java Reader is the base class of all Reader's in the Java IO API.,"[('Java Reader', 'is base class of', ""Reader's""), ('Java Reader', 'part of', 'Java IO API')]"
The Java Writer class is the base class of all Writers in the Java IO API.,"[('Java Writer class', 'is base class of', 'all Writers'), ('all Writers', 'part of', 'Java IO API')]"
Before you can use the SequenceInputStream you must import it in your Java class.,"[('SequenceInputStream', 'used in', 'Java class')]"
"This import statement should be at the top of your Java class, right under the package declaration.","[('import statement', 'should be at the top of', 'Java class'), ('Java class', 'contains', 'package declaration')]"
"The FileInputStream extends the InputStream class, so they can be used with the SequenceInputStream.","[('FileInputStream', 'extends', 'InputStream'), ('FileInputStream', 'can be used with', 'SequenceInputStream'), ('InputStream', 'can be used with', 'SequenceInputStream')]"
"When there is no more data to read from the second InputStream, the SequenceInputStream read() method will return -1, just like any other InputStream does.","[('SequenceInputStream', 'method', 'read()'), ('read()', 'returns', '-1'), ('read()', 'condition', 'no more data to read from the second InputStream'), ('InputStream', 'returns', '-1')]"
The Java Serializable interface (java.io.Serializable is a marker interface your classes must implement if they are to be serialized and deserialized.,"[('Java Serializable interface', 'is a', 'marker interface'), ('classes', 'must implement', 'Java Serializable interface'), ('Java Serializable interface', 'located in', 'java.io'), ('Java Serializable interface', 'used for', 'serialized and deserialized')]"
"Therefore, a class implementing Serializable does not have to implement any specific methods.","[('class', 'implements', 'Serializable'), ('class', 'does not have to implement', 'specific methods')]"
Implementing Serializable thus just tells the Java serialization classes that this class is intended for object serialization.,"[('Serializable', 'is implemented by', 'Java serialization classes'), ('Java serialization classes', 'intend for', 'object serialization')]"
Here is an example of a class that implements the Java Serializable interface:,"[('class', 'implements', 'Java Serializable interface')]"
"As you can see, the Person class implements the Serializable interface, but does not actually implement any methods.","[('Person class', 'implements', 'Serializable interface')]"
"In addition to implementing the Serializable interface, a class intended for serialization should also contain a private static final long variable named serialVersionUID.","[('class', 'implements', 'Serializable interface'), ('class', 'should contain', 'serialVersionUID'), ('serialVersionUID', 'is a', 'private static final long variable')]"
"Here is the Person class from before, with a serialVersionUID variable added:","[('Person class', 'has variable', 'serialVersionUID')]"
"The serialVersionUID variable is used by Java's object serialization API to determine if a deserialized object was serialized (written) with the same version of the class, as it is now attempting to deserialize it into.","[('serialVersionUID', 'used by', ""Java's object serialization API"")]"
Now the serialized Person object may not correspond to the new version of the Person class.,"[('serialized Person object', 'may not correspond to', 'new version of the Person class')]"
To detect such problems a class implementing Serializable should contain a serialVersionUID field.,"[('class', 'implements', 'Serializable'), ('class', 'should contain', 'serialVersionUID field')]"
"If you make big changes to the class, you should also change its serialVersionUID value.","[('big changes', 'applies to', 'class'), ('you', 'should change', 'serialVersionUID value'), ('big changes', 'necessitate', 'change in serialVersionUID value')]"
"These other object serialization mechanisms typically do not require your Java classes to implement Serializable, by the way.","[('object serialization mechanisms', 'do not require', 'Java classes to implement Serializable')]"
"They are typically using Java Reflection to inspect your class, so implementing the Serializable interface would be superflous - it would not add any useful information.","[('They', 'use', 'Java Reflection'), ('Java Reflection', 'inspect', 'your class'), ('implementing', 'superfluous', 'Serializable interface'), ('Serializable interface', 'add', 'useful information')]"
The class java.io.InputStream is the base class for all Java IO input streams.,"[('java.io.InputStream', 'is base class for', 'Java IO input streams')]"
"If you are writing a component that needs to read input from a stream, try to make our component depend on an InputStream, rather than any of it's subclasses (e.g.","[('component', 'needs to read input from', 'stream'), ('component', 'depend on', 'InputStream'), ('InputStream', 'has subclass', 'stream')]"
"Doing so makes your code able to work with all types of input streams, instead of only the concrete subclass.","[('code', 'able to work with', 'all types of input streams'), ('code', 'able to work with', 'concrete subclass')]"
Otherwise your code will not be able to call the unread() method on the PushbackInputStream.,"[('code', 'unable to call method', 'unread()'), ('unread()', 'method of', 'PushbackInputStream')]"
You typically read data from an InputStream by calling the read() method.,"[('You', 'read data from', 'InputStream'), ('read()', 'method of', 'InputStream')]"
The read() method returns a int containing the byte value of the byte read.,"[('read() method', 'returns', 'int'), ('int', 'contains', 'byte value'), ('byte value', 'of', 'byte read')]"
"If there is no more data to be read, the read() method typically returns -1;","[('read() method', 'returns', '-1')]"
The class java.io.OutputStream is the base class of all Java IO output streams.,"[('java.io.OutputStream', 'is base class of', 'Java IO output streams')]"
"If you are writing a component that needs to write output to a stream, try to make sure that component depends on an OutputStream and not one of its subclasses.","[('component', 'needs to write output to', 'stream'), ('component', 'depends on', 'OutputStream'), ('OutputStream', 'has subclass', 'component')]"
You can even write your own stream classes to wrap the standard stream classes that comes with Java.,"[('You', 'can write', 'your own stream classes'), ('your own stream classes', 'wrap', 'the standard stream classes'), ('the standard stream classes', 'comes with', 'Java')]"
The Java StringReader class enables you to turn an ordinary String into a Reader.,"[('Java StringReader class', 'enables', 'turn an ordinary String into a Reader')]"
Closing a Java StringReader can be done using the close() method like this:,"[('Java StringReader', 'can be closed using', 'close() method')]"
Notice that there is no explicit close() call on the StringReader.,"[('StringReader', 'lacks', 'explicit close() call')]"
The Java StringWriter class (java.io.StringWriter) enables you to obtain the characters written to a Writer as a String.,"[('Java StringWriter class', 'enables', 'obtain the characters written to a Writer as a String'), ('Java StringWriter class', 'part of', 'java.io.StringWriter')]"
Third the characters written to the StringWriter are obtained via the two methods toString() and getBuffer().,"[('characters', 'written to', 'StringWriter'), ('characters', 'obtained via', 'toString()'), ('characters', 'obtained via', 'getBuffer()')]"
The method toString() returns the characters written to the StringWriter as a String.,"[('toString()', 'returns', 'String'), ('String', 'contains', 'characters'), ('characters', 'written to', 'StringWriter')]"
The method getBuffer() returns the StringBuffer used by the StringWriter to build the string from the written characters.,"[('getBuffer()', 'returns', 'StringBuffer'), ('StringBuffer', 'used by', 'StringWriter'), ('StringWriter', 'builds', 'string'), ('string', 'built from', 'written characters')]"
Notice how there is no longer any explicit close() method call to the StringWriter instance.,"[('StringWriter instance', 'has method', 'close()')]"
The Java IO API is located in the Java IO package (java.io).,"[('Java IO API', 'located in', 'Java IO package'), ('Java IO package', 'package name', 'java.io')]"
If you look at the Java IO classes in the java.io package the vast amount of choices can be rather confusing.,"[('Java IO classes', 'located in package', 'java.io')]"
"The purpose of this tutorial is to try to give you an overview of how all these classes are grouped, and the purpose behind them, so you don't have to wonder whether you chose the right class, or whether a class already exists for your purpose.","[('tutorial', 'has purpose', 'give overview'), ('overview', 'includes', 'how classes are grouped'), ('overview', 'includes', 'purpose behind classes'), ('you', 'do not have to wonder', 'whether you chose the right class'), ('you', 'do not have to wonder', 'whether a class already exists for your purpose')]"
"That tutorial gives you a quick overview of the central concepts in the Java IO API, and an overview of all the central classes in the Java IO API.","[('That tutorial', 'gives overview of', 'central concepts in the Java IO API'), ('That tutorial', 'gives overview of', 'central classes in the Java IO API')]"
The java.io package doesn't actually address all types of input and output.,"[('java.io package', 'does not address', 'all types of input and output')]"
"Those types of input are covered elsewhere, for instance by the JFC classes in the Swing project, or the Servlet and HTTP packages in the Java Enterprise Edition.","[('input', 'covered by', 'JFC classes'), ('input', 'covered by', 'Servlet packages'), ('input', 'covered by', 'HTTP packages'), ('JFC classes', 'part of', 'Swing project'), ('Servlet packages', 'part of', 'Java Enterprise Edition'), ('HTTP packages', 'part of', 'Java Enterprise Edition')]"
"However, the Java IO package does not contain classes to open network sockets which are necessary for network communication.","[('Java IO package', 'does not contain', 'classes to open network sockets'), ('network sockets', 'are necessary for', 'network communication')]"
"Once you have opened a socket (network connection) though, you read and write data to and from it via Java IO's InputStream and OutputStream classes.","[('socket', 'is a', 'network connection'), ('you', 'open', 'socket'), ('you', 'read data from', 'socket'), ('you', 'write data to', 'socket'), ('Java IO', 'has', 'InputStream'), ('Java IO', 'has', 'OutputStream'), ('InputStream', 'used for', 'reading data'), ('OutputStream', 'used for', 'writing data')]"
"It contains classes that does much of the same as the Java IO and Java Networking APIs, but Java NIO can work in non-blocking mode.","[('It', 'contains', 'classes'), ('classes', 'does much of the same as', 'Java IO'), ('classes', 'does much of the same as', 'Java Networking APIs'), ('Java NIO', 'can work in', 'non-blocking mode')]"
The tutorial trail called Java How To's and Utilities also contain a few Java IO utilities - e.g.,"[(""Java How To's and Utilities"", 'is a', 'tutorial trail'), (""Java How To's and Utilities"", 'contains', 'Java IO utilities')]"
"Here is a table listing most (if not all) Java IO classes divided by input, output, being byte based or character based, and any more specific purpose they may be addressing, like buffering, parsing etc.","[('Java IO classes', 'divided by', 'input'), ('Java IO classes', 'divided by', 'output'), ('Java IO classes', 'divided by', 'byte based'), ('Java IO classes', 'divided by', 'character based'), ('Java IO classes', 'addressing', 'buffering'), ('Java IO classes', 'addressing', 'parsing')]"
"The Java OutputStream class, java.io.OutputStream, is the base class of all output streams in the Java IO API.","[('Java OutputStream class', 'is a', 'base class'), ('Java OutputStream class', 'part of', 'Java IO API'), ('java.io.OutputStream', 'is a', 'Java OutputStream class'), ('java.io.OutputStream', 'is a', 'base class'), ('java.io.OutputStream', 'part of', 'Java IO API'), ('Java IO API', 'contains', 'java.io.OutputStream'), ('Java IO API', 'contains', 'Java OutputStream class')]"
Subclasses of OutputStream include the Java BufferedOutputStream and the Java FileOutputStream among others.,"[('BufferedOutputStream', 'subclass of', 'OutputStream'), ('FileOutputStream', 'subclass of', 'OutputStream')]"
Here are some of the well-known subclasses of the Java OutputStream class:,"[('Java OutputStream class', 'has subclass', 'well-known subclasses')]"
The write() method of an OutputStream takes an int which contains the byte value of the byte to write.,"[('write() method', 'part of', 'OutputStream'), ('write() method', 'takes', 'int'), ('int', 'contains', 'byte value'), ('byte value', 'of', 'byte to write')]"
This OutputStream write() example first creates a FileOutputStream to which the data will be written.,"[('OutputStream', 'has method', 'write()'), ('write()', 'writes to', 'FileOutputStream'), ('FileOutputStream', 'receives', 'data')]"
The condition to exit the while loop is the return value of the method hasMoreData().,"[('while loop', 'exit condition', 'return value of the method hasMoreData()'), ('method', 'has return value', 'hasMoreData()')]"
"The implementation of hasMoreData() is not shown, but imagine that it returns true if there is more data to write, and false if not.","[('hasMoreData()', 'implementation', 'not shown'), ('hasMoreData()', 'returns', 'true'), ('hasMoreData()', 'condition', 'more data to write'), ('hasMoreData()', 'returns', 'false'), ('hasMoreData()', 'condition', 'no more data to write')]"
"Inside the while loop the example calls the method getMoreData() to get the next data to write to the OutputStream, and then writes that data to the OutputStream.","[('example', 'calls method', 'getMoreData()'), ('getMoreData()', 'provides', 'next data'), ('example', 'writes data to', 'OutputStream')]"
The Java OutputStream's flush() method flushes all data written to the OutputStream to the underlying data destination.,"[('Java OutputStream', 'has method', 'flush()'), ('flush()', 'flushes data to', 'underlying data destination'), ('data', 'written to', 'OutputStream')]"
"By calling flush() you can assure that any buffered data will be flushed (written) to disk (or network, or whatever else the destination of your OutputStream has).","[('flush()', 'assures', 'buffered data will be flushed'), ('buffered data', 'will be flushed to', 'disk'), ('buffered data', 'will be flushed to', 'network'), ('buffered data', 'will be flushed to', 'destination of OutputStream')]"
Here is an example of flushing data written to a Java OutputStream by calling its flush() method:,"[('Java OutputStream', 'has method', 'flush()'), ('flush()', 'used for', 'flushing data')]"
"What matters is, that once the while loop ends, and you are done writing data to the OutputStream, its close() method is called, which closes the OutputStream .","[('while loop', 'ends', 'done writing data to the OutputStream'), ('close() method', 'called', 'closes the OutputStream')]"
"Once the try block is exited, the close() method of the OutputStream is called automatically, because the OutputStream was declared inside the parentheses of the try block.","[('try block', 'contains', 'OutputStream'), ('OutputStream', 'has method', 'close()'), ('close()', 'called automatically after exiting', 'try block')]"
You can convert a OutputStream to a character based Writer using the Java OutputStreamWriter class.,"[('OutputStream', 'can be converted to', 'Writer'), ('OutputStreamWriter', 'is a class in', 'Java'), ('OutputStreamWriter', 'converts', 'OutputStream'), ('OutputStreamWriter', 'converts to', 'Writer')]"
"The Java OutputStreamWriter class, java.io.OutputStreamWriter, is intended to wrap an Java OutputStream and thereby turning the byte based output stream into a character based Writer.","[('Java OutputStreamWriter class', 'is a', 'java.io.OutputStreamWriter'), ('Java OutputStreamWriter class', 'intended to wrap', 'Java OutputStream'), ('Java OutputStream', 'is a', 'byte based output stream'), ('Java OutputStreamWriter class', 'turns', 'byte based output stream'), ('byte based output stream', 'into', 'character based Writer')]"
"The Java OutputStreamWriter is useful if you need to write characters to a file, encoded as e.g.","[('Java OutputStreamWriter', 'is useful for', 'writing characters to a file')]"
The Java OutputStreamWriter is a subclass of the Java Writer class.,"[('Java OutputStreamWriter', 'subclass of', 'Java Writer class')]"
"The Java OutputStreamWriter also has alternative constructors that allow you to specify the character set (ISO-Latin1, UTF-8, UTF-16 etc.)","[('Java OutputStreamWriter', 'has alternative constructors', 'alternative constructors'), ('alternative constructors', 'allow you to specify', 'character set'), ('character set', 'includes', 'ISO-Latin1'), ('character set', 'includes', 'UTF-8'), ('character set', 'includes', 'UTF-16')]"
The Java OutputStreamWriter's flush() method flushes all data written to the OutputStreamWriter to the underlying data destination.,"[('Java OutputStreamWriter', 'has method', 'flush()'), ('flush()', 'flushes data to', 'underlying data destination'), ('data', 'written to', 'OutputStreamWriter')]"
"By calling flush() you can assure that any buffered data will be flushed (written) to disk (or network, or whatever else the destination of your OutputStreamWriter has).","[('flush()', 'assures', 'buffered data will be flushed'), ('buffered data', 'will be flushed to', 'disk'), ('buffered data', 'will be flushed to', 'network'), ('buffered data', 'will be flushed to', 'destination of OutputStreamWriter')]"
Here is an example of flushing data written to a Java OutputStreamWriter by calling its flush() method:,"[('flush() method', 'called on', 'OutputStreamWriter'), ('OutputStreamWriter', 'written to', 'Java'), ('flush() method', 'example of', 'flushing data')]"
These bytes will then be read again the next time you call read().,"[('bytes', 'will be read', 'next time you call read()')]"
"The Java PushbackInputStream is a subclass of the Java InputStream so it inherits its public methods - read(), close() etc.","[('Java PushbackInputStream', 'subclass of', 'Java InputStream'), ('Java PushbackInputStream', 'inherits methods', 'read()'), ('Java PushbackInputStream', 'inherits methods', 'close()')]"
The call to read() reads a byte just like from an InputStream.,"[('call to read()', 'reads', 'byte'), ('byte', 'read from', 'InputStream')]"
The call to unread() pushes a byte back into the PushbackInputStream.,"[('unread()', 'pushes', 'byte'), ('byte', 'back into', 'PushbackInputStream')]"
The next time read() is called the pushed back bytes will be read first.,"[('read()', 'action', 'called'), ('pushed back bytes', 'will be', 'read first')]"
"If you push back multiple bytes into the PushbackInputStream, the latest byte pushed back will be returned first from read(), just like on a stack.","[('PushbackInputStream', 'operation', 'push back multiple bytes'), ('latest byte', 'pushed back into', 'PushbackInputStream'), ('latest byte', 'returned first from', 'read()'), ('read()', 'returns', 'latest byte'), ('latest byte', 'order', 'like on a stack')]"
"You read bytes from the Java PushbackInputStream via its read() method, just like you do from a regular InputStream .","[('Java PushbackInputStream', 'has method', 'read()'), ('read()', 'reads', 'bytes'), ('Java PushbackInputStream', 'is a type of', 'InputStream')]"
"Notice, that once the PushbackInputStream has no more bytes to read, from its underlying PushbackInputStream, the read() method will return -1.","[('PushbackInputStream', 'has property', 'no more bytes to read'), ('read() method', 'returns', '-1'), ('PushbackInputStream', 'underlies', 'PushbackInputStream')]"
To push a byte back into the Java PushbackInputStream you use the unread() method.,"[('Java PushbackInputStream', 'has method', 'unread()'), ('unread()', 'used to', 'push a byte back')]"
"This example first reads a byte from the PushbackInputStream, then pushes it back into the PushbackInputStream, and then reads that byte back again with the final read() call.","[('example', 'reads', 'byte'), ('byte', 'read from', 'PushbackInputStream'), ('example', 'pushes back', 'byte'), ('byte', 'pushed back into', 'PushbackInputStream'), ('example', 'reads back', 'byte'), ('byte', 'read back with', 'final read() call')]"
"The Java PushbackReader class, java.io.PushbackReader, is intended to be used when you parse data from a Reader.","[('Java PushbackReader class', 'is a', 'java.io.PushbackReader'), ('Java PushbackReader class', 'intended to be used when', 'parse data from a Reader')]"
These characters will then be read again the next time you call read().,"[('characters', 'will be read', 'next time'), ('next time', 'you call', 'read()')]"
The call to read() reads a character from the PushbackReader just like from any other Reader.,"[('read()', 'reads', 'character'), ('character', 'from', 'PushbackReader'), ('PushbackReader', 'is a type of', 'Reader')]"
The call to unread() pushes a character back into the PushbackReader.,"[('unread()', 'pushes', 'character'), ('character', 'back into', 'PushbackReader')]"
The next time read() is called the pushed back characters will be read first.,"[('read()', 'is called', 'next time'), ('pushed back characters', 'will be read first', 'next time read() is called')]"
"If you push back multiple characters into the PushbackReader, the latest pushed back character will be returned first from the read() method, just like with a stack.","[('PushbackReader', 'can push back', 'multiple characters'), ('latest pushed back character', 'will be returned first from', 'read() method'), ('read() method', 'returns', 'latest pushed back character'), ('latest pushed back character', 'is like', 'stack')]"
You read characters from a Java PushbackReader just like you do from a Java Reader - because PushbackReader is a Java Reader subclass.,"[('PushbackReader', 'is a', 'Java Reader subclass'), ('You', 'read characters from', 'Java PushbackReader'), ('You', 'read characters from', 'Java Reader')]"
"In other words, you use its read() method which is inherited from the Reader class.","[('read()', 'is inherited from', 'Reader class'), ('read()', 'method of', 'Reader class')]"
Here is an example of reading characters from a Java PushbackReader via its read() method:,"[('Java PushbackReader', 'has method', 'read()'), ('read()', 'reads', 'characters')]"
"The read() returns an int which you will have to cast to a char yourself, as shown in the example above.","[('read()', 'returns', 'int'), ('int', 'cast to', 'char')]"
When there are no characters available in the PushbackReader the read() method will return the int value -1.,"[('PushbackReader', 'has method', 'read()'), ('read()', 'returns', 'int value -1'), ('PushbackReader', 'has condition', 'no characters available')]"
To push a character back into a Java PushbackReader you must call its unread() method.,"[('Java PushbackReader', 'has method', 'unread()'), ('unread()', 'action', 'push a character back')]"
"This way the nextToken() method can ""sample"" the first character of the next token, and based on that decide what kind of token it is, and what read method to call for that kind of token.",
"For the readSingleTokenWord() however, it is necessary, as the character read is the first character of the token's value.","[('readSingleTokenWord()', 'requires', 'character read'), ('character read', 'is', ""first character of the token's value"")]"
"The implementations of the readDoubleQuotedToken(), readSingleQuotedToken() and readSingleWordToken() have been left out to keep the example short.","[('readDoubleQuotedToken()', 'is an implementation of', 'example'), ('readSingleQuotedToken()', 'is an implementation of', 'example'), ('readSingleWordToken()', 'is an implementation of', 'example')]"
"Just imagine they read a token enclosed by double quotes (""), single quotes (') or a token which ends with a non-word character (e.g.",
The Java RandomAccessFile class in the Java IO API allows you to move navigate a file and read from it or write to it as you please.,"[('Java RandomAccessFile class', 'part of', 'Java IO API'), ('Java RandomAccessFile class', 'allows', 'move navigate a file'), ('Java RandomAccessFile class', 'allows', 'read from a file'), ('Java RandomAccessFile class', 'allows', 'write to a file')]"
Before you can work with the RandomAccessFile class you must instantiate it.,"[('RandomAccessFile class', 'requires action', 'instantiate')]"
You can obtain the current position of a Java RandomAccessFile using its getFilePointer() method.,"[('Java RandomAccessFile', 'has method', 'getFilePointer()'), ('getFilePointer()', 'obtains', 'current position')]"
Here is an example of obtaining the current position of a RandomAccessFile using its getFilePointer() method:,"[('RandomAccessFile', 'has method', 'getFilePointer()'), ('getFilePointer()', 'used for', 'obtaining current position')]"
Reading a byte from a Java RandomAccessFile is done using its read() method.,"[('Java RandomAccessFile', 'has method', 'read()'), ('read()', 'used for', 'Reading a byte')]"
The read() method reads the byte located a the position in the file currently pointed to by the file pointer in the RandomAccessFile instance.,"[('read() method', 'reads byte at position', 'file pointer'), ('file pointer', 'located in', 'RandomAccessFile instance')]"
Here is a thing the JavaDoc forgets to mention: The read() method increments the file pointer to point to the next byte in the file after the byte just read!,"[('JavaDoc', 'forgets to mention', 'thing'), ('read() method', 'increments', 'file pointer'), ('file pointer', 'points to', 'next byte in the file'), ('next byte in the file', 'follows', 'byte just read')]"
This means that you can continue to call read() without having to manually move the file pointer.,"[('you', 'can continue to call', 'read()'), ('read()', 'does not require', 'manually move the file pointer')]"
This example reads a sequence of bytes into the dest byte array passed as parameter to the read() method.,"[('sequence of bytes', 'read into', 'dest byte array'), ('dest byte array', 'passed as parameter to', 'read() method')]"
The read() method will start reading in the file from the current file position of the RandomAccessFile.,"[('read() method', 'will start reading in', 'file'), ('file', 'has current file position', 'RandomAccessFile')]"
"The read() method will start writing data into the byte array starting from the array position provided by the offset parameter, and at most the number of bytes provided by the length parameter.","[('read() method', 'starts writing data into', 'byte array'), ('writing data', 'starts from array position', 'offset parameter'), ('writing data', 'at most number of bytes', 'length parameter')]"
You can write a single byte to a RandomAccessFile using its write() method which takes an int as parameter.,"[('RandomAccessFile', 'has method', 'write()'), ('write()', 'takes parameter', 'int'), ('write()', 'action', 'write a single byte')]"
"Remember, calling this write() method will advance the file position of the RandomAccessFile by 1.","[('write() method', 'advances file position', 'RandomAccessFile')]"
Writing to a RandomAccessFile can be done using one it its many write() methods.,"[('RandomAccessFile', 'has method', 'write()'), ('write()', 'used for', 'Writing')]"
Just like with the read() method the write() method advances the file pointer after being called.,"[('write() method', 'advances', 'file pointer'), ('read() method', 'advances', 'file pointer')]"
The RandomAccessFile has a close() method which must be called when you are done using the RandomAccessFile instance.,"[('RandomAccessFile', 'has method', 'close()'), ('close()', 'must be called when done using', 'RandomAccessFile instance')]"
You can see example of calls to close() in the examples above.,"[('calls', 'example of', 'close()'), ('examples', 'contain', 'calls')]"
"The Java Reader class, java.io.Reader, is the base class for all Reader subclasses in the Java IO API.","[('Java Reader class', 'is a', 'base class'), ('java.io.Reader', 'is a', 'Java Reader class'), ('Java Reader class', 'has subclasses', 'Reader subclasses'), ('Java Reader class', 'part of', 'Java IO API')]"
"This is done when you instantiate the Reader (actually, when you instantiate one of its subclasses).","[('Reader', 'has subclass', 'subclasses'), ('subclasses', 'is instantiated by', 'you')]"
You will normally use a Reader subclass rather than a Reader directly.,"[('Reader subclass', 'used instead of', 'Reader')]"
Here is an example of creating a Java FileReader which is a subclass of Java Reader:,"[('Java FileReader', 'is a subclass of', 'Java Reader')]"
The read() method of a Java Reader returns an int which contains the char value of the next character read.,"[('read() method', 'part of', 'Java Reader'), ('read() method', 'returns', 'int'), ('int', 'contains', 'char value'), ('char value', 'of', 'next character read')]"
"If the read() method returns -1, there is no more data to read in the Reader, and it can be closed.","[('read() method', 'returns', '-1'), ('-1', 'indicates', 'no more data to read'), ('no more data to read', 'location', 'Reader'), ('Reader', 'can be', 'closed')]"
"If not, it processes that char and continues reading until -1 is returned from the Reader read() method.","[('Reader', 'has method', 'read()'), ('read()', 'returns', '-1'), ('it', 'processes', 'char'), ('it', 'continues reading until', '-1 is returned')]"
"The Java Reader class also has a read() method that takes a char array as parameter, as well as a start offset and length.","[('Java Reader class', 'has method', 'read()'), ('read()', 'takes parameter', 'char array'), ('read()', 'takes parameter', 'start offset'), ('read()', 'takes parameter', 'length')]"
The Java Reader class has a method named skip() which can be used to skip over a number of characters in the input that you do not want to read.,"[('Java Reader class', 'has method', 'skip()'), ('skip()', 'used to', 'skip over a number of characters in the input')]"
The Java StreamTokenizer class (java.io.StreamTokenizer) can tokenize the characters read from a Reader into tokens.,"[('Java StreamTokenizer class', 'can tokenize', 'characters'), ('characters', 'read from', 'Reader'), ('Java StreamTokenizer class', 'part of', 'java.io.StreamTokenizer')]"
You do so by calling the nextToken() method of the StreamTokenizer inside a loop.,"[('You', 'perform action by', 'calling nextToken() method'), ('nextToken() method', 'part of', 'StreamTokenizer'), ('calling nextToken() method', 'occurs inside', 'loop')]"
"After each call to nextToken() the StreamTokenizer has several fields you can read to see what kind of token was read, it's value etc.","[('StreamTokenizer', 'has method', 'nextToken()'), ('nextToken()', 'action', 'read token'), ('StreamTokenizer', 'has fields', 'several fields'), ('several fields', 'provide information', 'kind of token'), ('several fields', 'provide information', ""token's value"")]"
"Java has 3 streams called System.in, System.out, and System.err which are commonly used to provide input to, and output from Java applications.","[('Java', 'has stream', 'System.in'), ('Java', 'has stream', 'System.out'), ('Java', 'has stream', 'System.err'), ('System.in', 'used for', 'provide input to Java applications'), ('System.out', 'used for', 'output from Java applications'), ('System.err', 'used for', 'output from Java applications')]"
Most commonly used is probably System.out for writing output to the console from console programs (command line applications).,"[('System.out', 'used for', 'writing output to the console'), ('writing output to the console', 'used in', 'console programs'), ('console programs', 'type', 'command line applications')]"
"System.in, System.out and System.err are initialized by the Java runtime when a Java VM starts up, so you don't have to instantiate any streams yourself (although you can exchange them at runtime).","[('System.in', 'initialized by', 'Java runtime'), ('System.out', 'initialized by', 'Java runtime'), ('System.err', 'initialized by', 'Java runtime'), ('Java runtime', 'initializes', 'System.in'), ('Java runtime', 'initializes', 'System.out'), ('Java runtime', 'initializes', 'System.err'), ('Java VM', 'starts up', 'Java runtime')]"
System.in is an InputStream which is typically connected to keyboard input of console programs.,"[('System.in', 'is a', 'InputStream'), ('InputStream', 'connected to', 'keyboard input'), ('keyboard input', 'used by', 'console programs')]"
"In other words, if you start a Java application from the command line, and you type something on the keyboard while the CLI console (or terminal) has focus, the keyboard input can typically be read via System.in from inside that Java application.","[('Java application', 'started from', 'command line'), ('keyboard input', 'read via', 'System.in'), ('CLI console', 'has focus', 'keyboard input'), ('keyboard input', 'typed on', 'keyboard'), ('keyboard input', 'read from', 'Java application')]"
"However, it is only keyboard input directed to that Java application (the console / terminnal that started the application) which can be read via System.in.","[('keyboard input', 'directed to', 'Java application'), ('Java application', 'started by', 'console / terminal'), ('keyboard input', 'can be read via', 'System.in')]"
Keyboard input for other applications cannot be read via System.in .,"[('Keyboard input', 'cannot be read via', 'System.in'), ('System.in', 'cannot read', 'Keyboard input'), ('Keyboard input', 'used for', 'other applications')]"
"System.in is not used as often since data is commonly passed to a command line Java application via command line arguments, files, or possibly via network connections if the application is designed for that.","[('System.in', 'used less often because', 'data is commonly passed via command line arguments'), ('System.in', 'used less often because', 'data is commonly passed via files'), ('System.in', 'used less often because', 'data is commonly passed via network connections'), ('data', 'passed to', 'command line Java application'), ('command line Java application', 'designed for', 'network connections')]"
System.out normally outputs the data you write to it to the CLI console / terminal.,"[('System.out', 'outputs data to', 'CLI console / terminal')]"
System.out is often used from console-only programs like command line tools as a way to display the result of their execution to the user.,"[('System.out', 'used in', 'console-only programs'), ('console-only programs', 'example of', 'command line tools'), ('command line tools', 'display result to', 'user')]"
System.err works like System.out except it is normally only used to output error texts.,"[('System.err', 'works like', 'System.out'), ('System.err', 'used to', 'output error texts')]"
"Some programs (like Eclipse) will show the output to System.err in red text, to make it more obvious that it is error text.","[('Eclipse', 'shows output to', 'System.err'), ('System.err', 'output type', 'error text'), ('error text', 'displayed in', 'red text')]"
"Even if the 3 System streams are static members of the java.lang.System class, and are pre-instantiated at JVM startup, you can change what streams to use for each of them.","[('3 System streams', 'are', 'static members of the java.lang.System class'), ('3 System streams', 'are', 'pre-instantiated at JVM startup'), ('You', 'can change', 'what streams to use for each of them')]"
"Just set a new InputStream for System.in or a new OutputStream for System.out or System.err, and all further data will be read / written to the new stream.","[('System.in', 'can be set to', 'new InputStream'), ('System.out', 'can be set to', 'new OutputStream'), ('System.err', 'can be set to', 'new OutputStream'), ('data', 'will be read from', 'new InputStream'), ('data', 'will be written to', 'new OutputStream')]"
"To set a new System stream, use one of th emethods System.setIn(), System.setOut() or System.setErr().","[('System', 'has method', 'System.setIn()'), ('System', 'has method', 'System.setOut()'), ('System', 'has method', 'System.setErr()')]"
"Now all data written to System.out should be redirected into the file ""c:\\data\\system.out.txt"".",
"Keep in mind though, that you should make sure to flush System.out and close the file before the JVM shuts down, to be sure that all data written to System.out is actually flushed to the file.","[('you', 'should make sure to', 'flush System.out'), ('you', 'should make sure to', 'close the file'), ('System.out', 'data written to', 'file'), ('JVM', 'shuts down', 'before'), ('data', 'is actually flushed to', 'file')]"
The Java Writer class (java.io.Writer) is the base class for all Writer subclasses in the Java IO API.,"[('Java Writer class', 'is a', 'base class'), ('Java Writer class', 'has subclass', 'Writer subclasses'), ('Java Writer class', 'part of', 'Java IO API')]"
"The Java Writer subclasses can normally handle UTF-8 and UTF-16 encoding for you, so you don't have to worry about that.","[('Java Writer subclasses', 'can handle', 'UTF-8 encoding'), ('Java Writer subclasses', 'can handle', 'UTF-16 encoding')]"
You will normally use a Writer subclass rather than a Writer directly.,"[('Writer subclass', 'used instead of', 'Writer')]"
The Java Writer's flush() method flushes all data written to the Writer to the underlying data destination.,"[('flush() method', 'belongs to', 'Java Writer'), ('flush() method', 'flushes data to', 'underlying data destination'), ('data', 'written to', 'Writer')]"
"By calling flush() you can assure that any buffered data will be flushed (written) to disk (or network, or whatever else the destination of your Writer has).","[('flush()', 'assures', 'buffered data will be flushed'), ('buffered data', 'will be flushed to', 'disk'), ('buffered data', 'will be flushed to', 'network'), ('buffered data', 'will be flushed to', 'destination of Writer')]"
Here is an example of flushing data written to a Java Writer by calling its flush() method:,"[('flush() method', 'is called on', 'Java Writer'), ('Java Writer', 'writes', 'data')]"
"The concrete implementations of hasMoreCharacters() and getNextCharacter() are left out, but they are not really super important to understand the principle of this example.","[('hasMoreCharacters()', 'is a concrete implementation of', 'principle of this example'), ('getNextCharacter()', 'is a concrete implementation of', 'principle of this example')]"
"What matters is, that once the while loop ends, and you are done writing data to the Writer, its close() method is called, which closes the Writer .","[('while loop', 'ends', 'done writing data to the Writer'), ('close() method', 'called', 'closes the Writer')]"
"Once the try block is exited, the close() method of the Writer is called automatically, because the Writer was declared inside the parentheses of the try block.","[('try block', 'contains', 'Writer'), ('try block', 'exited', 'close() method called'), ('Writer', 'declared inside', 'parentheses of the try block')]"
"The SQL dialect used by the various different databases will vary slightly, so to be 100% database independent, you SQL must also be 100% database independent (i.e.","[('SQL dialect', 'used by', 'various different databases'), ('various different databases', 'have characteristic', 'vary slightly'), ('SQL', 'must be', '100% database independent')]"
The Java String parameter passed to the Class forName() method is the name of the JDBC driver class for the given JDBC driver.,"[('Java String parameter', 'passed to', 'Class forName() method'), ('Java String parameter', 'is the name of', 'JDBC driver class'), ('JDBC driver class', 'for', 'given JDBC driver')]"
You will have to find the right class name for the JDBC driver you are using.,"[('You', 'have to find', 'right class name'), ('right class name', 'for', 'JDBC driver'), ('You', 'are using', 'JDBC driver')]"
"Typically, each database has its own JDBC driver, so you will have to look up what the JDBC driver class name is (if you are using pre Java 6).","[('Database', 'has', 'JDBC driver'), ('JDBC driver', 'associated with', 'Database'), ('You', 'have to look up', 'JDBC driver class name'), ('JDBC driver class name', 'used in', 'pre Java 6')]"
"First you add the SQL statements to be executed in the batch, using the addBatch() method.","[('you', 'add', 'SQL statements'), ('SQL statements', 'to be executed in', 'batch'), ('you', 'use', 'addBatch() method')]"
The int[] array returned by the executeBatch() method is an array of int telling how many records were affected by each executed SQL statement in the batch.,"[('executeBatch() method', 'returns', 'int[] array'), ('int[] array', 'tells', 'how many records were affected'), ('SQL statement', 'executed in', 'batch')]"
"Second, each set of parameter values are inserted into the preparedStatement, and the addBatch() method is called.","[('set of parameter values', 'inserted into', 'preparedStatement')]"
"Third, the executeBatch() method is called, which executes all the batch updates.","[('executeBatch() method', 'is called', 'executeBatch() method'), ('executeBatch() method', 'executes', 'batch updates')]"
"By the way, imagine that the used Person class looks like this:","[('Person class', 'used in', 'imagine')]"
A java.sql.CallableStatement is used to call stored procedures in a database.,"[('java.sql.CallableStatement', 'used to call', 'stored procedures'), ('stored procedures', 'located in', 'database')]"
"A stored procedure is like a function or method in a class, except it lives inside the database.","[('Stored procedure', 'is like', 'function'), ('Stored procedure', 'is like', 'method'), ('Function', 'is in', 'class'), ('Method', 'is in', 'class'), ('Stored procedure', 'lives inside', 'database')]"
You create an instance of a CallableStatement by calling the prepareCall() method on a connection object.,"[('CallableStatement', 'created by', 'prepareCall() method'), ('prepareCall() method', 'called on', 'connection object')]"
"If the stored procedure returns a ResultSet, and you need a non-default ResultSet (e.g.","[('stored procedure', 'returns', 'ResultSet')]"
The executeQuery() method is used if the stored procedure returns a ResultSet.,"[('executeQuery() method', 'used for', 'stored procedure'), ('stored procedure', 'returns', 'ResultSet')]"
"If the stored procedure just updates the database, you can call the executeUpdate() method instead, like this:","[('stored procedure', 'action', 'updates the database'), ('you', 'can call method', 'executeUpdate()')]"
"The JDBC Connection class, java.sql.Connection, represents a database connection to a relational database.","[('JDBC Connection class', 'represents', 'database connection'), ('java.sql.Connection', 'represents', 'database connection'), ('database connection', 'to', 'relational database')]"
Each JDBC driver has a primary driver class that initializes the driver when it is loaded.,"[('JDBC driver', 'has primary driver class', 'primary driver class'), ('primary driver class', 'initializes', 'JDBC driver')]"
You open a JDBC Connection by call the java.sql.DriverManager class method getConnection().,"[('You', 'open', 'JDBC Connection'), ('JDBC Connection', 'opened by', 'java.sql.DriverManager class method getConnection()')]"
This is how calling getConnection() only with the URL as parameter looks:,"[('getConnection()', 'called with', 'URL as parameter')]"
"The second variant of getConnection() takes both a database URL, a user name and a password as parameters.","[('getConnection()', 'has variant', 'second variant of getConnection()'), ('second variant of getConnection()', 'takes parameter', 'database URL'), ('second variant of getConnection()', 'takes parameter', 'user name'), ('second variant of getConnection()', 'takes parameter', 'password')]"
Here is an example of calling that variant of getConnection() :,"[('getConnection()', 'has variant', 'that variant')]"
The third variant of getConnection() takes a database URL and a Properties object as parameter.,"[('getConnection()', 'has variant', 'third variant'), ('third variant', 'takes', 'database URL'), ('third variant', 'takes', 'Properties object')]"
"The JDBC Connection setAutoCommit() method is used to switch the connection into, or out of, auto commit mode.","[('JDBC Connection', 'has method', 'setAutoCommit()'), ('setAutoCommit()', 'used to', 'switch connection mode'), ('connection', 'has mode', 'auto commit mode')]"
"When not in auto commit mode, each database transaction must be explicitly committed by calling the Connection commit() method.","[('database transaction', 'requires', 'explicit commit'), ('explicit commit', 'performed by', 'calling the Connection commit() method'), ('Connection commit() method', 'commits', 'database transaction')]"
"Keep in mind, that if some of the operations in the transaction fail, you would most likely want to call the rollback() method instead of commit().","[('operations', 'part of', 'transaction'), ('transaction', 'contains', 'operations'), ('operations', 'can fail in', 'transaction'), ('rollback()', 'method of', 'transaction'), ('commit()', 'method of', 'transaction'), ('rollback()', 'called instead of', 'commit()')]"
The Java JDBC Connection rollback() method rolls back the operations executed within the currently ongoing transaction.,"[('Java JDBC Connection', 'has method', 'rollback()'), ('rollback()', 'rolls back', 'operations'), ('operations', 'executed within', 'currently ongoing transaction')]"
Exactly how to handle the calls to commit() and / or rollback() is covered in the JDBC Transactions Tutorial.,"[('commit()', 'covered in', 'JDBC Transactions Tutorial'), ('rollback()', 'covered in', 'JDBC Transactions Tutorial')]"
Here is a simple example of calling the JDBC Connection rollback() method:,"[('JDBC Connection', 'has method', 'rollback()')]"
Notice how rollback() is called within the catch-block of a try-catch block.,"[('rollback()', 'is called within', 'catch-block'), ('catch-block', 'is part of', 'try-catch block')]"
Here is an example of creating a JDBC Statement instance via the JDBC Connection createStatement() method:,"[('JDBC Connection', 'method', 'createStatement()'), ('createStatement()', 'creates', 'JDBC Statement instance')]"
Here is an example of creating a JDBC PreparedStatement instance via the JDBC Connection prepareStatement() method:,"[('JDBC PreparedStatement instance', 'created via', 'JDBC Connection prepareStatement() method')]"
The JDBC Connection getMetaData() method returns a JDBC DatabaseMetaData object which can be used to introspect the database the JDBC Connection is connected to.,"[('JDBC Connection', 'method', 'getMetaData()'), ('getMetaData()', 'returns', 'JDBC DatabaseMetaData object'), ('JDBC DatabaseMetaData object', 'used to introspect', 'database'), ('JDBC Connection', 'connected to', 'database')]"
Here is an example of creating a JDBC DatabaseMetaData object via the JDBC Connection getMetaData() method:,"[('JDBC Connection', 'method', 'getMetaData()'), ('getMetaData()', 'creates', 'JDBC DatabaseMetaData object')]"
Through the java.sql.DatabaseMetaData interface you can obtain meta data about the database you have connected to.,"[('java.sql.DatabaseMetaData', 'provides', 'meta data'), ('meta data', 'about', 'database'), ('you', 'connected to', 'database')]"
"First you call the getTables() method, passing it 4 parameters which are all null.","[('getTables() method', 'has action', 'call'), ('getTables() method', 'receives parameter', '4 parameters'), ('4 parameters', 'value', nan)]"
The ResultSet returned from the getTables() method contains a list of table names matching the 4 given parameters (which were all null).,"[('ResultSet', 'returned from', 'getTables() method'), ('ResultSet', 'contains', 'list of table names'), ('list of table names', 'matches', '4 given parameters')]"
The ResultSet returned by the getColumns() method contains a list of columns for the given table.,"[('getColumns() method', 'returns', 'ResultSet'), ('ResultSet', 'contains', 'list of columns'), ('list of columns', 'for', 'given table')]"
The column type is an integer matching one of the type constants found in java.sql.Types,"[('column type', 'is a', 'integer'), ('integer', 'matches', 'type constants'), ('type constants', 'found in', 'java.sql.Types')]"
"First you call the getPrimaryKeys() method, passing 3 parameters to it.","[('you', 'call', 'getPrimaryKeys() method'), ('getPrimaryKeys() method', 'has parameter', '3')]"
The ResultSet returned by the getPrimaryKeys() method contains a list of columns which make up the primary key of the given table.,"[('getPrimaryKeys() method', 'returns', 'ResultSet'), ('ResultSet', 'contains', 'list of columns'), ('list of columns', 'make up', 'primary key'), ('primary key', 'belongs to', 'given table')]"
"A JDBC driver is a set of Java classes that implement the JDBC interfaces, targeting a specific database.","[('JDBC driver', 'is a set of', 'Java classes'), ('Java classes', 'implement', 'JDBC interfaces'), ('JDBC driver', 'targeting', 'specific database')]"
A JDBC driver is a collection of Java classes that enables you to connect to a certain database.,"[('JDBC driver', 'is a', 'collection of Java classes'), ('JDBC driver', 'enables', 'connect to a certain database')]"
"This works for executing queries too, using the executeQuery() method, which returns a ResultSet.","[('executeQuery()', 'used for', 'executing queries'), ('executeQuery()', 'returns', 'ResultSet')]"
"The ResultSet.next() method moves to the next row in the ResultSet, if there are anymore rows.","[('ResultSet.next() method', 'moves to', 'next row'), ('next row', 'located in', 'ResultSet')]"
You need to call next() at least one time before you can read any data.,"[('You', 'need to call', 'next()'), ('next()', 'action', 'read data')]"
Before the first next() call the ResultSet is positioned before the first row.,"[('ResultSet', 'positioned before', 'first row')]"
"You can get column data for the current row by calling some of the getXXX() methods, where XXX is a primitive data type.","[('getXXX() methods', 'used for', 'get column data'), ('column data', 'belongs to', 'current row'), ('XXX', 'is a', 'primitive data type')]"
The column name to get the value of is passed as parameter to any of these getXXX() method calls.,"[('column name', 'passed as parameter to', 'getXXX() method calls'), ('getXXX() method calls', 'get value of', 'column name')]"
"You can get the index of a given column by calling the ResultSet.findColumn() method, like this:","[('ResultSet', 'has method', 'findColumn()'), ('findColumn()', 'used for', 'get the index of a given column')]"
The text about queries shows how the result of a query is returned as a java.sql.ResultSet.,"[('query', 'has result', 'java.sql.ResultSet')]"
"The next() method returns true if the ResultSet has a next record, and moves the ResultSet to point to the next record.","[('next() method', 'returns', 'true'), ('ResultSet', 'has', 'next record'), ('next() method', 'moves', 'ResultSet'), ('ResultSet', 'points to', 'next record')]"
"If there were no more records, next() returns false, and you can no longer.","[('next()', 'returns', 'false'), ('records', 'are', 'no more')]"
"Once the next() method has returned false, you should not call it anymore.","[('next() method', 'returns', 'false'), ('you', 'should not call', 'next() method')]"
Here is an example of iterating a ResultSet using the next() method:,"[('ResultSet', 'iterated using', 'next() method')]"
"As you can see, the next() method is actually called before the first record is accessed.","[('next() method', 'is called before', 'first record is accessed')]"
"Once next() has been called once, it points at the first record.","[('next()', 'has been called', 'once'), ('next()', 'points at', 'first record')]"
"Similarly, when next() is called and returns false, the ResultSet is actually pointing after the last record.","[('next()', 'is called and returns', 'false'), ('ResultSet', 'is pointing after', 'last record')]"
You do so by calling one or more of the many getXXX() methods.,"[('You', 'perform action', 'calling methods'), ('methods', 'type', 'getXXX()')]"
"You pass the name of the column to get the value of, to the many getXXX() methods.","[('You', 'pass', 'name of the column'), ('name of the column', 'to get', 'value'), ('You', 'pass', 'name of the column to get the value'), ('name of the column to get the value', 'to', 'many getXXX() methods')]"
"There are a lot of getXXX() methods you can call, which return the value of the column as a certain data type, e.g.","[('getXXX() methods', 'can call', 'return the value of the column as a certain data type')]"
Here is a list of quick examples of these getXXX() methods:,"[('getXXX() methods', 'has example', 'quick examples')]"
The getXXX() methods also come in versions that take a column index instead of a column name.,"[('getXXX() methods', 'have version', 'versions that take a column index'), ('getXXX() methods', 'have version', 'versions that take a column name')]"
"If you do not know the index of a certain column you can find the index of that column using the ResultSet.findColumn(String columnName) method, like this:","[('ResultSet.findColumn(String columnName) method', 'used for', 'find the index of a certain column')]"
The DatabaseMetaData.supportsResultSetType(int type) method returns true or false depending on whether the given type is supported or not.,"[('DatabaseMetaData.supportsResultSetType(int type)', 'returns', 'true'), ('DatabaseMetaData.supportsResultSetType(int type)', 'returns', 'false'), ('DatabaseMetaData.supportsResultSetType(int type)', 'depends on', 'whether the given type is supported')]"
The DatabaseMetaData.supportsResultSetConcurrency(int concurrency) method returns true or false depending on whether the given concurrency mode is supported or not.,"[('DatabaseMetaData.supportsResultSetConcurrency(int concurrency) method', 'returns', 'true'), ('DatabaseMetaData.supportsResultSetConcurrency(int concurrency) method', 'returns', 'false'), ('concurrency mode', 'is supported by', 'DatabaseMetaData.supportsResultSetConcurrency(int concurrency) method')]"
It is when updateRow() is called that the database is updated with the values of the row.,"[('updateRow()', 'is called', 'when the database is updated'), ('the database', 'is updated with', 'the values of the row')]"
"If you call updateRow() inside a transaction, the data is not actually committed to the database until the transaction is committed.","[('updateRow()', 'called inside', 'transaction'), ('data', 'not committed to', 'database'), ('transaction', 'committed', 'data')]"
"The row pointed to after calling moveToInsertRow() is a special row, a buffer, which you can use to build up the row until all column values has been set on the row.","[('moveToInsertRow()', 'points to', 'special row'), ('special row', 'is a', 'buffer'), ('you', 'can use', 'buffer'), ('buffer', 'used to', 'build up the row'), ('column values', 'set on', 'row')]"
"Once the row is ready to be inserted into the ResultSet, call the insertRow() method.","[('row', 'ready to be inserted into', 'ResultSet'), ('insertRow()', 'method of', 'ResultSet')]"
"If you need to insert another row, explicitly call moveToInsertRow() to signal this to the ResultSet.","[('you', 'need to', 'insert another row'), ('moveToInsertRow()', 'signal to', 'ResultSet')]"
The ResultSet holdability determines if a ResultSet is closed when the commit() method of the underlying connection is called.,"[('ResultSet holdability', 'determines', 'if ResultSet is closed'), ('commit() method', 'belongs to', 'underlying connection'), ('ResultSet', 'is closed when', 'commit() method is called')]"
The DatabaseMetaData.supportsResultSetHoldability(int holdability) returns true or false depending on whether the given holdability mode is supported or not.,"[('DatabaseMetaData.supportsResultSetHoldability', 'returns', 'true'), ('DatabaseMetaData.supportsResultSetHoldability', 'returns', 'false'), ('holdability', 'is supported by', 'DatabaseMetaData.supportsResultSetHoldability')]"
The CLOSE_CURSORS_OVER_COMMIT holdability means that all ResultSet instances are closed when connection.commit() method is called on the connection that created the ResultSet.,"[('CLOSE_CURSORS_OVER_COMMIT holdability', 'means', 'all ResultSet instances are closed when connection.commit() method is called'), ('connection', 'creates', 'ResultSet')]"
The HOLD_CURSORS_OVER_COMMIT holdability means that the ResultSet is kept open when the connection.commit() method is called on the connection that created the ResultSet.,"[('HOLD_CURSORS_OVER_COMMIT', 'means', 'ResultSet is kept open'), ('connection.commit()', 'called on', 'connection'), ('connection', 'created', 'ResultSet')]"
"Thus, you can open a ResultSet, update rows in it, call connection.commit() and still keep the same ResultSet open for future transactions on the same rows.","[('ResultSet', 'allows', 'update rows'), ('ResultSet', 'remains open for', 'future transactions'), ('future transactions', 'occur on', 'same rows')]"
"The Java JDBC Statement, java.sql.Statement, interface is used to execute SQL statements against a relational database.","[('Java JDBC Statement', 'is a type of', 'java.sql.Statement'), ('java.sql.Statement', 'used to execute', 'SQL statements'), ('SQL statements', 'executed against', 'relational database')]"
"You do so by calling its executeQuery() method, passing an SQL statement as parameter.","[('You', 'do by calling method', 'executeQuery()'), ('executeQuery()', 'method of', 'its'), ('executeQuery()', 'takes parameter', 'SQL statement')]"
The Statement executeQuery() method returns a Java JDBC ResultSet which can be used to navigate the response of the query.,"[('executeQuery() method', 'returns', 'Java JDBC ResultSet'), ('Java JDBC ResultSet', 'can be used to navigate', 'response of the query')]"
Here is an example of calling the Java JDBC Statement executeQuery() and navigating the returned ResultSet:,"[('Java JDBC Statement', 'method', 'executeQuery()'), ('executeQuery()', 'returns', 'ResultSet')]"
"The rowsAffected returned by the statement.executeUpdate(sql) call, tells how many records in the database were affected by the SQL statement.","[('statement.executeUpdate(sql)', 'returns', 'rowsAffected'), ('rowsAffected', 'tells', 'how many records in the database were affected by the SQL statement')]"
The classic example of when transactions are necessary is the example of bank accounts.,"[('transactions', 'are necessary for', 'bank accounts')]"
"But, instead of calling the executeQuery() method, you call the executeUpdate() method.","[('you', 'call', 'executeUpdate() method'), ('you', 'instead of calling', 'executeQuery() method')]"
The executeUpdate() method is used for both of these types of updates.,"[('executeUpdate() method', 'used for', 'types of updates')]"
"Again, the rowsAffected returned by the statement.executeUpdate(sql) call, tells how many records in the database were affected by the SQL statement.","[('statement.executeUpdate(sql)', 'returns', 'rowsAffected'), ('rowsAffected', 'tells', 'how many records in the database were affected by the SQL statement')]"
"Once you have installed the Java SDK, test that you have it working by opening a command prompt (textual interface to your computer, ala Unix Shell, Windows CMD etc.)","[('Java SDK', 'can be tested by', 'opening a command prompt'), ('command prompt', 'is a', 'textual interface'), ('textual interface', 'examples include', 'Unix Shell'), ('textual interface', 'examples include', 'Windows CMD')]"
"A Java abstract class is a class which cannot be instantiated, meaning you cannot create new instances of an abstract class.","[('Java abstract class', 'is a', 'class'), ('Java abstract class', 'cannot be', 'instantiated'), ('you', 'cannot create', 'new instances of an abstract class')]"
The purpose of an abstract class is to function as a base for subclasses.,"[('abstract class', 'has purpose', 'function as a base for subclasses'), ('abstract class', 'is a base for', 'subclasses')]"
"This Java abstract class tutorial explains how abstract classes are created in Java, what rules apply to them.","[('Java abstract class tutorial', 'explains', 'how abstract classes are created in Java'), ('Java abstract class tutorial', 'explains', 'what rules apply to abstract classes')]"
This tutorial gets into the purpose of abstract classes in Java in more detail towards the end of this text.,"[('This tutorial', 'discusses', 'purpose of abstract classes in Java')]"
In Java you declare that a class is abstract by adding the abstract keyword to the class declaration.,"[('Java', 'uses', 'abstract keyword'), ('abstract keyword', 'applies to', 'class declaration'), ('class', 'can be', 'abstract')]"
That is all there is to declaring an abstract class in Java.,"[('abstract class', 'can be declared in', 'Java')]"
"If you try to compile the code above the Java compiler will generate an error, saying that you cannot instantiate MyAbstractClass because it is an abstract class.","[('Java compiler', 'will generate', 'error'), ('error', 'saying', 'you cannot instantiate MyAbstractClass'), ('MyAbstractClass', 'is', 'abstract class')]"
"If a class has an abstract method, the whole class must be declared abstract.","[('class', 'contains', 'abstract method'), ('class', 'must be declared', 'abstract')]"
Not all methods in an abstract class have to be abstract methods.,"[('methods', 'are in', 'abstract class'), ('methods', 'do not have to be', 'abstract methods')]"
An abstract class can have a mixture of abstract and non-abstract methods.,"[('Abstract class', 'can have', 'mixture of abstract and non-abstract methods')]"
Subclasses of an abstract class must implement (override) all abstract methods of its abstract superclass.,"[('Subclasses', 'must implement', 'all abstract methods'), ('Subclasses', 'override', 'all abstract methods'), ('all abstract methods', 'belong to', 'abstract superclass')]"
The non-abstract methods of the superclass are just inherited as they are.,"[('non-abstract methods', 'are inherited by', 'superclass')]"
Notice how MySubClass has to implement the abstract method abstractMethod() from its abstract superclass MyAbstractClass.,"[('MySubClass', 'implements method', 'abstractMethod()'), ('abstractMethod()', 'defined in', 'MyAbstractClass'), ('MySubClass', 'subclass of', 'MyAbstractClass')]"
"The only time a subclass of an abstract class is not forced to implement all abstract methods of its superclass, is if the subclass is also an abstract class.","[('subclass', 'is a subclass of', 'abstract class'), ('subclass', 'is not forced to implement', 'all abstract methods of its superclass'), ('subclass', 'is', 'abstract class')]"
The purpose of abstract classes is to function as base classes which can be extended by subclasses to create a full implementation.,"[('abstract classes', 'purpose', 'function as base classes'), ('base classes', 'can be extended by', 'subclasses'), ('subclasses', 'create', 'full implementation')]"
"If the steps before and after the action are always the same, the 3-step process could be implemented in an abstract superclass with this Java code:","[('steps before and after the action', 'are always', 'the same'), ('3-step process', 'could be implemented in', 'abstract superclass'), ('abstract superclass', 'implemented with', 'Java code')]"
Subclasses of MyAbstractProcess can now extend MyAbstractProcess and just override the action() method.,"[('Subclasses of MyAbstractProcess', 'can extend', 'MyAbstractProcess'), ('Subclasses of MyAbstractProcess', 'can override', 'action() method')]"
"When the process() method of the subclass is called, the full process is executed, including the stepBefore() and stepAfter() of the abstract superclass, and the action() method of the subclass.","[('subclass', 'has method', 'process()'), ('process()', 'executes', 'full process'), ('full process', 'includes', 'stepBefore()'), ('full process', 'includes', 'stepAfter()'), ('stepBefore()', 'belongs to', 'abstract superclass'), ('stepAfter()', 'belongs to', 'abstract superclass'), ('full process', 'includes', 'action()'), ('action()', 'belongs to', 'subclass')]"
"Of course, the MyAbstractProcess did not have to be an abstract class to function as a base class.","[('MyAbstractProcess', 'is not required to be', 'abstract class'), ('MyAbstractProcess', 'functions as', 'base class')]"
"However, by making the method to implement abstract, and thus the class too, you signal clearly to users of this class that this class should not be used as it is.","[('method', 'to implement', 'abstract'), ('class', 'is', 'abstract'), ('class', 'signal to', 'users'), ('class', 'should not be used as', 'it is')]"
"Instead it should be used as a base class for a subclass, and that the abstract method should be implemented in the subclass.","[('base class', 'used for', 'subclass'), ('abstract method', 'implemented in', 'subclass')]"
The above example did not have a default implementation for the action() method.,"[('example', 'lack', 'default implementation'), ('default implementation', 'related to', 'action() method')]"
In some cases your superclass might actually have a default implementation for the method that subclasses are supposed to override.,"[('superclass', 'might have', 'default implementation'), ('subclasses', 'are supposed to override', 'method'), ('superclass', 'contains', 'method')]"
"You can still make the superclass abstract though, even if it contains no abstract methods.","[('superclass', 'can be', 'abstract'), ('superclass', 'contains', 'no abstract methods')]"
"Notice how the processURLData() is an abstract method, and that URLProcessorBase is an abstract class.","[('processURLData()', 'is a', 'abstract method'), ('URLProcessorBase', 'is a', 'abstract class')]"
Subclasses of URLProcessorBase have to implement the processURLData() method because it is an abstract method.,"[('Subclasses of URLProcessorBase', 'have to implement', 'processURLData() method'), ('processURLData() method', 'is', 'abstract method')]"
Subclasses of URLProcessorBase abstract class can process data downloaded from URLs without worrying about opening and closing the network connection to the URL.,"[('Subclasses', 'are a type of', 'URLProcessorBase'), ('URLProcessorBase', 'is an', 'abstract class'), ('Subclasses', 'can process', 'data'), ('data', 'is downloaded from', 'URLs'), ('Subclasses', 'do not worry about', 'opening and closing the network connection to the URL')]"
Subclasses only need to worry about processing the data from the InputStream passed to the processURLData() method.,"[('Subclasses', 'need to worry about', 'processing the data'), ('processing the data', 'from', 'InputStream'), ('InputStream', 'passed to', 'processURLData() method')]"
This makes it easier to implement classes that processes data from URLs.,"[('classes', 'processes', 'data'), ('data', 'from', 'URLs')]"
"Notice how the subclass only implements the processURLData() method, and nothing more.","[('subclass', 'implements', 'processURLData() method')]"
The rest of the code is inherited from the URLProcessorBase superclass.,"[('code', 'is inherited from', 'URLProcessorBase superclass')]"
Here is an example of how to use the URLProcessorImpl class:,"[('URLProcessorImpl', 'is a type of', 'class')]"
"The process() method is called, which is implemented in the URLProcessorBase superclass.","[('process() method', 'is called', 'URLProcessorBase superclass'), ('process() method', 'is implemented in', 'URLProcessorBase superclass')]"
This method in turn calls the processURLData() in the URLProcessorImpl class.,"[('This method', 'calls', 'processURLData()'), ('processURLData()', 'located in', 'URLProcessorImpl class')]"
The example I showed you above with the URLProcessorBase class is actually an example of the Template Method design pattern.,"[('URLProcessorBase class', 'example of', 'Template Method design pattern')]"
"The Template Method design pattern provides a partial implementation of some process, which subclasses can complete when extending the Template Method base class.","[('Template Method design pattern', 'provides', 'partial implementation of some process'), ('subclasses', 'can complete', 'partial implementation of some process'), ('subclasses', 'extend', 'Template Method base class')]"
"A Java access modifier specifies which classes can access a given class and its fields, constructors and methods.","[('Java access modifier', 'specifies access for', 'classes'), ('Java access modifier', 'specifies access for', 'fields'), ('Java access modifier', 'specifies access for', 'constructors'), ('Java access modifier', 'specifies access for', 'methods')]"
"Access modifiers can be specified separately for a class, its constructors, fields and methods.","[('Access modifiers', 'can be specified for', 'class'), ('Access modifiers', 'can be specified for', 'constructors'), ('Access modifiers', 'can be specified for', 'fields'), ('Access modifiers', 'can be specified for', 'methods')]"
"Assigning an access modifier to a class, constructor, field or method is also sometimes referred to as ""marking"" that class, constructor, field or method as that which the access modifier specifies.",
"If a method or variable is marked as private (has the private access modifier assigned to it), then only code inside the same class can access the variable, or call the method.","[('method', 'has access modifier', 'private'), ('variable', 'has access modifier', 'private'), ('private', 'restricts access to', 'same class'), ('same class', 'can access', 'variable'), ('same class', 'can call', 'method')]"
"Code inside subclasses cannot access the variable or method, nor can code from any external class.","[('Code inside subclasses', 'cannot access', 'variable'), ('Code inside subclasses', 'cannot access', 'method'), ('Code from any external class', 'cannot access', 'variable'), ('Code from any external class', 'cannot access', 'method')]"
"Marking a class with the private access modifier would mean that no other class could access it, which means that you could not really use the class at all.","[('class', 'can be marked with', 'private access modifier'), ('private access modifier', 'restricts access to', 'class'), ('no other class', 'could access', 'class'), ('you', 'could not use', 'class')]"
"That means, that the member variable time inside the Clock class cannot be accessed from code outside the Clock class.","[('time', 'is a member variable of', 'Clock class'), ('time', 'cannot be accessed from', 'code outside the Clock class')]"
"In some cases the fields are truly private, meaning they are only used internally in the class.","[('fields', 'are', 'private'), ('fields', 'used in', 'class'), ('fields', 'used', 'internally')]"
In other cases the fields can be accessed via accessor methods (e.g.,"[('fields', 'can be accessed via', 'accessor methods')]"
In the above example the two methods getTime() and setTime() can access the time member variable.,"[('getTime()', 'can access', 'time member variable'), ('setTime()', 'can access', 'time member variable')]"
"If a constructor in a class is assigned the private Java access modifier, that means that the constructor cannot be called from anywhere outside the class.","[('constructor', 'is assigned', 'private Java access modifier'), ('private Java access modifier', 'means', 'constructor cannot be called from anywhere outside the class')]"
"A private constructor can still get called from other constructors, or from static methods in the same class.","[('private constructor', 'can be called from', 'other constructors'), ('private constructor', 'can be called from', 'static methods'), ('static methods', 'located in', 'same class'), ('other constructors', 'located in', 'same class')]"
This version of the Clock class contains a private constructor and a public constructor.,"[('Clock class', 'contains', 'private constructor'), ('Clock class', 'contains', 'public constructor')]"
The private constructor is called from the public constructor (the statement this();).,"[('private constructor', 'is called from', 'public constructor'), ('public constructor', 'contains statement', 'this();')]"
The private constructor is also called from the static method newClock().,"[('private constructor', 'is called from', 'static method newClock()')]"
The above example only serves to show you that a private constructor can be called from public constructors and from static methods inside the same class.,"[('private constructor', 'can be called from', 'public constructors'), ('private constructor', 'can be called from', 'static methods'), ('public constructors', 'inside', 'same class'), ('static methods', 'inside', 'same class')]"
"The default access modifier means that code inside the class itself as well as code inside classes in the same package as this class, can access the class, field, constructor or method which the default access modifier is assigned to.","[('default access modifier', 'allows access to', 'code inside the class itself'), ('default access modifier', 'allows access to', 'code inside classes in the same package'), ('default access modifier', 'is assigned to', 'class'), ('default access modifier', 'is assigned to', 'field'), ('default access modifier', 'is assigned to', 'constructor'), ('default access modifier', 'is assigned to', 'method')]"
"Subclasses cannot access methods and member variables (fields) in the superclass, if they these methods and fields are marked with the default access modifier, unless the subclass is located in the same package as the superclass.","[('Subclasses', 'cannot access', 'methods in the superclass'), ('Subclasses', 'cannot access', 'member variables in the superclass'), ('methods', 'marked with', 'default access modifier'), ('member variables', 'marked with', 'default access modifier'), ('subclass', 'located in', 'same package as the superclass'), ('subclass', 'can access', 'methods in the superclass'), ('subclass', 'can access', 'member variables in the superclass')]"
"The time field in the Clock class has no access modifier, which means that it is implicitly assigned the default / package access modifier.","[('time field', 'part of', 'Clock class'), ('time field', 'has access modifier', 'default / package access modifier')]"
"Therefore, the ClockReader class can read the time member variable of the Clock object, provided that ClockReader and Clock are located in the same Java package.","[('ClockReader', 'can read', 'time member variable'), ('time member variable', 'is part of', 'Clock object'), ('ClockReader', 'located in', 'Java package'), ('Clock', 'located in', 'Java package')]"
"The protected access modifier provides the same access as the default access modifier, with the addition that subclasses can access protected methods and member variables (fields) of the superclass.","[('protected access modifier', 'provides access', 'default access modifier'), ('subclasses', 'can access', 'protected methods'), ('subclasses', 'can access', 'member variables'), ('member variables', 'are fields of', 'superclass'), ('protected methods', 'are methods of', 'superclass')]"
This is true even if the subclass is not located in the same package as the superclass.,"[('subclass', 'is not located in the same package as', 'superclass')]"
In the above example the subclass SmartClock has a method called getTimeInSeconds() which accesses the time variable of the superclass Clock.,"[('SmartClock', 'subclass of', 'Clock'), ('SmartClock', 'has method', 'getTimeInSeconds()'), ('getTimeInSeconds()', 'accesses variable', 'time'), ('time', 'belongs to', 'Clock')]"
"The Java access modifier public means that all code can access the class, field, constructor or method, regardless of where the accessing code is located.","[('Java access modifier', 'means', 'public'), ('public', 'allows access to', 'class'), ('public', 'allows access to', 'field'), ('public', 'allows access to', 'constructor'), ('public', 'allows access to', 'method'), ('accessing code', 'location', 'regardless')]"
The accessing code can be in a different class and different package.,"[('accessing code', 'can be in', 'different class'), ('accessing code', 'can be in', 'different package')]"
The time field in the Clock class is marked with the public Java access modifier.,"[('time field', 'is marked with', 'public Java access modifier'), ('time field', 'is in', 'Clock class')]"
"Therefore, the ClockReader class can access the time field in the Clock no matter what package the ClockReader is located in.","[('ClockReader', 'can access', 'time field'), ('time field', 'is in', 'Clock'), ('ClockReader', 'is located in', 'package')]"
"It is important to keep in mind that the Java access modifier assigned to a Java class takes precedence over any access modifiers assigned to fields, constructors and methods of that class.","[('Java class', 'has access modifier', 'Java access modifier'), ('Java access modifier', 'takes precedence over', 'access modifiers assigned to fields'), ('Java access modifier', 'takes precedence over', 'access modifiers assigned to constructors'), ('Java access modifier', 'takes precedence over', 'access modifiers assigned to methods')]"
"If the class is marked with the default access modifier, then no other class outside the same Java package can access that class, including its constructors, fields and methods.","[('class', 'marked with', 'default access modifier'), ('class', 'cannot be accessed by', 'class outside the same Java package'), ('class', 'includes', 'constructors'), ('class', 'includes', 'fields'), ('class', 'includes', 'methods')]"
The Java access modifiers private and protected cannot be assigned to a class.,"[('private', 'is a type of', 'Java access modifier'), ('protected', 'is a type of', 'Java access modifier'), ('private', 'cannot be assigned to', 'class'), ('protected', 'cannot be assigned to', 'class')]"
Java interfaces are meant to specify fields and methods that are publicly available in classes that implement the interfaces.,"[('Java interfaces', 'specify', 'fields'), ('Java interfaces', 'specify', 'methods'), ('fields', 'are available in', 'classes'), ('methods', 'are available in', 'classes'), ('classes', 'implement', 'Java interfaces')]"
"When you create a subclass of some class, the methods in the subclass cannot have less accessible access modifiers assigned to them than they had in the superclass.","[('subclass', 'is a type of', 'class'), ('methods in the subclass', 'cannot have less accessible access modifiers than', 'methods in the superclass')]"
"For instance, if a method in the superclass is public then it must be public in the subclass too, in case the subclass overrides the method.","[('method', 'is in', 'superclass'), ('method', 'visibility', 'public'), ('method', 'is in', 'subclass'), ('subclass', 'overrides', 'method'), ('method', 'must be', 'public')]"
If a method in the superclass is protected then it must be either protected or public in the subclass.,"[('method in the superclass', 'access level', 'protected'), ('method in the subclass', 'access level', 'protected'), ('method in the subclass', 'access level', 'public')]"
"For instance, if a method is assigned the default access modifier in the superclass, then it is allowed to assign the overridden method in the subclass the public access modifier.","[('method', 'has access modifier', 'default'), ('method', 'is in', 'superclass'), ('overridden method', 'is in', 'subclass'), ('overridden method', 'can be assigned', 'public access modifier')]"
"The build process includes generating source code, compiling the source, generating XML files (e.g.","[('build process', 'includes', 'generating source code'), ('build process', 'includes', 'compiling the source'), ('build process', 'includes', 'generating XML files')]"
"You can place Java annotations above classes, interfaces, methods, method parameters, fields and local variables.","[('Java annotations', 'can be placed above', 'classes'), ('Java annotations', 'can be placed above', 'interfaces'), ('Java annotations', 'can be placed above', 'methods'), ('Java annotations', 'can be placed above', 'method parameters'), ('Java annotations', 'can be placed above', 'fields'), ('Java annotations', 'can be placed above', 'local variables')]"
"Here is a bigger example with annotations above both the class, fields, methods, parameters and local variables:","[('example', 'has annotation', 'class'), ('example', 'has annotation', 'fields'), ('example', 'has annotation', 'methods'), ('example', 'has annotation', 'parameters'), ('example', 'has annotation', 'local variables')]"
"If your code uses deprecated classes, methods or fields, the compiler will give you a warning.","[('code', 'uses', 'deprecated classes'), ('code', 'uses', 'methods'), ('code', 'uses', 'fields'), ('compiler', 'will give', 'warning')]"
"If the method does not match a method in the superclass, the compiler will give you an error.","[('method', 'does not match', 'method in the superclass'), ('compiler', 'will give', 'error')]"
"In case someone changed the name of the overridden method in the superclass, your subclass method would no longer override it.","[('someone', 'changed the name of', 'overridden method'), ('overridden method', 'located in', 'superclass'), ('subclass method', 'would no longer override', 'overridden method')]"
"In case the method doTheThing() in MySuperClass changes signature so that the same method in the subclass no longer overrides it, the compiler will generate an error.","[('doTheThing()', 'method of', 'MySuperClass'), ('doTheThing()', 'changes signature', 'MySuperClass'), ('doTheThing()', 'method of', 'subclass'), ('compiler', 'generate', 'error')]"
"Annotations are defined in their own file, just like a Java class or interface.","[('Annotations', 'defined in', 'own file'), ('Java class', 'similar to', 'interface'), ('Annotations', 'similar to', 'Java class'), ('Annotations', 'similar to', 'interface')]"
"RetentionPolicy.CLASS means that the annotation is stored in the .class file, but not available at runtime.","[('RetentionPolicy.CLASS', 'means', 'annotation is stored in the .class file'), ('annotation is stored in the .class file', 'but not', 'available at runtime')]"
"RetentionPolicy.SOURCE means that the annotation is only available in the source code, and not in the .class files and not a runtime.","[('RetentionPolicy.SOURCE', 'means', 'annotation is only available in the source code'), ('RetentionPolicy.SOURCE', 'not available in', '.class files'), ('RetentionPolicy.SOURCE', 'not available at', 'runtime')]"
"The second line declares an array of references to objects of the class MyClass, which symbolizes a class you have created yourself.","[('second line', 'declares', 'array of references'), ('array of references', 'refers to', 'objects of the class MyClass'), ('class MyClass', 'symbolizes', 'class you have created yourself')]"
Personally I prefer to locate the square brackets [] after the data type (e.g.,"[('square brackets', 'positioned after', 'data type')]"
Java allows you to create an array of references to any type of object (to instances of any class).,"[('Java', 'allows', 'create an array of references'), ('array of references', 'to', 'any type of object'), ('any type of object', 'includes', 'instances of any class')]"
Notice how the values to be inserted into the array are listed inside the { ... } block.,"[('values', 'to be inserted into', 'array'), ('values', 'listed inside', '{ ... } block')]"
"Of course, if the insertIntoArray() method is located in a different class than the above code, you would need an object of that class in order to be able to call the method.","[('insertIntoArray()', 'is located in', 'different class'), ('object', 'needed to call', 'insertIntoArray()'), ('object', 'belongs to', 'different class')]"
"Or, if the insertIntoArray() method was static, you would need to put the class name and a dot in front of the method name.","[('insertIntoArray()', 'is a', 'method'), ('insertIntoArray()', 'was', 'static'), ('class name', 'used with', 'dot'), ('dot', 'used with', 'method name')]"
"This removeFromArray() method takes two parameters: The array to remove the element from, and the index of the element to remove.","[('removeFromArray() method', 'takes parameter', 'array'), ('removeFromArray() method', 'takes parameter', 'index of the element')]"
"Of course, if the removeFromArray() method is located in a different class than the above code, you would need an object of that class in order to be able to call the method.","[('removeFromArray()', 'is located in', 'different class'), ('object', 'needed to call', 'removeFromArray()')]"
"Or, if the removeFromArray() method was static, you would need to put the class name and a dot in front of the method name.","[('removeFromArray()', 'is a', 'method'), ('removeFromArray()', 'has property', 'static'), ('class name', 'used with', 'dot'), ('dot', 'used with', 'method name')]"
The example first sets the minVal to Integer.MAX_VALUE which is the highest possible value an int can take.,"[('example', 'sets', 'minVal'), ('minVal', 'set to', 'Integer.MAX_VALUE'), ('Integer.MAX_VALUE', 'is', 'highest possible value an int can take')]"
"Java contains a special utility class that makes it easier for you to perform many often used array operations like copying and sorting arrays, filling in data, searching in arrays etc.","[('Java', 'contains', 'special utility class'), ('special utility class', 'makes easier', 'perform array operations'), ('array operations', 'include', 'copying arrays'), ('array operations', 'include', 'sorting arrays'), ('array operations', 'include', 'filling in data'), ('array operations', 'include', 'searching in arrays')]"
The utility class is called Arrays and is located in the standard Java package java.util.,"[('Arrays', 'is a', 'utility class'), ('Arrays', 'located in', 'java.util'), ('java.util', 'is a', 'standard Java package')]"
I will cover a few of the methods found in this class in the following sections.,"[('I', 'will cover', 'methods'), ('methods', 'found in', 'class'), ('methods', 'covered in', 'following sections')]"
"Remember, in order to use java.util.Arrays in your Java classes you must import it.","[('java.util.Arrays', 'used in', 'Java classes'), ('Java classes', 'require import of', 'java.util.Arrays')]"
Here is how importing java.util.Arrays could look in a Java class of your own:,"[('java.util.Arrays', 'can be imported in', 'Java class')]"
It is this statement that imports the class java.util.Arrays into your Java class.,"[('statement', 'imports', 'class java.util.Arrays'), ('class java.util.Arrays', 'imported into', 'Java class')]"
The second method to copy a Java array is to use the Arrays.copyOf() method.,"[('second method', 'used to copy', 'Java array'), ('Arrays.copyOf() method', 'used to copy', 'Java array')]"
The third method to copy a Java array is to use the Arrays.copyOfRange() method.,"[('Arrays.copyOfRange()', 'is a method to copy', 'Java array')]"
"The Arrays.copyOfRange() method copies a range of an array, not necessarily the full array.","[('Arrays.copyOfRange()', 'copies', 'range of an array'), ('range of an array', 'is part of', 'array')]"
Here is how copying a full array using Arrays.copyOfRange() in Java looks:,"[('Arrays.copyOfRange()', 'used in', 'Java'), ('Java', 'has method', 'Arrays.copyOfRange()')]"
You can convert an Java array of primitive types to a String using the Arrays.toString() method.,"[('Java array of primitive types', 'can be converted to', 'String'), ('Arrays.toString() method', 'used for', 'convert Java array of primitive types to String')]"
Here is an example of how to convert an array of int to a String using Arrays.toString():,"[('array of int', 'converted to', 'String'), ('Arrays.toString()', 'used for', 'convert an array of int to a String')]"
You can sort the elements of an array using the Arrays.sort() method.,"[('Arrays.sort() method', 'used for', 'sort the elements of an array')]"
After the for loop the array is converted to a String using Arrays.toString() and printed out to the console (command line).,"[('array', 'converted to', 'String'), ('conversion', 'method', 'Arrays.toString()'), ('String', 'printed out to', 'console')]"
The Arrays.sort() example shown earlier only works for Java arrays of primitive data types.,"[('Arrays.sort() example', 'works for', 'Java arrays of primitive data types')]"
Here is first the class for the objects we want to sort:,"[('class', 'is for', 'objects we want to sort')]"
The class Employee is a simple model of an employee (I have created the Employee class).,"[('Employee', 'is a', 'class'), ('Employee', 'is a model of', 'employee')]"
Here is first an example of sorting an array of Employee objects by their name using the Arrays.sort() method:,"[('Arrays.sort() method', 'used for', 'sorting an array of Employee objects by their name')]"
The array is of type Employee - the class I showed you earlier.,"[('array', 'is of type', 'Employee'), ('Employee', 'is a', 'class')]"
"As parameter to the Arrays.sort() method we pass the employee array, and a Comparator implementation which can determine the order of Employee objects.","[('Arrays.sort() method', 'has parameter', 'employee array'), ('Arrays.sort() method', 'has parameter', 'Comparator implementation'), ('Comparator implementation', 'can determine order of', 'Employee objects')]"
Anonymous implementations of interfaces are covered in my text about nested classes in Java.,"[('Anonymous implementations of interfaces', 'covered in', 'my text about nested classes in Java')]"
What is important to catch in this example is the implementation of the compare() method of the anonymous inner implementation of the Comparator interface.,"[('anonymous inner implementation', 'implements', 'Comparator interface'), ('anonymous inner implementation', 'contains method', 'compare()')]"
In the example above we simply call the String.compare() method which does the comparison for us (compares the employee names).,"[('String.compare()', 'does', 'comparison'), ('comparison', 'for', 'us'), ('comparison', 'compares', 'employee names')]"
"Here is the example from before, with a modified implementation of the compare() method of the anonymous implementation of the Comparator interface:","[('compare() method', 'part of', 'anonymous implementation'), ('anonymous implementation', 'instance of', 'Comparator interface')]"
Notice how the compare() method returns the difference between the employee ids by subtracting one from the other.,"[('compare() method', 'returns', 'difference between the employee ids'), ('difference between the employee ids', 'calculated by', 'subtracting one from the other')]"
"To compare the Employee objects in the array first by their name, and if that is the same, then by their employee id, the compare() implementation would look like this:","[('Employee objects', 'compared by', 'name'), ('Employee objects', 'compared by', 'employee id')]"
These Arrays.fill() methods can fill an array with a given value.,"[('Arrays.fill() methods', 'can fill', 'array'), ('array', 'can be filled with', 'given value')]"
Here is an example of using Arrays.fill() to fill an int array:,"[('Arrays.fill()', 'used to fill', 'int array')]"
"There is a version of the Arrays.fill() method which takes a from and to index, so only elements with indexes in this interval are filled with the given value.","[('Arrays.fill() method', 'has version', 'version with from and to index'), ('version with from and to index', 'fills elements', 'elements with indexes in interval'), ('elements with indexes in interval', 'filled with', 'given value')]"
"You can do so yourself, or via the Arrays.sort() method covered earlier in this text.","[('You', 'can do', 'yourself'), ('You', 'can do', 'via the Arrays.sort() method'), ('Arrays.sort() method', 'covered in', 'this text')]"
The binarySearch() method will return the index in the array in which the element was found.,"[('binarySearch() method', 'returns', 'index'), ('index', 'located in', 'array'), ('element', 'found in', 'array')]"
"If all elements in the array are smaller than the sought value, then binarySearch() will return - length of the array - 1.","[('elements in the array', 'are smaller than', 'sought value'), ('binarySearch()', 'will return', '- length of the array - 1')]"
Therefore binarySearch() will return -length (-6) - 1 = -6 -1 = -7.,"[('binarySearch()', 'will return', '-7')]"
The Arrays.binarySearch() method also exists in a version where you just search part of the array.,"[('Arrays.binarySearch() method', 'exists in version', 'version where you just search part of the array')]"
"This version of binarySearch() works just like the other version, except in the cases where no matching element is found.","[('This version of binarySearch()', 'works like', 'the other version'), ('no matching element', 'is found in', 'This version of binarySearch()')]"
"If no element is found matching within the index interval, then binarySearch() will still return the index of where the value should have been inserted.","[('binarySearch()', 'returns', 'index'), ('element', 'is found matching within', 'index interval'), ('index', 'indicates', 'where the value should have been inserted')]"
"But, if all values in the interval are smaller than the sought value, binarySearch() will return -toIndex -1 , and not -array length - 1.","[('all values in the interval', 'are smaller than', 'the sought value'), ('binarySearch()', 'will return', '-toIndex -1'), ('binarySearch()', 'will not return', '-array length - 1')]"
The java.util.Arrays class contains a set of methods called equals() which can be used to check if two Java arrays are equal.,"[('java.util.Arrays', 'contains', 'methods called equals()'), ('methods called equals()', 'used to', 'check if two Java arrays are equal')]"
"Java classes are some of the core building blocks of Java applications, toolkits, frameworks, APIs etc.","[('Java classes', 'are building blocks of', 'Java applications'), ('Java classes', 'are building blocks of', 'toolkits'), ('Java classes', 'are building blocks of', 'frameworks'), ('Java classes', 'are building blocks of', 'APIs')]"
"A small Java application may consist of a single Java class with a main() method in, as covered in the Java main method tutorial.","[('small Java application', 'may consist of', 'single Java class'), ('single Java class', 'contains', 'main() method'), ('Java main method tutorial', 'covers', 'main() method')]"
"As your Java application grows, keeping all the code in the same class makes it harder and harder to keep an overview of the code.","[('keeping all the code in the same class', 'makes', 'harder to keep an overview of the code')]"
Therefore it might be beneficial to start splitting the Java code up into multiple classes.,"[('Java code', 'might be split into', 'multiple classes')]"
"A Java class is a single, coherent unit of Java code which belongs together.","[('Java class', 'is a', 'unit of Java code'), ('Java class', 'is', 'coherent')]"
A Java class may contain a mix of data (variables) and actions (methods).,"[('Java class', 'may contain', 'data'), ('Java class', 'may contain', 'actions'), ('data', 'is a type of', 'variables'), ('actions', 'is a type of', 'methods')]"
Grouping variables and operations on these variables into Java classes makes it easier to structure your Java program when it gets too big to fit comfortably inside a single Java class.,"[('Grouping variables and operations', 'into', 'Java classes'), ('Java classes', 'makes it easier to structure', 'Java program')]"
"Therefore, as the class grows, the file you are editing grows too, and becomes harder to keep an overview of in your head.","[('class', 'grows', 'file'), ('file', 'becomes', 'harder to keep an overview of in your head')]"
"Your Java application will typically have to contain at least a single Java class, but it may contain as many classes as you see fit to divide your application into.","[('Java application', 'contains', 'Java class'), ('Java application', 'may contain', 'many classes')]"
"Java also comes with a lot of predefined classes for you, so you don't have to code every little function you might desire yourself.","[('Java', 'comes with', 'predefined classes')]"
"Fields are variables (data) that are local to the class, or instances (objects) of that class.","[('Fields', 'are', 'variables'), ('Fields', 'are local to', 'class'), ('Fields', 'are local to', 'instances'), ('instances', 'are', 'objects'), ('objects', 'are of', 'class')]"
Methods are operations that the class or instances of that class can perform.,"[('Methods', 'are operations that can be performed by', 'class'), ('Methods', 'are operations that can be performed by', 'instances of class')]"
Nested classes are Java classes that are defined inside another class.,"[('Nested classes', 'are', 'Java classes'), ('Nested classes', 'defined inside', 'another class')]"
"Nested classes are typically intended to either be used only internally be the Java class that contains them, or to be used in connection with the class that contains them.","[('Nested classes', 'intended to be used', 'internally by the Java class that contains them'), ('Nested classes', 'intended to be used', 'in connection with the class that contains them')]"
Nested classes are covered in more detail in my Java nested class tutorial.,"[('Nested classes', 'covered in', 'Java nested class tutorial'), ('Java nested class tutorial', 'covers', 'Nested classes')]"
"Sometimes you have classes that only contain fields (data), and sometimes you have classes that only contain methods (operations).","[('classes', 'contain', 'fields'), ('fields', 'type', 'data'), ('classes', 'contain', 'methods'), ('methods', 'type', 'operations')]"
It depends on what the Java class is supposed to do.,"[('Java class', 'depends on', 'what it is supposed to do')]"
All it takes to define a class in Java is this:,
The above class definition should be put in its own file named MyClass.java.,"[('class definition', 'should be put in', 'file'), ('file', 'named', 'MyClass.java')]"
"Java files should be named the same as the name of the class they contain, with the .java as file name extension.","[('Java files', 'should be named the same as', 'name of the class they contain'), ('Java files', 'have file name extension', '.java')]"
Make sure you keep the same uppercase and lowercase characters from the class name in the file name too.,"[('class name', 'should match', 'file name')]"
"Only put a single class definition in each Java file, unless your class contains inner classes of some kind.","[('Java file', 'contains', 'class definition'), ('class definition', 'contains', 'inner classes')]"
"As mentioned earlier, a Java class can contain data in the shape of variables.","[('Java class', 'can contain', 'data'), ('data', 'in the shape of', 'variables')]"
The next example shows a Java class which is to model a car.,"[('Java class', 'models', 'car')]"
A constructor is a special method that is called when an object of the given class is created (explained later).,"[('constructor', 'is a type of', 'method'), ('constructor', 'is called when', 'object is created'), ('object', 'is of', 'given class')]"
The purpose of a constructor is to initialize the fields in the class.,"[('constructor', 'has purpose', 'initialize the fields in the class'), ('fields', 'located in', 'class')]"
Here is an example of a Java class with two constructors:,"[('Java class', 'has example', 'Java class with two constructors')]"
"The constructors are the two methods that have the same name as the class, and which have no return type specified.","[('constructors', 'are', 'methods'), ('methods', 'have name', 'same as class'), ('methods', 'have no', 'return type specified')]"
"A Java method contains Java instructions that typically perform some operations on a field in the class, or on one of the parameters (also variables) values passed to the method when the method was called.","[('Java method', 'contains', 'Java instructions'), ('Java instructions', 'perform operations on', 'field in the class'), ('Java instructions', 'perform operations on', 'parameters'), ('parameters', 'are', 'variables'), ('parameters', 'are', 'values'), ('values', 'are passed to', 'Java method')]"
"Here is the Java class, Car example from the previous section with a method added:","[('Java class', 'example of', 'Car'), ('Car', 'mentioned in', 'previous section')]"
In the class definition above I have added a setColor() method.,"[('class definition', 'contains method', 'setColor()')]"
"As mentioned earlier, you can define a nested class inside another Java class.","[('nested class', 'can be defined inside', 'Java class')]"
Here is an example of defining a nested class inside a Java class:,"[('nested class', 'defined inside', 'Java class')]"
"In the example above, the outer class is called MyClass and the nested class is called MyNestedClass .","[('MyClass', 'contains', 'MyNestedClass'), ('MyNestedClass', 'is nested in', 'MyClass')]"
"Neither of the classes in this example has any fields or methods, but both the outer and nested class could have as many fields and methods as you see fit.","[('class', 'has part', 'fields'), ('class', 'has part', 'methods'), ('outer class', 'has part', 'fields'), ('outer class', 'has part', 'methods'), ('nested class', 'has part', 'fields'), ('nested class', 'has part', 'methods')]"
You can read more about nested classes in my tutorial about nested classes in Java,"[('nested classes', 'topic of', 'tutorial'), ('tutorial', 'about', 'nested classes in Java')]"
A Java class is a template for how objects of that class looks.,"[('Java class', 'is a template for', 'objects of that class')]"
"In other words, the Car class in the previous section is a template for how Car objects look.","[('Car class', 'is a template for', 'Car objects')]"
"To create objects of a certain class, you use the new keyword.","[('new keyword', 'used to create', 'objects'), ('objects', 'instance of', 'class')]"
"This example creates 3 Car variables, and assign a new instance of the Car class to each variable.","[('example', 'creates', 'Car variables'), ('Car variables', 'quantity', '3'), ('example', 'assigns', 'new instance of the Car class'), ('new instance of the Car class', 'assigned to', 'each variable')]"
"Thus, the fields of different objects (even of the same class) can vary independently of each other.","[('fields', 'can vary independently of', 'fields of different objects'), ('fields of different objects', 'can vary independently of', 'fields of the same class')]"
"After creating the 3 Car objects, the setColor() method is called on each object.","[('3 Car objects', 'method called', 'setColor()'), ('setColor()', 'called on', 'each object')]"
"Creating an object of a certain class is also called ""instantiating"" an object.",
"The object is thus also called an ""instance"" of the given class.",
"For instance, each of the Car objects above are also called an instance of the Car class, or simply ""Car instances"".",
What you have seen in this text only covers the very basics of Java classes.,"[('this text', 'covers', 'the very basics of Java classes')]"
"You need to learn about fields, constructors, methods nested classes, abstract classes, inheritance, access modifiers and interfaces too.","[('You', 'need to learn about', 'fields'), ('You', 'need to learn about', 'constructors'), ('You', 'need to learn about', 'methods'), ('You', 'need to learn about', 'nested classes'), ('You', 'need to learn about', 'abstract classes'), ('You', 'need to learn about', 'inheritance'), ('You', 'need to learn about', 'access modifiers'), ('You', 'need to learn about', 'interfaces')]"
"Here is a simple example that creates an object, which results in the class constructor being called:","[('object', 'results in', 'class constructor being called'), ('class constructor', 'called by', 'object creation')]"
The example shows a very simple Java class with a single constructor.,"[('example', 'shows', 'Java class'), ('Java class', 'has', 'single constructor')]"
The second part of a Java constructor declaration is the name of the class the constructor belongs to.,"[('Java constructor declaration', 'has part', 'name of the class'), ('name of the class', 'belongs to', 'constructor')]"
Using the class name for the constructor signals to the Java compiler that this is a constructor.,"[('class name', 'used for', 'constructor'), ('constructor', 'signals to', 'Java compiler'), ('Java compiler', 'recognizes', 'constructor')]"
The constructor parameters are declared inside the parentheses () after the class name part of the constructor .,"[('constructor parameters', 'declared inside', 'parentheses'), ('parentheses', 'located after', 'class name'), ('class name', 'part of', 'constructor')]"
"A class can have multiple constructors, as long as their signature (the parameters they take) are not the same.","[('class', 'can have', 'multiple constructors'), ('constructors', 'have signature', 'parameters'), ('parameters', 'are not the same', 'signature')]"
"When a Java class contains multiple constructors, we say that the constructor is overloaded (comes in multiple versions).","[('Java class', 'contains', 'multiple constructors'), ('constructor', 'is', 'overloaded'), ('overloaded', 'means', 'comes in multiple versions')]"
"This is what constructor overloading means, that a Java class contains multiple constructors.","[('Java class', 'contains', 'multiple constructors'), ('constructor overloading', 'means', 'Java class contains multiple constructors')]"
The keyword this in front of the field name (this.number) is not necessary.,"[('this', 'in front of', 'field name'), ('field name', 'example', 'this.number'), ('this', 'not necessary', 'field name')]"
"You don't have to define a constructor for a class, but if you don't define any constructor, the Java compiler will insert a default, no-argument constructor for you.","[('Java compiler', 'inserts', 'default, no-argument constructor'), ('default, no-argument constructor', 'is for', 'class')]"
"Thus, once the class is compiled it will always at least have a no-argument constructor.","[('class', 'has', 'no-argument constructor')]"
"If you do define a constructor for your class, then the Java compiler will not insert the default no-argument constructor into your class.","[('You', 'define', 'constructor'), ('Java compiler', 'will not insert', 'default no-argument constructor'), ('default no-argument constructor', 'into', 'your class')]"
The parameters are passed to the constructor inside the parentheses after the class name on the right side of the equal sign.,"[('parameters', 'are passed to', 'constructor'), ('constructor', 'located inside', 'parentheses'), ('parentheses', 'located after', 'class name'), ('class name', 'located on', 'right side of the equal sign')]"
"By default, if a parameter (or local variable) has the same name as a field in the same class, the parameter (or local variable) ""shadows"" for the field.",
"Inside the constructor of the Employee class the firstName, lastName and birthYear identifiers now refer to the constructor parameters, not to the Employee fields with the same names.","[('constructor', 'part of', 'Employee class'), ('firstName', 'refers to', 'constructor parameters'), ('lastName', 'refers to', 'constructor parameters'), ('birthYear', 'refers to', 'constructor parameters'), ('firstName', 'not refers to', 'Employee fields'), ('lastName', 'not refers to', 'Employee fields'), ('birthYear', 'not refers to', 'Employee fields')]"
"To signal to the Java compiler that you mean the fields of the Employee class and not the parameters, put the this keyword and a dot in front of the field name.","[('this keyword', 'used to signal', 'Java compiler'), ('fields', 'belong to', 'Employee class'), ('this keyword', 'placed in front of', 'field name')]"
You call a constructor when you create a new instance of the class containing the constructor.,"[('You', 'call', 'constructor'), ('constructor', 'is part of', 'class'), ('You', 'create', 'new instance'), ('new instance', 'is of', 'class')]"
"In case you want to pass parameters to the constructor, you include the parameters between the parentheses after the class name, like this:","[('you', 'want to pass', 'parameters'), ('parameters', 'pass to', 'constructor'), ('parameters', 'include between', 'parentheses'), ('parentheses', 'located after', 'class name')]"
The this keyword followed by parentheses and parameters means that another constructor in the same Java class is being called.,"[('this keyword', 'followed by', 'parentheses and parameters'), ('parentheses and parameters', 'means', 'another constructor in the same Java class is being called'), ('another constructor', 'located in', 'same Java class')]"
In this example it is the first constructor in the class that is being called.,"[('first constructor', 'is in', 'class'), ('first constructor', 'is being called', 'example')]"
"When a class extends another class it is also said to ""inherit"" from the class it extends.",
"The class that extends is called the subclass, and the class being extended is called the superclass.","[('subclass', 'extends', 'superclass'), ('superclass', 'is extended by', 'subclass')]"
A class that extends another class does not inherit its constructors.,"[('class', 'extends', 'another class'), ('class', 'does not inherit', 'constructors')]"
"However, the subclass must call a constructor in the superclass inside of its the subclass constructors!","[('subclass', 'must call', 'constructor in the superclass'), ('constructor in the superclass', 'inside of', 'subclass constructors')]"
"If a subclass calls another constructor within itself, then the called constructor must call the superclass constructor.","[('subclass', 'calls', 'another constructor'), ('another constructor', 'called by', 'subclass'), ('called constructor', 'must call', 'superclass constructor')]"
It calls the constructor in the superclass using this Java statement:,"[('It', 'calls', 'constructor'), ('constructor', 'located in', 'superclass'), ('this', 'type', 'Java statement')]"
Using the keyword super refers to the superclass of the class using the super keyword.,"[('super', 'refers to', 'superclass'), ('superclass', 'of', 'class'), ('class', 'uses', 'super')]"
"When super keyword is followed by parentheses like it is here, it refers to a constructor in the superclass.","[('super keyword', 'followed by', 'parentheses'), ('super keyword', 'refers to', 'constructor in the superclass')]"
In this case it refers to the constructor in the Vehicle class.,"[('constructor', 'refers to', 'Vehicle class')]"
The access modifier of a constructor determines what classes in your application that are allowed to call that constructor.,"[('access modifier', 'determines', 'what classes are allowed to call constructor'), ('constructor', 'has access modifier', 'access modifier')]"
"For instance, if a constructor is declared protected then only classes in the same package, or subclasses of that class can call that constructor.","[('constructor', 'access level', 'protected'), ('classes', 'located in the same package as', 'constructor'), ('subclasses', 'can call', 'constructor')]"
"A class can have multiple constructors, and each constructor can have its own access modifier.","[('class', 'can have', 'multiple constructors'), ('constructor', 'can have', 'access modifier')]"
"Thus, some constructors may be available to all classes in your application, while other constructors are only available to classes in the same package, subclasses, or even only to the class itself (private constructors).","[('constructors', 'may be available to', 'all classes in your application'), ('constructors', 'may be available to', 'classes in the same package'), ('constructors', 'may be available to', 'subclasses'), ('constructors', 'may be available to', 'the class itself')]"
Here is an example of a Java class with a constructor that can throw an exception:,"[('Java class', 'has part', 'constructor'), ('constructor', 'can throw', 'exception')]"
Making a constructor throw an exception can be a good idea if you want to prevent an object of the given class to be created in an invalid state.,"[('constructor', 'can throw', 'exception'), ('exception', 'prevents', 'object'), ('object', 'is instance of', 'class'), ('object', 'can be in', 'invalid state')]"
"A class can have fields, constructors and methods (plus more, but that is not important now).","[('class', 'can have', 'fields'), ('class', 'can have', 'constructors'), ('class', 'can have', 'methods')]"
"When you create an object, that object is of a certain class.","[('object', 'instance of', 'class')]"
The class is like a template (or blueprint) telling how objects of that class should look.,"[('class', 'is like', 'template'), ('class', 'is like', 'blueprint'), ('template', 'tells how', 'objects of that class should look'), ('blueprint', 'tells how', 'objects of that class should look')]"
"When you create an object, you say ""give me an object of this class"".",
"If you think of a factory producing lots and lots of the same items, then the class would be the blueprint / manual of how the finished product should look, and the objects would be each of the finished products.","[('factory', 'produces', 'items'), ('class', 'is', 'blueprint'), ('class', 'is', 'manual'), ('objects', 'are', 'finished products')]"
"If the factory produced cars, then the blueprint / design manual of the cars to produce corresponds to a Java class, and the physical cars produced corresponds to Java objects.","[('factory', 'produced', 'cars'), ('blueprint / design manual', 'corresponds to', 'Java class'), ('physical cars', 'corresponds to', 'Java objects')]"
Here is a simple diagram illustrating the principle of objects being of a certain class.,"[('objects', 'have principle', 'being of a certain class')]"
The class determines what fields and methods the objects of that class have.,"[('class', 'determines', 'fields'), ('class', 'determines', 'methods'), ('objects', 'belong to', 'class'), ('objects', 'have', 'fields'), ('objects', 'have', 'methods')]"
"The Car class does not contain any fields, constructors or methods.","[('Car class', 'does not contain', 'fields'), ('Car class', 'does not contain', 'constructors'), ('Car class', 'does not contain', 'methods')]"
The example primarily serves to show you an example of how a class declaration looks in Java code.,"[('example', 'serves to', 'show an example'), ('class declaration', 'looks in', 'Java code')]"
A field is a variable that belongs to a class or an object.,"[('Field', 'belongs to', 'Class'), ('Field', 'belongs to', 'Object')]"
"For instance, a Car class could define the field brand which all Car objects would have.","[('Car class', 'could define field', 'brand'), ('Car objects', 'would have field', 'brand')]"
Here is the Car class declaration from above with a field name brand added:,"[('Car class', 'has field', 'brand')]"
Constructors are a special kind of method that is executed when an object of that class is created.,"[('Constructors', 'are a kind of', 'method'), ('Constructors', 'are executed when', 'object of that class is created')]"
Here is the Car class from before with a constructor that initializes the brand field:,"[('Car class', 'has component', 'constructor'), ('constructor', 'initializes', 'brand field')]"
"Here is the Car class from before with a single, simple method named getBrand added:","[('Car class', 'has method', 'getBrand')]"
"When a class implements an interface, the class has to implement all the methods described in the interface.","[('class', 'implements', 'interface'), ('class', 'has to implement', 'methods'), ('methods', 'described in', 'interface')]"
"Packages provides a handy way of grouping related classes and interfaces, thus making modularization of your Java code easier.","[('Packages', 'provides', 'handy way of grouping related classes and interfaces'), ('handy way of grouping related classes and interfaces', 'makes', 'modularization of Java code easier')]"
"That these are primitive data types means that they are not objects, nor references to objects (classes and objects are explained in later texts in this Java tutorial).","[('primitive data types', 'are not', 'objects'), ('primitive data types', 'are not', 'references to objects'), ('classes and objects', 'are explained in', 'later texts'), ('later texts', 'are in', 'Java tutorial')]"
You can also create your own more complex data types by creating custom classes.,"[('You', 'can create', 'custom classes'), ('custom classes', 'create', 'more complex data types')]"
"More precisely, a Java enum type is a special kind of Java class.","[('Java enum type', 'is a kind of', 'Java class')]"
Notice the enum keyword which is used in place of class or interface.,"[('enum', 'used in place of', 'class'), ('enum', 'used in place of', 'interface')]"
Replace the ... with the code to execute if the level variable matches the given Level constant value.,"[('level variable', 'matches', 'Level constant value'), ('code', 'execute if', 'level variable matches Level constant value')]"
You can obtain an array of all the possible values of a Java enum type by calling its static values() method.,"[('Java enum type', 'has method', 'values()'), ('values()', 'returns', 'array of all possible values')]"
All enum types get a static values() method automatically by the Java compiler.,"[('enum types', 'get', 'static values() method'), ('static values() method', 'provided by', 'Java compiler')]"
An enum class automatically gets a toString() method in the class when compiled.,"[('enum class', 'automatically gets', 'toString() method'), ('toString() method', 'is in', 'enum class')]"
The toString() method returns a string value of the name of the given enum instance.,"[('toString() method', 'returns', 'string value'), ('string value', 'represents', 'name of the given enum instance')]"
"Then the toString() method will get called behind the scenes, so the value that will be printed out is the textual name of the enum instance.","[('value', 'will be printed out', 'textual name of the enum instance')]"
An enum class automatically gets a static valueOf() method in the class when compiled.,"[('enum class', 'automatically gets', 'static valueOf() method'), ('static valueOf() method', 'is in', 'enum class')]"
The valueOf() method can be used to obtain an instance of the enum class for a given String value.,"[('valueOf() method', 'can be used to obtain', 'instance of the enum class'), ('instance of the enum class', 'for', 'given String value')]"
The level variable will point to the Level.HIGH after executing this line.,"[('level variable', 'will point to', 'Level.HIGH')]"
It is possible for a Java enum class to have abstract methods too.,"[('Java enum class', 'can have', 'abstract methods')]"
"If an enum class has an abstract method, then each instance of the enum class must implement it.","[('enum class', 'has', 'abstract method'), ('instance of the enum class', 'must implement', 'abstract method')]"
Notice the abstract method declaration at the bottom of the enum class.,"[('abstract method declaration', 'located at', 'bottom of the enum class')]"
It is the method getDescription() that comes from the interface MyInterface.,"[('getDescription()', 'method of', 'MyInterface'), ('MyInterface', 'has method', 'getDescription()')]"
"Java enums extend the java.lang.Enum class implicitly, so your enum types cannot extend another class.","[('Java enums', 'extend', 'java.lang.Enum class'), ('enum types', 'cannot extend', 'another class')]"
"The purpose of this exercise is to verify that you know how to create classes, how to create instance variables inside the classes, how to create an array of objects and how to iterate that array while referencing the objects in it.","[('exercise', 'has purpose', 'verify knowledge'), ('verify knowledge', 'includes', 'create classes'), ('verify knowledge', 'includes', 'create instance variables'), ('verify knowledge', 'includes', 'create array of objects'), ('verify knowledge', 'includes', 'iterate array'), ('iterate array', 'involves', 'referencing objects')]"
"For instance, in a class representing an employee, the Employee class might contain the following fields:","[('Employee class', 'represents', 'employee'), ('Employee class', 'contains', 'fields')]"
The access modifier determines which object classes that can access the field.,"[('access modifier', 'determines', 'object classes'), ('object classes', 'can access', 'field')]"
"In Java, static fields belongs to the class, not instances of the class.","[('static fields', 'belongs to', 'class'), ('static fields', 'does not belong to', 'instances of the class')]"
"Thus, all instances of any class will access the same static field variable.","[('instance', 'is a type of', 'class'), ('class', 'has access to', 'static field variable')]"
A non-static field value can be different for every object (instance) of a class.,"[('non-static field value', 'can be different for', 'every object (instance) of a class')]"
The Java field access modifier determines whether the field can be accessed by classes other than the the class owning the field.,"[('Java field access modifier', 'determines', 'field access by classes other than the owning class')]"
The private access modifier means that only code inside the class itself can access this Java field.,"[('private access modifier', 'restricts access to', 'code inside the class'), ('code inside the class', 'can access', 'Java field')]"
"The package access modifier means that only code inside the class itself, or other classes in the same package, can access the field.","[('package access modifier', 'means', 'only code inside the class itself or other classes in the same package can access the field')]"
"The protected access modifier is like the package modifier, except subclasses of the class can also access the field, even if the subclass is not located in the same package.","[('protected access modifier', 'is like', 'package modifier'), ('subclasses of the class', 'can access', 'field'), ('subclasses of the class', 'are not located in', 'same package')]"
The public access modifier means that the field can be accessed by all classes in your application.,"[('public access modifier', 'means', 'field can be accessed by all classes in your application')]"
You would probably not use all access modifiers in the same class.,"[('access modifiers', 'used in', 'class')]"
"For simple, data carrying classes you may declare all fields public.","[('data carrying classes', 'may declare', 'all fields public')]"
"Thus, no matter how many objects you create of that class, there will only exist one field located in the class, and the value of that field is the same, no matter from which object it is accessed.","[('field', 'located in', 'class'), ('value of field', 'is the same', 'no matter from which object it is accessed')]"
"Static fields are located in the class, so you don't need an instance of the class to access static fields.","[('Static fields', 'located in', 'class'), ('access', 'requires', 'no instance of the class')]"
"Non-static Java fields, on the other hand, are located in the instances of the class.","[('Non-static Java fields', 'located in', 'instances of the class'), ('instances of the class', 'contain', 'Non-static Java fields')]"
Each instance of the class can have its own values for these fields.,"[('instance', 'can have', 'values'), ('class', 'contains', 'fields'), ('fields', 'have values for', 'instance')]"
To access a non-static field you need an instance of the class (an object) on which you can access it.,"[('non-static field', 'requires', 'instance of the class'), ('instance of the class', 'is a', 'object')]"
"That means, that even if the field belongs to objects (class instances), you cannot vary the value of the field from object to object.","[('field', 'belongs to', 'objects'), ('objects', 'instance of', 'class'), ('field', 'cannot vary the value from', 'object to object')]"
"That way it only exists in the class, not in every object too.","[('it', 'exists in', 'class'), ('it', 'not exists in', 'every object')]"
"The first line creates a new Customer object (an instance of the Customer class), and stores it in a variable called customer.","[('first line', 'creates', 'Customer object'), ('Customer object', 'instance of', 'Customer class'), ('first line', 'stores in', 'variable called customer')]"
A class is loaded the first time it is referenced in your program.,"[('class', 'is loaded', 'first time it is referenced in your program')]"
"Inside the parentheses () after the for keyword, are three statements separated by semicolon (;).","[('parentheses', 'contain', 'statements'), ('statements', 'separated by', 'semicolon'), ('semicolon', 'separate', 'statements')]"
"In this example, only the first System.out.println() statement is executed inside the for loop.","[('first System.out.println() statement', 'executed inside', 'for loop')]"
The second System.out.println() statement is not executed until after the for loop is finished.,"[('second System.out.println() statement', 'not executed until after', 'for loop is finished')]"
"Second, inside the isValid() method the String.equals() method is used to test for equality to a certain string value.","[('isValid() method', 'uses', 'String.equals() method'), ('String.equals() method', 'tests for', 'equality'), ('equality', 'to', 'a certain string value')]"
The isValid() method could actually have been written in a shorter way.,"[('isValid() method', 'could have been written in', 'a shorter way')]"
Now the isValid() method returns the value returned by the value.equals() method call.,"[('isValid() method', 'returns value', 'value returned by value.equals() method call'), ('value.equals() method call', 'returns value', 'value')]"
Java inheritance refers to the ability in Java for one class to inherit from another class.,"[('Java inheritance', 'refers to', 'ability in Java'), ('ability in Java', 'allows', 'one class to inherit from another class')]"
One class can extend another class and thereby inherit from that class.,"[('One class', 'can extend', 'another class'), ('One class', 'can inherit from', 'another class')]"
"When one class inherits from another class in Java, the two classes take on certain roles.","[('one class', 'inherits from', 'another class'), ('one class', 'takes on role', 'certain roles'), ('another class', 'takes on role', 'certain roles')]"
The class that extends (inherits from another class) is the subclass and the class that is being extended (the class being inherited from) is the superclass .,"[('subclass', 'inherits from', 'superclass'), ('superclass', 'is extended by', 'subclass')]"
"A subclass is a specialization of a superclass, and a superclass is a generalization of one or more subclasses.","[('Subclass', 'is a specialization of', 'Superclass'), ('Superclass', 'is a generalization of', 'Subclass')]"
"Inheritance can be an effective method to share code between classes that have some traits in common, yet allowing the classes to have some parts that are different.","[('Inheritance', 'can be', 'effective method'), ('effective method', 'to share', 'code'), ('code', 'between', 'classes'), ('classes', 'have', 'traits in common'), ('classes', 'allow', 'parts that are different')]"
"Here is diagram illustrating a class called Vehicle, which has two subclasses called Car and Truck.","[('Vehicle', 'has subclass', 'Car'), ('Vehicle', 'has subclass', 'Truck')]"
The Vehicle class can contain those fields and methods that all Vehicles need (e.g.,"[('Vehicle class', 'can contain', 'fields'), ('Vehicle class', 'can contain', 'methods'), ('fields', 'needed by', 'all Vehicles'), ('methods', 'needed by', 'all Vehicles')]"
Note: Some people will claim that inheritance is a way to categorize your classes based on what they are.,"[('inheritance', 'is a way to categorize', 'classes'), ('people', 'claim', 'inheritance is a way to categorize classes')]"
"In practice, however, that is not how you determine which superclasses and subclasses your application needs to have.","[('application', 'needs to have', 'superclasses'), ('application', 'needs to have', 'subclasses')]"
Then it makes sense to have a common Vehicle superclass for the two classes.,"[('Vehicle', 'is superclass of', 'two classes')]"
"If you never process Car and Truck objects in the same way, there is no point in having a common superclass for them, except perhaps to share code between them (to avoid writing duplicate code).","[('Car', 'is not processed in the same way as', 'Truck'), ('Truck', 'is not processed in the same way as', 'Car'), ('Car', 'has no point in having common superclass with', 'Truck'), ('Truck', 'has no point in having common superclass with', 'Car'), ('Car', 'shares code with', 'Truck'), ('Truck', 'shares code with', 'Car')]"
Superclasses and subclasses form an inheritance structure which is also called a class hierarchy.,"[('Superclasses', 'form', 'inheritance structure'), ('Subclasses', 'form', 'inheritance structure'), ('Inheritance structure', 'also called', 'class hierarchy')]"
At the top of the class hierarchy you have the superclasses.,"[('superclasses', 'are at the top of', 'class hierarchy')]"
At the bottom of the class hierarchy you have the subclasses.,"[('subclasses', 'are at the bottom of', 'class hierarchy')]"
"A class hierarchy may have multiple levels, meaning multiple levels of superclasses and subclasses.","[('class hierarchy', 'may have', 'multiple levels'), ('multiple levels', 'meaning', 'multiple levels of superclasses and subclasses')]"
A subclass may itself be a superclass of other subclasses etc.,"[('Subclass', 'may be superclass of', 'Other Subclasses')]"
"When a class inherits from a superclass, it inherits parts of the superclass methods and fields.","[('class', 'inherits from', 'superclass'), ('class', 'inherits', 'superclass methods'), ('class', 'inherits', 'superclass fields')]"
"When a subclass extends a superclass in Java, all protected and public fields and methods of the superclass are inherited by the subclass.","[('subclass', 'extends', 'superclass'), ('superclass', 'has fields and methods', 'protected and public fields and methods'), ('subclass', 'inherits', 'protected and public fields and methods')]"
"By inherited is meant that these fields and methods are part of of the subclass, as if the subclass had declared them itself.","[('fields and methods', 'are part of', 'subclass'), ('subclass', 'inherits', 'fields and methods')]"
protected and public fields can be called and referenced just like the methods declared directly in the subclass.,"[('protected fields', 'can be called and referenced like', 'methods declared directly in the subclass'), ('public fields', 'can be called and referenced like', 'methods declared directly in the subclass')]"
Fields and methods with default (package) access modifiers can be accessed by subclasses only if the subclass is located in the same package as the superclass.,"[('Fields', 'have access modifier', 'default (package)'), ('Methods', 'have access modifier', 'default (package)'), ('Fields', 'can be accessed by', 'subclasses'), ('Methods', 'can be accessed by', 'subclasses'), ('Subclasses', 'located in the same package as', 'Superclass')]"
Private fields and methods of the superclass can never be referenced directly by subclasses.,"[('private fields', 'part of', 'superclass'), ('private methods', 'part of', 'superclass'), ('superclass', 'contains', 'private fields'), ('superclass', 'contains', 'private methods'), ('subclasses', 'cannot reference directly', 'private fields'), ('subclasses', 'cannot reference directly', 'private methods')]"
"They can, however, be referenced indirectly via methods reachable from the subclass (e.g default (package), protected and public methods).","[('methods', 'reachable from', 'subclass'), ('default methods', 'type of', 'methods'), ('package methods', 'type of', 'methods'), ('protected methods', 'type of', 'methods'), ('public methods', 'type of', 'methods')]"
"Constructors are not inherited by subclasses, but a subclass constructor must call a constructor in the superclass.","[('Constructors', 'are not inherited by', 'subclasses'), ('subclass constructor', 'must call', 'constructor in the superclass')]"
The Java inheritance mechanism only allows a Java class to inherit from a single superclass (singular inheritance).,"[('Java inheritance mechanism', 'allows', 'Java class to inherit from a single superclass'), ('Java class', 'inherits from', 'single superclass'), ('inheritance', 'type', 'singular inheritance')]"
"In some programming languages, like C++, it is possible for a subclass to inherit from multiple superclasses (multiple inheritance).","[('C++', 'is a', 'programming language'), ('subclass', 'can inherit from', 'multiple superclasses'), ('inheritance', 'type', 'multiple inheritance')]"
"the superclasses contain methods with the same names and parameters, multiple inheritance was left out in Java.","[('superclasses', 'contain', 'methods'), ('methods', 'have', 'same names and parameters'), ('multiple inheritance', 'was left out in', 'Java')]"
You declare that one class extends another class by using the extends keyword in the class definition.,"[('one class', 'extends', 'another class'), ('extends keyword', 'used in', 'class definition')]"
"The Car class in this example extends the Vehicle class, meaning the Car class inherits from the Vehicle class.","[('Car class', 'extends', 'Vehicle class'), ('Car class', 'inherits from', 'Vehicle class')]"
"Because the Car class extends the Vehicle class, the protected field licensePlate from the Vehicle class is inherited by the Car class.","[('Car class', 'extends', 'Vehicle class'), ('Vehicle class', 'has protected field', 'licensePlate'), ('Car class', 'inherits', 'licensePlate')]"
"The licensePlate field is not actually being referenced from the Car class in the code above, but it could if we wanted to.","[('licensePlate field', 'could be referenced from', 'Car class')]"
In many cases it would have made sense to place the getLicensePlate() method in the Vehicle class where the licensePlate field is located.,"[('getLicensePlate() method', 'could be placed in', 'Vehicle class'), ('licensePlate field', 'is located in', 'Vehicle class')]"
I just placed the getLicensePlate() method in the Car class to show that it is possible.,"[('getLicensePlate() method', 'located in', 'Car class')]"
It is possible to reference a subclass as an instance of one of its superclasses.,"[('subclass', 'is an instance of', 'superclass')]"
"For instance, using the class definitions from the example in the previous section it is possible to reference an instance of the Car class as an instance of the Vehicle class.","[('Car class', 'is an instance of', 'Vehicle class')]"
"Because the Car class extends (inherits from) the Vehicle class, it is also said to be a Vehicle.","[('Car class', 'extends', 'Vehicle class'), ('Car class', 'is a type of', 'Vehicle')]"
Here is a Java code example: Car car = new Car(); Vehicle vehicle = car; First a Car instance is created.,"[('Car', 'instance of', 'Car'), ('Vehicle', 'assigned from', 'car')]"
This is possible because the Car class inherits from the Vehicle class.,"[('Car class', 'inherits from', 'Vehicle class')]"
"As you can see, it is possible to use an instance of some subclass as if it were an instance of its superclass.","[('subclass', 'is instance of', 'superclass')]"
"That way, you don't need to know exactly what subclass the object is an instance of.","[('object', 'is an instance of', 'subclass')]"
The process of referencing an object of class as a different type than the class itself is called type casting.,"[('referencing an object of class', 'is called', 'type casting'), ('type casting', 'involves', 'different type')]"
Upcasting and Downcasting You can always cast an object of a subclass to one of its superclasses.,"[('object of a subclass', 'can be cast to', 'superclass')]"
This is referred to as upcasting (from a subclass type to a superclass type).,"[('upcasting', 'referred to as', 'from a subclass type to a superclass type')]"
"It may also be possible to cast an object from a superclass type to a subclass type, but only if the object really is an instance of that subclass (or an instance of a subclass of that subclass).","[('object', 'can be cast from', 'superclass type'), ('object', 'can be cast to', 'subclass type'), ('object', 'is instance of', 'subclass'), ('object', 'is instance of', 'subclass of subclass')]"
This is referred to as downcasting (from a superclass type to a subclass type).,"[('downcasting', 'referred to as', 'from a superclass type to a subclass type')]"
"Thus, this example of downcasting is valid: Car car = new Car(); // upcast to Vehicle Vehicle vehicle = car; // downcast to car again Car car2 = (Car) vehicle; However, the following downcast example is not valid.","[('Car', 'is a type of', 'Vehicle'), ('vehicle', 'is an instance of', 'Vehicle'), ('car', 'is an instance of', 'Car'), ('car2', 'is an instance of', 'Car'), ('vehicle', 'is downcast to', 'car2'), ('downcast example', 'is not', 'valid')]"
"Truck truck = new Truck(); // upcast to Vehicle Vehicle vehicle = truck; // downcast to car again Car car = (Car) vehicle; The Truck object can be upcast to a Vehicle object, but it cannot be downcast to a Car object later.","[('Truck', 'can be upcast to', 'Vehicle'), ('Vehicle', 'cannot be downcast to', 'Car')]"
Overriding Methods In a subclass you can override (redefine) methods defined in the superclass.,"[('Subclass', 'can override', 'Methods'), ('Methods', 'defined in', 'Superclass')]"
Here is a Java method override example: public class Vehicle { String licensePlate = null; public void setLicensePlate(String licensePlate) { this.licensePlate = licensePlate; } } public class Car extends Vehicle { public void setLicensePlate(String license) { this.licensePlate = license.toLowerCase(); } } Notice how both the Vehicle class and the Car class defines a method called setLicensePlate().,"[('Car', 'extends', 'Vehicle'), ('Vehicle', 'defines method', 'setLicensePlate'), ('Car', 'defines method', 'setLicensePlate')]"
"Now, whenever the setLicensePlate() method is called on a Car object, it is the method defined in the Car class that is called.","[('setLicensePlate()', 'method of', 'Car'), ('setLicensePlate()', 'defined in', 'Car class'), ('setLicensePlate()', 'called on', 'Car object')]"
To override a method the method signature in the subclass must be the same as in the superclass.,"[('method', 'can be overridden by', 'subclass'), ('method signature', 'must be the same in', 'subclass'), ('method signature', 'must be the same in', 'superclass')]"
"That means that the method definition in the subclass must have exactly the same name and the same number and type of parameters, and the parameters must be listed in the exact same sequence as in the superclass.","[('method definition in the subclass', 'must have', 'same name as in the superclass'), ('method definition in the subclass', 'must have', 'same number of parameters as in the superclass'), ('method definition in the subclass', 'must have', 'same type of parameters as in the superclass'), ('parameters', 'must be listed in', 'same sequence as in the superclass')]"
Otherwise the method in the subclass will be considered a separate method.,"[('method', 'located in', 'subclass'), ('method in subclass', 'considered as', 'separate method')]"
"If the superclass calls a private method internally from some other method, it will continue to call that method from the superclass, even if you create a private method in the subclass with the same signature.","[('superclass', 'calls', 'private method'), ('private method', 'called by', 'superclass'), ('superclass', 'contains', 'other method'), ('other method', 'calls', 'private method'), ('subclass', 'creates', 'private method'), ('private method', 'has', 'same signature')]"
"It would be nice if the compiler could tell you that the method being overridden no longer overrides a method in the superclass, right?","[('compiler', 'could tell', 'you'), ('method', 'being overridden', 'method in the superclass')]"
"You can call superclass implementations from any method in a subclass, like above.","[('superclass', 'has implementation', 'method'), ('method', 'can be called from', 'subclass')]"
"For instance, you could also have called super.setLicensePlate() from a method in the Car class called updateLicensePlate() which does not override the setLicensePlate() method.","[('updateLicensePlate()', 'method in class', 'Car'), ('super.setLicensePlate()', 'called from method', 'updateLicensePlate()'), ('updateLicensePlate()', 'does not override', 'setLicensePlate()')]"
The instanceof instruction can determine whether a given object is an instance of some class.,"[('instanceof instruction', 'can determine', 'whether a given object is an instance of some class')]"
Here is a Java instanceof example: Car car = new Car(); boolean isCar = car instanceof Car; After this code has been executed the isCar variable will contain the value true.,"[('Car', 'instance of', 'Car'), ('isCar', 'contains value', 'true')]"
The instanceof instruction can also be used determine if an object is a instance of a superclass of its class.,"[('instanceof instruction', 'can be used to determine', 'if an object is a instance of a superclass of its class')]"
"Here is an instanceof example that checks if a Car object is an instance of Vehicle: Car car = new Car(); boolean isVehicle = car instanceof Vehicle; Assuming that the Car class extends (inherits from) the Vehicle class, the isVehicle variable will contain the value true after this code is executed.","[('Car', 'instance of', 'Vehicle'), ('Car', 'extends', 'Vehicle'), ('isVehicle', 'contains value', 'true')]"
A Car object is also a Vehicle object because Car is a subclass of Vehicle.,"[('Car', 'is a subclass of', 'Vehicle'), ('Car', 'is a', 'Vehicle')]"
"Look at this instanceof example: Car car = new Car(); Vehicle vehicle = car; boolean isCar = vehicle instanceof Car; Even though the vehicle variable is of type Vehicle, the object it ends up pointing to in this example is a Car object.","[('Car', 'instance of', 'Car'), ('Vehicle', 'instance of', 'Car'), ('vehicle', 'type', 'Vehicle'), ('vehicle', 'points to', 'Car object')]"
"Here is the same instanceof example, but using a Truck object instead of a Car object: Truck truck = new Truck(); Vehicle vehicle = truck; boolean isCar = vehicle instanceof Car; After executing this code the isCar will contain the value false.","[('Truck', 'instance of', 'Truck object'), ('Vehicle', 'instance of', 'Truck'), ('isCar', 'contains value', 'false'), ('vehicle', 'instance of', 'Car')]"
"Fields and Inheritance As mentioned earlier, in Java fields cannot be overridden in a subclass.","[('fields', 'cannot be overridden in', 'subclass'), ('fields', 'mentioned in', 'Java')]"
"If you define a field in a subclass with the same name as a field in the superclass, the field in the subclass will hide (shadow) the field in the superclass.","[('field in a subclass', 'has same name as', 'field in the superclass'), ('field in the subclass', 'hides', 'field in the superclass')]"
"If the subclass tries to access the field, it will access the field in the subclass.","[('subclass', 'tries to access', 'field'), ('subclass', 'will access', 'field in the subclass')]"
"If, however, the subclass calls up into a method in the superclass, and that method accesses the field with the same name as in the subclass, it is the field in the superclass that is accessed.","[('subclass', 'calls up into', 'method in the superclass'), ('method in the superclass', 'accesses', 'field'), ('field', 'has same name as', 'field in the subclass'), ('field in the superclass', 'is accessed by', 'method in the superclass')]"
Both the Vehicle class and Car class has the methods setLicensePlate() and getLicensePlate().,"[('Vehicle class', 'has method', 'setLicensePlate()'), ('Vehicle class', 'has method', 'getLicensePlate()'), ('Car class', 'has method', 'setLicensePlate()'), ('Car class', 'has method', 'getLicensePlate()')]"
The methods in the Car class calls the corresponding methods in the Vehicle class.,"[('Car class', 'has method', 'methods in the Car class'), ('methods in the Car class', 'calls', 'corresponding methods in the Vehicle class'), ('Vehicle class', 'has method', 'corresponding methods in the Vehicle class')]"
"The result is, that eventually both set of methods access the licensePlate field in the Vehicle class.","[('methods', 'access', 'licensePlate field'), ('licensePlate field', 'located in', 'Vehicle class')]"
"The updateLicensePlate() method in the Car class however, accesses the licensePlate field directly.","[('updateLicensePlate()', 'method in', 'Car class'), ('updateLicensePlate()', 'accesses', 'licensePlate field')]"
"Therefore, you will not get the same result if you call setLicensePlate() as when you call the updateLicense() method.","[('setLicensePlate()', 'different result than', 'updateLicense() method')]"
"Look at the following lines of Java code: Car car = new Car(); car.setLicensePlate(""123""); car.updateLicensePlate(""abc""); System.out.println(""license plate: "" + car.getLicensePlate()); This Java code will print out the text 123.",
The updateLicensePlate() method sets the license plate value on the licensePlate field in the Car class.,"[('updateLicensePlate()', 'sets value on', 'licensePlate field'), ('licensePlate field', 'part of', 'Car class')]"
"The getLicensePlate() method, however, returns the value of the licensePlate field in the Vehicle class.","[('getLicensePlate()', 'returns value of', 'licensePlate field'), ('licensePlate field', 'located in', 'Vehicle class')]"
"Therefore, the value 123 which is set as value for the licensePlate field in the Vehicle class via the setLicensePlate() method, is what is printed out.","[('123', 'is set as value for', 'licensePlate field'), ('licensePlate field', 'is in', 'Vehicle class'), ('setLicensePlate() method', 'sets value for', 'licensePlate field')]"
"In other words, constructors of a superclass are not inherited by subclasses.","[('constructors', 'are not inherited by', 'subclasses'), ('constructors', 'belong to', 'superclass')]"
Subclasses can still call the constructors in the superclass using the super() contruct.,"[('Subclasses', 'can call', 'constructors in the superclass'), ('Subclasses', 'use', 'super() construct')]"
"In fact, a subclass constructor is required to call one of the constructors in the superclass as the very first action inside the constructor body.","[('subclass constructor', 'required to call', 'constructors in the superclass'), ('call', 'first action inside', 'constructor body')]"
Here is how that looks: public class Vehicle { public Vehicle() { } } public class Car extends Vehicle{ public Car() { super(); //perform other initialization here } } Notice the call to super() inside the Car constructor.,"[('Car', 'extends', 'Vehicle'), ('Car', 'calls', 'super()'), ('super()', 'inside', 'Car constructor')]"
You may have seen Java classes where the subclass constructors did not seem to call the constructors in the superclass.,"[('subclass constructors', 'do not call', 'constructors in the superclass'), ('Java classes', 'contain', 'subclass constructors'), ('Java classes', 'contain', 'constructors in the superclass')]"
"However, the subclass constructors have still called superclass constructors in those case.","[('subclass constructors', 'call', 'superclass constructors')]"
"Let me explain why: If a class does not have any explicit constructor defined, the Java compiler inserts an implicit no-arg constructor.","[('class', 'does not have', 'explicit constructor'), ('Java compiler', 'inserts', 'implicit no-arg constructor')]"
"Therefore the following version of Vehicle is equivalent to the version shown just above: public class Vehicle { } Second, if a constructor does not explicitly call a constructor in the superclass, the Java compiler inserts an implicit call to the no-arg constructor in the superclass.","[('Vehicle', 'is equivalent to', 'version shown just above'), ('Java compiler', 'inserts', 'implicit call to the no-arg constructor in the superclass'), ('constructor', 'does not explicitly call', 'constructor in the superclass')]"
"That means that the following version of the Car class is actually equivalent to the version shown earlier: public class Car extends Vehicle{ public Car() { } } In fact, since the constructor is now empty, we could leave it out and the Java compiler would insert it, and insert an implicit call to the no-arg constructor in the superclass.","[('Car', 'is a', 'class'), ('Car', 'extends', 'Vehicle'), ('Car', 'has constructor', 'public Car() { }'), ('Java compiler', 'inserts', 'no-arg constructor in the superclass')]"
"This is how the two classes would look then: public class Vehicle { } public class Car extends Vehicle{ } Even though no constructors are declared in these two classes, they both get a no-arg constructor, and the no-arg constructor in the Car class will call the no-arg constructor in the Vehicle class.","[('Car', 'extends', 'Vehicle'), ('Vehicle', 'has no-arg constructor', 'Vehicle no-arg constructor'), ('Car', 'has no-arg constructor', 'Car no-arg constructor'), ('Car no-arg constructor', 'calls', 'Vehicle no-arg constructor')]"
"If the Vehicle class did not have a no-arg constructor, but had another constructor which takes parameters, the Java compiler would complain.","[('Vehicle class', 'does not have', 'no-arg constructor'), ('Vehicle class', 'has', 'constructor which takes parameters'), ('Java compiler', 'would complain', 'if Vehicle class did not have no-arg constructor')]"
"The Car class would then be required to declare a constructor, and inside that constructor call the constructor in the Vehicle class.","[('Car class', 'required to declare', 'constructor'), ('constructor', 'called inside', 'Car class constructor'), ('Car class constructor', 'call', 'Vehicle class constructor')]"
Nested Classes and Inheritance The same Java inheritance rules apply to nested classes.,"[('Java inheritance rules', 'apply to', 'nested classes')]"
Nested classes with the default (package) access modifier are only accessible to subclasses if the subclass is located in the same package as the superclass.,"[('Nested classes', 'have access modifier', 'default (package)'), ('Nested classes', 'accessible to', 'subclasses'), ('subclasses', 'located in', 'same package'), ('same package', 'contains', 'subclass'), ('same package', 'contains', 'superclass')]"
Nested classes with the protected or public access modifier are always inherited by subclasses.,"[('Nested classes', 'access modifier', 'protected'), ('Nested classes', 'access modifier', 'public'), ('Nested classes', 'inherited by', 'subclasses')]"
Here is a nested class inheritance example: class MyClass { class MyNestedClass { } } public class MySubclass extends MyClass { public static void main(String[] args) { MySubclass subclass = new MySubclass(); MyNestedClass nested = subclass.new MyNestedClass(); } } Notice how it is possible to create an instance of the nested class MyNestedClass which is defined in the superclass (MyClass) via a reference to the subclass (MySubclass).,"[('MyClass', 'contains', 'MyNestedClass'), ('MySubclass', 'inherits from', 'MyClass'), ('MySubclass', 'creates instance of', 'MyNestedClass'), ('MyNestedClass', 'defined in', 'MyClass')]"
Here is now that looks: public final class MyClass { } A final class cannot be extended.,"[('MyClass', 'instance of', 'final class'), ('final class', 'cannot be', 'extended')]"
"In other words, you cannot inherit from a final class in Java.","[('final class', 'cannot be inherited', 'Java')]"
Abstract Classes and Inheritance In Java a class can be declared abstract.,"[('class', 'can be', 'abstract'), ('class', 'can have', 'inheritance'), ('Java', 'supports', 'abstract classes'), ('Java', 'supports', 'inheritance')]"
I have explained abstract classes in more detail in my Java abstract classes tutorial.,"[('I', 'explained', 'abstract classes'), ('abstract classes', 'explained in', 'Java abstract classes tutorial')]"
An abstract class is a class that does not contain the full implementation of whatever the abstract class should do.,"[('Abstract class', 'is a type of', 'Class'), ('Abstract class', 'does not contain', 'Full implementation')]"
"In other words, you cannot create objects of an abstract class.",
In Java abstract classes are intended to be extended to create a full implementation.,"[('abstract classes', 'are intended to be extended to create', 'full implementation'), ('abstract classes', 'are in', 'Java')]"
The Java inheritance rules are the same for abstract classes as for non-abstract classes.,"[('Java inheritance rules', 'are the same for', 'abstract classes'), ('Java inheritance rules', 'are the same for', 'non-abstract classes')]"
You can always cast an object of a subclass to one of its superclasses.,"[('object of a subclass', 'can be cast to', 'one of its superclasses')]"
In a subclass you can override (redefine) methods defined in the superclass.,"[('subclass', 'can override', 'methods'), ('methods', 'defined in', 'superclass')]"
Notice how both the Vehicle class and the Car class defines a method called setLicensePlate().,"[('Vehicle class', 'defines method', 'setLicensePlate()'), ('Car class', 'defines method', 'setLicensePlate()')]"
"If you override a method in a subclass, and the method is all of a sudden removed or renamed or have its signature changed in the superclass, the method in the subclass no longer overrides the method in the superclass.","[('method', 'can be overridden in', 'subclass'), ('method', 'can be removed or renamed or have its signature changed in', 'superclass'), ('method in subclass', 'no longer overrides', 'method in superclass')]"
"If you override a method in a subclass, but still need to call the method defined in the superclass, you can do so using the super reference, like this:","[('subclass', 'overrides method', 'method'), ('method', 'defined in', 'superclass'), ('super reference', 'used to call method in', 'superclass')]"
"In the above code example the method setLicensePlate() in the Car class, calls the setLicensePlate() method in the Vehicle class.","[('setLicensePlate()', 'method of', 'Car class'), ('setLicensePlate()', 'calls', 'setLicensePlate() in Vehicle class'), ('setLicensePlate() in Vehicle class', 'method of', 'Vehicle class')]"
"Assuming that the Car class extends (inherits from) the Vehicle class, the isVehicle variable will contain the value true after this code is executed.","[('Car class', 'inherits from', 'Vehicle class'), ('isVehicle variable', 'will contain value', 'true')]"
"As mentioned earlier, in Java fields cannot be overridden in a subclass.","[('fields', 'cannot be overridden in', 'subclass'), ('fields', 'are in', 'Java')]"
Here is Java inheritance example that illustrates how fields in subclasses shadow (hides) fields in superclasses:,"[('Java inheritance example', 'illustrates', 'fields in subclasses shadow fields in superclasses')]"
"If a class does not have any explicit constructor defined, the Java compiler inserts an implicit no-arg constructor.","[('class', 'does not have', 'explicit constructor'), ('Java compiler', 'inserts', 'implicit no-arg constructor')]"
"Second, if a constructor does not explicitly call a constructor in the superclass, the Java compiler inserts an implicit call to the no-arg constructor in the superclass.","[('constructor', 'does not explicitly call', 'constructor in the superclass'), ('Java compiler', 'inserts', 'implicit call to the no-arg constructor in the superclass')]"
That means that the following version of the Car class is actually equivalent to the version shown earlier:,"[('following version of the Car class', 'is equivalent to', 'version shown earlier')]"
"In fact, since the constructor is now empty, we could leave it out and the Java compiler would insert it, and insert an implicit call to the no-arg constructor in the superclass.","[('Java compiler', 'inserts', 'constructor'), ('Java compiler', 'inserts', 'implicit call'), ('implicit call', 'to', 'no-arg constructor'), ('no-arg constructor', 'in', 'superclass')]"
"Even though no constructors are declared in these two classes, they both get a no-arg constructor, and the no-arg constructor in the Car class will call the no-arg constructor in the Vehicle class.","[('no-arg constructor in Car class', 'calls', 'no-arg constructor in Vehicle class')]"
Notice how it is possible to create an instance of the nested class MyNestedClass which is defined in the superclass (MyClass) via a reference to the subclass (MySubclass).,"[('MyNestedClass', 'is defined in', 'MyClass'), ('MyNestedClass', 'can be created via a reference to', 'MySubclass')]"
"The Java instanceof operator can determine if a given Java object is an instance of a given class, superclass or interface.","[('Java instanceof operator', 'can determine', 'if a given Java object is an instance of a given class'), ('Java instanceof operator', 'can determine', 'if a given Java object is an instance of a given superclass'), ('Java instanceof operator', 'can determine', 'if a given Java object is an instance of a given interface')]"
The Java instanceof operator is also referred to as a type comparison operator because it compares the type of a given instance (object) with a specific type (class or interface).,"[('Java instanceof operator', 'referred to as', 'type comparison operator'), ('Java instanceof operator', 'compares', 'type of a given instance'), ('type of a given instance', 'compared with', 'specific type')]"
"The expression map instanceof Object will evaluate to true if the map variable references an object that is an instance of class Object, or any subclass of class Object.","[('map', 'instanceof', 'Object'), ('map variable', 'references', 'object'), ('object', 'instance of', 'class Object'), ('object', 'instance of', 'subclass of class Object')]"
"Since all classes in Java inherit from Object, this expression will evaluate to true.","[('all classes in Java', 'inherit from', 'Object'), ('this expression', 'will evaluate to', 'true')]"
"As mentioned earlier, the Java instanceof operator will evaluate to true if you compare an object to the exact class of that object.","[('Java instanceof operator', 'evaluates to', 'true'), ('object', 'compared to', 'exact class of that object')]"
Here is a Java instanceof example showing a comparison of an object to its exact class:,"[('Java', 'has example', 'instanceof'), ('instanceof', 'used for', 'comparison'), ('comparison', 'involves', 'object'), ('comparison', 'involves', 'exact class')]"
"As also mentioned earlier, the Java instanceof operator also evaluates to true when comparing an object against a superclass of the type of that object.","[('Java instanceof operator', 'evaluates to', 'true'), ('Java instanceof operator', 'compares', 'object'), ('object', 'has superclass', 'type of that object')]"
"Since HashMap is a subclass of Object - even if not a direct subclass, the expression map instanceof Object evaluates to true.","[('HashMap', 'is a subclass of', 'Object'), ('map', 'instanceof', 'Object'), ('expression map instanceof Object', 'evaluates to', 'true')]"
"Note, that it does not matter how high up in the inheritance hierarchy the compared type is superclass of the type of the object.","[('compared type', 'is superclass of', 'type of the object')]"
"As long as the type compared to is a superclass somewhere up the inheritance hierarchy, instanceof will evaluate to true.","[('type', 'compared to', 'superclass'), ('superclass', 'located in', 'inheritance hierarchy'), ('instanceof', 'evaluates to', 'true')]"
The Java instanceof operator also works when comparing an object against an interface instead of a class.,"[('Java instanceof operator', 'works when comparing', 'object'), ('Java instanceof operator', 'works when comparing', 'interface'), ('Java instanceof operator', 'works when comparing', 'class')]"
"Notice, that even if the map variable is of type HashMap, the instanceof operator returns true for the expression map instanceof Map because the HashMap class implements the Map interface.","[('map', 'instance of', 'Map'), ('map', 'type', 'HashMap'), ('HashMap', 'implements', 'Map')]"
"The Java instanceof operator also evaluates to true when comparing an object against a superinterface which the class of the object, or a superclass of the object implements.","[('Java instanceof operator', 'evaluates to', 'true'), ('object', 'compared against', 'superinterface'), ('class of the object', 'implements', 'superinterface'), ('superclass of the object', 'implements', 'superinterface')]"
"The TreeMap class implements SortedMap, and thus also indirectly the Map interface.","[('TreeMap', 'implements', 'SortedMap'), ('TreeMap', 'implements indirectly', 'Map')]"
The Java instanceof operator always evaluates to false when a null variable is compared against any class or interface.,"[('Java instanceof operator', 'evaluates to', 'false'), ('null variable', 'compared against', 'class'), ('null variable', 'compared against', 'interface')]"
Here is a Java instanceof example illustrating the comparison of null against a class:,"[('Java', 'has example', 'instanceof'), ('instanceof', 'illustrates', 'comparison of null against a class')]"
"That is because it is not the reference type that is compared against the target class or interface, but the actual type of the referenced object.","[('reference type', 'compared against', 'target class'), ('reference type', 'compared against', 'interface'), ('actual type', 'of', 'referenced object')]"
"Since a Java String object can never be an instance of the Java Integer class, the Java compiler will catch this an give you an error.","[('Java String object', 'cannot be an instance of', 'Java Integer class'), ('Java compiler', 'will catch', 'error')]"
That means that the actual class of the referenced object could be pretty much any class (since all classes are subclasses of Object).,"[('all classes', 'are subclasses of', 'Object'), ('referenced object', 'could be', 'any class')]"
"In short, we can avoid the explicit downcast of an object when comparing it against a subclass.","[('we', 'can avoid', 'explicit downcast of an object'), ('explicit downcast of an object', 'occurs when comparing against', 'a subclass')]"
Notice the str variable after the String class name in the instanceof expression inside the if-statement.,"[('str variable', 'instance of', 'String class'), ('instanceof expression', 'located in', 'if-statement')]"
"Since the right hand side of the expression is only evaluated if the left hand side evaluates to true, this cannot result in startsWith() being called on a non-String object.","[('right hand side of the expression', 'evaluated if', 'left hand side evaluates to true'), ('startsWith()', 'called on', 'non-String object')]"
"A question I get a lot is what the difference is between Java interfaces and abstract classes, and when to use each.","[('Java interfaces', 'compared to', 'abstract classes'), ('Java interfaces', 'used when', 'appropriate'), ('abstract classes', 'used when', 'appropriate')]"
"Having answered this question by email multiple times, I decided to write this tutorial about Java interfaces vs abstract classes.","[('I', 'answered', 'question'), ('question', 'answered by', 'email'), ('I', 'decided to write', 'tutorial'), ('tutorial', 'about', 'Java interfaces vs abstract classes')]"
"In other words, to make the classes using the interface independent of the classes implementing the interface.","[('classes using the interface', 'independent of', 'classes implementing the interface')]"
"Thus, you can exchange the implementation of the interface, without having to change the class using the interface.","[('implementation', 'can be exchanged without changing', 'class'), ('class', 'uses', 'interface'), ('implementation', 'implements', 'interface')]"
Abstract classes are typically used as base classes for extension by subclasses.,"[('Abstract classes', 'used as', 'base classes'), ('base classes', 'extended by', 'subclasses')]"
"Some programming languages use abstract classes to achieve polymorphism, and to separate interface from implementation, but in Java you use interfaces for that.","[('Some programming languages', 'use', 'abstract classes'), ('abstract classes', 'achieve', 'polymorphism'), ('abstract classes', 'separate', 'interface from implementation'), ('Java', 'use', 'interfaces'), ('interfaces', 'achieve', 'polymorphism'), ('interfaces', 'separate', 'interface from implementation')]"
"Remember, a Java class can only have 1 superclass, but it can implement multiple interfaces.","[('Java class', 'can have', '1 superclass'), ('Java class', 'can implement', 'multiple interfaces')]"
"Thus, if a class already has a different superclass, it can implement an interface, but it cannot extend another abstract class.","[('class', 'can implement', 'interface'), ('class', 'cannot extend', 'another abstract class'), ('class', 'has', 'different superclass')]"
"If you also need to provide a base class or default implementation of the interface, add an abstract class (or normal class) that implements the interface.","[('abstract class', 'implements', 'interface'), ('normal class', 'implements', 'interface')]"
"Here is an example showing a class referencing an interface, an abstract class implementing that interface, and a subclass extending the abstract class.","[('class', 'references', 'interface'), ('abstract class', 'implements', 'interface'), ('subclass', 'extends', 'abstract class')]"
"Below are the code examples from the text on Java Abstract Classes, but with an interface added which is implemented by the abstract base class.","[('code examples', 'topic', 'Java Abstract Classes'), ('interface', 'added to', 'code examples'), ('abstract base class', 'implements', 'interface')]"
"Fourth, how to use the interface URLProcessor as variable type, even though it is the subclass UrlProcessorImpl that is instantiated.","[('UrlProcessorImpl', 'subclass of', 'URLProcessor')]"
Using both an interface and an abstract base class makes your code more flexible.,"[('interface', 'used with', 'abstract base class'), ('abstract base class', 'used with', 'interface'), ('interface', 'makes code', 'more flexible'), ('abstract base class', 'makes code', 'more flexible')]"
It possible to implement simple URL processors simply by subclassing the abstract base class.,"[('simple URL processors', 'can be implemented by', 'subclassing the abstract base class')]"
"A Java interface is a bit like a Java class, except a Java interface can only contain method signatures and fields.","[('Java interface', 'is a type of', 'Java class'), ('Java interface', 'contains', 'method signatures'), ('Java interface', 'contains', 'fields')]"
"However, it is possible to provide default implememntations of a method in a Java interface, to make the implementation of the interface easier for classes implementing the interface.","[('Java interface', 'can provide', 'default implementations of a method'), ('default implementations of a method', 'make easier', 'implementation of the interface for classes')]"
"Just like with classes, a Java interface can be declared public or package scope (no access modifier).","[('Java interface', 'can be', 'public'), ('Java interface', 'can be', 'package scope'), ('package scope', 'has', 'no access modifier')]"
"As you can see, accessing a variable from an interface is very similar to accessing a static variable in a class.","[('accessing a variable', 'similar to', 'accessing a static variable in a class'), ('variable', 'part of', 'interface')]"
"The method, however, needs to be implemented by some class before you can access it.","[('method', 'needs to be implemented by', 'class')]"
"Before you can really use an interface, you must implement that interface in some Java class.","[('You', 'must implement', 'interface'), ('Interface', 'used in', 'Java class')]"
Here is a class that implements the MyInterface interface shown above:,"[('class', 'implements', 'MyInterface')]"
This signals to the Java compiler that the MyInterfaceImpl class implements the MyInterface interface.,"[('MyInterfaceImpl', 'implements', 'MyInterface')]"
A class that implements an interface must implement all the methods declared in the interface.,"[('class', 'implements', 'interface'), ('class', 'must implement', 'methods'), ('methods', 'declared in', 'interface')]"
The class does not need to implement (declare) the variables of an interface.,"[('class', 'does not need to implement', 'variables of an interface')]"
Once a Java class implements an Java interface you can use an instance of that class as an instance of that interface.,"[('Java class', 'implements', 'Java interface'), ('instance of Java class', 'used as', 'instance of Java interface')]"
Java allows this because the class MyInterfaceImpl implements the MyInterface interface.,"[('MyInterfaceImpl', 'implements', 'MyInterface')]"
You can then reference instances of the MyInterfaceImpl class as instances of the MyInterface interface.,"[('MyInterfaceImpl', 'instance of', 'MyInterface')]"
"You must always create an instance of some class that implements the interface, and reference that instance as an instance of the interface.","[('Instance', 'created from', 'Class'), ('Class', 'implements', 'Interface'), ('Instance', 'referenced as', 'Instance of the Interface')]"
In that case the class must implement all the methods declared in all the interfaces implemented.,"[('class', 'must implement', 'methods'), ('methods', 'declared in', 'interfaces'), ('interfaces', 'implemented by', 'class')]"
"If the interfaces are not located in the same packages as the implementing class, you will also need to import the interfaces.","[('interfaces', 'not located in the same packages as', 'implementing class'), ('you', 'need to import', 'interfaces')]"
Java interfaces are imported using the import instruction just like Java classes.,"[('Java interfaces', 'imported using', 'import instruction'), ('Java interfaces', 'similar to', 'Java classes')]"
Here are the two Java interfaces implemented by the class above:,"[('class above', 'implements', 'Java interface')]"
"If a Java class implements multiple Java interfaces, there is a risk that some of these interfaces may contain methods with the same signature (name + parameters).","[('Java class', 'implements', 'Java interface'), ('Java interface', 'may contain', 'methods'), ('methods', 'have', 'signature')]"
"Since a Java class can only implement at method with a given signature once, this could potentially lead to some problems.","[('Java class', 'can implement', 'method with a given signature')]"
"Especially if those constants are to be used by the classes implementing the interface, e.g.","[('constants', 'used by', 'classes'), ('classes', 'implementing', 'interface')]"
It is up to the classes implementing the interface to specify an implementation.,"[('classes', 'implement', 'interface'), ('classes', 'specify', 'implementation')]"
"If the API just adds the method to the desired interface, all classes that implements the interface must implement that new method.","[('API', 'adds method to', 'desired interface'), ('class', 'implements', 'interface'), ('class', 'must implement', 'new method')]"
That is fine if all implementing classes are located within the API.,"[('implementing classes', 'located within', 'API')]"
"But if some implementing classes are located in client code of the API (the code that uses the API), then that code breaks.","[('implementing classes', 'located in', 'client code'), ('client code', 'uses', 'API')]"
Look at this interface and imagine that it is part of e.g.,"[('interface', 'is part of', 'e.g.')]"
"If the developer of the API wants to add one more method to the ResourceLoader interface, then the FileLoader class will be broken when that project upgrades to the new version of the API.","[('developer', 'wants to add', 'method'), ('method', 'part of', 'ResourceLoader interface'), ('FileLoader class', 'will be broken', 'when project upgrades'), ('project', 'upgrades to', 'new version of the API')]"
"A class can override the implementation of a default method simply by implementing that method explicitly, as is done normally when implementing a Java interface.","[('A class', 'can override', 'the implementation of a default method'), ('A class', 'implements', 'a method explicitly'), ('A class', 'implements', 'a Java interface')]"
Any implementation in a class takes precedence over interface default method implementations.,"[('implementation', 'takes precedence over', 'interface default method implementations'), ('implementation', 'located in', 'class')]"
Calling a static method in an interface looks and works just like calling a static method in a class.,"[('static method', 'can be called in', 'interface'), ('static method', 'can be called in', 'class')]"
Here is an example of calling the static print() method from the above MyInterface interface:,"[('MyInterface', 'has method', 'print()'), ('print()', 'method type', 'static')]"
"It is possible for a Java interface to inherit from another Java interface, just like classes can inherit from other classes.","[('Java interface', 'can inherit from', 'Java interface'), ('class', 'can inherit from', 'class')]"
"That then means, that if a class implements MySubInterface, that class has to implement all methods defined in both MySubInterface and MySuperInterface.","[('class', 'implements', 'MySubInterface'), ('class', 'has to implement', 'methods defined in MySubInterface'), ('class', 'has to implement', 'methods defined in MySuperInterface')]"
A class implementing an interface which inherits from multiple interfaces must implement all methods from the interface and its superinterfaces.,"[('Class', 'implements', 'Interface'), ('Interface', 'inherits from', 'Multiple Interfaces'), ('Class', 'must implement', 'All Methods'), ('All Methods', 'belong to', 'Interface'), ('All Methods', 'belong to', 'Superinterfaces')]"
"While it is normally possible for a class to implement multiple interfaces even if the interfaces contain methods with the same signature, this is not possible if one or more of these methods are default methods.","[('class', 'can implement', 'multiple interfaces'), ('interfaces', 'can contain', 'methods with the same signature'), ('methods', 'can be', 'default methods'), ('class', 'cannot implement', 'interfaces with default methods')]"
"In other words, if two interfaces contain the same method signature (name + parameters) and one of the interfaces declare this method as a default method, a class cannot automatically implement both interfaces.","[('two interfaces', 'contain', 'same method signature'), ('method signature', 'consists of', 'name + parameters'), ('one of the interfaces', 'declare', 'method as a default method'), ('class', 'cannot automatically implement', 'both interfaces')]"
In both of the above situations the Java compiler requires that the class implementing the interface(s) explicitly implements the method which causes the problem.,"[('Java compiler', 'requires', 'class implementing the interface(s)'), ('class implementing the interface(s)', 'implements', 'method'), ('method', 'causes', 'problem')]"
That way there is no doubt about which implementation the class will have.,"[('class', 'will have', 'implementation')]"
The implementation in the class takes precedence over any default implementations.,"[('implementation', 'takes precedence over', 'default implementations'), ('implementation', 'located in', 'class')]"
"Basically, polymorphism means that an instance of an class (an object) can be used as if it were of different types.","[('polymorphism', 'means', 'an instance of a class can be used as if it were of different types')]"
"The classes above are all parts of a model representing different types of vehicles and drivers, with fields and methods.","[('classes', 'are parts of', 'model'), ('model', 'represents', 'different types of vehicles'), ('model', 'represents', 'drivers')]"
That is the responsibility of these classes - to model these entities from real life.,"[('these classes', 'have responsibility', 'to model these entities from real life')]"
"Please forget for a while, that implementing this functionality as methods directly on the objects may lead to a messy class hierarchy.","[('implementing this functionality as methods directly on the objects', 'may lead to', 'a messy class hierarchy')]"
"Where in the above diagram would you put these three methods, so they are accessible on all classes?","[('three methods', 'are accessible on', 'all classes')]"
"One way to solve this problem would be to create a common superclass for the Vehicle and Driver class, which has the storage and serialization methods.","[('Vehicle class', 'has superclass', 'common superclass'), ('Driver class', 'has superclass', 'common superclass'), ('common superclass', 'has method', 'storage method'), ('common superclass', 'has method', 'serialization method')]"
"The class hierarchy would no longer model vehicles and drivers, but also be tied to the storage and serialization mechanisms used in your application.","[('class hierarchy', 'no longer model', 'vehicles'), ('class hierarchy', 'no longer model', 'drivers'), ('class hierarchy', 'tied to', 'storage mechanisms'), ('class hierarchy', 'tied to', 'serialization mechanisms'), ('storage mechanisms', 'used in', 'application'), ('serialization mechanisms', 'used in', 'application')]"
"A better solution would be to create some interfaces with the storage and serialization methods on, and let the classes implement these interfaces.","[('solution', 'would be', 'better'), ('solution', 'create', 'interfaces'), ('interfaces', 'associated with', 'storage methods'), ('interfaces', 'associated with', 'serialization methods'), ('classes', 'implement', 'interfaces')]"
"When each class implements these two interfaces and their methods, you can access the methods of these interfaces by casting the objects to instances of the interface types.","[('class', 'implements', 'interfaces'), ('class', 'implements', 'methods'), ('methods', 'belong to', 'interfaces'), ('objects', 'cast to', 'instances of the interface types'), ('instances of the interface types', 'access', 'methods')]"
"You don't need to know exactly what class a given object is of, as long as you know what interface it implements.","[('object', 'implements', 'interface')]"
"As you can probably imagine by now, interfaces provide a cleaner way of implementing cross cutting functionality in classes than inheritance.","[('interfaces', 'provide', 'cleaner way of implementing cross cutting functionality'), ('cleaner way of implementing cross cutting functionality', 'in', 'classes'), ('cleaner way of implementing cross cutting functionality', 'than', 'inheritance')]"
A generic Java interface is an interface which can be typed - meaning it can be specialized to work with a specific type (e.g.,"[('Generic Java interface', 'is a type of', 'interface'), ('Generic Java interface', 'can be', 'typed'), ('Generic Java interface', 'can be specialized to work with', 'specific type')]"
This interface represents an interface which contains a single method called produce() which can produce a single object.,"[('This interface', 'represents', 'an interface'), ('an interface', 'contains', 'a single method'), ('a single method', 'called', 'produce()'), ('produce()', 'can produce', 'a single object')]"
"Since the return value of produce() is Object, it can return any Java object.","[('produce()', 'return value', 'Object'), ('produce()', 'can return', 'any Java object')]"
The implementation of the produce() method returns a new Car object every time it is called.,"[('produce() method', 'implementation returns', 'Car object')]"
"Notice how the object returned from the carProducer.produce() method call has to be cast to a Car instance, because the produce() method return type is Object.","[('carProducer.produce()', 'returns', 'Object'), ('Object', 'cast to', 'Car instance')]"
"Now when I implement the MyProducer interface in the CarProducer class, I have to include the generic type declaration too, like this:","[('CarProducer', 'implements', 'MyProducer')]"
"As you can see, since the generic type for the CarProducer instance is set to Car, it is no longer necessary to cast the object returned from the produce() method, since the original method declaration in the MyProducer interface states, that this method returns the same type as is specified in the generic type when used.","[('CarProducer instance', 'has generic type', 'Car'), ('produce() method', 'returns', 'object'), ('MyProducer interface', 'declares method', 'produce()'), ('produce() method', 'returns type', 'same as specified in generic type')]"
But - now it is actually possible to specify another generic type for a CarProducer instance than the type it actually returns from it's produce() method implementation.,"[('CarProducer', 'has method', 'produce()'), ('produce()', 'returns type', 'generic type'), ('CarProducer', 'can specify generic type', 'another generic type')]"
"If you scroll up, you can see that the CarProducer.produce() implementation returns a Car object no matter what generic type you specify for it when you create it.","[('CarProducer.produce()', 'returns', 'Car object'), ('CarProducer.produce()', 'implementation', 'CarProducer.produce()'), ('Car object', 'is a type of', 'generic type')]"
"Instead, you can lock down the generic type of the MyProducer interface already when you implement it, in the CarProducer class.","[('MyProducer interface', 'generic type locked down in', 'CarProducer class'), ('CarProducer class', 'implements', 'MyProducer interface')]"
"As you can see, it is still not necessary to cast the object returned by produce(), as the CarProducer implementation declares that to be a Car instance.","[('CarProducer', 'implementation declares', 'Car instance'), ('produce()', 'returns', 'object'), ('object', 'is instance of', 'Car')]"
A Java lambda expression is thus a function which can be created without belonging to any class.,"[('Java lambda expression', 'is a type of', 'function'), ('function', 'can be created without belonging to', 'any class')]"
Imagine you have a class called StateOwner which can register state event listeners.,"[('StateOwner', 'can register', 'state event listeners')]"
The lambda expression is matched against the parameter type of the addStateListener() method's parameter.,"[('lambda expression', 'matched against', 'parameter type'), ('parameter type', 'of', ""addStateListener() method's parameter"")]"
"For instance, the interface type of the parameter can be inferred from the method declaration of the addStateListener() method (the single method on the StateChangeListener interface).","[('parameter', 'has interface type', 'StateChangeListener'), ('addStateListener() method', 'declares method', 'StateChangeListener'), ('StateChangeListener', 'contains method', 'single method')]"
"In the example above, the compiler can infer their type from the onStateChange() method declaration.","[('compiler', 'can infer type from', 'onStateChange() method declaration')]"
"Thus, the type of the parameters oldState and newState are inferred from the method declaration of the onStateChange() method.","[('oldState', 'type inferred from', 'method declaration of onStateChange()'), ('newState', 'type inferred from', 'method declaration of onStateChange()')]"
"In this case, these parameters have to match the parameters of the onStateChange() method of the StateChangeListener interface:","[('parameters', 'have to match', 'parameters of the onStateChange() method'), ('onStateChange() method', 'part of', 'StateChangeListener interface')]"
Here is an example class that creates a lambda which references a static variable from inside the lambda body:,"[('example class', 'creates', 'lambda'), ('lambda', 'references', 'static variable')]"
The class primarily serves to show you that a lambda can access static variables.,"[('lambda', 'can access', 'static variables'), ('class', 'serves to show', 'lambda can access static variables')]"
"Since all the lambda body does is forward the string parameter to the System.out.println() method, we can replace the above lambda declaration with a method reference.","[('lambda body', 'forwards', 'string parameter'), ('string parameter', 'forwarded to', 'System.out.println() method'), ('lambda declaration', 'replaced with', 'method reference')]"
Whatever class or object that owns the referenced method comes before the double colons.,"[('class or object', 'owns', 'referenced method'), ('referenced method', 'comes before', 'double colons')]"
"Since the parameters of the Finder.find() and MyClass.doFind() methods match, it is possible to create a lambda expression that implements Finder.find() and references the MyClass.doFind() method.","[('Finder.find()', 'has parameter', 'parameters'), ('MyClass.doFind()', 'has parameter', 'parameters'), ('parameters', 'match', 'parameters'), ('lambda expression', 'implements', 'Finder.find()'), ('lambda expression', 'references', 'MyClass.doFind()')]"
Here is an example of a Java lambda expression that calls String.indexOf() to search:,"[('Java lambda expression', 'calls', 'String.indexOf()')]"
The convertToInt() method has the same signature as the deserialize() method of the Deserializer deserialize() method.,"[('convertToInt()', 'has same signature as', 'deserialize() method'), ('deserialize() method', 'part of', 'Deserializer')]"
"Because of that, we can create an instance of StringConverter and reference its convertToInt() method from a Java lambda expression, like this:","[('StringConverter', 'has method', 'convertToInt()'), ('convertToInt()', 'referenced by', 'Java lambda expression')]"
Finally it is possible to reference a constructor of a class.,"[('constructor', 'part of', 'class')]"
"You do that by writing the class name followed by ::new, like this:","[('class name', 'followed by', '::new')]"
The create() method of this interface matches the signature of one of the constructors in the String class.,"[('create() method', 'part of', 'interface'), ('create() method', 'matches signature of', 'constructor'), ('constructor', 'part of', 'String class')]"
"In Java, all instructions (code) have to be located inside a Java class.","[('instructions', 'located inside', 'Java class'), ('code', 'located inside', 'Java class')]"
A class is a way of grouping data and instructions that belong together.,"[('Class', 'is a way of', 'grouping data and instructions'), ('Data and instructions', 'belong together', 'Class')]"
"Declaring a simple class without any variables, methods or any other instructions, looks like this in Java code:","[('simple class', 'declared in', 'Java code')]"
This Java code needs to be located in a file with the same file name as the class and ending with the file suffix .java.,"[('Java code', 'needs to be located in', 'file'), ('file', 'has file name', 'same as class'), ('file', 'has file suffix', '.java')]"
"Once the file is located in a file matching its class name and ending with .java, you can compile it with the Java compiler from the Java SDK, or from inside your Java IDE (which is much easier).","[('file', 'located in', 'file matching its class name and ending with .java'), ('file', 'can be compiled with', 'Java compiler'), ('Java compiler', 'part of', 'Java SDK'), ('Java compiler', 'can be used from', 'Java IDE')]"
It is recommended that you locate your class in a Java package.,"[('class', 'should be located in', 'Java package')]"
"If you locate a Java class inside a Java package, you have to specify the package name at the top of the Java file.","[('Java class', 'located in', 'Java package'), ('Java package', 'contains', 'Java class'), ('Java file', 'contains', 'package name')]"
Here is how the class from earlier looks with a package declaration added:,"[('class', 'has component', 'package declaration')]"
Note: The file MyClass.java must now be located in the directory myjavacode and contain the package declaration package myjavacode; .,"[('MyClass.java', 'must be located in', 'directory myjavacode'), ('MyClass.java', 'contain', 'package declaration'), ('package declaration', 'is', 'package myjavacode')]"
A Java program starts by executing the main method of some class.,"[('Java program', 'starts by executing', 'main method'), ('main method', 'belongs to', 'some class')]"
"You can choose the name of the class to execute, but not the name of the method.","[('class', 'can execute', 'method')]"
Here is how the main method declaration looks when located inside the Java class declaration from earlier:,"[('main method declaration', 'located inside', 'Java class declaration')]"
Just remember that a main() method declaration needs these three keywords.,"[('main() method declaration', 'needs', 'three keywords')]"
"In the main() method example earlier I called the String array parameter args, and in the second example I called it stringArray.","[('main() method example', 'calls parameter', 'String array parameter args'), ('second example', 'calls parameter', 'stringArray')]"
"You call the java command that comes with the JRE, and tells it what Java class to execute, and what arguments to pass to the main() method.","[('java command', 'comes with', 'JRE'), ('java command', 'executes', 'Java class'), ('java command', 'passes arguments to', 'main() method')]"
The second and third arguments (-cp classes) tells the JVM in what directory the compiled Java classes are located (cp means class path).,"[('second and third arguments', 'tells', 'JVM'), ('compiled Java classes', 'located in', 'directory'), ('-cp', 'means', 'class path')]"
In this case the compiled Java classes are located in a directory named classes.,"[('compiled Java classes', 'located in', 'directory named classes')]"
The fourth argument is the name of the Java class the JVM is to execute.,"[('fourth argument', 'is', 'name of the Java class'), ('Java class', 'is to execute', 'JVM')]"
"Notice how the class name also contains the name of the package the class is located in (the ""fully qualified class name"").",
You can pass arguments from the command line to the main() method.,"[('arguments', 'can be passed from', 'command line'), ('arguments', 'can be passed to', 'main() method')]"
"When the JVM executes the main() method of the myjavacode.MyClass, the String array passed as parameter to the main() method will contain two Strings: ""Hello"" and ""World"".",
The main() method can access the arguments from the command line like this:,"[('main() method', 'can access', 'arguments from the command line')]"
"If only a single Java class in your Java program contains a main() method, then the class containing the main() method is often referred to as the main class.","[('Java class', 'contains', 'main() method'), ('Java program', 'contains', 'Java class'), ('class', 'referred to as', 'main class')]"
You can have as many classes as you want in your project with a main() method in.,"[('project', 'can have', 'many classes'), ('classes', 'can have', 'main() method')]"
You can still call the other main() methods from inside the main() method the Java Virtual Machine executes (you haven't seen how yet) and you can also start up multiple virtual machines which each execute a single main() method.,"[('Java Virtual Machine', 'executes', 'main() method'), ('main() method', 'can call', 'other main() methods'), ('Java Virtual Machine', 'can start', 'multiple virtual machines'), ('multiple virtual machines', 'execute', 'single main() method')]"
Therefore Java also contains the Java Math class which contains methods for performing more advanced math calculations in Java.,"[('Java', 'contains', 'Java Math class'), ('Java Math class', 'contains', 'methods'), ('methods', 'used for', 'performing more advanced math calculations')]"
This Java math tutorial will take a closer look at both Java's math operators as well as the Java Math class.,"[('Java math tutorial', 'examines', ""Java's math operators""), ('Java math tutorial', 'examines', 'Java Math class')]"
"The result of this division would be 12.5 , but since the two numbers are integers, the .5 fraction is cut off.","[('division', 'result', '12.5'), ('numbers', 'are', 'integers'), ('fraction', 'is', '0.5'), ('fraction', 'is cut off', '0.5')]"
"Even though the result variable is now a floating point type (double), the final result is still just 12 instead of 12.5 .","[('result variable', 'is a type of', 'floating point type'), ('floating point type', 'is a type of', 'double'), ('final result', 'is', '12')]"
Now the result variable would end up with the value 12.5.,"[('result variable', 'end up with value', '12.5')]"
"The first System.out.println() statement correctly prints the value 0.0 , which is the start value of the the resultDbl3 variable.","[('System.out.println() statement', 'prints', 'value 0.0'), ('value 0.0', 'is', 'start value'), ('start value', 'of', 'resultDbl3 variable')]"
"Adding the value 0.01 to 0 a total of 100 times should result in the value 1.0, right?","[('Adding the value 0.01', 'action', '0'), ('0', 'repeated', '100 times'), ('result', 'value', '1.0')]"
The Java Math class provides more advanced mathematical calculations than what the basic Java math operators provide.,"[('Java Math class', 'provides', 'advanced mathematical calculations'), ('advanced mathematical calculations', 'compared to', 'basic Java math operators')]"
"The Math class contains methods for finding the maximum or minimum of two values, rounding values, logarithmic functions, square root, and trigonometric functions (sin, cos, tan etc.","[('Math class', 'contains', 'methods'), ('methods', 'used for', 'finding maximum of two values'), ('methods', 'used for', 'finding minimum of two values'), ('methods', 'used for', 'rounding values'), ('methods', 'used for', 'logarithmic functions'), ('methods', 'used for', 'square root'), ('methods', 'used for', 'trigonometric functions'), ('trigonometric functions', 'includes', 'sin'), ('trigonometric functions', 'includes', 'cos'), ('trigonometric functions', 'includes', 'tan')]"
"The Math is located in the java.lang package, and not in the java.math package.","[('The Math', 'located in', 'java.lang package'), ('The Math', 'not located in', 'java.math package')]"
"Thus, the fully qualified class name of the Math class is java.lang.Math .","[('Math class', 'has fully qualified class name', 'java.lang.Math')]"
"Since many of the functions of the Math class are independent from each other, each method will be explained in its own section below.","[('functions of the Math class', 'are', 'independent from each other'), ('each method', 'will be explained in', 'its own section below')]"
"The java.lang.Math contains a set of basic math functions for obtaining the absolute value, highest and lowest of two values, rounding of values, random values etc.","[('java.lang.Math', 'contains', 'set of basic math functions'), ('set of basic math functions', 'used for', 'obtaining the absolute value'), ('set of basic math functions', 'used for', 'highest and lowest of two values'), ('set of basic math functions', 'used for', 'rounding of values'), ('set of basic math functions', 'used for', 'random values')]"
These basic math functions of the Java Math class will be covered in the following sections.,"[('basic math functions', 'part of', 'Java Math class'), ('Java Math class', 'contains', 'basic math functions')]"
The Math.abs() function returns the absolute value of the parameter passed to it.,"[('Math.abs() function', 'returns', 'absolute value'), ('absolute value', 'of', 'parameter passed to Math.abs() function')]"
Which of these methods are called depends on the type of the parameter passed to the Math.abs() method.,"[('methods', 'depend on', 'type of the parameter'), ('type of the parameter', 'passed to', 'Math.abs() method')]"
The Math.ceil() function rounds a floating point value up to the nearest integer value.,"[('Math.ceil()', 'function of', 'rounding'), ('rounding', 'applies to', 'floating point value'), ('rounding', 'results in', 'nearest integer value')]"
After executing this Java code the ceil variable will contain the value 8.0 .,"[('Java code', 'executes', 'ceil variable contains value 8.0')]"
The Math.floor() function rounds a floating point value down to the nearest integer value.,"[('Math.floor()', 'function of', 'rounding'), ('rounding', 'applies to', 'floating point value'), ('rounding', 'results in', 'nearest integer value')]"
After executing this Java code the floor variable will contain the value 7.0 .,"[('Java code', 'executes', 'floor variable contains value 7.0')]"
"The Math.floorDiv() method divides one integer (int or long) by another, and rounds the result down to the nearest integer value.","[('Math.floorDiv()', 'divides', 'integer'), ('Math.floorDiv()', 'rounds', 'result'), ('result', 'rounded to', 'nearest integer value')]"
"The floorDiv() method rounds down to the nearest negative integer, instead of the rounding up that would occur with fraction truncation.","[('floorDiv() method', 'rounds down to', 'nearest negative integer'), ('fraction truncation', 'rounds up to', 'nearest negative integer')]"
This shows the difference between the / division operator and Math.floorDiv() .,"[('/', 'type', 'division operator'), ('Math.floorDiv()', 'type', 'division operator'), ('/', 'difference', 'Math.floorDiv()')]"
The Math.min() method returns the smallest of two values passed to it as parameter.,"[('Math.min() method', 'returns', 'smallest of two values')]"
The Math.max() method returns the largest of two values passed to it as parameter.,"[('Math.max()', 'returns', 'largest of two values')]"
The Math.round() method rounds a float or double to the nearest integer using normal math round rules (either up or down).,"[('Math.round() method', 'rounds', 'float'), ('Math.round() method', 'rounds', 'double'), ('Math.round() method', 'uses', 'normal math round rules'), ('normal math round rules', 'rounds to', 'nearest integer')]"
"After executing these two Java statements the roundedDown variable will contain the value 23.0 , and the roundedUp variable will contain the value 24.0.","[('roundedDown variable', 'will contain the value', '23.0'), ('roundedUp variable', 'will contain the value', '24.0')]"
The Math.random() method returns a random floating point number between 0 and 1.,"[('Math.random() method', 'returns', 'random floating point number'), ('random floating point number', 'range', 'between 0 and 1')]"
"100, multiply the value returned by Math.random() with the maximum number (e.g.","[('Math.random()', 'returns value', 'value'), ('value', 'multiplied by', '100'), ('value', 'multiplied by', 'maximum number')]"
"If you need an integer value, use the round(), floor() or ceil() method.","[('round()', 'used for', 'integer value'), ('floor()', 'used for', 'integer value'), ('ceil()', 'used for', 'integer value')]"
The Java Math class also contains a set of functions intended for exponential and logarithmic calculations.,"[('Java Math class', 'contains', 'set of functions'), ('set of functions', 'intended for', 'exponential calculations'), ('set of functions', 'intended for', 'logarithmic calculations')]"
The Math.exp() function returns e (Euler's number) raised to the power of the value provided as parameter.,"[('Math.exp() function', 'returns', 'e raised to the power of the value provided as parameter'), ('e', 'is', ""Euler's number"")]"
The Math.log10 method works like the Math.log() method except is uses 10 as is base for calculating the logarithm instead of e (Euler's Number).,"[('Math.log10', 'works like', 'Math.log()'), ('Math.log10', 'uses base', '10'), ('Math.log()', 'uses base', ""e (Euler's Number)"")]"
"In other words, the Math.pow() example calculate the values of 22 and 28 which are 4 and 256.","[('Math.pow() example', 'calculates', 'values of 22 and 28'), ('values of 22', 'are', '4'), ('values of 28', 'are', '256')]"
The Math.sqrt() method calculates the square root of the parameter given to it.,"[('Math.sqrt() method', 'calculates', 'square root'), ('square root', 'of', 'parameter')]"
"If you are looking for a trigonometric function and you cannot find it here, check the JavaDoc for the Java Math class.","[('trigonometric function', 'related to', 'JavaDoc'), ('JavaDoc', 'related to', 'Java Math class')]"
"The Math class just might have the function you are looking for, even if I have not described it here.","[('Math class', 'might have', 'function')]"
The Math.PI constant is a double with a value that is very close to the value of PI - the mathematical definition of PI.,"[('Math.PI', 'is a', 'constant'), ('Math.PI', 'data type', 'double'), ('Math.PI', 'value', 'very close to the value of PI'), ('PI', 'has', 'mathematical definition')]"
You will often need the Math.PI field when making trigonometric calculations.,"[('Math.PI', 'used for', 'trigonometric calculations')]"
The Math.sin() method calculates the sine value of some angle value in radians.,"[('Math.sin()', 'calculates', 'sine value'), ('sine value', 'of', 'angle value'), ('angle value', 'in', 'radians')]"
The Math.cos() method calculates the cosine value of some angle value in radians.,"[('Math.cos() method', 'calculates', 'cosine value'), ('cosine value', 'of', 'angle value'), ('angle value', 'measured in', 'radians')]"
The Math.tan() method calculates the tangens value of some angle value in radians.,"[('Math.tan()', 'calculates', 'tangens value'), ('tangens value', 'of', 'angle value'), ('angle value', 'in', 'radians')]"
The Math.asin() method calculates the arc sine value of a value between 1 and -1.,"[('Math.asin()', 'calculates', 'arc sine value'), ('arc sine value', 'applies to', 'value between 1 and -1')]"
The Math.acos() method calculates the arc cosine value of a value between 1 and -1.,"[('Math.acos()', 'calculates', 'arc cosine value'), ('arc cosine value', 'applies to', 'value between 1 and -1')]"
The Math.atan() method calculates the arc tangens value of a value between 1 and -1.,"[('Math.atan()', 'calculates', 'arc tangens value'), ('arc tangens value', 'applies to', 'value between 1 and -1')]"
The Math.sinh() method calculates the hyperbolic sine value of a value between 1 and -1.,"[('Math.sinh()', 'calculates', 'hyperbolic sine value')]"
The Math.cosh() method calculates the hyperbolic cosine value of a value between 1 and -1.,"[('Math.cosh()', 'calculates', 'hyperbolic cosine value')]"
The Math.tanh() method calculates the hyperbolic tangens value of a value between 1 and -1.,"[('Math.tanh()', 'calculates', 'hyperbolic tangens value'), ('hyperbolic tangens value', 'applies to', 'value between 1 and -1')]"
Java methods are similar to what is called functions or procedures in other programming languages (e.g.,"[('Java methods', 'are similar to', 'functions'), ('Java methods', 'are similar to', 'procedures'), ('functions', 'are in', 'other programming languages'), ('procedures', 'are in', 'other programming languages')]"
The example above defines a method called writeText inside a class named MyClass.,"[('writeText', 'defined in', 'MyClass'), ('MyClass', 'contains method', 'writeText')]"
You can use any primitive data type or built-in Java class as data type for parameters.,"[('primitive data type', 'can be used as', 'data type for parameters'), ('built-in Java class', 'can be used as', 'data type for parameters')]"
"When the above Java code is executed, the writeText() method will get executed, and the parameters will contain the values ""Hello"" and ""World"".",
"But, instead of returning to where the method was called from, the execution is resumed inside the first catch() { } clause surrounding the method, targeted at that exception.","[('execution', 'resumed inside', 'first catch() { } clause'), ('first catch() { } clause', 'surrounding', 'method'), ('execution', 'targeted at', 'exception')]"
"Notice how the method callSum() creates a variable called theSum, and assigns it the value returned by the add(1, 3) method call.","[('callSum()', 'creates variable', 'theSum'), ('theSum', 'assigned value', 'value returned by add(1, 3)')]"
Before Java 9 and the Java Platform Module System you would have had to package all of the Java Platform APIs with your Java application because there was no official way of reliably checking what classes your Java application used.,"[('Java 9', 'precedes', 'Java Platform Module System'), ('Java Platform Module System', 'introduced in', 'Java 9'), ('Java Platform APIs', 'packaged with', 'Java application'), ('Java application', 'uses', 'Java Platform APIs'), ('Java application', 'lacks', 'official way of reliably checking classes')]"
"Since the Java Platform APIs have grown quite large over the years, your application would get a large amount of Java classes included in its distribution, many of which your application would probably not be using.","[('Java Platform APIs', 'have grown', 'large'), ('application', 'would get', 'Java classes'), ('Java classes', 'included in', 'distribution'), ('application', 'would not be using', 'many of Java classes')]"
The unused classes makes your application distributable bigger than it needs to be.,"[('unused classes', 'makes', 'application distributable bigger than it needs to be')]"
from a missing JAR file) would not be detected until the application actually tried to use the missing class.,"[('missing JAR file', 'contains', 'missing class'), ('application', 'tries to use', 'missing class')]"
This would happen sometime at runtime - depending on when the application tried to use the missing class.,"[('This', 'would happen', 'sometime at runtime'), ('application', 'tried to use', 'missing class')]"
Having missing modules reported at application startup time is a big advantage compared to at runtime when trying to use the missing module / JAR / class.,"[('missing modules', 'reported at', 'application startup time'), ('missing modules', 'advantage compared to', 'runtime'), ('runtime', 'when trying to use', 'missing module / JAR / class')]"
"However, you should not use underscores (_) in module names (or package names, class names, method names, variable names etc.)","[('you', 'should not use', 'underscores'), ('underscores', 'used in', 'module names'), ('underscores', 'used in', 'package names'), ('underscores', 'used in', 'class names'), ('underscores', 'used in', 'method names'), ('underscores', 'used in', 'variable names')]"
"Before Java 9 all Java classes for an application or API were nested directly inside a root class directory (which was added to the classpath), or directly inside a JAR file.","[('Java classes', 'nested inside', 'root class directory'), ('Java classes', 'nested inside', 'JAR file'), ('root class directory', 'added to', 'classpath')]"
The module root directory is used both for the source files and compiled classes of a Java module.,"[('module root directory', 'used for', 'source files'), ('module root directory', 'used for', 'compiled classes'), ('source files', 'part of', 'Java module'), ('compiled classes', 'part of', 'Java module')]"
Each Java module needs a Java module descriptor named module-info.java which has to be located in the corresponding module root directory.,"[('Java module', 'requires', 'Java module descriptor'), ('Java module descriptor', 'named', 'module-info.java'), ('Java module descriptor', 'located in', 'corresponding module root directory')]"
Notice also how the module descriptor is suffixed .java and yet it uses a hyphen in the file name (module-info.java).,"[('module descriptor', 'suffixed with', '.java'), ('module descriptor', 'uses hyphen in file name', 'module-info.java')]"
"Hyphens are not normally allowed in Java class names, but in module descriptor file names they are required!","[('Hyphens', 'not allowed in', 'Java class names'), ('Hyphens', 'required in', 'module descriptor file names')]"
This example module descriptor declares that it requires the standard Java module named javafx.graphics.,"[('example module descriptor', 'requires', 'standard Java module'), ('standard Java module', 'named', 'javafx.graphics')]"
By split package is meant that the total content (classes) of the package is split between multiple modules.,"[('split package', 'means', 'total content of the package is split between multiple modules'), ('total content of the package', 'includes', 'classes')]"
"Inside that directory you will find a directory with the name of the module, and inside that directory you will find the compiled classes plus a compiled version of the module-info.java module descriptor named module-info.class.","[('directory', 'contains', 'directory with the name of the module'), ('directory with the name of the module', 'contains', 'compiled classes'), ('directory with the name of the module', 'contains', 'compiled version of the module-info.java module descriptor'), ('compiled version of the module-info.java module descriptor', 'named', 'module-info.class')]"
"In order to run the main class of a Java module you use the java command, like this:","[('java command', 'used to run', 'main class of a Java module')]"
The --module argument tells what module + main class to run.,"[('--module argument', 'tells', 'what module + main class to run')]"
Notice how the module name and main class name are separated by a slash (/) character.,"[('module name', 'separated by', 'slash (/) character'), ('main class name', 'separated by', 'slash (/) character')]"
You can still set the JAR main class when generating the module JAR file.,"[('JAR file', 'can have', 'main class'), ('main class', 'can be set when generating', 'module JAR file')]"
Here is an example of setting the main class of a Java module JAR file:,"[('Java module JAR file', 'has example of setting', 'main class')]"
You can now run the main class of this JAR file with a shortcut.,"[('main class', 'can be run with', 'shortcut'), ('JAR file', 'contains', 'main class')]"
Here is how you run the main class from a Java module JAR file:,"[('main class', 'is part of', 'Java module JAR file')]"
"If the Java module JAR file has a main class set (see a few sections earlier in this tutorial for how to do that), you can run the Java module main class with a little shorter command line.","[('Java module JAR file', 'has', 'main class'), ('main class', 'can be run with', 'shorter command line')]"
Here is an example of running a Java module from a JAR file with a main class set:,"[('Java module', 'can be run from', 'JAR file'), ('JAR file', 'contains', 'main class')]"
The --module argument specifies which module plus main class to run.,"[('--module argument', 'specifies', 'module'), ('--module argument', 'specifies', 'main class')]"
"From Java 9 and forward, all Java classes must be located in a module for the Java VM to use them.","[('Java 9', 'version forward', 'all Java classes must be located in a module'), ('Java VM', 'uses', 'Java classes')]"
"But what do you do with older Java libraries where you just have the compiled classes, or a JAR file?","[('older Java libraries', 'contain', 'compiled classes'), ('older Java libraries', 'contain', 'JAR file')]"
In Java 9 you can still use the -classpath argument to the Java VM when running an application.,"[('Java 9', 'allows', 'use of -classpath argument'), ('-classpath argument', 'used with', 'Java VM'), ('Java VM', 'runs', 'application')]"
"On the classpath you can include all your older Java classes, just like you have done before Java 9.","[('Classpath', 'can include', 'older Java classes'), ('Older Java classes', 'used before', 'Java 9')]"
All classes found on the classpath will be included in what Java calls the unnamed module.,"[('classes', 'found on', 'classpath'), ('classes', 'included in', 'unnamed module'), ('unnamed module', 'term used by', 'Java')]"
"However, the classes in the unnamed module are only readable by other classes in the unnamed module - or from automatic modules (see next section).","[('classes', 'located in', 'unnamed module'), ('classes', 'readable by', 'other classes in the unnamed module'), ('classes', 'readable by', 'automatic modules')]"
No named module can read the classes of the unnamed module.,"[('No named module', 'can read', 'classes of the unnamed module')]"
All classes in the unnamed module requires all modules found on the module path.,"[('All classes', 'requires', 'all modules'), ('all modules', 'found on', 'the module path')]"
"That way, all classes in the unnamed module can read all classes exported by all the Java modules found on the module path.","[('Unnamed module', 'can read', 'all classes exported by all the Java modules'), ('Java modules', 'found on', 'module path')]"
"While you can include the third party library on the classpath and thus include it in the unnamed module, your own named modules cannot use it, because named modules cannot read classes from the unnamed module.","[('third party library', 'can be included on', 'classpath'), ('third party library', 'can be included in', 'unnamed module'), ('named modules', 'cannot use', 'third party library'), ('named modules', 'cannot read classes from', 'unnamed module')]"
"An automatic module is made from a JAR file with Java classes that are not modularized, meaning the JAR file has no module descriptor.","[('Automatic module', 'made from', 'JAR file'), ('JAR file', 'contains', 'Java classes'), ('Java classes', 'are', 'not modularized'), ('JAR file', 'lacks', 'module descriptor')]"
When you place an ordinary JAR file on the module path (not the classpath) the Java VM will convert it to an automatic module at runtime.,"[('ordinary JAR file', 'placed on', 'module path'), ('Java VM', 'converts', 'ordinary JAR file'), ('ordinary JAR file', 'converted to', 'automatic module'), ('conversion', 'occurs at', 'runtime')]"
"If your application contains multiple automatic modules, each automatic module can read the classes of all other automatic modules.","[('application', 'contains', 'multiple automatic modules'), ('automatic module', 'can read classes of', 'all other automatic modules')]"
This is different from explicitly named modules (real Java modules) which cannot read classes in the unnamed module.,"[('explicitly named modules', 'cannot read classes in', 'unnamed module')]"
"An automatic module exports all its packages, so all named modules on the module path can use the classes of an automatic module.","[('Automatic module', 'exports', 'all its packages'), ('Named modules', 'can use classes of', 'Automatic module')]"
"If a JAR file contains versioning in its file name, e.g.","[('JAR file', 'may contain', 'versioning'), ('versioning', 'can be part of', 'file name')]"
"The service interface is typically located in a service interface Java module which only contains the service interface, plus any classes and interfaces related to the service interface.","[('Service interface', 'located in', 'Service interface Java module'), ('Service interface Java module', 'contains', 'Service interface'), ('Service interface Java module', 'contains', 'Classes related to the service interface'), ('Service interface Java module', 'contains', 'Interfaces related to the service interface')]"
The com folder at the root level of the JAR file contains the compiled Java classes for pre Java 9 versions.,"[('com folder', 'located at', 'root level of the JAR file'), ('com folder', 'contains', 'compiled Java classes'), ('compiled Java classes', 'for', 'pre Java 9 versions')]"
Earlier versions of Java do not understand multi Java version JAR files so they use the classes found here.,"[('Earlier versions of Java', 'do not understand', 'multi Java version JAR files'), ('Earlier versions of Java', 'use', 'classes found here')]"
The META-INF directory contains the MANIFEST.MF file and a directory named versions.,"[('META-INF directory', 'contains', 'MANIFEST.MF file'), ('META-INF directory', 'contains', 'directory named versions')]"
The MANIFEST.MF file needs a special entry that marks the JAR file as a multi version JAR file.,"[('MANIFEST.MF file', 'needs entry', 'special entry'), ('special entry', 'marks', 'JAR file'), ('JAR file', 'is a type of', 'multi version JAR file')]"
The versions directory which can contain the compiled classes for different versions of Java for your module.,"[('versions directory', 'can contain', 'compiled classes'), ('compiled classes', 'for', 'different versions of Java'), ('compiled classes', 'for', 'your module')]"
"Upgrading utility libraries first to automatic modules, and later to full modules, starting at the bottom of the dependency hierarchy should assure that your libraries can still read each other during upgrade, plus be readable by the main applications on the classpath in the unnamed module or as an automatic or named module.","[('Upgrading utility libraries', 'first to', 'automatic modules'), ('Upgrading utility libraries', 'later to', 'full modules'), ('utility libraries', 'starting at', 'bottom of the dependency hierarchy'), ('utility libraries', 'can still read', 'each other during upgrade'), ('utility libraries', 'be readable by', 'main applications'), ('main applications', 'on the classpath in', 'unnamed module'), ('main applications', 'on the classpath as', 'automatic module'), ('main applications', 'on the classpath as', 'named module')]"
In Java nested classes are classes that are defined inside another class.,"[('Nested classes', 'are defined inside', 'another class'), ('Nested classes', 'are a type of', 'classes'), ('Java', 'contains', 'nested classes')]"
"The purpose of a nested class is to clearly group the nested class with its surrounding class, signaling that these two classes are to be used together.","[('nested class', 'has purpose', 'to clearly group the nested class with its surrounding class'), ('nested class', 'to be used with', 'surrounding class')]"
Or perhaps that the nested class is only to be used from inside its enclosing (owning) class.,"[('nested class', 'used from inside', 'enclosing class'), ('nested class', 'used from inside', 'owning class')]"
"Java developers often refer to nested classes as inner classes, but inner classes (non-static nested classes) are only one out of several different types of nested classes in Java.","[('Java developers', 'refer to', 'nested classes as inner classes'), ('inner classes', 'are a type of', 'non-static nested classes'), ('non-static nested classes', 'are a type of', 'nested classes'), ('inner classes', 'are a type of', 'nested classes'), ('nested classes', 'are a type of', 'classes in Java')]"
In Java nested classes are considered members of their enclosing class.,"[('nested classes', 'are considered members of', 'enclosing class'), ('enclosing class', 'contains', 'nested classes')]"
"Thus, a nested class can be declared public, package (no access modifier), protected and private (see access modifiers for more info).","[('nested class', 'can be declared as', 'public'), ('nested class', 'can be declared as', 'package'), ('nested class', 'can be declared as', 'protected'), ('nested class', 'can be declared as', 'private'), ('access modifiers', 'provides more info on', 'nested class')]"
Therefore nested classes in Java can also be inherited by subclasses as explained in my tutorial about Java inheritance.,"[('nested classes', 'can be inherited by', 'subclasses'), ('tutorial', 'about', 'Java inheritance')]"
You can create several different types of nested classes in Java.,"[('nested classes', 'can be created in', 'Java'), ('Java', 'allows creation of', 'nested classes')]"
All these types of nested classes will be covered in the following sections.,"[('nested classes', 'will be covered in', 'following sections')]"
"In order to create an instance of the Nested class you must reference it by prefixing it with the Outer class name, like this:","[('Nested class', 'is referenced by prefixing with', 'Outer class name')]"
In Java a static nested class is essentially a normal class that has just been nested inside another class.,"[('static nested class', 'is a type of', 'normal class'), ('static nested class', 'nested inside', 'another class')]"
"Being static, a static nested class can only access instance variables of the enclosing class via a reference to an instance of the enclosing class.","[('static nested class', 'can access', 'instance variables of the enclosing class'), ('static nested class', 'requires', 'reference to an instance of the enclosing class')]"
Inner classes are associated with an instance of the enclosing class.,"[('Inner classes', 'associated with', 'instance of the enclosing class')]"
"Thus, you must first create an instance of the enclosing class to create an instance of an inner class.","[('instance of inner class', 'requires', 'instance of enclosing class'), ('instance of enclosing class', 'creates', 'instance of inner class')]"
Here is how you create an instance of the Inner class:,"[('Inner class', 'has method', 'create instance')]"
Notice how you put new after the reference to the outer class in order to create an instance of the inner class.,"[('you', 'put', 'new'), ('new', 'used for', 'create instance'), ('create instance', 'of', 'inner class'), ('reference', 'to', 'outer class')]"
"Non-static nested classes (inner classes) have access to the fields of the enclosing class, even if they are declared private.","[('Non-static nested classes', 'have access to', 'fields of the enclosing class'), ('fields of the enclosing class', 'can be', 'declared private')]"
Notice how the printText() method of the Inner class references the private text field of the Outer class.,"[('printText() method', 'part of', 'Inner class'), ('Inner class', 'references', 'private text field'), ('private text field', 'part of', 'Outer class')]"
"If a Java inner class declares fields or methods with the same names as field or methods in its enclosing class, the inner fields or methods are said to shadow over the outer fields or methods.","[('Java inner class', 'declares', 'fields'), ('Java inner class', 'declares', 'methods'), ('fields', 'have same names as', 'fields in enclosing class'), ('methods', 'have same names as', 'methods in enclosing class'), ('inner fields', 'shadow over', 'outer fields'), ('inner methods', 'shadow over', 'outer methods')]"
In the above example both the Outer and Inner class contains a field named text.,"[('Outer class', 'contains field', 'text'), ('Inner class', 'contains field', 'text')]"
When the Inner class refers to text it refers to its own field.,"[('Inner class', 'refers to', 'text'), ('Inner class', 'refers to', 'its own field')]"
"Java makes it possible though, for the Inner class to refer to the text field of the Outer class.","[('Inner class', 'can refer to', 'text field'), ('text field', 'belongs to', 'Outer class')]"
To do so it has to prefix the text field reference with Outer.this.,"[('it', 'has to prefix', 'text field reference'), ('text field reference', 'prefixed with', 'Outer.this')]"
Now the Inner.printText() method will print both the Inner.text and Outer.text fields.,"[('Inner.printText()', 'prints', 'Inner.text'), ('Inner.printText()', 'prints', 'Outer.text')]"
Local classes in Java are like inner classes (non-static nested classes) that are defined inside a method or scope block ({ ... }) inside a method.,"[('Local classes', 'are like', 'inner classes'), ('inner classes', 'are', 'non-static nested classes'), ('Local classes', 'defined inside', 'method'), ('Local classes', 'defined inside', 'scope block'), ('scope block', 'inside', 'method')]"
Local classes can only be accessed from inside the method or scope block in which they are defined.,"[('Local classes', 'can be accessed from', 'inside the method'), ('Local classes', 'can be accessed from', 'scope block'), ('Local classes', 'are defined in', 'method'), ('Local classes', 'are defined in', 'scope block')]"
Local classes can access members (fields and methods) of its enclosing class just like regular inner classes.,"[('Local classes', 'can access', 'members'), ('members', 'includes', 'fields'), ('members', 'includes', 'methods'), ('Local classes', 'enclosed by', 'enclosing class'), ('Local classes', 'similar to', 'regular inner classes')]"
"Local classes can also access local variables inside the same method or scope block, provided these variables are declared final.","[('Local classes', 'can access', 'local variables'), ('local variables', 'are inside', 'same method or scope block'), ('local variables', 'are declared', 'final')]"
From Java 8 local classes can also access local variables and parameters of the method the local class is declared in.,"[('Java 8', 'feature', 'local classes'), ('local classes', 'can access', 'local variables'), ('local classes', 'can access', 'parameters'), ('local classes', 'declared in', 'method')]"
In that case the local class only has access to the static parts of the enclosing class.,"[('local class', 'has access to', 'static parts of the enclosing class')]"
"Local classes cannot contain all kinds of static declarations (constants are allowed - variables declared static final), because local classes are non-static in nature - even if declared inside a static method.","[('Local classes', 'cannot contain', 'all kinds of static declarations'), ('constants', 'are allowed in', 'Local classes'), ('variables', 'are declared', 'static final'), ('Local classes', 'are', 'non-static in nature'), ('Local classes', 'are declared inside', 'a static method')]"
The same shadowing rules apply for local classes as for inner classes.,"[('shadowing rules', 'apply for', 'local classes'), ('shadowing rules', 'apply for', 'inner classes')]"
Anonymous classes in Java are nested classes without a class name.,"[('Anonymous classes', 'are', 'nested classes'), ('Anonymous classes', 'lack', 'class name')]"
"They are typically declared as either subclasses of an existing class, or as implementations of some interface.","[('They', 'declared as', 'subclasses of an existing class'), ('They', 'declared as', 'implementations of some interface')]"
Here is an example that declares an anonymous subclass of a superclass called SuperClass:,"[('Anonymous Subclass', 'subclass of', 'SuperClass')]"
Running this Java code would result in Anonymous class doIt() being printed to System.out.,"[('Java code', 'results in', 'Anonymous class doIt() being printed'), ('Anonymous class doIt()', 'printed to', 'System.out')]"
The anonymous class subclasses (extends) SuperClass and overrides the doIt() method.,"[('anonymous class', 'subclasses', 'SuperClass'), ('anonymous class', 'overrides', 'doIt() method')]"
A Java anonymous class can also implement an interface instead of extending a class.,"[('Java anonymous class', 'can implement', 'interface'), ('Java anonymous class', 'can extend', 'class')]"
"As you can see, an anonymous class implementing an interface is pretty similar to an anonymous class extending another class.","[('anonymous class', 'implements', 'interface'), ('anonymous class', 'extends', 'another class')]"
"You can declare fields and methods inside an anonymous class, but you cannot declare a constructor.","[('anonymous class', 'can contain', 'fields'), ('anonymous class', 'can contain', 'methods'), ('anonymous class', 'cannot contain', 'constructor')]"
"You can declare a static initializer for the anonymous class instead, though.","[('anonymous class', 'can have', 'static initializer')]"
The same shadowing rules apply to anonymous classes as to inner classes.,"[('shadowing rules', 'apply to', 'anonymous classes'), ('shadowing rules', 'apply to', 'inner classes')]"
The benefits of Java nested classes are that you can group classes together that belong together.,"[('Java nested classes', 'have benefit', 'group classes together'), ('classes', 'belong together', 'group classes')]"
"You could do so already by putting them in the same package, but putting one class inside another makes an even stronger grouping.","[('putting them in the same package', 'enables', 'stronger grouping'), ('putting one class inside another', 'enables', 'even stronger grouping')]"
A nested class is typically only used by or with its enclosing class.,"[('Nested class', 'used by', 'Enclosing class'), ('Nested class', 'used with', 'Enclosing class')]"
"Sometimes a nested class is only visible to the enclosing class, is only used internally, and is thus never visible outside the enclosing class.","[('nested class', 'visibility', 'enclosing class'), ('nested class', 'used internally', 'enclosing class'), ('nested class', 'not visible', 'outside the enclosing class')]"
"Other times the nested class is visible outside its enclosing class, but can only be used in conjunction with the enclosing class.","[('nested class', 'is visible outside', 'enclosing class'), ('nested class', 'can only be used in conjunction with', 'enclosing class')]"
"Inside the Cache class you might declare a CacheEntry class which can contain information about a specific cache entry (cached value, time inserted, number of times accessed etc.).","[('Cache', 'may declare class', 'CacheEntry'), ('CacheEntry', 'can contain information about', 'specific cache entry'), ('specific cache entry', 'has attribute', 'cached value'), ('specific cache entry', 'has attribute', 'time inserted'), ('specific cache entry', 'has attribute', 'number of times accessed')]"
"Users of the Cache class may never see the CacheEntry class, if they have no need to obtain information about the CacheEntry itself, but only the cached value.","[('Cache', 'has user', 'Users'), ('Cache', 'contains', 'CacheEntry'), ('Users', 'may not see', 'CacheEntry'), ('Users', 'obtain information about', 'cached value')]"
"However, the Cache class may choose to make the CacheEntry class visible to the outside world, so they can access more than just the cached value (for instance information about when the value was last refreshed etc.","[('Cache class', 'may choose to make visible', 'CacheEntry class'), ('CacheEntry class', 'visible to', 'outside world'), ('outside world', 'can access', 'more than just the cached value'), ('more than just the cached value', 'includes', 'information about when the value was last refreshed')]"
The first Cache class hides its CacheEntry nested class while the second Cache class exposes it.,"[('first Cache class', 'hides', 'CacheEntry nested class'), ('second Cache class', 'exposes', 'CacheEntry nested class')]"
You instantiate an object of a certain class using the new keyword.,"[('object', 'is instantiated by', 'new keyword'), ('object', 'is instance of', 'class')]"
"This example declares a variable of the MyClass class (custom data type), and then creates a new MyClass instance and assigns a reference to this instance to myClassInstance variable.","[('variable', 'declares', 'MyClass class'), ('MyClass class', 'is a', 'custom data type'), ('MyClass instance', 'creates', 'new MyClass instance'), ('myClassInstance variable', 'assigns reference to', 'MyClass instance')]"
"Inside the parantheses () after the for keyword, are three statements separated by semicolon (;).","[('parantheses', 'located after', 'for keyword'), ('statements', 'separated by', 'semicolon')]"
"Here is a simple example of a class that has two methods, where one method calls the other:","[('class', 'has method', 'two methods'), ('one method', 'calls', 'the other')]"
"Notice how printBoth() calls the print() method two times, each time with a different of the parameters passed to the printBoth() method.","[('printBoth()', 'calls', 'print() method'), ('print() method', 'called two times', 'printBoth()'), ('print() method', 'called with', 'different parameters'), ('parameters', 'passed to', 'printBoth() method')]"
The print() method is thus a reusable block of code that can be called from anywhere.,"[('print() method', 'is a', 'reusable block of code'), ('reusable block of code', 'can be called from', 'anywhere')]"
"When the print() method is finished executing, the program jumps back to after the line that called the print() method.","[('program', 'jumps back to', 'after the line that called the print() method')]"
"Java packages are a mechanism to group Java classes that are related to each other, into the same ""group"" (package).",
"When a Java project grows bigger, for instance an app or API, it is useful to split the code into multiple Java classes, and the classes into multiple Java packages.","[('Java project', 'grows into', 'app'), ('Java project', 'grows into', 'API'), ('Java project', 'contains', 'Java classes'), ('Java classes', 'contained in', 'Java project'), ('Java classes', 'contained in', 'Java packages'), ('Java packages', 'contain', 'Java classes')]"
"When you divide classes into multiple Java packages, it becomes easier to figure out where a certain class you are looking for is.","[('Classes', 'can be divided into', 'Java packages'), ('Dividing classes into Java packages', 'makes it easier to find', 'certain class')]"
All Java source and class files of classes belonging to the same package are located in the same directory.,"[('Java source and class files', 'belong to', 'classes'), ('classes', 'belong to', 'same package'), ('Java source and class files', 'located in', 'same directory')]"
"Its a tree of packages, subpackages and classes inside these classes.","[('tree', 'contains', 'packages'), ('tree', 'contains', 'subpackages'), ('tree', 'contains', 'classes'), ('packages', 'contain', 'subpackages'), ('subpackages', 'contain', 'classes')]"
"I have expanded two of the sublevel Java packages, so you can see the classes inside.","[('I', 'have expanded', 'two of the sublevel Java packages'), ('two of the sublevel Java packages', 'contain', 'classes')]"
"The classes are illustrated using a little blue circle with a C inside, in the screenshot above.","[('classes', 'illustrated using', 'little blue circle with a C inside'), ('little blue circle with a C inside', 'depicted in', 'screenshot above')]"
"Similarly, the fully qualified name of a Java class includes its package name.","[('Java class', 'has fully qualified name', 'includes package name')]"
"For instance, the full qualified name of the ""Page"" class, is:",
"In order to put add Java classes to packages, you must do two things:","[('Java classes', 'can be added to', 'packages')]"
Put the class files into the directory matching the package you want to add it to.,"[('class files', 'placed into', 'directory'), ('directory', 'matches', 'package')]"
"When you have put your Java source file into the correct directory (matching the package the class should belong to), you have to declare inside that class file, that it belongs to that Java package.","[('Java source file', 'placed into', 'correct directory'), ('correct directory', 'matches', 'package'), ('class', 'belongs to', 'package'), ('class file', 'declares', 'belongs to Java package')]"
"Not like Java classes, where the first letter is usually a capital letter.","[('Java classes', 'characteristic', 'first letter is usually a capital letter')]"
"If the classes A and B are located in the same Java package, there is no problem with the code above.","[('classes A and B', 'located in', 'same Java package')]"
"If you need to use a lot of classes from a certain Java package, importing them one at a time results in a lot of import statements.","[('You', 'need to use', 'a lot of classes'), ('Classes', 'belong to', 'Java package'), ('Importing classes one at a time', 'results in', 'a lot of import statements')]"
It is possible to import all classes of a package using the * character instead of a class name.,"[('* character', 'used for', 'import all classes of a package')]"
It is possible to use a class from another package without importing it with an import statement.,"[('class', 'can be used without', 'import statement'), ('class', 'belongs to', 'another package')]"
You can write the fully qualified class name instead of just the name of the class itself.,"[('fully qualified class name', 'is a type of', 'class name'), ('class name', 'is part of', 'fully qualified class name')]"
"The fully qualified class name consists of the full package path down to the subclass containing the class, and also including the class name itself.","[('fully qualified class name', 'consists of', 'full package path'), ('full package path', 'contains', 'subclass'), ('subclass', 'contains', 'class'), ('fully qualified class name', 'includes', 'class name')]"
The fully qualified class name is also what you would write in an import statement.,"[('fully qualified class name', 'used in', 'import statement')]"
"You could use this fully qualified class name to reference the TimeUtil class inside another class, like this:","[('fully qualified class name', 'used to reference', 'TimeUtil class'), ('TimeUtil class', 'located inside', 'another class')]"
"You might be wondering how you decide on what Java packages to create, and how to divide your classes into these packages.","[('You', 'wondering about', 'how to decide on what Java packages to create'), ('You', 'wondering about', 'how to divide your classes into these packages')]"
"The first method is to divide classes after what ""layer"" of the application they belong to.",
All classes involved in communication with the database would then be located in the database package.,"[('classes', 'involved in', 'communication with the database'), ('classes', 'located in', 'database package')]"
The second method is to divide your classes based on what part of the application functionality they belong to.,"[('classes', 'are divided based on', 'part of the application functionality'), ('part of the application functionality', 'belongs to', 'application')]"
"All classes involved in one way or another in the pension calculations would go into that package (or subpackages, if the number of classes in pension grow large).","[('classes', 'involved in', 'pension calculations'), ('classes', 'go into', 'package'), ('classes', 'go into', 'subpackages'), ('number of classes', 'grow', 'large')]"
"The ""divide by application functionality"" method of dividing classes into Java packages tends to work better than ""divide by layer"", as your application grows in number of classes.",
"Instead of having a fixed number of layer packages which keep growing in number of classes, you get a growing number of application functionality packages with a smaller number of classes inside.","[('layer packages', 'have characteristic', 'fixed number'), ('layer packages', 'grow in', 'number of classes'), ('application functionality packages', 'have characteristic', 'growing number'), ('application functionality packages', 'contain', 'smaller number of classes')]"
"These packages contain classes for all kinds of purposes that programmers often need, like reading and writing files from the local hard disk, sending and receiving data over networks and the internet, connecting to databases, and many, many other things.","[('packages', 'contain', 'classes'), ('programmers', 'need', 'classes'), ('classes', 'purpose', 'reading files'), ('classes', 'purpose', 'writing files'), ('classes', 'purpose', 'sending data'), ('classes', 'purpose', 'receiving data'), ('classes', 'purpose', 'connecting to databases')]"
"When you compile all the source code in the source, the compiler produces one .class file for each .java file.","[('compiler', 'produces', '.class file'), ('source code', 'contained in', 'source'), ('.class file', 'corresponds to', '.java file')]"
It is the .class files that the Java Virtual Machine can execute.,"[('Java Virtual Machine', 'can execute', '.class files')]"
Therefore it is normal to separate the .java files from the .class files.,"[('.java files', 'are separated from', '.class files')]"
This is normally done by instructing the compiler to write the .class files into a separate directory.,"[('compiler', 'writes', '.class files'), ('.class files', 'located in', 'separate directory')]"
"This directory is often called classes, but again, it is not a requirement, and it depends on what build tool or IDE etc.","[('directory', 'often called', 'classes'), ('build tool', 'depends on', 'directory'), ('IDE', 'depends on', 'directory')]"
The *.java means the compiler should compile all files in the given directory.,"[('*.java', 'indicates', 'compiler should compile all files in the given directory')]"
"Once the compiler has done its job, the classes directory will contain the compiled .class files.","[('compiler', 'performs', 'job'), ('classes directory', 'will contain', 'compiled .class files')]"
The package structure (directory structure) from the source directory will be preserved under the class directory.,"[('package structure', 'preserved under', 'class directory'), ('package structure', 'from', 'source directory')]"
You can run any one of these .class files which have a main() method in it.,"[('.class files', 'contain', 'main() method'), ('You', 'can run', '.class files')]"
"You can run the .class from inside your Java IDE, or from the command line.","[('.class', 'can be run from', 'Java IDE'), ('.class', 'can be run from', 'command line')]"
The -cp classes flag tells the Java Virtual Machine that all your classes are located under the directory called classes.,"[('-cp classes flag', 'tells', 'Java Virtual Machine'), ('Java Virtual Machine', 'has classes located under', 'directory called classes')]"
The name of the class to run is the last argument in the above command - the myfirstapp.MyJavaApp part.,"[('class to run', 'name is', 'myfirstapp.MyJavaApp'), ('myfirstapp.MyJavaApp', 'part of', 'last argument'), ('last argument', 'in', 'above command')]"
The JVM needs to know the fully qualified class name (all packages plus class name) to determine where the corresponding .class file is located.,"[('JVM', 'needs to know', 'fully qualified class name'), ('fully qualified class name', 'includes', 'all packages'), ('fully qualified class name', 'includes', 'class name'), ('fully qualified class name', 'determines location of', '.class file')]"
When you run the the class your command line will look similar to this (including the output from the Java app):,"[('command line', 'includes output from', 'Java app')]"
A Java Record is a special kind of Java class which has a concise syntax for defining immutable data-only classes.,"[('Java Record', 'is a kind of', 'Java class'), ('Java Record', 'has syntax for', 'defining immutable data-only classes')]"
A Java Record consist of one or more data fields which corresponds to member variables in a regular Java class.,"[('Java Record', 'consists of', 'data fields'), ('data fields', 'correspond to', 'member variables'), ('member variables', 'are in', 'Java class')]"
"The Java compiler auto generates getter methods, toString(), hashcode() and equals() methods for these data fields, so you don't have to write that boilerplate code yourself.","[('Java compiler', 'auto generates', 'getter methods'), ('Java compiler', 'auto generates', 'toString()'), ('Java compiler', 'auto generates', 'hashcode()'), ('Java compiler', 'auto generates', 'equals()'), ('getter methods', 'for', 'data fields'), ('toString()', 'for', 'data fields'), ('hashcode()', 'for', 'data fields'), ('equals()', 'for', 'data fields')]"
"The Java compiler then generates the corresponding fields, getter methods and a hashCode() and equals() method.","[('Java compiler', 'generates', 'fields'), ('Java compiler', 'generates', 'getter methods'), ('Java compiler', 'generates', 'hashCode() method'), ('Java compiler', 'generates', 'equals() method')]"
You use a Java Record just like you use other Java classes - by creating instances of the record type using the Java new keyword.,"[('Java Record', 'used like', 'other Java classes'), ('Java Record', 'instances created using', 'Java new keyword')]"
"Notice how the Java compiler has generated a brand() method, a licensePlate() method and a toString() method for us.","[('Java compiler', 'generated', 'brand() method'), ('Java compiler', 'generated', 'licensePlate() method'), ('Java compiler', 'generated', 'toString() method')]"
"A Record type definition is final, meaning you cannot create subclasses (subrecords) of a Java Record type.","[('Record type definition', 'is', 'final'), ('Record type definition', 'cannot create', 'subclasses'), ('Record type definition', 'cannot create', 'subrecords'), ('subclasses', 'are', 'subrecords'), ('subrecords', 'are', 'subclasses'), ('subclasses', 'of', 'Java Record type'), ('subrecords', 'of', 'Java Record type')]"
You can add instance methods to a Java Record definition - just like you can with a regular Java class.,"[('instance methods', 'can be added to', 'Java Record definition'), ('instance methods', 'can be added to', 'regular Java class')]"
Here is an example of the Vehicle Java Record definition from earlier sections with an instance method named brandAsLowerCase() added:,"[('Vehicle Java Record', 'has instance method', 'brandAsLowerCase()')]"
Notice how the brandAsLowerCase() method calls the auto-generated brand() method internally.,"[('brandAsLowerCase()', 'calls method', 'brand()'), ('brand()', 'is called by', 'brandAsLowerCase()')]"
"That means, that even classes from different projects compiled separately, but which are used in the same application may share constant String objects.","[('classes', 'are from', 'different projects'), ('classes', 'are compiled', 'separately'), ('classes', 'are used in', 'same application'), ('classes', 'may share', 'constant String objects')]"
"As you can see, a new StringBuilder is created, passing along the first String to its constructor, and the second String to its append() method, before finally calling the toString() method.","[('StringBuilder', 'created with', 'first String'), ('StringBuilder', 'constructor receives', 'first String'), ('StringBuilder', 'append method receives', 'second String'), ('StringBuilder', 'toString method called on', 'StringBuilder')]"
This code actually creates two objects: A StringBuilder instance and a new String instance returned from the toString() method.,"[('code', 'creates', 'StringBuilder instance'), ('code', 'creates', 'String instance'), ('String instance', 'returned from', 'toString() method')]"
"The bigger the result String grows, the longer it takes to copy the characters from it into a new StringBuilder, and again copy the characters from the StringBuilder into the temporary String created by the toString() method.","[('result String', 'grows', 'bigger'), ('copy', 'takes longer', 'result String'), ('characters', 'copied from', 'result String'), ('characters', 'copied into', 'new StringBuilder'), ('characters', 'copied from', 'StringBuilder'), ('characters', 'copied into', 'temporary String'), ('temporary String', 'created by', 'toString() method')]"
You can obtain the length of a String using the length() method.,"[('String', 'has method', 'length()'), ('length()', 'determines', 'length of String')]"
You do so using the substring() method of the String class.,"[('substring()', 'method of', 'String class')]"
The last character in the string has has the index String.length() - 1.,"[('last character', 'has index', 'String.length() - 1'), ('character', 'located in', 'string')]"
You can search for substrings in Strings using the indexOf() method.,"[('indexOf() method', 'used for', 'searching substrings'), ('searching substrings', 'occurs in', 'Strings')]"
The indexOf() method returns the index of where the first character in the first matching substring is found.,"[('indexOf() method', 'returns', 'index'), ('index', 'indicates position of', 'first character'), ('first character', 'located in', 'first matching substring')]"
"If the substring is not found within the string, the indexOf() method returns -1;","[('substring', 'is not found within', 'string'), ('indexOf() method', 'returns', '-1')]"
There is a version of the indexOf() method that takes an index from which the search is to start.,"[('indexOf() method', 'has version', 'version of the indexOf() method'), ('version of the indexOf() method', 'takes', 'index'), ('search', 'starts from', 'index')]"
The Java String class also has a lastIndexOf() method which finds the last occurrence of a substring.,"[('Java String class', 'has method', 'lastIndexOf()'), ('lastIndexOf()', 'finds', 'last occurrence of a substring')]"
"The Java String matches() method takes a regular expression as parameter, and returns true if the regular expression matches the string, and false if not.","[('Java String matches() method', 'takes', 'regular expression'), ('Java String matches() method', 'returns', 'true if the regular expression matches the string'), ('Java String matches() method', 'returns', 'false if the regular expression does not match the string')]"
The equals() method tests if two Strings are exactly equal to each other.,"[('equals() method', 'tests if', 'two Strings are exactly equal to each other')]"
The String class also has a method called equalsIgnoreCase() which compares two strings but ignores the case of the characters.,"[('String class', 'has method', 'equalsIgnoreCase()'), ('equalsIgnoreCase()', 'compares', 'two strings'), ('equalsIgnoreCase()', 'ignores', 'case of the characters')]"
The startsWith() and endsWith() methods check if the String starts with a certain substring.,"[('startsWith()', 'method of', 'String'), ('endsWith()', 'method of', 'String'), ('startsWith()', 'checks if', 'String starts with a certain substring'), ('endsWith()', 'checks if', 'String ends with a certain substring')]"
"The compareTo() method compares the String to another String and returns an int telling whether this String is smaller, equal to or larger than the other String.","[('compareTo() method', 'compares', 'String'), ('compareTo() method', 'compares to', 'another String'), ('compareTo() method', 'returns', 'int'), ('int', 'indicates', 'whether this String is smaller, equal to or larger than the other String')]"
"If the String is earlier in sorting order than the other String, compareTo() returns a negative number.","[('String', 'is earlier in sorting order than', 'other String'), ('compareTo()', 'returns', 'negative number')]"
"If the String is equal in sorting order to the other String, compareTo() returns 0.","[('String', 'is equal in sorting order to', 'other String'), ('compareTo()', 'returns', '0')]"
"If the String is after the other String in sorting order, the compareTo() metod returns a positive number.","[('String', 'is after', 'other String'), ('compareTo() method', 'returns', 'positive number')]"
You should be aware that the compareTo() method may not work correctly for Strings in different languages than English.,"[('compareTo() method', 'may not work correctly for', 'Strings in different languages than English')]"
The Java String class contains a method called trim() which can trim a string object.,"[('Java String class', 'contains method', 'trim()'), ('trim()', 'can trim', 'string object')]"
The trim() method can be very useful to trim text typed into input fields by a user.,"[('trim() method', 'can be', 'useful'), ('trim() method', 'used to', 'trim text'), ('text', 'typed into', 'input fields'), ('input fields', 'used by', 'user')]"
The trim() method is an easy way to remove such extra white space characters.,"[('trim() method', 'is a way to', 'remove extra white space characters')]"
The Java String class contains a method named replace() which can replace characters in a String.,"[('Java String class', 'contains method', 'replace()'), ('replace()', 'can replace characters in', 'String')]"
The replace() method does not actually replace characters in the existing String.,"[('replace() method', 'does not replace characters in', 'existing String')]"
"The replace() method will replace all character matching the character passed as first parameter to the method, with the second character passed as parameter to the replace() method.","[('replace() method', 'replaces', 'character'), ('character', 'matches', 'first parameter'), ('replace() method', 'uses', 'second character'), ('second character', 'passed as', 'parameter')]"
The Java String replaceFirst() method returns a new String with the first match of the regular expression passed as first parameter with the string value of the second parameter.,"[('Java String replaceFirst() method', 'returns', 'new String'), ('regular expression', 'passed as', 'first parameter'), ('string value', 'passed as', 'second parameter')]"
The Java String replaceAll() method returns a new String with all matches of the regular expression passed as first parameter with the string value of the second parameter.,"[('Java String replaceAll() method', 'returns', 'new String'), ('new String', 'contains', 'all matches of the regular expression'), ('regular expression', 'passed as', 'first parameter'), ('new String', 'contains', 'string value of the second parameter')]"
The Java String class contains a split() method which can be used to split a String into an array of String objects.,"[('Java String class', 'contains', 'split() method'), ('split() method', 'used to', 'split a String into an array of String objects')]"
The parameter passed to the split() method is actually a Java regular expression.,"[('parameter', 'passed to', 'split() method'), ('parameter', 'is', 'Java regular expression')]"
The String split() method exists in a version that takes a limit as a second parameter.,"[('String split() method', 'exists in version', 'version that takes a limit as a second parameter')]"
Here is a Java String split() example using the limit parameter:,"[('Java', 'has method', 'String split()'), ('String split()', 'uses parameter', 'limit')]"
The Java String class contains a set of overloaded static methods named valueOf() which can be used to convert a number to a String.,"[('Java String class', 'contains', 'set of overloaded static methods'), ('set of overloaded static methods', 'named', 'valueOf()'), ('valueOf()', 'used to convert', 'number to a String')]"
"Since all Java classes extends (inherits from) the Object class, all objects have a toString() method.","[('Java classes', 'extends', 'Object class'), ('Java classes', 'inherits from', 'Object class'), ('objects', 'have', 'toString() method')]"
"Note: For the toString() method to return a sane String representation of the given object, the class of the object must have overridden the toString() method.","[('toString() method', 'returns', 'String representation'), ('class of the object', 'must have overridden', 'toString() method')]"
"If not, the default toString() method (inherited from the Object class) will get called.","[('toString() method', 'inherited from', 'Object class')]"
The default toString() method does not provide that much useful information.,"[('default toString() method', 'does not provide', 'much useful information')]"
It is possible to get a character at a certain index in a String using the charAt() method.,"[('charAt() method', 'used for', 'get a character at a certain index in a String')]"
You can also get the byte representation of the String method using the getBytes() method.,"[('String method', 'has byte representation', 'getBytes() method')]"
The first getBytes() call return a byte representation of the String using the default character set encoding on the machine.,"[('getBytes() call', 'returns', 'byte representation of the String'), ('byte representation of the String', 'uses', 'default character set encoding'), ('default character set encoding', 'located on', 'machine')]"
The second getBytes() call return a UTF-8 byte representation of the String.,"[('getBytes() call', 'returns', 'UTF-8 byte representation'), ('UTF-8 byte representation', 'represents', 'String')]"
You can convert Strings to uppercase and lowercase using the methods toUpperCase() and toLowerCase().,"[('Strings', 'can be converted to', 'uppercase'), ('Strings', 'can be converted to', 'lowercase'), ('toUpperCase()', 'method for', 'uppercase'), ('toLowerCase()', 'method for', 'lowercase')]"
From Java 13 the Java String class got a new method named formatted() which can be used to return a formatted version of the String formatted() is called on.,"[('Java 13', 'introduced method', 'formatted()'), ('Java String class', 'has method', 'formatted()'), ('formatted()', 'returns', 'formatted version of the String')]"
"The formatted() method is only a preview feature that was added together with Java Text Blocks in Java 13, so we do not yet know if it will stay in.","[('formatted() method', 'is a preview feature', 'Java 13'), ('formatted() method', 'added together with', 'Java Text Blocks'), ('Java Text Blocks', 'introduced in', 'Java 13')]"
Here is an example of using the Java String formatted() method:,"[('Java', 'has method', 'String formatted()')]"
The parameter values passed to formatted() will be inserted into the returned String at the %s location of the input String.,"[('parameter values', 'passed to', 'formatted()'), ('parameter values', 'inserted into', 'returned String'), ('%s location', 'part of', 'input String')]"
"From Java 13 the Java String class got a new method named stripIndent() which can be used to strip out indentation, similarly to how indentation is stripped out of Java Text Blocks.","[('Java String class', 'got new method', 'stripIndent()'), ('stripIndent()', 'used to', 'strip out indentation'), ('indentation', 'stripped out of', 'Java Text Blocks')]"
"The stripIndent() method is a preview feature, so we don't know if it will stay in Java yet.","[('stripIndent() method', 'is a', 'preview feature'), ('preview feature', 'status', 'unknown in Java')]"
Here is an example of using the new Java String stripIndent() method:,"[('Java', 'has method', 'String stripIndent()')]"
From Java 13 the Java String class got a new method called translateEscapes() which can translate escape codes that exist inside a String in the same way the Java compiler translates them.,"[('Java String class', 'got new method', 'translateEscapes()'), ('translateEscapes()', 'can translate', 'escape codes'), ('escape codes', 'exist inside', 'String'), ('Java compiler', 'translates', 'escape codes')]"
"For now, the translateEscapes() is a preview feature, so it is not yet sure that it will stay in Java.","[('translateEscapes()', 'is a', 'preview feature'), ('translateEscapes()', 'may not', 'stay in Java')]"
Here is an example of using the Java String translateEscapes() method:,"[('Java', 'has method', 'String translateEscapes()')]"
When calling the translateEscapes() method the \n part of the text will now be interpreted as a line break escape code.,"[('translateEscapes() method', 'interprets', '\\n part of the text'), ('\\n part of the text', 'interpreted as', 'line break escape code')]"
The String class has several other useful methods than the ones described in this tutorial.,"[('String class', 'has method', 'useful methods'), ('useful methods', 'described in', 'this tutorial')]"
"The result of this is, that execution just ""falls through"" to the operation of the next case statement ( and the next etc.)",
All Java code must reside inside a file with the extension .java .,"[('Java code', 'must reside inside', 'file'), ('file', 'has extension', '.java')]"
"Below is an example .java file that contains all of the above elements, so you can see the basic syntax of a .java file:","[('.java file', 'contains', 'elements'), ('example', 'is a type of', '.java file')]"
The .java file should be located in a directory structure that matches the package name.,"[('.java file', 'should be located in', 'directory structure'), ('directory structure', 'matches', 'package name')]"
"Please note, that the code example does not actually use the Java HashMap class anywhere.","[('code example', 'does not use', 'Java HashMap class')]"
Of course you should not import classes you do not use in a real project.,"[('you', 'should not import', 'classes'), ('classes', 'used in', 'real project')]"
"In Java a type is either a class, an abstract class an interface, an enum or an annotation.","[('type', 'is a', 'class'), ('type', 'is a', 'abstract class'), ('type', 'is a', 'interface'), ('type', 'is a', 'enum'), ('type', 'is a', 'annotation')]"
A type (class / interface / enum) can have more than one field.,"[('type', 'can have', 'field'), ('class', 'is a type of', 'type'), ('interface', 'is a type of', 'type'), ('enum', 'is a type of', 'type')]"
The fifth line (or block of lines) is a class initializer block.,"[('fifth line', 'is a', 'class initializer block')]"
Inside this block you can put initialization code that is to be executed a instance of the class is created.,"[('initialization code', 'is put inside', 'this block'), ('initialization code', 'is executed when', 'instance of the class is created')]"
"Then they are executed already when the class is loaded, and only once because the class is only loaded in the Java Virtual Machine once.","[('class', 'is loaded in', 'Java Virtual Machine'), ('class', 'is executed when', 'class is loaded'), ('class', 'is loaded', 'once'), ('Java Virtual Machine', 'loads', 'class')]"
"Constructors are similar to class initializers, except they can take parameters.","[('Constructors', 'are similar to', 'class initializers'), ('Constructors', 'can take', 'parameters')]"
"A class can have more than one constructor, although this example just shows one.","[('class', 'can have', 'more than one constructor'), ('example', 'shows', 'one constructor')]"
When you create an instance of a class (an object) the object can have methods you can execute.,"[('instance', 'is a', 'object'), ('object', 'can have', 'methods'), ('methods', 'can execute', 'object')]"
"A static method belongs to the class, not objects of the class.","[('Static method', 'belongs to', 'Class'), ('Static method', 'does not belong to', 'Objects of the class')]"
That means that you can call a static method without having an object of the class the static method belongs to.,"[('static method', 'can be called without', 'object of the class')]"
"In the example above, if case.equals(""uppercase"") evaluates to true then the ternary operator expression as a whole returns the String value JOHN.",
"If case.equals(""uppercase"") evaluates to false then the ternary operator expression as a whole returns the String value john.",
"That means, that the String variable name will end up having the value JOHN or john depending on whether the expression case.equals(""uppercase"") evaluates to true or false.",
"As you can see, both of these code examples avoid calling object.getValue() if the object reference is null, but the first code example is a bit shorter and more elegant.","[('code examples', 'avoid', 'calling object.getValue() if the object reference is null'), ('first code example', 'is a bit shorter and more elegant than', 'second code example')]"
You can achieve the same functionality as the Java Math max() function using a Java ternary operator.,"[('Java Math max() function', 'functionality', 'Java ternary operator')]"
Here is an example of achieving the Math.max() functionality using a Java ternary operator:,"[('Math.max() functionality', 'achieved by', 'Java ternary operator')]"
The Java ternary operator can also be used to achieve the same effect as the Java Math min() function.,"[('Java ternary operator', 'can achieve same effect as', 'Java Math min() function')]"
Here is an example of achieving the Math.min() functionality using a Java ternary operator:,"[('Math.min() functionality', 'achieved by', 'Java ternary operator')]"
The Java ternary operator can also be used to achieve the same effect as the Java Math abs() function.,"[('Java ternary operator', 'can achieve same effect as', 'Java Math abs() function')]"
Here is an example of achieving the Math.abs() functionality using a Java ternary operator:,"[('Math.abs()', 'functionality achieved by', 'Java ternary operator')]"
"If the input String is not equal to the empty String, the second ternary operator returns the value of Integer.parseInt(input) .","[('input String', 'is not equal to', 'empty String'), ('second ternary operator', 'returns the value of', 'Integer.parseInt(input)')]"
"This can be any kind of information ranging from texts, codes (e.g.","[('information', 'can be', 'texts'), ('information', 'can be', 'codes')]"
"In the code example below, the main() method contains the declaration of a single integer variable named number.","[('main() method', 'contains', 'declaration of a single integer variable'), ('integer variable', 'named', 'number')]"
"Non-static fields are also called instance variables, because they belong to instances (objects) of a class.","[('Non-static fields', 'also called', 'instance variables'), ('Non-static fields', 'belong to', 'instances'), ('instances', 'are', 'objects'), ('objects', 'of', 'a class')]"
A static field is a variable that belongs to a class.,"[('Static field', 'is a', 'variable'), ('Static field', 'belongs to', 'class')]"
The second line assigns the floating point value 199.99 to the floating point variable named myFloat.,"[('second line', 'assigns', 'floating point value 199.99'), ('floating point value 199.99', 'assigned to', 'floating point variable'), ('floating point variable', 'named', 'myFloat')]"
"In this example, only the first System.out.println() statement is executed inside the while loop.","[('System.out.println() statement', 'executed inside', 'while loop')]"
The second System.out.println() statement is not executed until after the while loop is finished.,"[('second System.out.println() statement', 'not executed until after', 'while loop is finished')]"
"This is typically done via a command line interface (CLI), like e.g.","[('command line interface', 'is a type of', 'CLI')]"
On the command line you tell the JVM what Java class (bytecode) to execute.,"[('command line', 'instructs', 'JVM'), ('JVM', 'executes', 'Java class (bytecode)')]"
Only the full Java SDK contains the Java compiler which turns your .java source files into byte code .class files.,"[('Java SDK', 'contains', 'Java compiler'), ('Java compiler', 'turns', '.java source files into byte code .class files')]"
"Additionally, some Java servers may need some of the tools in the JDK to e.g.","[('Java servers', 'may need', 'tools in the JDK')]"
"The Java Code Conventions are a set of conventions for how to format your Java code, and how to name classes, variables, files etc.","[('Java Code Conventions', 'are a set of conventions for', 'how to format Java code'), ('Java Code Conventions', 'are a set of conventions for', 'how to name classes'), ('Java Code Conventions', 'are a set of conventions for', 'how to name variables'), ('Java Code Conventions', 'are a set of conventions for', 'how to name files')]"
JavaFX was inspired by Flex (Flash) and Silverlight for .NET (Microsoft).,"[('JavaFX', 'inspired by', 'Flex'), ('JavaFX', 'inspired by', 'Silverlight'), ('Flex', 'technology', 'Flash'), ('Silverlight', 'technology', '.NET'), ('Silverlight', 'developed by', 'Microsoft')]"
In this tutorial I will show you how to make your first Java app with IntelliJ IDEA community edition (free) version 2019.3.3.,"[('tutorial', 'will show', 'how to make your first Java app'), ('Java app', 'made with', 'IntelliJ IDEA community edition'), ('IntelliJ IDEA community edition', 'version', '2019.3.3'), ('IntelliJ IDEA community edition', 'cost', 'free')]"
"How you do that depends on what operating system you are running (Windows, Mac, Linux etc.)","[('You', 'depends on', 'operating system'), ('operating system', 'includes', 'Windows'), ('operating system', 'includes', 'Mac'), ('operating system', 'includes', 'Linux')]"
"A Java package is just a directory inside which you can put one or more Java files (class, interface, annotation, enum etc.","[('Java package', 'is a type of', 'directory'), ('Java package', 'contains', 'Java files'), ('Java files', 'can be', 'class'), ('Java files', 'can be', 'interface'), ('Java files', 'can be', 'annotation'), ('Java files', 'can be', 'enum')]"
Now you must create a new class inside your newly created package.,"[('you', 'must create', 'new class'), ('new class', 'inside', 'newly created package')]"
"In the dialog that opens, type in a name for your new Java class.","[('dialog', 'action', 'opens'), ('name', 'used for', 'new Java class')]"
"It is custom to have class names start with an uppercase character followed by lowercase characters, and a new uppercase character for each new word in the class name.","[('class names', 'custom to start with', 'uppercase character'), ('class names', 'followed by', 'lowercase characters'), ('new word in the class name', 'start with', 'uppercase character')]"
"When you have typed in a name for your new Java class, click the ""OK"" button.",
"Once you have created the new class, it will be empty.","[('you', 'create', 'new class'), ('new class', 'will be', 'empty')]"
The part inside the /* ... */ are comments and are not part of the executed Java code.,"[('/* ... */', 'are', 'comments'), ('comments', 'are not part of', 'executed Java code')]"
Before you can run your Java app you need to insert a main() method into the class.,"[('you', 'can run', 'Java app'), ('you', 'need to insert', 'main() method'), ('main() method', 'inserted into', 'class')]"
Now your are ready to run your newly created Java class.,"[('You', 'are ready to run', 'newly created Java class')]"
"You do so by right clicking the class source code in the editor, and choose ""Run..."", like this:",
"When you click the ""Run..."" option, IntelliJ IDEA will first compile your Java class, and then run it.",
"After you have executed the Java class main method, you will see an output at the bottom of the IntelliJ IDEA window similar to this:","[('Java class', 'has method', 'main method'), ('main method', 'produces', 'output'), ('output', 'appears at', 'bottom of IntelliJ IDEA window')]"
"Don't worry if you don't yet understand what a main() method is, or classes, or packages.","[('main() method', 'is a type of', 'method'), ('classes', 'are a type of', 'programming concept'), ('packages', 'are a type of', 'programming concept')]"
The most common way of using the Java Logging API is to create a Logger in each class that needs to log.,"[('Java Logging API', 'used for', 'create a Logger'), ('Logger', 'created in', 'each class'), ('each class', 'needs', 'to log')]"
"This instance is typically made static and final, meaning all instances of that class use the same Logger instance.","[('instance', 'is made', 'static'), ('instance', 'is made', 'final'), ('all instances of that class', 'use', 'same Logger instance')]"
"As you can see from this example, it is common practice to use the class name including package name as name for the Logger.","[('class name', 'includes', 'package name'), ('class name including package name', 'used as', 'name for the Logger')]"
The name of the Logger to create is passed as string parameter to the Logger.getLogger() method.,"[('Logger', 'has method', 'getLogger()'), ('getLogger()', 'takes parameter', 'name of the Logger'), ('name of the Logger', 'is passed as', 'string')]"
"For instance, ordinary debug trace logging calls to entering() and exiting() would be called at the beginning and end of a method call.","[('debug trace logging', 'calls to', 'entering()'), ('debug trace logging', 'calls to', 'exiting()'), ('entering()', 'occurs at', 'beginning of a method call'), ('exiting()', 'occurs at', 'end of a method call')]"
The initialization of the configuration is taken care of by the java.util.logging.LogManager class.,"[('java.util.logging.LogManager', 'takes care of', 'initialization of the configuration')]"
You can use a Java class to configure the Java Logging API.,"[('Java class', 'used to configure', 'Java Logging API')]"
You do so by specifying the name of the class in the JVM parameter java.util.logging.config.class.,"[('java.util.logging.config.class', 'contains', 'name of the class')]"
It is the constructor of that class that should load the configuration and apply it to the Logger's in the hierarchy.,"[('constructor', 'associated with', 'class'), ('constructor', 'loads', 'configuration'), ('constructor', 'applies to', ""Logger's in the hierarchy"")]"
"If no configuration class is specified, you can instead specify a configuration file (but no configuration class can be specified then!","[('configuration class', 'can be', 'specified'), ('configuration file', 'can be', 'specified'), ('configuration class', 'cannot be', 'specified')]"
"The Java Logging API has a default logging configuration file located at ""lib/logging.properties"", inside the JRE directory.",
You do so by setting the JVM property java.util.logging.config.file to point to this file.,"[('JVM property', 'setting', 'java.util.logging.config.file'), ('java.util.logging.config.file', 'points to', 'this file')]"
You should double check the JavaDoc over time to see if any of this changes (e.g.,"[('JavaDoc', 'should be double checked', 'over time')]"
"If the isLoggable() method returns false, the LogRecord is not logged.","[('isLoggable() method', 'returns', 'false')]"
The Handler's in the Java Logging API use a java.util.logging.Formatter to format the LogRecord's before writing it to an external system.,"[('Handler', 'part of', 'Java Logging API'), ('Java Logging API', 'uses', 'java.util.logging.Formatter'), ('java.util.logging.Formatter', 'formats', ""LogRecord's""), (""LogRecord's"", 'written to', 'external system')]"
"The various Handler's in the Java Logging API use either of these two Formatter's by default, but you can also set your own custom Formatter subclass on a Handler.","[('Handler', 'uses', 'Formatter'), ('Java Logging API', 'contains', 'Handler'), ('Formatter', 'can be set on', 'Handler')]"
You can create your own Formatter by subclassing the java.util.logging.Formatter class.,"[('Formatter', 'can be created by subclassing', 'java.util.logging.Formatter')]"
The subclass must override the abstract format() method in the Formatter class.,"[('Subclass', 'must override', 'abstract format() method'), ('abstract format() method', 'in class', 'Formatter class')]"
The String returned by the format() is what is forwarded to the external system by the Handler.,"[('format()', 'returns', 'String'), ('String', 'forwarded to', 'external system'), ('Handler', 'forwards', 'String')]"
The Formatter class also contains the convenience method formatMessage() which can be used to format the message using the ResourceBundle of the LogRecord.,"[('Formatter class', 'contains method', 'formatMessage()'), ('formatMessage()', 'used to', 'format the message'), ('format the message', 'using', 'ResourceBundle of the LogRecord')]"
By default the ConsoleHandler uses a SimpleFormatter to format the messages before writing them to System.err.,"[('ConsoleHandler', 'uses', 'SimpleFormatter'), ('SimpleFormatter', 'formats', 'messages'), ('ConsoleHandler', 'writes to', 'System.err')]"
"If no %g code has been specified and the file count of the FileHandler is greater than 1, then the generation number (file sequence number) will be appended to the end of the file name, after a dot (.)","[('file count', 'of', 'FileHandler'), ('file count', 'is greater than', '1'), ('generation number', 'appended to', 'end of the file name'), ('generation number', 'is', 'file sequence number'), ('generation number', 'appended after', 'dot (.)')]"
You must set one using the method setOutputStream() before using the handler.,"[('You', 'must set', 'one'), ('one', 'using method', 'setOutputStream()'), ('You', 'using', 'handler')]"
You can also call the push() method to force the LogRecord's in the buffer to be flushed to the target Handler.,"[('push() method', 'can be called to', ""force LogRecord's in the buffer to be flushed to the target Handler"")]"
This class contains a constant for each of the above log levels.,"[('This class', 'contains', 'constant'), ('constant', 'for each of', 'above log levels')]"
When you create a Logger you pass a name to the Logger.getLogger() method.,"[('Logger', 'created by', 'Logger.getLogger() method'), ('Logger.getLogger() method', 'receives', 'name')]"
(Note: These levels are different from the log levels of the messages logged.).,"[('levels', 'different from', 'log levels')]"
If you call getParent() on that Logger you will get the Logger with the name com.,"[('Logger', 'method', 'getParent()'), ('getParent()', 'returns', 'Logger with the name com'), ('Logger with the name com', 'name', 'com')]"
"... and call getParent() method, you will get the Logger with the name """".",
"The third message is being logged three times: Once by the 1.2 Logger, once by the 1 Logger, and once by the root Logger.","[('third message', 'is being logged by', '1.2 Logger'), ('third message', 'is being logged by', '1 Logger'), ('third message', 'is being logged by', 'root Logger')]"
"Notice though, that the message propagated up the hierarchy from the Logger named 1.2 is still logged by the middle Logger, and still forwarded up to the root Logger.","[('Logger named 1.2', 'propagates message up', 'hierarchy'), ('message', 'logged by', 'middle Logger'), ('message', 'forwarded up to', 'root Logger')]"
"Another peculiar result of the above code is, that the INFO message passed to the bottom Logger (named 1.2) is also ignored, and not propagated.","[('INFO message', 'passed to', 'bottom Logger'), ('bottom Logger', 'named', '1.2'), ('INFO message', 'is', 'ignored'), ('INFO message', 'not propagated', 'bottom Logger')]"
"In order to enable all INFO messages to be logged from the bottom Logger (named 1.2), even if the middle Logger has a log level of WARNING, we add the following to the code (in bold):","[('INFO messages', 'can be logged from', 'bottom Logger'), ('bottom Logger', 'has name', '1.2'), ('middle Logger', 'has log level', 'WARNING')]"
"The result of this code is that the INFO message logged on the bottom Logger (named 1.2) is now logged, but it is still not propagated up the hierarchy.","[('INFO message', 'logged on', 'Logger (named 1.2)'), ('INFO message', 'is', 'logged'), ('INFO message', 'is not', 'propagated up the hierarchy')]"
The java.util.Logger class is the main access point to the Java logging API.,"[('java.util.Logger', 'is the main access point to', 'Java logging API')]"
The string passed as parameter to the getLogger() factory method is the name of the Logger to create.,"[('string', 'passed as parameter to', 'getLogger() factory method'), ('getLogger() factory method', 'creates', 'Logger'), ('Logger', 'has name', 'string')]"
"The two names ""myApp.user"" and ""myApp.admin"" are children of the ""myApp"" name.",
"The name ""myApp.admin.import.user"" is a branch of the name ""myApp.admin.import"", which is again a branch of the ""myApp.admin"" name.",
"You can obtain the name of a Logger using the getName() method, in case you need it.","[('Logger', 'has method', 'getName()'), ('getName()', 'used for', 'obtain the name of a Logger')]"
"It is convention to use the class name of the class creating the Logger, including package name, as name for the Logger.","[('class', 'creates', 'Logger'), ('class', 'has name', 'class name'), ('class name', 'includes', 'package name'), ('class name', 'used as', 'name for the Logger')]"
The log() group of methods will log a message at a certain log level.,"[('log() group of methods', 'will log', 'message'), ('message', 'at', 'certain log level')]"
"As mentioned earlier, the number inside the token refers to the index of the object parameter to insert, in the object parameter array passed to the log() message.","[('number', 'refers to', 'index of the object parameter'), ('index of the object parameter', 'to insert in', 'object parameter array'), ('object parameter array', 'passed to', 'log() message')]"
"The logp() methods work like the log() methods, except each method take an extra two parameters: The sourceClass and sourceMethod parameter.","[('logp() methods', 'work like', 'log() methods'), ('logp() methods', 'take extra parameters', 'sourceClass'), ('logp() methods', 'take extra parameters', 'sourceMethod')]"
These two parameters are intended to tell from what class and method the log message originated.,"[('log message', 'originated from', 'class'), ('log message', 'originated from', 'method')]"
"In other words, which class and method was the ""source"" of the log message.",
"The logrb() methods work like the log() methods too, except they can obtain the log messages from a resource bundle.","[('logrb() methods', 'work like', 'log() methods'), ('logrb() methods', 'can obtain', 'log messages'), ('log messages', 'from', 'resource bundle')]"
This example looks up a message in the resource bundle named resources.myresources by the key key1.,"[('message', 'looked up in', 'resource bundle'), ('resource bundle', 'named', 'resources.myresources'), ('message', 'identified by', 'key1')]"
"For instance, finest(), finer(), fine(), info(), warning() and severe() each corresponds to one of the log levels.","[('finest()', 'corresponds to', 'log level'), ('finer()', 'corresponds to', 'log level'), ('fine()', 'corresponds to', 'log level'), ('info()', 'corresponds to', 'log level'), ('warning()', 'corresponds to', 'log level'), ('severe()', 'corresponds to', 'log level')]"
Logging message using one of these methods corresponds to calling the log() method,"[('Logging message', 'method', 'calling the log() method')]"
You can add Handler's to the Logger using the addHandler() method.,"[('Logger', 'method', 'addHandler()'), ('addHandler()', 'adds', ""Handler's"")]"
"You can obtain all Handler's of a Logger using the getHandlers() method, like this:","[('Logger', 'has method', 'getHandlers()'), ('getHandlers()', 'obtains', ""Handler's of a Logger"")]"
"You set the Filter on a Logger using the setFilter() method, like this:","[('Filter', 'applies to', 'Logger'), ('setFilter()', 'method of', 'Logger'), ('setFilter()', 'sets', 'Filter')]"
The class MyFilterImpl should be your own implementation of the Filter interface.,"[('MyFilterImpl', 'instance of', 'Filter interface')]"
"You can obtain the Filter in use by calling the getFilter() method, like this:","[('getFilter() method', 'can obtain', 'Filter in use')]"
"This example sets the minimum log level of messages to be forwarded, to Level.INFO.","[('example', 'sets minimum log level', 'Level.INFO'), ('messages', 'to be forwarded', 'Level.INFO')]"
You can obtain the log level of a Logger using the getLevel() method:,"[('Logger', 'has method', 'getLevel()'), ('getLevel()', 'obtains', 'log level')]"
You can obtain the parent Logger of a given Logger using the getParent() method.,"[('Logger', 'has method', 'getParent()'), ('getParent()', 'obtains', 'parent Logger')]"
You can check if a Logger forwards log messages to its parent Logger using the method getUseParentHandlers().,"[('Logger', 'forwards log messages to', 'parent Logger'), ('Logger', 'method', 'getUseParentHandlers()')]"
The Logger class has a few more methods that I haven't covered here.,"[('Logger class', 'has method', 'more methods')]"
"The java.util.logging.LogManager manages the internal Logger hierarchy, and initiates the configuration of the Logger's, either through the configuration class or configuration file.","[('java.util.logging.LogManager', 'manages', 'internal Logger hierarchy'), ('java.util.logging.LogManager', 'initiates configuration of', ""Logger's""), (""Logger's"", 'configured through', 'configuration class'), (""Logger's"", 'configured through', 'configuration file')]"
"The first method on the LogManager simply re-reads the configuration from file (or class), in case these has changed.","[('LogManager', 'has method', 'first method'), ('first method', 'action', 're-reads configuration'), ('configuration', 'source', 'file'), ('configuration', 'source', 'class'), ('first method', 'purpose', 'in case these has changed')]"
You can also get access to an MXBean (Java Management Extensions) from the LogManager using the method getLoggingMXBean().,"[('LogManager', 'provides access to', 'MXBean'), ('LogManager', 'uses method', 'getLoggingMXBean()')]"
"The LogRecord contains the following getter methods, which can be used in e.g.","[('LogRecord', 'contains', 'getter methods')]"
The getLevel() method returns the log level the message represented by this LogRecord was logged with.,"[('getLevel()', 'returns', 'log level'), ('message', 'represented by', 'LogRecord'), ('message', 'logged with', 'log level')]"
The getLoggerName() method returns the name of the Logger that logged this LogRecord.,"[('getLoggerName()', 'returns', 'name of the Logger'), ('Logger', 'logged', 'LogRecord')]"
The getMillis() method returns the time in milliseconds this LogRecord was recorded.,"[('getMillis() method', 'returns', 'time in milliseconds'), ('time in milliseconds', 'recorded in', 'LogRecord')]"
The getParameters() method returns the parameters to be inserted into the message of this LogRecord.,"[('getParameters() method', 'returns', 'parameters'), ('parameters', 'to be inserted into', 'message of this LogRecord')]"
The getResourceBundle() method returns the ResourceBundle (if any) used to localize the message of this LogRecord.,"[('getResourceBundle()', 'returns', 'ResourceBundle'), ('ResourceBundle', 'used to', 'localize the message of LogRecord')]"
The getResourceBundleName() method returns the name of the ResourceBundle (if any) used to localize the message of this LogRecord.,"[('getResourceBundleName()', 'returns', 'name of the ResourceBundle'), ('ResourceBundle', 'used to', 'localize the message of this LogRecord')]"
The getSequenceNumber() method returns a sequence number generated internally in the LogRecord constructor when the LogRecord is created.,"[('getSequenceNumber() method', 'returns', 'sequence number'), ('sequence number', 'generated in', 'LogRecord constructor'), ('LogRecord constructor', 'creates', 'LogRecord')]"
The getSourceClassName() returns the class name of the class logging the message represented by this LogRecord.,"[('getSourceClassName()', 'returns', 'class name'), ('class name', 'belongs to', 'class'), ('class', 'logs', 'message'), ('message', 'represented by', 'LogRecord')]"
The getSourceMethodName() returns the method name of the method logging the message represented by this LogRecord.,"[('getSourceMethodName()', 'returns', 'method name'), ('method name', 'belongs to', 'method logging the message'), ('method logging the message', 'represented by', 'LogRecord')]"
The getThreadID() method returns the ID of the thread logging the message represented by this LogRecord.,"[('getThreadID()', 'returns', 'ID'), ('ID', 'associated with', 'thread'), ('thread', 'logs', 'message'), ('message', 'represented by', 'LogRecord')]"
The getThrown() method returns the Throwable that was marked thrown when logging the message represented by this LogRecord.,"[('getThrown() method', 'returns', 'Throwable'), ('Throwable', 'marked thrown when logging', 'message'), ('message', 'represented by', 'LogRecord')]"
In this text I will try to give you an overview of the java.util.logging API.,"[('java.util.logging API', 'is overviewed in', 'this text')]"
This tutorial is about Javas built-in logging API in the java.util.logging package.,"[('tutorial', 'topic', 'Java built-in logging API'), ('Java built-in logging API', 'located in', 'java.util.logging package')]"
"Note: This tutorial does not cover the other popular Java logging API's (Log4J, SLF4J, Apache Commons Logging, LogBack etc.).","[('This tutorial', 'does not cover', 'Log4J'), ('This tutorial', 'does not cover', 'SLF4J'), ('This tutorial', 'does not cover', 'Apache Commons Logging'), ('This tutorial', 'does not cover', 'LogBack')]"
"If you can choose your own logging API freely, you may choose one of these other, popular logging API's instead of java.util.logging.","[('you', 'can choose', 'logging API'), ('logging API', 'type', 'java.util.logging'), ('logging API', 'alternative', 'other popular logging API')]"
"However, if you are running your web applications on Google App Engine, like I do, then you have to use the java.util.logging API.","[('web applications', 'run on', 'Google App Engine'), ('I', 'use', 'Google App Engine'), ('Google App Engine', 'requires', 'java.util.logging API')]"
Instances of this class are used together with UDP DatagramSockets and normal Socket's and ServerSocket's.,"[('Instances of this class', 'used together with', 'UDP DatagramSockets'), ('Instances of this class', 'used together with', ""normal Socket's""), ('Instances of this class', 'used together with', ""ServerSocket's"")]"
The InetAddress class has a lot of additional methods you can use.,"[('InetAddress class', 'has additional methods', 'methods')]"
"For instance, you can obtain the IP address as a byte array by calling getAddress() etc.","[('you', 'can obtain', 'IP address'), ('IP address', 'form', 'byte array'), ('you', 'can obtain by calling', 'getAddress()')]"
"To learn more about these methods, it is easier to read the JavaDoc for the InetAddress class though.","[('JavaDoc', 'provides information about', 'InetAddress class'), ('InetAddress class', 'has documentation in', 'JavaDoc')]"
Java's JarURLConnection class is used to connect to a Java Jar file.,"[('JarURLConnection', 'used to connect to', 'Java Jar file')]"
"Of course, sometimes this protocol is already have been decided for you, e.g.","[('protocol', 'is decided for', 'you')]"
Sending the header in a separate roundtrip (the first) can be smart if the server can do some initial pre-validation of e.g.,"[('header', 'sent in', 'separate roundtrip'), ('separate roundtrip', 'type', 'first'), ('server', 'can do', 'initial pre-validation')]"
"In order to implement a Java server that listens for incoming connections from clients via TCP/IP, you need to use a java.net.ServerSocket .","[('Java server', 'listens for', 'incoming connections'), ('incoming connections', 'from', 'clients'), ('Java server', 'uses', 'java.net.ServerSocket'), ('connections', 'via', 'TCP/IP')]"
"In case you prefer to use Java NIO instead of Java Networking (standard API), then you can also use a ServerSocketChannel instead of the java.net.ServerSocket.","[('Java NIO', 'alternative to', 'Java Networking'), ('Java NIO', 'uses', 'ServerSocketChannel'), ('Java Networking', 'uses', 'java.net.ServerSocket')]"
In order to accept incoming connections you must call the ServerSocket.accept() method.,"[('ServerSocket', 'has method', 'accept()'), ('accept()', 'used for', 'accept incoming connections')]"
The accept() method returns a Socket which behaves like an ordinary Java Socket.,"[('accept() method', 'returns', 'Socket'), ('Socket', 'behaves like', 'ordinary Java Socket')]"
Only one incoming connection is opened for each call to the accept() method.,"[('incoming connection', 'is opened for', 'each call to the accept() method')]"
"Additionally, incoming connections can only be accepted while the thread running the server has called accept().","[('incoming connections', 'can be accepted while', 'thread running the server has called accept()')]"
"In order to connect to a server over the internet (via TCP/IP) in Java, you need to create a java.net.Socket and connect it to the server.","[('java.net.Socket', 'used to connect to', 'server'), ('connection', 'protocol', 'TCP/IP'), ('connection', 'occurs over', 'internet')]"
This code example connects to the server with IP address 78.46.84.171 on port 80.,"[('code example', 'connects to', 'server'), ('server', 'has IP address', '78.46.84.171'), ('server', 'uses port', '80')]"
"Don't forget to call flush() when you really, really want the data sent across the internet to the server.","[('you', 'should call', 'flush()'), ('flush()', 'action', 'send data'), ('data', 'destination', 'server'), ('data', 'transmission medium', 'internet')]"
The getByName() method returns an InetAddress instance with the IP address matching the given host name.,"[('getByName() method', 'returns', 'InetAddress instance'), ('InetAddress instance', 'has', 'IP address'), ('IP address', 'matches', 'given host name')]"
Receiving data via a DatagramSocket is done by first creating a DatagramPacket and then receiving data into it via the DatagramSocket's receive() method.,"[('DatagramSocket', 'receives data via', 'receive() method'), ('DatagramPacket', 'is created for', 'receiving data'), ('DatagramSocket', 'receives data into', 'DatagramPacket')]"
"A real server program would probably call the receive() method in a loop, and pass all received DatagramPacket's to a pool of worker threads, just like a TCP server does with incoming connections (see Java Multithreaded Servers for more details).","[('real server program', 'calls method', 'receive()'), ('real server program', 'passes DatagramPacket', 'pool of worker threads'), ('TCP server', 'handles', 'incoming connections'), ('Java Multithreaded Servers', 'provides details on', 'TCP server')]"
The java.net package contains two interesting classes: The URL class and the URLConnection class.,"[('java.net package', 'contains', 'URL class'), ('java.net package', 'contains', 'URLConnection class')]"
These classes can be used to create client connections to web servers (HTTP servers).,"[('These classes', 'can be used to create', 'client connections'), ('client connections', 'to', 'web servers'), ('web servers', 'are', 'HTTP servers')]"
"If you want to send an HTTP POST request instead, call the URLConnection.setDoOutput(true) method, like this:","[('URLConnection', 'has method', 'setDoOutput'), ('setDoOutput', 'is called with argument', 'true'), ('HTTP POST request', 'is sent by', 'URLConnection')]"
The URL class can also be used to access files in the local file system.,"[('URL class', 'can be used to access', 'files'), ('files', 'located in', 'local file system')]"
"Thus the URL class can be a handy way to open a file, if you need your code to not know whether the file came from the network or local file system.","[('URL class', 'can be', 'handy way to open a file'), ('code', 'need to not know', 'whether the file came from the network or local file system')]"
Here is an example of how to open a file in the local file system using the URL class:,"[('URL class', 'used for', 'open a file'), ('file', 'located in', 'local file system')]"
"Notice how the only difference from accessing a file on a web server via HTTP is the the URL: ""file:/c:/data/test.txt"".",
"Even though the Java Networking APIs enable you to open and close network connections via sockets, all communication happens via the Java IO classes InputStream and OutputStream.","[('Java Networking APIs', 'enable', 'open and close network connections via sockets'), ('communication', 'happens via', 'Java IO classes'), ('Java IO classes', 'include', 'InputStream'), ('Java IO classes', 'include', 'OutputStream')]"
Alternatively you can use the networking classes in the Java NIO API.,"[('networking classes', 'can be used in', 'Java NIO API')]"
"These classes are similar to the classes found in the Java Networking API, except the Java NIO API can work in non-blocking mode.","[('These classes', 'are similar to', 'the classes found in the Java Networking API'), ('Java NIO API', 'can work in', 'non-blocking mode')]"
The first parameter to the open() method is a Path instance pointing to the file the AsynchronousFileChannel is to be associated with.,"[('open() method', 'has parameter', 'Path instance'), ('Path instance', 'points to', 'file'), ('AsynchronousFileChannel', 'associated with', 'file')]"
In this example we used the StandardOpenOption.READ which means that the file will be opened for reading.,"[('StandardOpenOption.READ', 'used in', 'example'), ('StandardOpenOption.READ', 'means', 'file will be opened for reading')]"
Each way to read data call one of the read() methods of the AsynchronousFileChannel.,"[('way to read data', 'calls method', 'read() methods'), ('read() methods', 'part of', 'AsynchronousFileChannel')]"
The first way to read data from an AsynchronousFileChannel is to call the read() method that returns a Future.,"[('AsynchronousFileChannel', 'has method', 'read()'), ('read()', 'returns', 'Future')]"
This version of the read() method takes ByteBuffer as first parameter.,"[('read() method', 'takes', 'ByteBuffer')]"
"The read() method return immediately, even if the read operation has not finished.","[('read() method', 'action', 'return immediately'), ('read operation', 'status', 'not finished')]"
You can check the when the read operation is finished by calling the isDone() method of the Future instance returned by the read() method.,"[('read operation', 'is finished by', 'calling isDone() method'), ('isDone() method', 'belongs to', 'Future instance'), ('Future instance', 'is returned by', 'read() method')]"
Here is a longer example showing how to use this version of the read() method:,"[('read() method', 'has version', 'this version')]"
"This example creates an AsynchronousFileChannel and then creates a ByteBuffer which is passed to the read() method as parameter, along with a position of 0.","[('AsynchronousFileChannel', 'creates', 'ByteBuffer'), ('ByteBuffer', 'passed to', 'read() method'), ('read() method', 'parameter', 'ByteBuffer'), ('read() method', 'parameter', 'position of 0')]"
After calling read() the example loops until the isDone() method of the returned Future returns true.,"[('example', 'calls', 'read()'), ('example', 'loops until', 'isDone() method returns true'), ('isDone() method', 'returns', 'true'), ('isDone() method', 'belongs to', 'returned Future')]"
Once the read operation has completed the data read into the ByteBuffer and then into a String and printed to System.out .,"[('read operation', 'completes', 'data read into ByteBuffer'), ('data', 'read into', 'ByteBuffer'), ('ByteBuffer', 'converted into', 'String'), ('String', 'printed to', 'System.out')]"
The second method of reading data from an AsynchronousFileChannel is to call the read() method version that takes a CompletionHandler as a parameter.,"[('AsynchronousFileChannel', 'has method', 'read()'), ('read()', 'takes parameter', 'CompletionHandler')]"
Once the read operation finishes the CompletionHandler's completed() method will be called.,"[('read operation', 'finishes', ""CompletionHandler's completed() method will be called"")]"
"As parameters to the completed() method are passed an Integer telling how many bytes were read, and the ""attachment"" which was passed to the read() method.",
"If the read operation fails, the failed() method of the CompletionHandler will get called instead.","[('failed() method', 'belongs to', 'CompletionHandler')]"
Each way to write data call one of the write() methods of the AsynchronousFileChannel.,"[('way to write data', 'calls', 'write() methods'), ('write() methods', 'part of', 'AsynchronousFileChannel')]"
If the file does not exist the write() method will throw a java.nio.file.NoSuchFileException .,"[('write() method', 'throws', 'java.nio.file.NoSuchFileException')]"
The CompletionHandler's completed() method will get called when the write operation completes.,"[('CompletionHandler', 'has method', 'completed()'), ('completed()', 'called when', 'write operation completes')]"
"If the write fails for some reason, the failed() method will get called instead.","[('write', 'fails for some reason', 'failed() method will get called')]"
"Once you need to read the data, you need to switch the buffer from writing mode into reading mode using the flip() method call.","[('you', 'need to read', 'the data'), ('you', 'need to switch', 'the buffer'), ('the buffer', 'mode', 'writing mode'), ('the buffer', 'mode', 'reading mode'), ('you', 'use', 'flip() method call')]"
You can do this in two ways: By calling clear() or by calling compact().,"[('clear()', 'is a way to', 'do this'), ('compact()', 'is a way to', 'do this')]"
The compact() method only clears the data which you have already read.,"[('compact() method', 'clears', 'data'), ('data', 'read by', 'you')]"
Here is an example that writes data into a Buffer via the put() method:,"[('example', 'writes data into', 'Buffer'), ('example', 'uses method', 'put()')]"
"There are many other versions of the put() method, allowing you to write data into the Buffer in many different ways.","[('put() method', 'has version', 'many other versions'), ('put() method', 'allows', 'write data into the Buffer'), ('write data into the Buffer', 'can be done in', 'many different ways')]"
The flip() method switches a Buffer from writing mode to reading mode.,"[('flip() method', 'switches', 'Buffer'), ('Buffer', 'mode', 'writing mode'), ('Buffer', 'mode', 'reading mode')]"
"Calling flip() sets the position back to 0, and sets the limit to where position just was.","[('flip()', 'action', 'sets position back to 0'), ('flip()', 'action', 'sets limit to where position just was')]"
Here is an example that reads data from a Buffer using the get() method:,"[('example', 'reads data from', 'Buffer'), ('example', 'uses method', 'get()')]"
"There are many other versions of the get() method, allowing you to read data from the Buffer in many different ways.","[('get() method', 'has version', 'many other versions'), ('get() method', 'allows', 'read data from the Buffer'), ('read data', 'method', 'get() method'), ('Buffer', 'contains', 'data')]"
"The Buffer.rewind() sets the position back to 0, so you can reread all the data in the buffer.","[('Buffer.rewind()', 'sets', 'position back to 0'), ('position', 'can reread', 'all the data in the buffer')]"
"The limit remains untouched, thus still marking how many elements (bytes, chars etc.)","[('limit', 'remains', 'untouched'), ('limit', 'marks', 'how many elements')]"
You can do so either by calling clear() or by calling compact().,"[('clear()', 'can be called by', 'You'), ('compact()', 'can be called by', 'You')]"
If you call clear() the position is set back to 0 and the limit to capacity.,"[('clear()', 'action', 'set position back to 0'), ('clear()', 'action', 'set limit to capacity')]"
"If there is any unread data in the Buffer when you call clear() that data will be ""forgotten"", meaning you no longer have any markers telling what data has been read, and what has not been read.",
"If there is still unread data in the Buffer, and you want to read it later, but you need to do some writing first, call compact() instead of clear().","[('Buffer', 'contains', 'unread data'), ('You', 'want to read', 'unread data'), ('You', 'need to do', 'writing'), ('You', 'call', 'compact()'), ('compact()', 'used instead of', 'clear()')]"
compact() copies all unread data to the beginning of the Buffer.,"[('compact()', 'copies', 'unread data'), ('unread data', 'located at', 'beginning of the Buffer')]"
"The limit property is still set to capacity, just like clear() does.","[('limit property', 'is set to', 'capacity'), ('limit property', 'is set like', 'clear()')]"
You can mark a given position in a Buffer by calling the Buffer.mark() method.,"[('Buffer', 'has method', 'Buffer.mark()'), ('Buffer.mark()', 'marks', 'position')]"
You can then later reset the position back to the marked position by calling the Buffer.reset() method.,"[('Buffer', 'has method', 'reset()'), ('reset()', 'action', 'reset the position'), ('position', 'can be reset to', 'marked position')]"
It is possible to compare two buffers using equals() and compareTo().,"[('equals()', 'used to compare', 'two buffers'), ('compareTo()', 'used to compare', 'two buffers')]"
The FileChannel class has a transferTo() and a transferFrom() method which does this for you.,"[('FileChannel', 'has method', 'transferTo()'), ('FileChannel', 'has method', 'transferFrom()')]"
The FileChannel.transferFrom() method transfers data from a source channel into the FileChannel.,"[('FileChannel.transferFrom()', 'transfers data from', 'source channel'), ('FileChannel.transferFrom()', 'transfers data into', 'FileChannel')]"
The transferTo() method transfer from a FileChannel into some other channel.,"[('transferTo()', 'method of', 'FileChannel'), ('transferTo()', 'transfers from', 'FileChannel'), ('transferTo()', 'transfers into', 'some other channel')]"
The issue with SocketChannel is also present with the transferTo() method.,"[('SocketChannel', 'has issue', 'transferTo() method')]"
"You receive data from a DatagramChannel by calling its receive() method, like this:","[('DatagramChannel', 'has method', 'receive()'), ('receive()', 'used for', 'receive data')]"
The receive() method will copy the content of a received packet of data into the given Buffer.,"[('receive() method', 'copies content into', 'Buffer'), ('receive() method', 'copies content of', 'received packet of data')]"
"You can send data via a DatagramChannel by calling its send() method, like this:","[('DatagramChannel', 'has method', 'send()'), ('send()', 'used for', 'send data')]"
"When connected you can also use the read() and write() method, as if you were using a traditional channel.","[('read()', 'method of', 'connected'), ('write()', 'method of', 'connected'), ('connected', 'allows', 'use read()'), ('connected', 'allows', 'use write()'), ('read()', 'used like', 'traditional channel'), ('write()', 'used like', 'traditional channel')]"
The Java NIO FileChannel class is NIO's an alternative to reading files with the standard Java IO API.,"[('Java NIO FileChannel class', 'is an alternative to', 'standard Java IO API'), ('Java NIO FileChannel class', 'is part of', 'NIO')]"
To read data from a FileChannel you call one of the read() methods.,"[('FileChannel', 'has method', 'read()'), ('read()', 'used for', 'read data'), ('read data', 'source', 'FileChannel')]"
The int returned by the read() method tells how many bytes were written into the Buffer.,"[('read() method', 'returns', 'int'), ('int', 'tells', 'how many bytes were written into the Buffer')]"
"Writing data to a FileChannel is done using the FileChannel.write() method, which takes a Buffer as parameter.","[('FileChannel', 'method', 'FileChannel.write()'), ('FileChannel.write()', 'takes parameter', 'Buffer')]"
There is no guarantee of how many bytes the write() method writes to the FileChannel.,"[('write() method', 'writes to', 'FileChannel'), ('write() method', 'writes', 'bytes')]"
Therefore we repeat the write() call until the Buffer has no further bytes to write.,"[('write() call', 'repeated until', 'Buffer has no further bytes to write')]"
You can obtain the current position of the FileChannel object by calling the position() method.,"[('FileChannel object', 'has method', 'position()'), ('position() method', 'obtains', 'current position of FileChannel object')]"
The size() method of the FileChannel object returns the file size of the file the channel is connected to.,"[('size() method', 'part of', 'FileChannel object'), ('size() method', 'returns', 'file size'), ('FileChannel object', 'connected to', 'file')]"
The FileChannel.force() method flushes all unwritten data from the channel to the disk.,"[('FileChannel.force()', 'flushes', 'unwritten data'), ('unwritten data', 'from', 'channel'), ('unwritten data', 'to', 'disk')]"
"An operating system may cache data in memory for performance reasons, so you are not guaranteed that data written to the channel is actually written to disk, until you call the force() method.","[('Operating system', 'may cache', 'Data'), ('Data', 'cached in', 'Memory'), ('Caching', 'for reason', 'Performance'), ('Data', 'written to', 'Channel'), ('Data', 'not guaranteed written to', 'Disk'), ('You', 'call', 'force() method')]"
"The force() method takes a boolean as parameter, telling whether the file meta data (permission etc.)","[('force() method', 'takes parameter', 'boolean'), ('parameter', 'describes', 'file meta data')]"
The Java NIO Files class (java.nio.file.Files) provides several methods for manipulating files in the file system.,"[('Java NIO Files class', 'provides methods for', 'manipulating files'), ('methods', 'manipulate', 'files'), ('files', 'located in', 'file system')]"
"The Files class contains many methods, so check the JavaDoc too, if you need a method that is not described here.","[('Files class', 'contains', 'many methods'), ('Files class', 'has documentation', 'JavaDoc')]"
The Files class just might have a method for it still.,"[('Files class', 'might have method', 'it')]"
"The java.nio.file.Files class works with java.nio.file.Path instances, so you need to understand the Path class before you can work with the Files class.","[('java.nio.file.Files', 'works with', 'java.nio.file.Path'), ('java.nio.file.Path', 'is instance of', 'Path class'), ('java.nio.file.Files', 'requires understanding of', 'Path class')]"
The Files.exists() method checks if a given Path exists in the file system.,"[('Files.exists() method', 'checks', 'if a given Path exists in the file system')]"
"Since Path instances may or may not point to paths that exist in the file system, you can use the Files.exists() method to determine if they do (in case you need to check that).","[('Path instances', 'may or may not point to', 'paths that exist in the file system'), ('Files.exists() method', 'used to determine if', 'Path instances point to paths that exist in the file system')]"
"Second, the example calls the Files.exists() method with the Path instance as the first parameter.","[('example', 'calls method', 'Files.exists()'), ('Files.exists()', 'has parameter', 'Path instance')]"
This parameter is an array of options that influence how the Files.exists() determines if the path exists or not.,"[('This parameter', 'is', 'an array of options'), ('array of options', 'influence', 'Files.exists()'), ('Files.exists()', 'determines', 'if the path exists or not')]"
In this example above the array contains the LinkOption.NOFOLLOW_LINKS which means that the Files.exists() method should not follow symbolic links in the file system to determine if the path exists.,"[('array', 'contains', 'LinkOption.NOFOLLOW_LINKS'), ('LinkOption.NOFOLLOW_LINKS', 'means', 'Files.exists() method should not follow symbolic links'), ('Files.exists() method', 'should not follow', 'symbolic links'), ('symbolic links', 'located in', 'file system'), ('file system', 'used to determine', 'if the path exists')]"
The Files.createDirectory() method creates a new directory from a Path instance.,"[('Files.createDirectory()', 'creates', 'new directory'), ('new directory', 'created from', 'Path instance')]"
Inside the try-catch block the Files.createDirectory() method is called with the path as parameter.,"[('try-catch block', 'contains method call', 'Files.createDirectory()'), ('Files.createDirectory()', 'has parameter', 'path')]"
The Files.copy() method copies a file from one path to another.,"[('Files.copy() method', 'copies', 'file'), ('file', 'from', 'one path'), ('file', 'to', 'another path')]"
"Then the example calls Files.copy(), passing the two Path instances as parameters.","[('example', 'calls', 'Files.copy()'), ('Files.copy()', 'receives', 'two Path instances')]"
It is possible to force the Files.copy() to overwrite an existing file.,"[('Files.copy()', 'can overwrite', 'existing file')]"
Here an example showing how to overwrite an existing file using Files.copy():,"[('example', 'shows', 'how to overwrite an existing file using Files.copy()')]"
This parameter instructs the copy() method to overwrite an existing file if the destination file already exists.,"[('parameter', 'instructs', 'copy() method'), ('copy() method', 'to overwrite', 'existing file')]"
The Java NIO Files class also contains a function for moving files from one path to another.,"[('Java NIO Files class', 'contains function', 'moving files'), ('moving files', 'from path', 'one path'), ('moving files', 'to path', 'another')]"
"Yes, the java.io.File class could also do that with its renameTo() method, but now you have the file move functionality in the java.nio.file.Files class too.","[('java.io.File', 'has method', 'renameTo()'), ('java.nio.file.Files', 'has functionality', 'file move')]"
This parameter tells the Files.move() method to overwrite any existing file at the destination path.,"[('This parameter', 'tells method', 'Files.move()'), ('Files.move()', 'overwrites', 'existing file'), ('existing file', 'located at', 'destination path')]"
The Files.move() method may throw an IOException if moving the file fails.,"[('Files.move() method', 'may throw', 'IOException'), ('moving the file', 'fails', 'IOException')]"
"For instance, if a file already exists at the destination path, and you have left out the StandardCopyOption.REPLACE_EXISTING option, or if the file to move does not exist etc.","[('file', 'exists at', 'destination path'), ('StandardCopyOption.REPLACE_EXISTING', 'option', 'left out'), ('file', 'to move', 'does not exist')]"
If the Files.delete() fails to delete the file for some reason (e.g.,"[('Files.delete()', 'fails to delete', 'file')]"
The Files.walkFileTree() method contains functionality for traversing a directory tree recursively.,"[('Files.walkFileTree() method', 'contains functionality for', 'traversing a directory tree recursively')]"
The walkFileTree() method takes a Path instance and a FileVisitor as parameters.,"[('walkFileTree()', 'takes', 'Path instance'), ('walkFileTree()', 'takes', 'FileVisitor')]"
"You have to implement the FileVisitor interface yourself, and pass an instance of your implementation to the walkFileTree() method.","[('You', 'have to implement', 'FileVisitor interface'), ('You', 'pass instance of implementation to', 'walkFileTree() method')]"
"If you do not need to hook into all of these methods, you can extend the SimpleFileVisitor class, which contains default implementations of all methods in the FileVisitor interface.","[('SimpleFileVisitor', 'extends', 'FileVisitor'), ('SimpleFileVisitor', 'contains', 'default implementations of all methods in the FileVisitor interface')]"
The visitFile() mehtod is called for every file visited during the file walk.,"[('visitFile() method', 'is called for', 'every file visited during the file walk')]"
The visitFileFailed() method is called in case visiting a file fails.,"[('visitFileFailed()', 'is called in case', 'visiting a file fails')]"
Here is a walkFileTree() that extends SimpleFileVisitor to look for a file named README.txt :,"[('walkFileTree()', 'extends', 'SimpleFileVisitor'), ('walkFileTree()', 'looks for', 'file named README.txt')]"
The Files.walkFileTree() can also be used to delete a directory with all files and subdirectories inside it.,"[('Files.walkFileTree()', 'can be used to', 'delete a directory'), ('directory', 'contains', 'files'), ('directory', 'contains', 'subdirectories')]"
The Files.delete() method will only delete a directory if it is empty.,"[('Files.delete() method', 'will only delete', 'directory if it is empty')]"
"By walking through all directories and deleting all files (inside visitFile()) in each directory, and afterwards delete the directory itself (inside postVisitDirectory()) you can delete a directory with all subdirectories and files.","[('visitFile()', 'action', 'deleting all files'), ('postVisitDirectory()', 'action', 'delete the directory itself'), ('walking through all directories', 'action', 'deleting all files'), ('deleting all files', 'occurs in', 'each directory'), ('delete the directory itself', 'occurs after', 'deleting all files'), ('delete a directory', 'includes', 'all subdirectories and files')]"
"The java.nio.file.Files class contains many other useful functions, like functions for creating symbolic links, determining the file size, setting file permissions etc.","[('java.nio.file.Files class', 'contains', 'functions for creating symbolic links'), ('java.nio.file.Files class', 'contains', 'functions for determining the file size'), ('java.nio.file.Files class', 'contains', 'functions for setting file permissions')]"
Check out the JavaDoc for the java.nio.file.Files class for more information about these methods.,"[('JavaDoc', 'provides information about', 'java.nio.file.Files class'), ('java.nio.file.Files class', 'contains', 'methods')]"
And that is before the server has used any memory for processing the incoming messages (e.g.,"[('server', 'uses memory for', 'processing incoming messages')]"
"To keep the number of threads down, many servers use a design where the server keeps a pool of threads (e.g.","[('servers', 'use design', 'keep number of threads down'), ('server', 'keeps', 'pool of threads')]"
When you call select() or selectNow() on the Selector it gives you only the SelectableChannel instances that actually has data to read.,"[('Selector', 'method', 'select()'), ('Selector', 'method', 'selectNow()'), ('select()', 'returns', 'SelectableChannel instances'), ('selectNow()', 'returns', 'SelectableChannel instances'), ('SelectableChannel instances', 'has', 'data to read')]"
"A data block could potentially contain a partial message (less than a message), a full message, or more than a message, for instance 1.5 or 2.5 messsages.","[('data block', 'could contain', 'partial message'), ('data block', 'could contain', 'full message'), ('data block', 'could contain', 'more than a message'), ('more than a message', 'example', '1.5 messages'), ('more than a message', 'example', '2.5 messages')]"
The first way to implement a resizable buffer is to start with a small buffer of e.g.,"[('resizable buffer', 'implemented by', 'first way'), ('first way', 'starts with', 'small buffer')]"
"If a message cannot fit into the 4KB buffer, a larger buffer of e.g.","[('message', 'cannot fit into', '4KB buffer')]"
For 1.000.000 concurrent connections that results in 1.000.000 x 4KB = 4GB which is possible in most servers today (2015).,"[('1.000.000 concurrent connections', 'results in', '4GB'), ('4GB', 'is possible in', 'most servers'), ('most servers', 'time', '2015')]"
Another workaround is to time out messages which have not been received within e.g.,"[('messages', 'not received within', 'time out')]"
The fact that TLV encodings makes memory management easier is one of the reasons why HTTP 1.1 is such a terrible protocol.,"[('TLV encodings', 'makes', 'memory management easier'), ('memory management', 'is one of the reasons why', 'HTTP 1.1 is such a terrible protocol')]"
That is one of the problems they are trying to fix in HTTP 2.0 where data is transported in LTV encoded frames.,"[('HTTP 2.0', 'has problem', 'data transport'), ('data', 'transported in', 'LTV encoded frames')]"
This is also why we have designed our own network protocol for our VStack.co project that uses a TLV encoding.,"[('we', 'designed', 'network protocol'), ('network protocol', 'used for', 'VStack.co project'), ('network protocol', 'uses', 'TLV encoding')]"
Imagine if you have 1.000.000 connections which are mostly idle and all 1.000.000 connections were registered with the Selector.,"[('1.000.000 connections', 'state', 'idle'), ('1.000.000 connections', 'registered with', 'Selector')]"
"Then, when you call select() most of these Channel instances would be write-ready (they are mostly idle, remember?).","[('select()', 'called on', 'Channel instances'), ('Channel instances', 'state', 'write-ready'), ('Channel instances', 'state', 'idle')]"
"Java NIO has more classes and components than these, but the Channel, Buffer and Selector forms the core of the API, in my opinion.","[('Java NIO', 'has component', 'Channel'), ('Java NIO', 'has component', 'Buffer'), ('Java NIO', 'has component', 'Selector'), ('Channel', 'part of', 'Java NIO'), ('Buffer', 'part of', 'Java NIO'), ('Selector', 'part of', 'Java NIO'), ('Channel', 'forms core of', 'Java NIO API'), ('Buffer', 'forms core of', 'Java NIO API'), ('Selector', 'forms core of', 'Java NIO API')]"
"The rest of the components, like Pipe and FileLock are merely utility classes to be used in conjunction with the three core components.","[('Pipe', 'is a type of', 'utility class'), ('FileLock', 'is a type of', 'utility class'), ('utility class', 'used in conjunction with', 'core components')]"
"There are a few interesting interfaces accompanying these classes too, but I'll keep them out of this Java NIO overview for simplicity's sake.","[('interesting interfaces', 'accompanying', 'these classes'), ('Java NIO overview', 'excludes', 'interesting interfaces')]"
"The Path interface is located in the java.nio.file package, so the fully qualified name of the Java Path interface is java.nio.file.Path.","[('Path interface', 'located in', 'java.nio.file package'), ('Java Path interface', 'fully qualified name', 'java.nio.file.Path')]"
The java.nio.file.Path interface has nothing to do with the path environment variable.,"[('java.nio.file.Path', 'is a type of', 'interface'), ('java.nio.file.Path', 'has no relation to', 'path environment variable')]"
"In many ways the java.nio.file.Path interface is similar to the java.io.File class, but there are some minor differences.","[('java.nio.file.Path', 'is similar to', 'java.io.File'), ('java.nio.file.Path', 'has differences with', 'java.io.File')]"
"In many cases though, you can replace the use of the File class with use of the Path interface.","[('File class', 'can be replaced with', 'Path interface')]"
In order to use a java.nio.file.Path instance you must create a Path instance.,"[('java.nio.file.Path', 'requires', 'create a Path instance')]"
You create a Path instance using a static method in the Paths class (java.nio.file.Paths) named Paths.get().,"[('Path', 'created using method', 'Paths.get()'), ('Paths.get()', 'located in class', 'Paths'), ('Paths', 'located in package', 'java.nio.file')]"
To use the Path interface and the Paths class we must first import them.,"[('Path interface', 'used with', 'Paths class'), ('Path interface', 'requires', 'import'), ('Paths class', 'requires', 'import')]"
It is the call to the Paths.get() method that creates the Path instance.,"[('call to the Paths.get() method', 'creates', 'Path instance')]"
"The Paths.get() method is a factory method for Path instances, in other words.","[('Paths.get()', 'is a', 'factory method'), ('factory method', 'for', 'Path instances')]"
Creating an absolute path is done by calling the Paths.get() factory method with the absolute file as parameter.,"[('Creating an absolute path', 'is done by', 'calling the Paths.get() factory method'), ('calling the Paths.get() factory method', 'with', 'the absolute file as parameter')]"
The Java NIO Path class can also be used to work with relative paths.,"[('Java NIO Path class', 'can be used to work with', 'relative paths')]"
The second example creates a Path instance which points to the path (file) d:\data\projects\a-project\myfile.txt .,"[('Path instance', 'points to', 'd:\\data\\projects\\a-project\\myfile.txt')]"
If you use the .. code in the middle of a path string it will correspond to changing one directory up at that point in the path string.,"[('.. code', 'used in', 'path string'), ('.. code', 'corresponds to', 'changing one directory up'), ('changing one directory up', 'occurs at', 'point in the path string')]"
The .. code after the a-project directory changes directory up the the parent directory projects and then the path references down into the another-project directory from there.,"[('.. code', 'changes directory', 'parent directory projects'), ('parent directory projects', 'contains', 'another-project directory')]"
and .. codes also work in combination with the two-string Paths.get() method.,"[('codes', 'work in combination with', 'two-string Paths.get() method')]"
Here are two Java Paths.get() examples showing simple examples of that:,"[('Java', 'has method', 'Paths.get()'), ('Paths.get()', 'used in', 'examples')]"
There are more ways that the Java NIO Path class can be used to work with relative paths.,"[('Java NIO Path class', 'can be used to work with', 'relative paths')]"
The Java Path method relativize() can create a new Path which represents the second Path relative to the first Path.,"[('Java Path method', 'can create', 'new Path'), ('new Path', 'represents', 'second Path'), ('second Path', 'relative to', 'first Path')]"
"For instance, with the path /data and /data/subdata/subsubdata/myfile.txt"", the second path can be expressed as /subdata/subsubdata/myfile.txt relative to the first path.",
"If you add the relative path subdata/subsubdata/myfile.txt to the directory path /data, you get the full path /data/subdata/subsubdata/myfile.txt.","[('relative path', 'is', 'subdata/subsubdata/myfile.txt'), ('directory path', 'is', '/data'), ('full path', 'is', '/data/subdata/subsubdata/myfile.txt'), ('subdata/subsubdata/myfile.txt', 'added to', '/data'), ('/data', 'combined with', 'subdata/subsubdata/myfile.txt')]"
If you you add the relative path ../../.. to the full file path /data/subdata/subsubdata/myfile.txt then you get /data,"[('../../..', 'added to', '/data/subdata/subsubdata/myfile.txt'), ('/data/subdata/subsubdata/myfile.txt', 'full file path', '/data'), ('../../..', 'relative path', '/data')]"
The normalize() method of the Path interface can normalize a path.,"[('normalize() method', 'part of', 'Path interface'), ('normalize() method', 'can normalize', 'path')]"
"and .. codes in the middle of the path string, and resolves what path the path string refers to.","[('codes', 'located in', 'middle of the path string'), ('path string', 'contains', 'codes'), ('path string', 'refers to', 'path')]"
This Path example first creates a path string with a .. code in the middle.,"[('Path example', 'creates', 'path string'), ('path string', 'contains', 'code')]"
"Then the example creates a Path instance from this path string, and prints that Path instance out (actually it prints Path.toString()).","[('example', 'creates', 'Path instance'), ('Path instance', 'created from', 'path string'), ('example', 'prints', 'Path instance'), ('example', 'prints', 'Path.toString()')]"
"The example then calls normalize() on the created Path instance, which returns a new Path instance.","[('example', 'calls', 'normalize()'), ('normalize()', 'operates on', 'Path instance'), ('normalize()', 'returns', 'new Path instance')]"
"As you can see, the normalized path does not contain the a-project\.. part, as this is redundant.","[('normalized path', 'does not contain', 'a-project\\.\\. part'), ('a-project\\.\\. part', 'is', 'redundant')]"
"You write to a SinkChannel by calling it's write() method, like this:","[('You', 'write to', 'SinkChannel'), ('SinkChannel', 'has method', 'write()')]"
To read from the source channel you call its read() method like this:,"[('source channel', 'has method', 'read()')]"
The int returned by the read() method tells how many bytes were read into the buffer.,"[('read() method', 'returns', 'int'), ('int', 'tells', 'how many bytes were read into the buffer')]"
"Notice how the buffers are first inserted into an array, then the array passed as parameter to the channel.read() method.","[('buffers', 'inserted into', 'array'), ('array', 'passed as parameter to', 'channel.read() method')]"
The read() method then writes data from the channel in the sequence the buffers occur in the array.,"[('read() method', 'writes data from', 'channel'), ('data', 'written in sequence of', 'buffers'), ('buffers', 'occur in', 'array')]"
"In other words, if you have a header and a body, and the header is fixed size (e.g.","[('header', 'part of', 'body'), ('header', 'has property', 'fixed size')]"
"The array of buffers are passed into the write() method, which writes the content of the buffers in the sequence they are encountered in the array.","[('array of buffers', 'passed into', 'write() method'), ('write() method', 'writes content of', 'buffers'), ('buffers', 'encountered in sequence in', 'array')]"
"The Java NIO Selector is a component which can examine one or more Java NIO Channel instances, and determine which channels are ready for e.g.","[('Java NIO Selector', 'can examine', 'Java NIO Channel instances'), ('Java NIO Selector', 'determine readiness of', 'channels')]"
"You create a Selector by calling the Selector.open() method, like this:","[('Selector', 'created by', 'calling Selector.open() method')]"
"As you saw in the previous section, when you register a Channel with a Selector the register() method returns a SelectionKey objects.","[('Channel', 'can be registered with', 'Selector'), ('register() method', 'returns', 'SelectionKey objects')]"
"You can also attach an object already while registering the Channel with the Selector, in the register() method.","[('Channel', 'can be registered with', 'Selector'), ('object', 'can be attached to', 'Channel'), ('object', 'can be attached while', 'registering the Channel'), ('register()', 'method of', 'Channel')]"
Once you have register one or more channels with a Selector you can call one of the select() methods.,"[('You', 'can register', 'channels'), ('You', 'can call', 'select() methods'), ('channels', 'can be registered with', 'Selector')]"
"In other words, if you are interested in channels that are ready for reading, you will receive the channels that are ready for reading from the select() methods.","[('you', 'interested in', 'channels ready for reading'), ('you', 'will receive', 'channels ready for reading'), ('channels ready for reading', 'received from', 'select() methods')]"
select() blocks until at least one channel is ready for the events you registered for.,"[('select()', 'blocks until', 'at least one channel is ready for the events you registered for')]"
select(long timeout) does the same as select() except it blocks for a maximum of timeout milliseconds (the parameter).,"[('select(long timeout)', 'does the same as', 'select()'), ('select(long timeout)', 'blocks for a maximum of', 'timeout milliseconds')]"
The int returned by the select() methods tells how many channels are ready.,"[('select() methods', 'return', 'int'), ('int', 'tells', 'how many channels are ready')]"
"That is, how many channels that became ready since last time you called select().","[('channels', 'became', 'ready'), ('you', 'called', 'select()'), ('channels', 'became ready since', 'last time')]"
"If you call select() and it returns 1 because one channel has become ready, and you call select() one more time, and one more channel has become ready, it will return 1 again.","[('select()', 'returns', '1'), ('channel', 'has become', 'ready'), ('select()', 'called', 'one more time'), ('one more channel', 'has become', 'ready'), ('select()', 'returns', '1 again')]"
"If you have done nothing with the first channel that was ready, you now have 2 ready channels, but only one channel had become ready between each select() call.","[('first channel', 'state', 'ready'), ('2 channels', 'state', 'ready'), ('one channel', 'state', 'ready'), ('select() call', 'occurrence', 'between each')]"
"Once you have called one of the select() methods and its return value has indicated that one or more channels are ready, you can access the ready channels via the ""selected key set"", by calling the selectors selectedKeys() method.",
When you register a channel with a Selector the Channel.register() method returns a SelectionKey object.,"[('Channel', 'register with', 'Selector'), ('Channel.register()', 'returns', 'SelectionKey object')]"
It is these keys you can access via the selectedKeySet() method.,"[('keys', 'can be accessed via', 'selectedKeySet() method')]"
"The channel returned by the SelectionKey.channel() method should be cast to the channel you need to work with, e.g a ServerSocketChannel or SocketChannel etc.","[('SelectionKey.channel()', 'returns', 'channel'), ('channel', 'cast to', 'ServerSocketChannel'), ('channel', 'cast to', 'SocketChannel')]"
"A thread that has called the select() method which is blocked, can be made to leave the select() method, even if no channels are yet ready.","[('thread', 'has method', 'select()'), ('select()', 'method can be blocked', 'thread'), ('thread', 'can leave method', 'select()'), ('channels', 'are ready', 'select()')]"
This is done by having a different thread call the Selector.wakeup() method on the Selector which the first thread has called select() on.,"[('different thread', 'calls method', 'Selector.wakeup()'), ('first thread', 'calls method', 'select()'), ('Selector', 'method called on by', 'different thread'), ('Selector', 'method called on by', 'first thread')]"
"If a different thread calls wakeup() and no thread is currently blocked inside select(), the next thread that calls select() will ""wake up"" immediately.",
When you are finished with the Selector you call its close() method.,"[('You', 'finished with', 'Selector'), ('You', 'call method', 'close()')]"
Listening for incoming connections is done by calling the ServerSocketChannel.accept() method.,"[('Listening for incoming connections', 'is done by calling', 'ServerSocketChannel.accept() method')]"
"When the accept() method returns, it returns a SocketChannel with an incoming connection.","[('accept() method', 'returns', 'SocketChannel'), ('SocketChannel', 'has', 'incoming connection')]"
"Since you are typically not interested in listening just for a single connection, you call the accept() inside a while-loop.","[('you', 'are interested in', 'listening'), ('you', 'call', 'accept()'), ('accept()', 'is inside', 'while-loop')]"
"In non-blocking mode the accept() method returns immediately, and may thus return null, if no incoming connection had arrived.","[('accept() method', 'operates in mode', 'non-blocking mode'), ('accept() method', 'returns', 'immediately'), ('accept() method', 'may return', nan), ('incoming connection', 'had arrived', 'no')]"
You close a SocketChannel after use by calling the SocketChannel.close() method.,"[('You', 'close', 'SocketChannel'), ('SocketChannel', 'method', 'SocketChannel.close()')]"
To read data from a SocketChannel you call one of the read() methods.,"[('SocketChannel', 'has method', 'read()'), ('read()', 'used for', 'read data')]"
The int returned by the read() method tells how many bytes were witten into the Buffer.,"[('read() method', 'returns', 'int'), ('int', 'tells', 'how many bytes were written into the Buffer')]"
"Writing data to a SocketChannel is done using the SocketChannel.write() method, which takes a Buffer as parameter.","[('SocketChannel', 'method', 'SocketChannel.write()'), ('SocketChannel.write()', 'takes parameter', 'Buffer')]"
There is no guarantee of how many bytes the write() method writes to the SocketChannel.,"[('write() method', 'writes to', 'SocketChannel'), ('write() method', 'has property', 'no guarantee of how many bytes')]"
"When you do so, you can call connect(), read() and write() in asynchronous mode.","[('you', 'can call', 'connect()'), ('you', 'can call', 'read()'), ('you', 'can call', 'write()'), ('connect()', 'mode', 'asynchronous'), ('read()', 'mode', 'asynchronous'), ('write()', 'mode', 'asynchronous')]"
"If the SocketChannel is in non-blocking mode, and you call connect(), the method may return before a connection is established.","[('SocketChannel', 'can be in mode', 'non-blocking mode'), ('SocketChannel', 'method', 'connect()'), ('connect()', 'may return before', 'connection is established')]"
"To determine whether the connection is established, you can call the finishConnect() method, like this:","[('connection', 'established by', 'finishConnect() method')]"
In non-blocking mode the write() method may return without having written anything.,"[('write() method', 'operates in', 'non-blocking mode'), ('write() method', 'may return', 'without having written anything')]"
Therefore you need to call the write() method in a loop.,"[('you', 'need to call', 'write() method'), ('write() method', 'used in', 'loop')]"
In non-blocking mode the read() method may return without having read any data at all.,"[('read() method', 'operates in', 'non-blocking mode'), ('read() method', 'may return', 'without having read any data')]"
"Also, parts of the NIO APIs are actually blocking - e.g.","[('NIO APIs', 'has part', 'blocking parts')]"
"A selector is an object that can monitor multiple channels for events (like: connection opened, data arrived etc.).","[('Selector', 'is a', 'object'), ('Selector', 'can monitor', 'multiple channels'), ('Multiple channels', 'have events', 'connection opened'), ('Multiple channels', 'have events', 'data arrived')]"
"That means, that when a thread invokes a read() or write(), that thread is blocked until there is some data to read, or the data is fully written.","[('thread', 'invokes', 'read()'), ('thread', 'invokes', 'write()'), ('thread', 'is blocked until', 'there is some data to read'), ('thread', 'is blocked until', 'the data is fully written')]"
Rather than just read the data byte for byte from e.g.,"[('data', 'read byte by byte from', 'e.g.')]"
"In other words, once the first reader.readLine() method returns, you know for sure that a full line of text has been read.","[('reader.readLine()', 'returns', 'first'), ('first', 'know', 'full line of text has been read')]"
"The readLine() blocks until a full line is read, that's why.","[('readLine()', 'blocks until', 'a full line is read')]"
"Similarly, when the second readLine() call returns, you know that this line contains the age etc.","[('second readLine() call', 'returns', 'line contains the age')]"
"The bufferFull() method has to keep track of how much data is read into the buffer, and return either true or false, depending on whether the buffer is full.","[('bufferFull() method', 'has to keep track of', 'how much data is read into the buffer'), ('bufferFull() method', 'return', 'true or false'), ('bufferFull() method', 'depends on', 'whether the buffer is full')]"
"The bufferFull() method scans through the buffer, but must leave the buffer in the same state as before the bufferFull() method was called.","[('bufferFull() method', 'scans through', 'buffer'), ('bufferFull() method', 'leaves in the same state', 'buffer')]"
"Similarly, if you need to keep a lot of open connections to other computers, e.g.","[('you', 'need to keep', 'open connections'), ('open connections', 'to', 'other computers')]"
"If you have fewer connections with very high bandwidth, sending a lot of data at a time, perhaps a classic IO server implementation might be the best fit.","[('connections', 'have attribute', 'very high bandwidth'), ('sending', 'involves', 'a lot of data'), ('classic IO server implementation', 'might be', 'the best fit')]"
Using Java Reflection you can access the annotations attached to Java classes at runtime.,"[('Java Reflection', 'used for', 'accessing annotations'), ('annotations', 'attached to', 'Java classes'), ('accessing annotations', 'occurs at', 'runtime')]"
"You can also specify METHOD or FIELD, or you can leave the target out alltogether so the annotation can be used for both classes, methods and fields.","[('annotation', 'can be used for', 'classes'), ('annotation', 'can be used for', 'methods'), ('annotation', 'can be used for', 'fields'), ('You', 'can specify', 'METHOD'), ('You', 'can specify', 'FIELD')]"
"You can access the annotations of a class, method or field at runtime.","[('annotations', 'can be accessed at', 'runtime'), ('annotations', 'associated with', 'class'), ('annotations', 'associated with', 'method'), ('annotations', 'associated with', 'field')]"
"Notice how the Method.getParameterAnnotations() method returns a two-dimensional Annotation array, containing an array of annotations for each method parameter.","[('Method.getParameterAnnotations()', 'returns', 'two-dimensional Annotation array'), ('two-dimensional Annotation array', 'contains', 'array of annotations'), ('array of annotations', 'for', 'each method parameter')]"
This text will discuss how to both create arrays and get their class objects via Java Reflection.,"[('text', 'discuss', 'create arrays'), ('text', 'discuss', 'get class objects'), ('get class objects', 'via', 'Java Reflection')]"
Working with arrays via Java Reflection is done using the java.lang.reflect.Array class.,"[('Working with arrays', 'done using', 'java.lang.reflect.Array class'), ('java.lang.reflect.Array class', 'part of', 'Java Reflection')]"
"Do not confuse this class with the java.util.Arrays class in the Java Collections suite, which contains utility methods for sorting arrays, converting them to collections etc.","[('java.util.Arrays', 'part of', 'Java Collections suite'), ('Java Collections suite', 'contains', 'java.util.Arrays'), ('java.util.Arrays', 'contains', 'utility methods'), ('utility methods', 'used for', 'sorting arrays'), ('utility methods', 'used for', 'converting arrays to collections')]"
Creating arrays via Java Reflection is done using the java.lang.reflect.Array class.,"[('Creating arrays', 'done using', 'java.lang.reflect.Array class'), ('java.lang.reflect.Array class', 'part of', 'Java Reflection')]"
The first parameter int.class given to the Array.newInstance() method tells what type each element in the array should be of.,"[('int.class', 'is parameter of', 'Array.newInstance()'), ('Array.newInstance()', 'has parameter', 'int.class'), ('int.class', 'tells type of elements in', 'array')]"
"For instance, you can access the primitive int array class object like this:","[('you', 'can access', 'primitive int array class object')]"
The [ on the left means it is the class of an int array I am interested in.,"[('int array', 'has class', 'on the left')]"
"Notice the [L to the left of the class name, and the ; to the right.","[('L', 'position', 'left of the class name'), (';', 'position', 'right')]"
"As a side note, you cannot obtain the class object of primitives using Class.forName().","[('Class.forName()', 'cannot obtain', 'class object of primitives')]"
I usually do something like this to obtain the class name for primitives as well as objects:,"[('I', 'perform action', 'obtain the class name'), ('obtain the class name', 'applies to', 'primitives'), ('obtain the class name', 'applies to', 'objects')]"
"The solution, or workaround as you might call it, is to create an empty array of the desired type and obtain the class object from that empty array.","[('solution', 'also known as', 'workaround'), ('workaround', 'also known as', 'solution'), ('solution', 'action', 'create an empty array'), ('workaround', 'action', 'create an empty array'), ('empty array', 'has type', 'desired type'), ('class object', 'obtained from', 'empty array')]"
"This presents a single, uniform method to access the array class of arrays of any type.","[('method', 'presents', 'single, uniform method'), ('method', 'access', 'array class'), ('array class', 'contains', 'arrays'), ('arrays', 'have type', 'any type')]"
"To make sure that the Class object really is an array, you can call the Class.isArray() method to check:","[('Class object', 'can call method', 'Class.isArray()'), ('Class.isArray()', 'checks', 'Class object is an array')]"
Once you have obtained the Class object for an array you can access its component type via the Class.getComponentType() method.,"[('Class object', 'can access', 'component type'), ('component type', 'accessed via', 'Class.getComponentType() method')]"
"For instance, the component type of an int[] array is the int.class Class object.","[('int[] array', 'has component type', 'int.class Class object')]"
The component type of a String[] array is the java.lang.String Class object.,"[('String[] array', 'has component type', 'java.lang.String Class object')]"
"This example will print out the text ""java.lang.String"" which is the component type of the String array.",
Inspecting classes is often the first thing you do when using Reflection.,"[('Inspecting classes', 'is often the first thing', 'using Reflection')]"
For a full list you should consult the JavaDoc for java.lang.Class.,"[('JavaDoc', 'provides documentation for', 'java.lang.Class')]"
Before you can do any inspection on a class you need to obtain its java.lang.Class object.,"[('inspection', 'requires', 'java.lang.Class object'), ('java.lang.Class object', 'associated with', 'class')]"
"All types in Java including the primitive types (int, long, float etc.)","[('Java', 'includes', 'types'), ('types', 'includes', 'primitive types'), ('primitive types', 'includes', 'int'), ('primitive types', 'includes', 'long'), ('primitive types', 'includes', 'float')]"
If you know the name of the class at compile time you can obtain a Class object like this:,"[('name of the class', 'known at', 'compile time'), ('you', 'can obtain', 'Class object')]"
"If you don't know the name at compile time, but have the class name as a string at runtime, you can do like this:","[('compile time', 'unknown', 'name'), ('runtime', 'has', 'class name as a string')]"
String className = ... //obtain class name as string at runtime Class class = Class.forName(className);,"[('className', 'is obtained as', 'string at runtime'), ('Class', 'is created using', 'Class.forName(className)')]"
When using the Class.forName() method you must supply the fully qualified class name.,"[('Class.forName() method', 'requires', 'fully qualified class name')]"
The Class.forName() method may throw a ClassNotFoundException if the class cannot be found on the classpath at runtime.,"[('Class.forName()', 'may throw', 'ClassNotFoundException'), ('ClassNotFoundException', 'occurs if', 'class cannot be found on the classpath at runtime')]"
The fully qualified class name (including package name) is obtained using the getName() method like this:,"[('fully qualified class name', 'includes', 'package name'), ('getName() method', 'obtains', 'fully qualified class name')]"
"If you want the class name without the pacakge name you can obtain it using the getSimpleName() method, like this:","[('class name', 'can be obtained using', 'getSimpleName() method')]"
You can access the modifiers of a class via the Class object.,"[('modifiers', 'can be accessed via', 'Class object'), ('Class object', 'provides access to', 'modifiers')]"
You can check the modifiers using these methods in the class java.lang.reflect.Modifier:,"[('methods', 'are in', 'class java.lang.reflect.Modifier'), ('you', 'can check', 'modifiers')]"
You can also access information specified for this package in the Manifest file of the JAR file this package is located in on the classpath.,"[('Manifest file', 'contains information for', 'this package'), ('this package', 'located in', 'JAR file'), ('JAR file', 'located on', 'classpath')]"
From the Class object you can access the superclass of the class.,"[('Class object', 'can access', 'superclass'), ('superclass', 'of', 'class')]"
"The superclass class object is a Class object like any other, so you can continue doing class reflection on that too.","[('superclass class object', 'is a', 'Class object'), ('superclass class object', 'can do', 'class reflection')]"
It is possible to get a list of the interfaces implemented by a given class.,"[('given class', 'implements', 'interfaces')]"
NOTE: Only the interfaces specifically declared implemented by a given class is returned.,"[('interfaces', 'declared implemented by', 'class')]"
"If a superclass of the class implements an interface, but the class doesn't specifically state that it also implements that interface, that interface will not be returned in the array.","[('superclass', 'implements', 'interface'), ('class', 'does not specifically state implements', 'interface'), ('interface', 'will not be returned in', 'array')]"
"Even if the class in practice implements that interface, because the superclass does.","[('class', 'implements', 'interface'), ('superclass', 'implements', 'interface')]"
To get a complete list of the interfaces implemented by a given class you will have to consult both the class and its superclasses recursively.,"[('class', 'implements', 'interface'), ('class', 'has superclass', 'superclass'), ('superclass', 'implements', 'interface')]"
You can access the fields (member variables) of a class like this:,"[('fields', 'are part of', 'class'), ('member variables', 'are part of', 'class')]"
You can access the class annotations of a class like this:,"[('class annotations', 'can be accessed by', 'class')]"
Using Java Reflection you can inspect the constructors of classes and instantiate objects at runtime.,"[('Java Reflection', 'can inspect', 'constructors of classes'), ('Java Reflection', 'can instantiate', 'objects'), ('Java Reflection', 'at', 'runtime')]"
The Constructor[] array will have one Constructor instance for each public constructor declared in the class.,"[('Constructor[] array', 'will have', 'Constructor instance'), ('Constructor instance', 'for each', 'public constructor'), ('public constructor', 'declared in', 'class')]"
This example returns the public constructor of the given class which takes a String as parameter:,"[('example', 'returns', 'public constructor'), ('public constructor', 'belongs to', 'given class'), ('public constructor', 'takes parameter', 'String')]"
"If no constructor matches the given constructor arguments, in this case String.class, a NoSuchMethodException is thrown.","[('constructor', 'matches', 'constructor arguments'), ('constructor arguments', 'instance', 'String.class'), ('NoSuchMethodException', 'is thrown', 'if no constructor matches the given constructor arguments')]"
"The Constructor.newInstance() method takes an optional amount of parameters, but you must supply exactly one parameter per argument in the constructor you are invoking.","[('Constructor.newInstance() method', 'takes', 'optional amount of parameters'), ('you', 'must supply', 'exactly one parameter per argument'), ('exactly one parameter per argument', 'in', 'constructor you are invoking')]"
"It is possible to load and reload classes at runtime in Java, though it is not as straightforward as one might have hoped.","[('Java', 'supports', 'load classes at runtime'), ('Java', 'supports', 'reload classes at runtime')]"
This text will explain when and how you can load and reload classes in Java.,"[('This text', 'explains', 'when you can load and reload classes in Java'), ('This text', 'explains', 'how you can load and reload classes in Java')]"
"You can argue whether Java's dynamic class loading features are really part of Java Reflection, or a part of the core Java platform.","[('Java', 'has feature', 'dynamic class loading'), ('dynamic class loading', 'part of', 'Java Reflection'), ('dynamic class loading', 'part of', 'core Java platform')]"
All classes in a Java application are loaded using some subclass of java.lang.ClassLoader.,"[('All classes in a Java application', 'loaded using', 'subclass of java.lang.ClassLoader'), ('subclass of java.lang.ClassLoader', 'is a', 'java.lang.ClassLoader')]"
Loading classes dynamically must therefore also be done using a java.lang.ClassLoader subclass.,"[('Loading classes dynamically', 'must be done using', 'java.lang.ClassLoader subclass')]"
"When a class is loaded, all classes it references are loaded too.","[('class', 'references', 'classes'), ('class', 'loaded', 'class'), ('classes', 'loaded', 'classes')]"
"This class loading pattern happens recursively, until all classes needed are loaded.",
Unreferenced classes are not loaded until the time they are referenced.,"[('Unreferenced classes', 'not loaded until', 'time they are referenced')]"
"If a ClassLoader is asked to load a class, it will ask its parent class loader to load it.","[('ClassLoader', 'asked to load', 'class'), ('ClassLoader', 'asks', 'parent class loader'), ('parent class loader', 'load', 'class')]"
"If the parent class loader can't find the class, the child class loader then tries to load it itself.","[('parent class loader', 'cannot find', 'class'), ('child class loader', 'tries to load', 'class')]"
The steps a given class loader uses when loading classes are:,"[('class loader', 'uses', 'steps'), ('steps', 'used for', 'loading classes')]"
When you implement a class loader that is capable of reloading classes you will need to deviate a bit from this sequence.,"[('class loader', 'capable of', 'reloading classes')]"
The classes to reload should not be requested loaded by the parent class loader.,"[('classes', 'should not be requested loaded by', 'parent class loader')]"
All you need to do is to obtain a ClassLoader and call its loadClass() method.,"[('ClassLoader', 'has method', 'loadClass()')]"
Java's builtin Class loaders always checks if a class is already loaded before loading it.,"[('Java', 'has feature', 'builtin Class loaders'), ('builtin Class loaders', 'checks', 'if a class is already loaded'), ('builtin Class loaders', 'action', 'loading it')]"
Reloading the class is therefore not possible using Java's builtin class loaders.,"[('Reloading the class', 'not possible using', ""Java's builtin class loaders"")]"
To reload a class you will have to implement your own ClassLoader subclass.,"[('you', 'have to implement', 'ClassLoader subclass'), ('ClassLoader subclass', 'reload', 'class')]"
Even with a custom subclass of ClassLoader you have a challenge.,"[('custom subclass', 'instance of', 'ClassLoader')]"
"This method is final, and thus cannot be overridden in your ClassLoader subclass.","[('method', 'is', 'final'), ('method', 'cannot be', 'overridden'), ('method', 'in', 'ClassLoader subclass')]"
The resolve() method will not allow any given ClassLoader instance to link the same class twice.,"[('resolve() method', 'will not allow', 'ClassLoader instance'), ('ClassLoader instance', 'to link', 'same class twice')]"
"Therefore, everytime you want to reload a class you must use a new instance of your ClassLoader subclass.","[('you', 'want to', 'reload a class'), ('you', 'must use', 'new instance of your ClassLoader subclass')]"
"This is not impossible, but necessary to know when designing for class reloading.","[('designing', 'related to', 'class reloading')]"
As stated earlier you cannot reload a class using a ClassLoader that has already loaded that class once.,"[('ClassLoader', 'cannot reload', 'class'), ('ClassLoader', 'has loaded', 'class once')]"
Therefore you will have to reload the class using a different ClassLoader instance.,"[('you', 'will have to reload', 'the class'), ('the class', 'using', 'a different ClassLoader instance')]"
"Every class loaded in a Java application is identified by its fully qualified name (package name + class name), and the ClassLoader instance that loaded it.","[('class', 'identified by', 'fully qualified name'), ('fully qualified name', 'consists of', 'package name + class name'), ('class', 'loaded by', 'ClassLoader instance')]"
"That means, that a class MyObject loaded by class loader A, is not the same class as the MyObject class loaded with class loader B.","[('MyObject', 'loaded by', 'class loader A'), ('MyObject', 'loaded by', 'class loader B'), ('class loader A', 'does not equal', 'class loader B')]"
"Notice how the MyObject class is referenced in the code, as the type of the object variable.","[('MyObject class', 'referenced in', 'code'), ('object variable', 'has type', 'MyObject class')]"
This causes the MyObject class to be loaded by the same class loader that loaded the class this code is residing in.,"[('MyObject class', 'loaded by', 'same class loader'), ('same class loader', 'loaded', 'class this code is residing in')]"
"If the myClassReloadingFactory object factory reloads the MyObject class using a different class loader than the class the above code resides in, you cannot cast the instance of the reloaded MyObject class to the MyObject type of the object variable.","[('myClassReloadingFactory', 'reloads', 'MyObject class'), ('myClassReloadingFactory', 'uses', 'different class loader'), ('different class loader', 'compared to', 'class the above code resides in'), ('instance of reloaded MyObject class', 'cannot be cast to', 'MyObject type of object variable')]"
"Since the two MyObject classes were loaded with different class loaders, the are regarded as different classes, even if they have the same fully qualified class name.","[('MyObject class', 'loaded with', 'different class loaders'), ('different class loaders', 'regard as', 'different classes'), ('different classes', 'have', 'same fully qualified class name')]"
Trying to cast an object of the one class to a reference of the other will result in a ClassCastException.,"[('object', 'instance of', 'one class'), ('object', 'cast to', 'reference of the other'), ('cast', 'results in', 'ClassCastException')]"
"Either of these two methods will work if the type of the variable, the interface or superclass, is not reloaded when the implementing class or subclass is reloaded.","[('method', 'will work if', 'type of the variable is not reloaded'), ('method', 'will work if', 'interface is not reloaded'), ('method', 'will work if', 'superclass is not reloaded'), ('type of the variable', 'is not reloaded when', 'implementing class is reloaded'), ('type of the variable', 'is not reloaded when', 'subclass is reloaded'), ('interface', 'is not reloaded when', 'implementing class is reloaded'), ('interface', 'is not reloaded when', 'subclass is reloaded'), ('superclass', 'is not reloaded when', 'implementing class is reloaded'), ('superclass', 'is not reloaded when', 'subclass is reloaded')]"
To make this work you will of course need to implement your class loader to let the interface or superclass be loaded by its parent.,"[('you', 'need to implement', 'your class loader'), ('class loader', 'let', 'interface'), ('class loader', 'let', 'superclass'), ('interface', 'be loaded by', 'parent'), ('superclass', 'be loaded by', 'parent')]"
"When your class loader is asked to load the MyObject class, it will also be asked to load the MyObjectInterface class, or the MyObjectSuperclass class, since these are referenced from within the MyObject class.","[('class loader', 'asked to load', 'MyObject class'), ('class loader', 'asked to load', 'MyObjectInterface class'), ('class loader', 'asked to load', 'MyObjectSuperclass class'), ('MyObject class', 'references', 'MyObjectInterface class'), ('MyObject class', 'references', 'MyObjectSuperclass class')]"
Your class loader must delegate the loading of those classes to the same class loader that loaded the class containing the interface or superclass typed variables.,"[('Your class loader', 'must delegate the loading of', 'those classes'), ('the same class loader', 'loaded', 'the class'), ('the class', 'contains', 'the interface or superclass typed variables')]"
Notice how it delegates class loading to its parent except for the one class it is intended to be able to reload.,"[('it', 'delegates', 'class loading'), ('class loading', 'delegated to', 'its parent'), ('it', 'intended to reload', 'one class')]"
"If the loading of this class is delegated to the parent class loader, it cannot be reloaded later.","[('loading of this class', 'is delegated to', 'parent class loader'), ('this class', 'cannot be reloaded', 'later')]"
"Remember, a class can only be loaded once by the same ClassLoader instance.","[('class', 'loaded by', 'ClassLoader instance'), ('ClassLoader instance', 'can load', 'class')]"
It is not a production ready template for your own class loaders.,"[('template', 'is not', 'production ready'), ('template', 'for', 'your own class loaders')]"
"Your own class loaders should probably not be limited to a single class, but a collection of classes that you know you will need to reload.","[('Your own class loaders', 'should not be limited to', 'a single class'), ('Your own class loaders', 'should be', 'a collection of classes'), ('a collection of classes', 'that you know you will need to', 'reload')]"
"In addition, you should probably not hardcode the class paths either.","[('you', 'should not', 'hardcode the class paths')]"
Here is the reflection.MyObject class that is loaded using the class loader.,"[('MyObject class', 'is loaded using', 'class loader')]"
Notice how it both extends a superclass and implements an interface.,"[('it', 'extends', 'superclass'), ('it', 'implements', 'interface')]"
The name of this class is why I refer to these dynamic interface implementations as dynamic proxies.,"[('this class', 'name is', 'why I refer to these dynamic interface implementations as dynamic proxies')]"
As mentioned earlier you must pass an InvocationHandler implementation to the Proxy.newProxyInstance() method.,"[('InvocationHandler implementation', 'passed to', 'Proxy.newProxyInstance() method')]"
The proxy parameter passed to the invoke() method is the dynamic proxy object implementing the interface.,"[('proxy parameter', 'passed to', 'invoke() method'), ('dynamic proxy object', 'implements', 'interface')]"
The Method object passed into the invoke() method represents the method called on the interface the dynamic proxy implements.,"[('Method object', 'passed into', 'invoke() method'), ('Method object', 'represents', 'method called on the interface'), ('dynamic proxy', 'implements', 'interface')]"
"But now you can check via the mock if the DAO uses the connection properly, for instance if the connection.close() is called (or NOT called), if you expected that.","[('DAO', 'uses', 'connection'), ('connection', 'has method', 'close()'), ('mock', 'checks', 'DAO'), ('mock', 'checks', 'connection.close()')]"
Thus the factory interface and your class could look something like this:,"[('factory interface', 'could look like', 'this'), ('your class', 'could look like', 'this')]"
"When the MyAction class calls methods on the IMyFactory instance injected into its constructor by the container, the method calls are translated into calls to the IContainer.instance() method, which is the method you use to obtain instances from the container.","[('MyAction class', 'calls methods on', 'IMyFactory instance'), ('IMyFactory instance', 'injected into', 'MyAction class constructor'), ('container', 'injects', 'IMyFactory instance'), ('method calls', 'translated into', 'calls to IContainer.instance() method'), ('IContainer.instance() method', 'used to obtain', 'instances from the container')]"
Using Java Reflection you can inspect the fields (member variables) of classes and get / set them at runtime.,"[('Java Reflection', 'used for', 'inspect fields of classes'), ('Java Reflection', 'used for', 'get fields at runtime'), ('Java Reflection', 'used for', 'set fields at runtime')]"
The Field[] array will have one Field instance for each public field declared in the class.,"[('Field[] array', 'contains', 'Field instance'), ('Field instance', 'associated with', 'public field'), ('public field', 'declared in', 'class')]"
"If no field exists with the name given as parameter to the getField() method, a NoSuchFieldException is thrown.","[('getField() method', 'parameter', 'name'), ('NoSuchFieldException', 'is thrown by', 'getField() method')]"
"Once you have obtained a Field instance, you can get its field name using the Field.getName() method, like this:","[('Field instance', 'has method', 'Field.getName()'), ('Field.getName()', 'returns', 'field name')]"
"Once you have obtained a Field reference you can get and set its values using the Field.get() and Field.set()methods, like this:","[('Field', 'has method', 'get()'), ('Field', 'has method', 'set()'), ('Field reference', 'allows', 'get()'), ('Field reference', 'allows', 'set()')]"
The objectInstance parameter passed to the get and set method should be an instance of the class that owns the field.,"[('objectInstance parameter', 'passed to', 'get method'), ('objectInstance parameter', 'passed to', 'set method'), ('objectInstance parameter', 'should be an instance of', 'class'), ('class', 'owns', 'field')]"
"In the above example an instance of MyObject is used, because the someField is an instance member of the MyObject class.","[('someField', 'is an instance member of', 'MyObject class'), ('instance of MyObject', 'is used in', 'above example')]"
"It the field is a static field (public static ...) pass null as parameter to the get and set methods, instead of the objectInstance parameter passed above.","[('field', 'is a type of', 'static field'), ('static field', 'has method', 'get'), ('static field', 'has method', 'set'), ('get', 'requires parameter', nan), ('set', 'requires parameter', nan), ('get', 'alternative parameter', 'objectInstance'), ('set', 'alternative parameter', 'objectInstance')]"
When you write a class or interface you can specify that it should be paramerizable.,"[('class or interface', 'can be', 'parameterizable')]"
"Rather than create a list of Object you can parameterize java.util.List to create a list of say String, like this:","[('java.util.List', 'can be parameterized to create a list of', 'String'), ('java.util.List', 'can be parameterized to create a list of', 'Object')]"
"When inspecting a parameterizable type itself at runtime via reflection, like java.util.List, there is no way of knowing what type is has been parameterized to.","[('java.util.List', 'inspected at runtime via', 'reflection'), ('parameterizable type', 'inspected at runtime via', 'reflection'), ('parameterizable type', 'has no way of knowing', 'what type it has been parameterized to')]"
If you have obtained a java.lang.reflect.Method object it is possible to obtain information about its generic return type.,"[('java.lang.reflect.Method object', 'allows', 'obtain information about its generic return type')]"
Here is an example class with a method having a parameterized return type:,"[('example class', 'has method', 'method'), ('method', 'has return type', 'parameterized')]"
In this class it is possible to obtain the generic return type of the getStringList() method.,"[('class', 'has method', 'getStringList()'), ('getStringList()', 'has return type', 'generic')]"
"In other words, it is possible to detect that getStringList() returns a List<String> and not just a List.","[('getStringList()', 'returns', 'List<String>'), ('getStringList()', 'returns', 'List')]"
"This piece of code will print out the text ""typeArgClass = java.lang.String"".",
The Type[] array typeArguments array will contain one item - a Class instance representing the class java.lang.String.,"[('typeArguments array', 'instance of', 'Type[] array'), ('typeArguments array', 'contains', 'Class instance'), ('Class instance', 'represents', 'java.lang.String')]"
Here is an example class with a method taking a parameterized List as parameter:,"[('example class', 'has method', 'method'), ('method', 'takes parameter', 'parameterized List')]"
The Type[] array parameterArgTypes array will contain one item - a Class instance representing the class java.lang.String.,"[('parameterArgTypes', 'type', 'Type[] array'), ('parameterArgTypes', 'contains', 'Class instance'), ('Class instance', 'represents', 'java.lang.String')]"
Fields are class member variables - either static or instance variables.,"[('Fields', 'are', 'class member variables'), ('class member variables', 'include', 'static variables'), ('class member variables', 'include', 'instance variables')]"
The Type[] array fieldArgTypes array will contain one item - a Class instance representing the class java.lang.String.,"[('fieldArgTypes array', 'will contain', 'one item'), ('one item', 'instance of', 'Class'), ('Class', 'represents', 'java.lang.String')]"
Using Java Reflection you can inspect the methods of classes and invoke them at runtime.,"[('Java Reflection', 'used for', 'inspect methods of classes'), ('Java Reflection', 'used for', 'invoke methods at runtime')]"
This can be used to detect what getters and setters a given class has.,"[('This', 'can be used to detect', 'getters'), ('This', 'can be used to detect', 'setters'), ('getters', 'belong to', 'class'), ('setters', 'belong to', 'class')]"
"You cannot ask for getters and setters explicitly, so you will have to scan through all the methods of a class and check if each method is a getter or setter.","[('You', 'cannot ask for', 'getters and setters'), ('You', 'will have to scan through', 'all the methods of a class'), ('You', 'will have to check if', 'each method is a getter or setter')]"
Here is a code example that finds getter and setters of a class:,"[('code example', 'finds', 'getter and setters'), ('getter and setters', 'belong to', 'class')]"
The Method[] array will have one Method instance for each public method declared in the class.,"[('Method[] array', 'contains', 'Method instance'), ('Method instance', 'declared in', 'class'), ('Method', 'access level', 'public')]"
"This example returns the public method named ""doSomething"", in the given class which takes a String as parameter:",
"If no method matches the given method name and arguments, in this case String.class, a NoSuchMethodException is thrown.","[('method', 'matches', 'method name'), ('method', 'matches', 'arguments'), ('arguments', 'instance of', 'String.class'), ('NoSuchMethodException', 'is thrown', 'if no method matches')]"
"In this example, if doSomething(String.class) is not static, you need to supply a valid MyObject instance instead of null;","[('doSomething(String.class)', 'is not', 'static'), ('you', 'need to supply', 'valid MyObject instance'), ('valid MyObject instance', 'instead of', nan)]"
"The Method.invoke(Object target, Object ... parameters) method takes an optional amount of parameters, but you must supply exactly one parameter per argument in the method you are invoking.","[('Method.invoke', 'takes', 'parameters'), ('parameters', 'quantity', 'optional'), ('you', 'must supply', 'one parameter per argument'), ('one parameter per argument', 'in', 'method you are invoking')]"
This Java module reflection tutorial will explain how to access the Java Module a Java class belongs to via Java reflection.,"[('Java module reflection tutorial', 'will explain', 'how to access the Java Module'), ('Java class', 'belongs to', 'Java Module'), ('Java reflection', 'access', 'Java Module')]"
"Thus, each Java class belongs to a package, and the package belongs to a module.","[('Java class', 'belongs to', 'package'), ('package', 'belongs to', 'module')]"
A Java module is represented by the Java reflection class java.lang.Module in the Java module java.base.,"[('Java module', 'represented by', 'java.lang.Module'), ('java.lang.Module', 'part of', 'java.base')]"
"Via this class you can interact with the Java Platform Module System to obtain information about a given module, or modify a module.","[('this class', 'interact with', 'Java Platform Module System'), ('Java Platform Module System', 'obtain information about', 'a given module'), ('this class', 'modify', 'a module')]"
"You can obtain an instance of the Module class via a Class instance, like this:","[('Module class', 'can be obtained via', 'Class instance')]"
You can check if a Module instance a represents a named module by calling the Module isNamed() method.,"[('Module instance a', 'represents', 'named module'), ('Module', 'has method', 'isNamed()')]"
You can check if a Module is a named module via the Module isOpen() method.,"[('Module', 'has method', 'isOpen()'), ('isOpen()', 'checks if', 'Module is a named module')]"
Once you have access to a Module instance you can access its ModuleDescriptor via the getDescriptor() method.,"[('Module instance', 'has access to', 'ModuleDescriptor'), ('ModuleDescriptor', 'accessed via', 'getDescriptor() method')]"
Here is an example of accessing a Java Module's ModuleDescriptor via getDescriptor() :,"[('Java Module', 'has method', 'getDescriptor()'), ('getDescriptor()', 'accesses', 'ModuleDescriptor')]"
You can get the name of a named module from its module descriptor via the ModuleDescriptor name() method.,"[('named module', 'has method', 'ModuleDescriptor name()'), ('ModuleDescriptor name()', 'retrieves', 'name of named module')]"
"You can read the list of packages exported by a Java module via Java reflection, via the ModuleDescriptor exports() method.","[('Java module', 'exports', 'list of packages'), ('list of packages', 'read via', 'Java reflection'), ('list of packages', 'read via', 'ModuleDescriptor exports() method')]"
You can check if a Java module is an automatic module or not via the ModuleDescriptor isAutomatic() method.,"[('Java module', 'can be checked by', 'ModuleDescriptor isAutomatic() method'), ('ModuleDescriptor isAutomatic() method', 'checks if', 'Java module is an automatic module')]"
You can check if a Java module is an open module or not via the ModuleDescriptor isOpen() method.,"[('Java module', 'can be checked via', 'ModuleDescriptor isOpen() method'), ('Java module', 'type', 'open module')]"
You can read the module service dependencies via the ModuleDescriptor uses() method.,"[('ModuleDescriptor', 'has method', 'uses()'), ('uses()', 'reads', 'module service dependencies')]"
Despite the common belief it is actually possible to access private fields and methods of other classes via Java Reflection.,"[('Java Reflection', 'can access', 'private fields'), ('Java Reflection', 'can access', 'private methods'), ('private fields', 'belong to', 'other classes'), ('private methods', 'belong to', 'other classes')]"
To access a private field you will need to call the Class.getDeclaredField(String name) or Class.getDeclaredFields() method.,"[('private field', 'access method', 'Class.getDeclaredField(String name)'), ('private field', 'access method', 'Class.getDeclaredFields()')]"
"The methods Class.getField(String name) and Class.getFields() methods only return public fields, so they won't work.","[('Class.getField(String name)', 'returns', 'public fields'), ('Class.getFields()', 'returns', 'public fields'), ('methods', 'include', 'Class.getField(String name)'), ('methods', 'include', 'Class.getFields()'), ('public fields', 'not returned by', 'Class.getField(String name) and Class.getFields()')]"
"Here is a simple example of a class with a private field, and below that the code to access that field via Java Reflection:","[('class', 'has field', 'private field'), ('code', 'accesses field', 'private field'), ('Java Reflection', 'used by', 'code')]"
"This method only returns fields declared in that particular class, not fields declared in any superclasses.","[('method', 'returns', 'fields'), ('fields', 'declared in', 'particular class'), ('fields', 'not declared in', 'superclasses')]"
"By calling Field.setAcessible(true) you turn off the access checks for this particular Field instance, for reflection only.","[('Field', 'method', 'setAccessible'), ('setAccessible', 'parameter', 'true'), ('setAccessible', 'effect', 'turn off access checks'), ('access checks', 'applies to', 'Field instance'), ('turn off access checks', 'purpose', 'reflection only')]"
"To access a private method you will need to call the Class.getDeclaredMethod(String name, Class[] parameterTypes) or Class.getDeclaredMethods() method.","[('private method', 'accessed by', 'Class.getDeclaredMethod(String name, Class[] parameterTypes)'), ('private method', 'accessed by', 'Class.getDeclaredMethods()')]"
"The methods Class.getMethod(String name, Class[] parameterTypes) and Class.getMethods() methods only return public methods, so they won't work.","[('Class.getMethod(String name, Class[] parameterTypes)', 'returns', 'public methods'), ('Class.getMethods()', 'returns', 'public methods')]"
"Here is a simple example of a class with a private method, and below that the code to access that method via Java Reflection:","[('class', 'has method', 'private method'), ('code', 'accesses method', 'private method'), ('access', 'via', 'Java Reflection')]"
"This code example will print out the text ""returnValue = The Private Value"", which is the value returned by the method getPrivateString() when invoked on the PrivateObject instance created at the beginning of the code sample.",
"This method only returns methods declared in that particular class, not methods declared in any superclasses.","[('method', 'returns', 'methods declared in that particular class'), ('method', 'does not return', 'methods declared in any superclasses')]"
"By calling Method.setAcessible(true) you turn off the access checks for this particular Method instance, for reflection only.","[('Method.setAcessible(true)', 'turns off', 'access checks'), ('access checks', 'applies to', 'Method instance'), ('Method.setAcessible(true)', 'used for', 'reflection only')]"
"Java Reflection makes it possible to inspect classes, interfaces, fields and methods at runtime, without knowing the names of the classes, methods etc.","[('Java Reflection', 'makes possible', 'inspect classes'), ('Java Reflection', 'makes possible', 'inspect interfaces'), ('Java Reflection', 'makes possible', 'inspect fields'), ('Java Reflection', 'makes possible', 'inspect methods'), ('inspect classes', 'occurs at', 'runtime'), ('inspect interfaces', 'occurs at', 'runtime'), ('inspect fields', 'occurs at', 'runtime'), ('inspect methods', 'occurs at', 'runtime')]"
"It will explain the basics of Java Reflection including how to work with arrays, annotations, generics and dynamic proxies, and do dynamic class loading and reloading.","[('Java Reflection', 'includes', 'basics'), ('basics', 'includes', 'how to work with arrays'), ('basics', 'includes', 'annotations'), ('basics', 'includes', 'generics'), ('basics', 'includes', 'dynamic proxies'), ('basics', 'includes', 'dynamic class loading'), ('basics', 'includes', 'reloading')]"
"It will also show you how to do more specific Java Reflection tasks, like reading all getter methods of a class, or accessing private fields and methods of a class.","[('Java Reflection', 'can perform', 'reading all getter methods of a class'), ('Java Reflection', 'can perform', 'accessing private fields and methods of a class')]"
This example obtains the Class object from the class called MyObject.,"[('Class object', 'obtained from', 'class called MyObject')]"
"Using the class object the example gets a list of the methods in that class, iterates the methods and print out their names.","[('example', 'uses', 'class object'), ('example', 'gets', 'list of methods'), ('list of methods', 'in', 'class'), ('example', 'iterates', 'methods'), ('example', 'prints out', 'names of methods')]"
When using Java reflection the starting point is often a Class object representing some Java class you want to inspect via reflection.,"[('Java reflection', 'starting point', 'Class object'), ('Class object', 'represents', 'Java class'), ('Java class', 'inspected via', 'reflection')]"
"For instance, to obtain the Class object for a class named MyObject you could write:","[('MyObject', 'is a', 'Class object')]"
Now you have a reference to the Class object for the MyObject class.,"[('MyObject', 'instance of', 'Class')]"
"Once you have a reference to the Class object representing some class, you can see what fields that class contains.","[('Class object', 'represents', 'class'), ('class', 'contains', 'fields')]"
Here is an example of accessing fields of a Java class:,"[('example', 'related to', 'accessing fields'), ('accessing fields', 'related to', 'Java class')]"
Using Java Reflection it is possible find out what constructors a given Java class contains and what parameters they take etc.,"[('Java Reflection', 'used to find', 'constructors of a Java class'), ('constructors of a Java class', 'have', 'parameters')]"
You can also see what methods a given class has from its Class object.,"[('Class object', 'has methods', 'class')]"
Here is an example of accessing the methods a given class via Java reflection:,"[('Java reflection', 'accesses methods of', 'class')]"
You can also use Java reflection to find out what getter and setter methods a class has.,"[('Java reflection', 'can be used to find', 'getter methods'), ('Java reflection', 'can be used to find', 'setter methods'), ('getter methods', 'are methods of', 'a class'), ('setter methods', 'are methods of', 'a class')]"
You can even access private fields and methods via Java reflection - even from outside the class that owns the private field or method.,"[('Java reflection', 'can access', 'private fields'), ('Java reflection', 'can access', 'private methods'), ('private fields', 'owned by', 'class'), ('private methods', 'owned by', 'class')]"
"In case a Java class has annotations which are available at runtime, you can access them via Java reflection too.","[('Java class', 'has', 'annotations'), ('annotations', 'availability', 'runtime'), ('you', 'can access', 'annotations'), ('Java reflection', 'used for', 'accessing annotations')]"
"For instance, you can determine what type of class the array is an array of.","[('array', 'is an array of', 'class')]"
"For instance, if you are introspecting a String array, you can detect that the element type is String by inspecting the array class.","[('String array', 'has element type', 'String'), ('element type', 'detected by', 'inspecting the array class')]"
"Java reflection has a special Proxy class that can implement a Java Interface dynamically at runtime, rather than at compile time.","[('Java reflection', 'has special class', 'Proxy class'), ('Proxy class', 'can implement', 'Java Interface'), ('Java Interface', 'implemented at', 'runtime'), ('Java Interface', 'not implemented at', 'compile time')]"
In Java it is possible to dynamically load and also reload classes using a Java ClassLoader.,"[('Java', 'allows', 'dynamically load classes'), ('Java', 'allows', 'reload classes'), ('Java', 'uses', 'Java ClassLoader')]"
"The ClassLoader class is actually not part of the Java Reflection API, but since Java Reflection is often used to achieve ""dynamic"" behaviour (behavioral changes at runtime), and dynamic class loading and reloading kind of fits into this theme, I have decided to include that tutorial in my Java Reflection tutorial.",
Dynamic class loading and reloading is explained in my Java Reflection - Dynamic Class Loading and Reloading tutorial.,"[('Dynamic class loading and reloading', 'explained in', 'Java Reflection - Dynamic Class Loading and Reloading tutorial')]"
The Java regex API is located in the java.util.regex package which has been part of standard Java (JSE) since Java 1.4.,"[('Java regex API', 'located in', 'java.util.regex package'), ('java.util.regex package', 'part of', 'standard Java (JSE)'), ('standard Java (JSE)', 'since version', 'Java 1.4')]"
"Although Java regex has been part of standard Java since Java 1.4, this Java regex tutorial covers the Java regex API released with Java 8.","[('Java regex', 'part of', 'standard Java'), ('standard Java', 'since', 'Java 1.4'), ('Java regex tutorial', 'covers', 'Java regex API'), ('Java regex API', 'released with', 'Java 8')]"
But first I will introduce the core classes of the Java regex API in the following section.,"[('I', 'will introduce', 'core classes of the Java regex API'), ('core classes of the Java regex API', 'mentioned in', 'following section')]"
The Matcher class is used to match a given regular expression (Pattern instance) against a text multiple times.,"[('Matcher class', 'used to match', 'regular expression'), ('regular expression', 'instance of', 'Pattern'), ('Matcher class', 'used against', 'text')]"
Both the Pattern and Matcher classes are covered in detail in their own texts.,"[('Pattern', 'covered in', 'texts'), ('Matcher', 'covered in', 'texts')]"
The third line uses the Pattern.matches() static method to check if the regular expression (pattern) matches the text.,"[('third line', 'uses', 'Pattern.matches() static method'), ('Pattern.matches() static method', 'checks if', 'regular expression matches the text')]"
"If the regular expression matches the text, then Pattern.matches() returns true.","[('regular expression', 'matches', 'text'), ('Pattern.matches()', 'returns', 'true')]"
If the regular expression does not match the text Pattern.matches() returns false.,"[('regular expression', 'does not match', 'text'), ('Pattern.matches()', 'returns', 'false')]"
"The example does not actually check if the found http:// string is part of a valid URL, with domain name and suffix (.com, .net etc.).","[('The example', 'does not check', 'valid URL'), ('valid URL', 'has part', 'http:// string'), ('valid URL', 'has part', 'domain name'), ('valid URL', 'has part', 'suffix'), ('suffix', 'examples', '.com'), ('suffix', 'examples', '.net')]"
"Here is another Java regex example which uses the Matcher class to locate multiple occurrences of the substring ""is"" inside a text:",
The special metacharacter meaning of an escaped metacharacter is ignored - only its actual literal value (e.g.,"[('escaped metacharacter', 'has special meaning', 'ignored'), ('escaped metacharacter', 'has literal value', 'actual literal value')]"
Java regular expressions support matching any of a specified set of characters using what is referred to as character classes.,"[('Java regular expressions', 'support', 'matching any of a specified set of characters'), ('matching any of a specified set of characters', 'using', 'character classes')]"
"The character class (set of characters to match) is enclosed in the square brackets - the [ae] part of the regular expression, in other words.","[('character class', 'enclosed in', 'square brackets'), ('ae', 'part of', 'regular expression')]"
"The character class will match one of the enclosed characters regardless of which, but no mor than one.","[('character class', 'will match', 'one of the enclosed characters')]"
"For instance, the character class [a-z] will match all characters between a lowercase a and a lowercase z, both a and z included.","[('character class [a-z]', 'matches', 'all characters between a lowercase a and a lowercase z'), ('character class [a-z]', 'includes', 'a'), ('character class [a-z]', 'includes', 'z')]"
You can have more than one character range within a character class.,"[('character class', 'can contain', 'more than one character range')]"
"For instance, the character class [a-zA-Z] will match all letters between a and z or between A and Z .","[('character class [a-zA-Z]', 'will match', 'all letters between a and z'), ('character class [a-zA-Z]', 'will match', 'all letters between A and Z')]"
"For instance, the character class [0-9] will match the characters between 0 and 9, both included.","[('character class [0-9]', 'will match', 'characters between 0 and 9')]"
"If you want to match the square brackets inside a character class, here is how that looks:","[('you', 'want', 'match the square brackets inside a character class')]"
The character class contains the two square brackets escaped (\\[ and \\]).,"[('character class', 'contains', 'two square brackets escaped')]"
You can match digits of a number with the predefined character class with the code \d.,"[('digits of a number', 'can match with', 'predefined character class'), ('predefined character class', 'has code', '\\d')]"
Matching non-digits can be done with the predefined character class [\D] (uppercase D).,"[('Matching non-digits', 'can be done with', 'predefined character class [\\D]'), ('predefined character class [\\D]', 'notation', 'uppercase D')]"
You can match word characters with the predefined character class with the code \w .,"[('word characters', 'matched with', 'predefined character class'), ('predefined character class', 'code', '\\w')]"
You can match non-word characters with the predefined character class [\W] (uppercase W).,"[('non-word characters', 'can match with', 'predefined character class [\\W]'), ('predefined character class [\\W]', 'notation', 'uppercase W')]"
Here is a regular expression example using the non-word character class:,"[('regular expression example', 'uses', 'non-word character class')]"
The Java String class has a few regular expression methods too.,"[('Java String class', 'has method', 'regular expression methods')]"
The Java String split() method splits the string into N substrings and returns a String array with these substrings.,"[('Java String split() method', 'splits', 'string'), ('Java String split() method', 'returns', 'String array'), ('String array', 'contains', 'substrings')]"
The split() method takes a regular expression as parameter and splits the string at all positions in the string where the regular expression matches a part of the string.,"[('split() method', 'takes', 'regular expression'), ('split() method', 'splits', 'string'), ('regular expression', 'matches', 'part of the string')]"
The Java Matcher class (java.util.regex.Matcher) is used to search through a text for multiple occurrences of a regular expression.,"[('Java Matcher class', 'used to', 'search through a text'), ('Java Matcher class', 'search for', 'multiple occurrences'), ('Java Matcher class', 'search for', 'regular expression')]"
I will cover the core methods of the Java Matcher class in this tutorial.,"[('I', 'will cover', 'core methods of the Java Matcher class'), ('core methods of the Java Matcher class', 'covered in', 'this tutorial')]"
"For a full list, see the official JavaDoc for the Matcher class.","[('JavaDoc', 'contains', 'Matcher class')]"
Here is a quick Java Matcher example so you can get an idea of how the Matcher class works:,"[('Java', 'has example', 'Matcher example'), ('Matcher example', 'demonstrates', 'how the Matcher class works')]"
"The matches() returns true if the regular expression matches the text, and false if not.","[('matches()', 'returns', 'true'), ('regular expression', 'matches', 'text'), ('matches()', 'returns', 'false')]"
You can do a whole lot more with the Matcher class.,"[('Matcher class', 'enables', 'do a whole lot more')]"
The Pattern class is covered separately in my Java Regex Pattern tutorial.,"[('Pattern class', 'covered in', 'Java Regex Pattern tutorial')]"
Creating a Matcher is done via the matcher() method in the Pattern class.,"[('Matcher', 'created via method', 'matcher()'), ('matcher()', 'method of', 'Pattern class')]"
"The matches() method in the Matcher class matches the regular expression against the whole text passed to the Pattern.matcher() method, when the Matcher was created.","[('matches() method', 'part of', 'Matcher class'), ('matches() method', 'matches', 'regular expression'), ('regular expression', 'against', 'whole text'), ('whole text', 'passed to', 'Pattern.matcher() method'), ('Matcher', 'created', 'Matcher class')]"
"If the regular expression matches the whole text, then the matches() method returns true.","[('regular expression', 'matches', 'whole text'), ('matches() method', 'returns', 'true')]"
You cannot use the matches() method to search for multiple occurrences of a regular expression in a text.,"[('matches() method', 'cannot be used to search for', 'multiple occurrences of a regular expression in a text')]"
"For that, you need to use the find(), start() and end() methods.","[('you', 'need to use', 'find()'), ('you', 'need to use', 'start()'), ('you', 'need to use', 'end()')]"
The Matcher lookingAt() method works like the matches() method with one major difference.,"[('lookingAt() method', 'works like', 'matches() method'), ('lookingAt() method', 'has difference', 'one major difference')]"
"The lookingAt() method only matches the regular expression against the beginning of the text, whereas matches() matches the regular expression against the whole text.","[('lookingAt()', 'matches', 'beginning of the text'), ('matches()', 'matches', 'whole text')]"
"In other words, if the regular expression matches the beginning of a text but not the whole text, lookingAt() will return true, whereas matches() will return false.","[('regular expression', 'matches', 'beginning of a text'), ('lookingAt()', 'returns', 'true'), ('matches()', 'returns', 'false')]"
Matching the regular expression against the beginning of the text (lookingAt()) will return true.,"[('regular expression', 'matches against', 'beginning of the text'), ('lookingAt()', 'returns', 'true')]"
"Matching the regular expression against the whole text (matches()) will return false, because the text has more characters than the regular expression.","[('regular expression', 'matched against', 'whole text'), ('matches()', 'returns', 'false'), ('text', 'has more characters than', 'regular expression')]"
"The Matcher find() method searches for occurrences of the regular expressions in the text passed to the Pattern.matcher(text) method, when the Matcher was created.","[('Matcher', 'has method', 'find()'), ('find()', 'searches for', 'occurrences of regular expressions'), ('occurrences of regular expressions', 'in', 'text'), ('text', 'passed to', 'Pattern.matcher(text) method'), ('Matcher', 'was created', 'when')]"
"If multiple matches can be found in the text, the find() method will find the first, and then for each subsequent call to find() it will move to the next match.","[('find() method', 'action', 'find the first match'), ('find() method', 'action', 'move to the next match')]"
The methods start() and end() will give the indexes into the text where the found match starts and ends.,"[('methods', 'include', 'start()'), ('methods', 'include', 'end()'), ('start()', 'gives', 'indexes where match starts'), ('end()', 'gives', 'indexes where match ends')]"
Actually end() returns the index of the character just after the end of the matching section.,"[('end()', 'returns', 'index of the character just after the end of the matching section')]"
"Thus, you can use the return values of start() and end() inside a String.substring() call.","[('start()', 'return value of', 'String.substring() call'), ('end()', 'return value of', 'String.substring() call')]"
The Matcher reset() method resets the matching state internally in the Matcher.,"[('Matcher reset() method', 'resets', 'matching state'), ('matching state', 'is in', 'Matcher')]"
"In case you have started matching occurrences in a string via the find() method, the Matcher will internally keep a state about how far it has searched through the input text.","[('Matcher', 'uses method', 'find()'), ('find()', 'operates on', 'string'), ('Matcher', 'keeps state about', 'search progress'), ('search progress', 'relates to', 'input text')]"
By calling reset() the matching will start from the beginning of the text again.,"[('reset()', 'action', 'start matching from the beginning of the text again')]"
"Of course you could do this with the start() and end() methods, but it is easier to do so with the group functions.","[('start()', 'alternative to', 'group functions'), ('end()', 'alternative to', 'group functions'), ('group functions', 'easier to use than', 'start()'), ('group functions', 'easier to use than', 'end()')]"
The Matcher replaceAll() and replaceFirst() methods can be used to replace parts of the string the Matcher is searching through.,"[('Matcher', 'has method', 'replaceAll()'), ('Matcher', 'has method', 'replaceFirst()'), ('replaceAll()', 'used to', 'replace parts of the string'), ('replaceFirst()', 'used to', 'replace parts of the string'), ('Matcher', 'searches through', 'string')]"
"The Matcher appendReplacement() and appendTail() methods are used to replace string tokens in an input text, and append the resulting string to a StringBuffer.","[('Matcher', 'has method', 'appendReplacement()'), ('Matcher', 'has method', 'appendTail()'), ('appendReplacement()', 'used to', 'replace string tokens'), ('appendTail()', 'used to', 'append resulting string'), ('replace string tokens', 'in', 'input text'), ('append resulting string', 'to', 'StringBuffer')]"
"When you have found a match using the find() method, you can call the appendReplacement().","[('find()', 'used to find', 'match'), ('appendReplacement()', 'can be called after', 'find()')]"
"The appendReplacement() method keeps track of what has been copied into the StringBuffer, so you can continue searching for matches using find() until no more matches are found in the input text.","[('appendReplacement()', 'keeps track of', 'what has been copied into the StringBuffer'), ('find()', 'used for', 'searching for matches'), ('matches', 'found in', 'input text')]"
By calling appendTail() you can append these last characters to the StringBuffer too.,"[('appendTail()', 'action', 'append'), ('appendTail()', 'object', 'last characters'), ('append', 'target', 'StringBuffer')]"
"Notice how appendReplacement() is called inside the while(matcher.find()) loop, and appendTail() is called just after the loop.","[('appendReplacement()', 'is called inside', 'while(matcher.find()) loop'), ('appendTail()', 'is called after', 'while(matcher.find()) loop')]"
"The Java Pattern class (java.util.regex.Pattern), is the main access point of the Java regular expression API.","[('Java Pattern class', 'part of', 'Java regular expression API'), ('Java Pattern class', 'located in', 'java.util.regex.Pattern')]"
"Whenever you need to work with regular expressions in Java, you start with Java's Pattern class.","[('regular expressions', 'used in', 'Java'), ('Java', 'has class', 'Pattern class'), ('Pattern class', 'used for', 'regular expressions')]"
A regular expression is also sometimes referred to as a pattern (hence the name of the Java Pattern class).,"[('regular expression', 'referred to as', 'pattern'), ('Java Pattern class', 'name refers to', 'pattern')]"
You can use the Pattern.matches() method to quickly check if a text (String) matches a given regular expression.,"[('Pattern.matches() method', 'used to check', 'if a text matches a given regular expression'), ('text', 'type', 'String')]"
Or you can compile a Pattern instance using Pattern.compile() which can be used multiple times to match the regular expression against multiple texts.,"[('Pattern', 'can be compiled using', 'Pattern.compile()'), ('Pattern', 'can be used to match', 'regular expression'), ('Pattern', 'can be used multiple times to match', 'multiple texts')]"
The easiest way to check if a regular expression pattern matches a text is to use the static Pattern.matches() method.,"[('Pattern.matches() method', 'used for', 'check if a regular expression pattern matches a text')]"
"This Pattern.matches() example searches the string referenced by the text variable for an occurrence of the word ""is"", allowing zero or more characters to be present before and after the word (the two .",
"The Pattern.matches() method is fine if you just need to check a pattern against a text a single time, and the default settings of the Pattern class are appropriate.","[('Pattern.matches() method', 'used for', 'check a pattern against a text a single time'), ('Pattern class', 'has settings', 'default settings'), ('default settings', 'belong to', 'Pattern class')]"
"If you need to match for multiple occurrences, and even access the various matches, or just need non-default settings, you need to compile a Pattern instance using the Pattern.compile() method.","[('you', 'need', 'match for multiple occurrences'), ('you', 'need', 'access the various matches'), ('you', 'need', 'non-default settings'), ('you', 'need', 'compile a Pattern instance'), ('Pattern instance', 'compiled using', 'Pattern.compile() method')]"
"If you need to match a text against a regular expression pattern more than one time, you need to create a Pattern instance using the Pattern.compile() method.","[('text', 'matched against', 'regular expression pattern'), ('Pattern', 'created using', 'Pattern.compile() method')]"
You can also use the Pattern.compile() method to compile a Pattern using special flags.,"[('Pattern.compile()', 'method to compile', 'Pattern'), ('Pattern', 'can be compiled using', 'special flags')]"
The Java Pattern class contains a list of flags (int constants) that you can use to make the Pattern matching behave in certain ways.,"[('Java Pattern class', 'contains', 'list of flags'), ('list of flags', 'used to', 'make Pattern matching behave in certain ways')]"
"For more information of the flags you can use with the Java Pattern class, see the JavaDoc for Pattern .","[('Java Pattern class', 'has documentation', 'JavaDoc'), ('JavaDoc', 'provides information on', 'flags')]"
The Matcher class has a matches() method that tests whether the pattern matches the text.,"[('Matcher class', 'has method', 'matches()'), ('matches()', 'tests', 'whether the pattern matches the text')]"
"Too keep this text short, the Matcher covered in more detail in the text about the Java Matcher class.","[('Matcher', 'covered in', 'text about the Java Matcher class')]"
"The split() method in the Pattern class can split a text into an array of String's, using the regular expression (the pattern) as delimiter.","[('split() method', 'located in', 'Pattern class'), ('split() method', 'function', ""split a text into an array of String's""), ('split() method', 'uses', 'regular expression'), ('regular expression', 'used as', 'delimiter')]"
This Pattern.split() example splits the text in the text variable into 5 separate strings.,"[('Pattern.split()', 'splits', 'text in the text variable'), ('text in the text variable', 'split into', '5 separate strings')]"
Each of these strings are included in the String array returned by the split() method.,"[('strings', 'included in', 'String array'), ('String array', 'returned by', 'split() method')]"
The pattern() method of the Pattern class simply returns the pattern string (regular expression) that the Pattern instance was compiled from.,"[('pattern() method', 'part of', 'Pattern class'), ('pattern() method', 'returns', 'pattern string'), ('pattern string', 'type', 'regular expression'), ('Pattern instance', 'compiled from', 'pattern string')]"
Character classes are constructst that enable you to specify a match against multiple characters instead of just one.,"[('Character classes', 'are', 'constructs'), ('constructs', 'enable', 'you'), ('you', 'specify', 'a match'), ('a match', 'against', 'multiple characters'), ('multiple characters', 'instead of', 'just one')]"
"In other words, a character class matches a single character in the input text against multiple allowed characters in the character class.","[('character class', 'matches', 'single character'), ('single character', 'in', 'input text'), ('single character', 'against', 'multiple allowed characters'), ('multiple allowed characters', 'in', 'character class')]"
Character classes are nested inside a pair of square brackets [].,"[('Character classes', 'are nested inside', 'square brackets')]"
"The character class [Jj] will match either a J or a j, and the rest of the expression will match the characters ohn in that exact sequence.","[('character class [Jj]', 'will match', 'J'), ('character class [Jj]', 'will match', 'j'), ('rest of the expression', 'will match', 'characters ohn in that exact sequence')]"
The Java regular expression syntax has a few predefined character classes you can use.,"[('Java regular expression syntax', 'has', 'predefined character classes')]"
"For instance, the \d character class matches any digit, the \s character class matches any white space character, and the \w character matches any word character.","[('\\d character class', 'matches', 'any digit'), ('\\s character class', 'matches', 'any white space character'), ('\\w character', 'matches', 'any word character')]"
"The predefined character classes do not have to be enclosed in square brackets, but you can if you want to combine them.","[('predefined character classes', 'do not have to be enclosed in', 'square brackets'), ('you', 'can combine', 'predefined character classes')]"
The predefined character classes are listed in a table later in this text.,"[('predefined character classes', 'are listed in', 'table')]"
"The Java GZIPInputStream class (java.util.zip.GZIPInputStream) can be used to decompress files that are compressed with the GZIP compression algorithm, for instance via the GZIPOutputStream class.","[('Java GZIPInputStream class', 'can be used to decompress', 'files compressed with GZIP compression algorithm'), ('files', 'are compressed with', 'GZIP compression algorithm'), ('GZIP compression algorithm', 'can be used via', 'GZIPOutputStream class')]"
In the example above I passed it a FileInputStream connected to a file named myfile.zip.,"[('FileInputStream', 'connected to', 'file'), ('file', 'named', 'myfile.zip')]"
When you are finished reading data from the GZIPInputStream you should close it using its close() method.,"[('you', 'finished reading data from', 'GZIPInputStream'), ('you', 'should close', 'GZIPInputStream'), ('GZIPInputStream', 'has method', 'close()')]"
The Java GZIPOutputStream class (java.util.zip.GZIPOutStream) can be used to GZIP compress data and write it to an OutputStream.,"[('Java GZIPOutputStream class', 'can be used to', 'GZIP compress data'), ('Java GZIPOutputStream class', 'write to', 'OutputStream')]"
This Java ZIP tutorial explains how the core classes of the Java ZIP API works.,"[('Java ZIP tutorial', 'explains', 'core classes of the Java ZIP API'), ('core classes of the Java ZIP API', 'works with', 'Java ZIP API')]"
The Java ZipFile class is used to work with ZIP files containing multiple files.,"[('Java ZipFile class', 'used to work with', 'ZIP files'), ('ZIP files', 'contain', 'multiple files')]"
The Java GZIPInputStream and GZIPOutputStream classes are used to ZIP compress a single file.,"[('Java GZIPInputStream', 'used to', 'ZIP compress a single file'), ('GZIPOutputStream', 'used to', 'ZIP compress a single file')]"
The above classes will be covered in detail their own tutorials (see the side menu for links).,"[('The above classes', 'will be covered in', 'their own tutorials')]"
The Java ZipFile class (java.util.zip.ZipFile) can be used to read files from a ZIP file.,"[('Java ZipFile class', 'can be used to', 'read files from a ZIP file'), ('Java ZipFile class', 'part of', 'java.util.zip.ZipFile')]"
This tutorial will show you how to use the ZipFile class.,"[('tutorial', 'will show', 'how to use the ZipFile class')]"
In order to use the Java ZipFile class you must first create a ZipFile instance.,"[('Java ZipFile class', 'used by', 'create a ZipFile instance')]"
"As you can see, the ZipFile class takes a single parameter in its constructor.","[('ZipFile class', 'takes parameter', 'single parameter'), ('single parameter', 'is in', 'constructor')]"
Each file in the ZIP file is represented by a ZipEntry (java.util.zip.ZipEntry).,"[('file', 'is represented by', 'ZipEntry'), ('ZipEntry', 'is part of', 'java.util.zip.ZipEntry'), ('file', 'is part of', 'ZIP file')]"
To extract a file from the ZIP file you can call the method getEntry() method on the ZipFile class.,"[('getEntry() method', 'is called on', 'ZipFile class'), ('getEntry() method', 'extracts', 'file'), ('file', 'is extracted from', 'ZIP file')]"
This example gets a ZipEntry representing the file file1.txt which is contained in the ZIP file.,"[('file1.txt', 'is contained in', 'ZIP file'), ('ZIP file', 'contains', 'file1.txt')]"
The InputStream obtained from the getInputStream() of the ZipFile class can be read like any other Java InputStream.,"[('InputStream', 'obtained from', 'getInputStream()'), ('getInputStream()', 'part of', 'ZipFile class'), ('InputStream', 'can be read like', 'Java InputStream')]"
You can list all entries contained in a ZipFile using the entries() method.,"[('ZipFile', 'contains', 'entries'), ('entries', 'method', 'entries()')]"
You can iterate the Enumeration returned by the entries() method like this:,"[('entries() method', 'returns', 'Enumeration')]"
The Zip Slip attack consists of adding entries to a ZipFile that contains relative file paths with one or more /.. sections in the path.,"[('Zip Slip attack', 'consists of', 'adding entries to a ZipFile'), ('entries', 'contain', 'relative file paths'), ('relative file paths', 'contain', '/.. sections')]"
An entry in the ZipFile has the relative path ../../../../etc/hosts .,"[('entry', 'has relative path', '../../../../../etc/hosts')]"
The final path of that entry becomes: /apps/myapp/data/unzipped-file/../../../../etc/hosts which is equivalent of /etc/hosts .,"[('/apps/myapp/data/unzipped-file/../../../../etc/hosts', 'equivalent of', '/etc/hosts')]"
"Unzipping this file could potentially overwrite hour hosts file (on a Linux OS), enabling the attacker to point e.g.","[('Unzipping this file', 'could potentially overwrite', 'hosts file'), ('hosts file', 'located on', 'Linux OS'), ('attacker', 'could point', 'hosts file')]"
"The Java examples in this tutorial were created with Java 8, and Acme4J Client v. 2.1 and Acme4J Utils v. 0.3.","[('Java examples', 'created with', 'Java 8'), ('Java examples', 'created with', 'Acme4J Client v. 2.1'), ('Java examples', 'created with', 'Acme4J Utils v. 0.3')]"
Here is a Java class capable of creating a private key for use with Acme4J:,"[('Java class', 'capable of', 'creating a private key'), ('private key', 'used with', 'Acme4J')]"
Here is a class that can create a Let's Encrypt account:,"[('class', 'can create', ""Let's Encrypt account"")]"
It is the execute() method that starts the account creation process.,"[('execute() method', 'starts', 'account creation process')]"
The fully qualified name for the Order class is org.shredzone.acme4j.Order .,"[('Order class', 'has fully qualified name', 'org.shredzone.acme4j.Order')]"
Calling create() results in a request being sent to Let's Encrypt.,"[('create()', 'results in', 'request being sent'), ('request being sent', 'to', ""Let's Encrypt"")]"
Once you have called the order.create() method a request is sent to Let's Encrypt.,"[('order.create()', 'sends request to', ""Let's Encrypt"")]"
"The above example specifically looks for an HTTP authorization object, which is then triggered by calling challenge.trigger().","[('HTTP authorization object', 'is triggered by', 'calling challenge.trigger()')]"
"Before the challenge is triggered, you must read the value from challenge.getAuthorization() and upload it in a file to your web server.","[('challenge', 'has method', 'getAuthorization()'), ('you', 'must read value from', 'challenge.getAuthorization()'), ('you', 'upload value in file to', 'web server')]"
"... where ${domain} is the domain for which you are requesting the domain for (returned by challenge.getDomain() ), and ${token} is the value returned by challenge.getToken().","[('${domain}', 'is the domain for', 'requesting the domain'), ('challenge', 'returns', 'domain'), ('${token}', 'is the value returned by', 'challenge.getToken()')]"
"If your code cannot access your web server to upload the challenge file before calling challenge.trigger(), you can run the code in your debugger, set a breakpoint before calling challenge.trigger(), pause the code at that breakpoint, read the token (file name) and authorization (file content) out of the challenge object, upload that to your web server, and then continue the code in the debugger.","[('code', 'cannot access', 'web server'), ('code', 'upload', 'challenge file'), ('challenge file', 'uploaded to', 'web server'), ('code', 'run in', 'debugger'), ('breakpoint', 'set before calling', 'challenge.trigger()'), ('code', 'pause at', 'breakpoint'), ('token', 'read out of', 'challenge object'), ('authorization', 'read out of', 'challenge object'), ('token', 'is', 'file name'), ('authorization', 'is', 'file content'), ('token', 'upload to', 'web server'), ('authorization', 'upload to', 'web server'), ('code', 'continue in', 'debugger')]"
That is what happens in the last part of the processAuth() method.,"[('processAuth()', 'contains part', 'last part')]"
"First, the code above waits until the Order object has status Status.VALID.","[('code above', 'waits until', 'Order object has status Status.VALID'), ('Order object', 'has status', 'Status.VALID')]"
The value of that Ant property will be inserted at the place of the ${...} code.,"[('Ant property', 'value inserted at', '${...} code')]"
This example first defines a property named dir.build which has its value set to build.,"[('dir.build', 'is a', 'property'), ('dir.build', 'has value', 'build')]"
"Second, this example defines a property named dir.build.classes which has its value set to ${dir.build}/classes .","[('example', 'defines property', 'dir.build.classes'), ('dir.build.classes', 'has value', '${dir.build}/classes')]"
"When Ant defines this property it will resolve the value of the referenced property dir.build, and insert its value where the property is reference.","[('Ant', 'defines', 'property'), ('property', 'references', 'dir.build'), ('Ant', 'resolves', 'value of dir.build'), ('Ant', 'inserts', 'value')]"
"Thus, the second Ant property defined will have its final value set to build/classes because build is the value of the dir.build property referenced.","[('second Ant property', 'has final value', 'build/classes'), ('build', 'is value of', 'dir.build property')]"
"The echo task as defined here will print out the message ""This is version 1.2.3"" to the console.",
"Just to recap, a ""Java build tool"" is a tool which can compile Java code, run the unit tests for it, package the compiled classes into a JAR file and many, many other things.",
This Ant tutorial is based on Ant version 1.9.6 which is the newest version of Ant at the time of writing (august 2015).,"[('Ant tutorial', 'based on', 'Ant version 1.9.6'), ('Ant version 1.9.6', 'is version of', 'Ant'), ('Ant version 1.9.6', 'is newest version at time of', 'August 2015')]"
"Inside the project directory you have just created, create an empty file named build.xml.","[('project directory', 'contains', 'empty file'), ('empty file', 'named', 'build.xml')]"
"By default Ant looks for a build script named build.xml in your project root directory, so you might as well call your Ant build script build.xml.","[('Ant', 'looks for', 'build script'), ('build script', 'named', 'build.xml'), ('build.xml', 'located in', 'project root directory')]"
"You could use another name, but using build.xml makes your Ant commands shorter, and it makes it easier for other developers to find the Ant build script.","[('build.xml', 'makes', 'Ant commands shorter'), ('build.xml', 'makes it easier for', 'other developers to find the Ant build script')]"
Open the build.xml file and insert the following text (XML) into it:,"[('build.xml file', 'action', 'open'), ('text', 'format', 'XML'), ('text', 'insert into', 'build.xml file')]"
You can test this build file by opening a command prompt and change directory into the directory that contains the build.xml file and execute this command:,"[('You', 'can test', 'build file'), ('build file', 'contained in', 'directory'), ('directory', 'contains', 'build.xml file')]"
"This test was performed using Java 5, Butterfly Container 1.9.11-beta, and Guice 1.0.","[('Test', 'performed using', 'Java 5'), ('Test', 'performed using', 'Butterfly Container 1.9.11-beta'), ('Test', 'performed using', 'Guice 1.0')]"
"The test performs 10.000.000 instantiations of a TestProduct class using a no-arg constructor, for each DI mechanism.","[('Test', 'performs', '10.000.000 instantiations'), ('10.000.000 instantiations', 'of', 'TestProduct class'), ('TestProduct class', 'using', 'no-arg constructor'), ('10.000.000 instantiations', 'for each', 'DI mechanism')]"
Java is a statically typed language meaning that types (primtives and classes) cannot change at runtime.,"[('Java', 'is a', 'statically typed language'), ('statically typed language', 'means', 'types cannot change at runtime'), ('types', 'includes', 'primitives'), ('types', 'includes', 'classes')]"
"It is not like you can all of a sudden let your Java class members, method parameters and variables be untyped.","[('Java class members', 'can be', 'untyped'), ('method parameters', 'can be', 'untyped'), ('variables', 'can be', 'untyped')]"
"This is done at the beginning, by the method call BO.setDao(dao).","[('BO', 'method call', 'setDao(dao)')]"
"But, notice how no DI is used inside the BO.checkPersonIsValid() or the DAO.readPerson() methods.","[('BO.checkPersonIsValid()', 'does not use', 'DI'), ('DAO.readPerson()', 'does not use', 'DI')]"
I most likely never have to change implementation of the Person class.,"[('I', 'likely never have to change', 'implementation of the Person class')]"
In Java this will result in a class cast exception at runtime (or some similar type error exception).,"[('Java', 'results in', 'class cast exception'), ('Java', 'results in', 'type error exception'), ('class cast exception', 'occurs at', 'runtime'), ('type error exception', 'occurs at', 'runtime')]"
"Each factory definition states how a given instance is to be created and configured, when calling the container.instance() method.","[('factory definition', 'states', 'how a given instance is to be created and configured'), ('container', 'method', 'instance()')]"
"The input parameters .hashcode() and .equals() methods determine if an input parameter has an instance associated with it already, or a new one needs to be created and associated with the input parameter for succeeding calls.","[('.hashcode() method', 'determines', 'if an input parameter has an instance associated with it'), ('.equals() method', 'determines', 'if an input parameter has an instance associated with it'), ('input parameter', 'may have', 'an instance associated with it'), ('new instance', 'needs to be created and associated with', 'input parameter')]"
As you can see the constructor call was chained with a call to the setValue() method.,"[('constructor call', 'chained with', 'call to the setValue() method')]"
"Notice how the length() method is called on the ""value"" parameter.",
"If the setValue() method in the example above returns void, the factory will return the SomeObject instance the method was called on.","[('setValue() method', 'returns', 'void'), ('factory', 'will return', 'SomeObject instance'), ('method', 'was called on', 'SomeObject instance')]"
The factory defined by this script will return a SomeObject instance that has had the two methods setValue() and setValue2() invoked on it.,"[('factory', 'defined by', 'this script'), ('factory', 'returns', 'SomeObject instance'), ('SomeObject instance', 'has method invoked', 'setValue()'), ('SomeObject instance', 'has method invoked', 'setValue2()')]"
"Here is a list of classes and primitives that parameters can be converted to, automatically:","[('parameters', 'can be converted to', 'classes'), ('parameters', 'can be converted to', 'primitives')]"
Sometimes a constructor or method call in a factory definition matches more than one constructor or method in the owning class.,"[('constructor or method call', 'occurs in', 'factory definition'), ('constructor or method call', 'matches', 'more than one constructor or method'), ('more than one constructor or method', 'located in', 'owning class')]"
You can cast to any type or class available on the classpath.,"[('You', 'can cast to', 'type'), ('You', 'can cast to', 'class'), ('type', 'available on', 'classpath'), ('class', 'available on', 'classpath')]"
"To call a static method instead of a constructor when creating an instance of some class, simply write as you would in Java:","[('static method', 'used instead of', 'constructor'), ('creating', 'involves', 'instance'), ('instance', 'part of', 'class'), ('write', 'as in', 'Java')]"
Note: The container uses java.util.ArrayList and java.util.HashSet as the List and Set implementations.,"[('container', 'uses', 'java.util.ArrayList'), ('container', 'uses', 'java.util.HashSet'), ('java.util.ArrayList', 'implements', 'List'), ('java.util.HashSet', 'implements', 'Set')]"
From version 2.5.9 Butterfly Container Script provides a shortcut to configuring Map instances.,"[('Butterfly Container Script', 'provides', 'shortcut to configuring Map instances'), ('version 2.5.9', 'feature of', 'Butterfly Container Script')]"
First an instance of SomeObject is created and then the setValue() method is called on it.,"[('SomeObject', 'instance of', 'First'), ('setValue()', 'method of', 'SomeObject')]"
Below is an example that register the newly created instance with a static method in the MyClass class.,"[('example', 'register with', 'static method'), ('static method', 'located in', 'MyClass class')]"
You can inject instances of classes created locally in a factory definition.,"[('instances of classes', 'can be injected', 'in a factory definition'), ('classes', 'created', 'locally')]"
"Notice how the setNewValue() method is called on the instance obtained from the bean1 factory, before it is injected into OtherObject's constructor.","[('setNewValue() method', 'is called on', 'instance'), ('instance', 'is obtained from', 'bean1 factory'), ('instance', 'is injected into', ""OtherObject's constructor"")]"
"Thus, the setFurtherValue() method of the someObject singleton is called for each instance of bean2 created, even if the method call is redundant.","[('setFurtherValue() method', 'belongs to', 'someObject singleton'), ('setFurtherValue() method', 'called for', 'each instance of bean2'), ('method call', 'is', 'redundant')]"
"Notice how the bean2 definition obtains an instance from the bean1 factory, and calls the setValue() method on it before returning it.","[('bean2 definition', 'obtains instance from', 'bean1 factory'), ('bean2 definition', 'calls method on', 'instance'), ('method', 'is', 'setValue()'), ('bean2 definition', 'returns', 'instance')]"
"Input parameters can be given to the container.instance() method, like this:","[('container.instance()', 'has method', 'input parameters')]"
"The container cannot determine the type of input parameters until runtime, when the container.instance() method is called.","[('container', 'cannot determine', 'type of input parameters'), ('type of input parameters', 'determined at', 'runtime'), ('container', 'calls method', 'container.instance()')]"
Therefore it is only possible to call methods that exists in java.lang.Object on input parameters.,"[('methods', 'exists in', 'java.lang.Object'), ('call', 'possible on', 'methods'), ('call', 'possible on', 'input parameters')]"
"Your application will ask the container for an object, and the container will make sure that all dependencies (config parameters, collaborating objects, texts etc.)","[('Your application', 'will ask', 'the container'), ('the container', 'will make sure', 'all dependencies'), ('all dependencies', 'include', 'config parameters'), ('all dependencies', 'include', 'collaborating objects'), ('all dependencies', 'include', 'texts')]"
"Rather than having to design integration mechanisms yourself, and decide on configuration formats etc., you can have the dependency injection container do all that for you.","[('You', 'design', 'integration mechanisms'), ('You', 'decide on', 'configuration formats'), ('Dependency injection container', 'do', 'all that for you')]"
"The ""connectionTimeout"" factory is defined as a singleton returning whatever value the CONNECTION_TIMEOUT constant is set to in the Constants class.",
The simplest way to add a function is to create a static method in a Java class that performs the logic for the function.,"[('static method', 'is a', 'function'), ('static method', 'performs', 'logic'), ('logic', 'is for', 'function'), ('static method', 'is in', 'Java class')]"
Sometimes you may need to create an instance of some class and call a method on that instance.,"[('you', 'may need to create', 'instance'), ('instance', 'instance of', 'class'), ('you', 'may need to call', 'method'), ('method', 'called on', 'instance')]"
The beanB factory will call the beanA factory with the parameter returned from the static default() method.,"[('beanB factory', 'will call', 'beanA factory'), ('beanA factory', 'with parameter', 'returned from static default() method')]"
"If input parameter 0 passed to the beanB factory is null, then the default() method will return the default value ""default value"".",
"If you need to call the default() method more than once you can simplify the script a bit by mapping the default method to a factory, and then call this factory whenever the function is needed.","[('default() method', 'can be called', 'more than once'), ('script', 'can be simplified by', 'mapping the default method to a factory'), ('factory', 'is called', 'whenever the function is needed')]"
"The default() method has been mapped to a factory called ""default"".",
This default factory is then called from the beanB factory instead of calling the static default() method directly.,"[('default factory', 'is called from', 'beanB factory'), ('beanB factory', 'calls', 'default factory'), ('beanB factory', 'does not call', 'static default() method directly')]"
"There is no package and class name to disturb you when reading the script, and whenever you need the default function all you need to write is ""default(a, b)"", instead of ""com.myapp.util.Util.default(a, b)"".",
Defining the static max() method as a factory (and thereby a function) is done like this:,"[('static max() method', 'defined as', 'factory'), ('static max() method', 'defined as', 'function')]"
"This little script defines the ""max"" factory as a call to the static max() method with input parameter 0 and 1 passed to the max() method.",
"The max factory will call the max() method and return the value that is largest of either the input parameter 0 passed to the beanA factory, or the hard coded value 1.","[('max factory', 'calls method', 'max()'), ('max()', 'returns', 'largest value'), ('largest value', 'is of', 'input parameter 0'), ('largest value', 'is of', 'hard coded value 1'), ('input parameter 0', 'is passed to', 'beanA factory')]"
"This example uses the java.text.SimpleDateFormat class and defines its instance method parse() as a function called ""toDate"".",
Second the toDate factory is defined as a call to the toDateFactory and then a call to the parse() method on the instance returned from the toDateFactory.,"[('toDate factory', 'defined as', 'call to toDateFactory'), ('call to toDateFactory', 'followed by', 'call to parse() method'), ('parse() method', 'called on', 'instance returned from toDateFactory')]"
The toDate factory takes a single parameter which is the string to parse into a java.util.Date instance.,"[('toDate factory', 'takes parameter', 'string'), ('string', 'parses into', 'java.util.Date instance')]"
"It is possible to extend Butterfly Container Script (BCS) with custom instantiation modes, if the standard modes (new instance, singleton etc.)","[('Butterfly Container Script', 'can be extended with', 'custom instantiation modes'), ('Butterfly Container Script', 'has standard modes', 'new instance'), ('Butterfly Container Script', 'has standard modes', 'singleton')]"
"By calling the set() method with the current request as parameter, the request is associated with the thread calling the set() method.","[('set() method', 'called with', 'current request'), ('current request', 'associated with', 'thread'), ('thread', 'calling', 'set() method')]"
By calling the get() method the request object associated with the calling thread can be obtained.,"[('get() method', 'associated with', 'request object'), ('request object', 'associated with', 'calling thread')]"
"The ""request"" factory is defined as a call to the get() method on the product returned from the ""requestCache"" factory.",
"In other words, as a call to the get() method on the HttpRequestCache singleton.","[('get() method', 'called on', 'HttpRequestCache singleton')]"
"The ""session"" factory is defined as a call to the getSession() method of the product returned by the ""request"" factory.",
"In other words, as a call to the getSession() method on the request object obtained from the HttpRequestCache singleton, which is the request object associated with the calling thread.","[('getSession() method', 'called on', 'request object'), ('request object', 'obtained from', 'HttpRequestCache singleton'), ('request object', 'associated with', 'calling thread')]"
In order to make the the request and session factories return the correct objects you must first call the HttpRequestCache's set() method.,"[('request and session factories', 'return', 'correct objects'), ('HttpRequestCache', 'has method', 'set()'), ('set()', 'must be called', 'first')]"
"Another disadvantage is that all instantiation modes (singleton, thread singleton, flyweight etc.)","[('Instantiation modes', 'includes', 'singleton'), ('Instantiation modes', 'includes', 'thread singleton'), ('Instantiation modes', 'includes', 'flyweight')]"
"If you use an anonymous subclass of JavaFactory, inserted instead of ""new MyFactory()"", the JavaFactoryBuilder cannot access the ""otherFactory"" field, even if it is public.",
"Inner classes will do just fine too, as long as they are declared ""public static"".",
"This method takes 3 parameters: The name of the factory, the return type of the factory, and a subclass of JavaFactory which implements the factory.","[('method', 'takes parameter', 'name of the factory'), ('method', 'takes parameter', 'return type of the factory'), ('method', 'takes parameter', 'subclass of JavaFactory'), ('subclass of JavaFactory', 'implements', 'factory')]"
"The name is used when calling the container.instance(""name"") method to obtain an instance from the factory.",
JavaFactoryBuilder has a method that omits the return type and instead extracts that information from the return type of the JavaFactory subclass's instance method.,"[('JavaFactoryBuilder', 'has method', 'method'), ('method', 'omits', 'return type'), ('method', 'extracts information from', ""return type of JavaFactory subclass's instance method"")]"
Notice how no return type is passed in the addFactory() call.,"[('addFactory() call', 'does not have', 'return type')]"
Also notice how the return type of the instance() method is now MyObject.,"[('instance() method', 'has return type', 'MyObject')]"
By declaring a field of type IGlobalFactory in the JavaFactory subclass the JavaFactoryBuilder knows that the factory depends on another factory.,"[('JavaFactory', 'subclass of', 'JavaFactoryBuilder'), ('JavaFactory', 'declares field of type', 'IGlobalFactory'), ('JavaFactoryBuilder', 'knows', 'factory depends on another factory')]"
"You can add as many factories as you want, using the addFactory() method.","[('You', 'can add', 'factories'), ('factories', 'quantity', 'as many as you want'), ('You', 'use', 'addFactory() method')]"
The ScriptFactoryBuilder has a addFactories() method that takes an InputStream as parameter instead of a String.,"[('ScriptFactoryBuilder', 'has method', 'addFactories()'), ('addFactories()', 'takes parameter', 'InputStream'), ('addFactories()', 'takes parameter instead of', 'String')]"
"Using this method you can load a container script from disk, over a network, from the classpath and also from inside a Jar file.","[('method', 'can load', 'container script'), ('container script', 'source', 'disk'), ('container script', 'source', 'network'), ('container script', 'source', 'classpath'), ('container script', 'source', 'Jar file')]"
"To configure the container using a script contained in a file located on the classpath (including inside a Jar file), you can do like this:","[('script', 'contained in', 'file'), ('file', 'located on', 'classpath'), ('file', 'located inside', 'Jar file')]"
"The init() method creates all singletons, starts services and other stuff that need to be done before the instances in the container can be used.","[('init() method', 'creates', 'singletons'), ('init() method', 'starts', 'services'), ('init() method', 'performs', 'other stuff'), ('instances', 'located in', 'container'), ('instances', 'can be used after', 'init() method')]"
The instance() method needs the name of the object factory to get an instance from.,"[('instance() method', 'needs', 'name of the object factory'), ('name of the object factory', 'provides', 'instance')]"
You can put as many input parameters into the instance() call as you like.,"[('input parameters', 'can be put into', 'instance() call')]"
The input parameters are defined as an optional parameter (Object ... parameters).,"[('input parameters', 'defined as', 'optional parameter'), ('optional parameter', 'example of', 'Object ... parameters')]"
"When the dispose() method is called, the dispose life cycle phase is executed for all factories in the container, before the method call returns.","[('dispose() method', 'triggers', 'dispose life cycle phase'), ('dispose life cycle phase', 'executed for', 'all factories in the container'), ('dispose life cycle phase', 'occurs', 'before the method call returns')]"
A thread calling get() will only get the object it had set itself by calling set().,"[('thread', 'calls', 'get()'), ('thread', 'gets', 'object'), ('thread', 'set', 'object'), ('thread', 'calls', 'set()')]"
"Then the value obtained from the container.instance(""myThreadLocal"") call will be the value the calling thread associated with itself, by calling MyClass.threadLocal.set().",
ThreadLocal's can be used to associate a java.util.Locale with the calling thread.,"[('ThreadLocal', 'can be used to associate', 'java.util.Locale'), ('ThreadLocal', 'associated with', 'calling thread')]"
"Basically what you will do is call a ThreadLocal.set() method with the Locale to associate with the calling thread, before calling container.instance().","[('ThreadLocal', 'has method', 'set()'), ('set()', 'associates', 'Locale'), ('Locale', 'associated with', 'calling thread'), ('calling thread', 'precedes', 'calling container.instance()')]"
"Notice how the Locale is not obtained by the ThreadLocal.get() method, but via the static method getLocale().","[('Locale', 'not obtained by', 'ThreadLocal.get() method'), ('Locale', 'obtained by', 'static method getLocale()')]"
"The getLocale() method functions as a cast from Object to its return value Locale, enabling the container to determine the type of the returned object (Locale).","[('getLocale() method', 'functions as', 'cast from Object to Locale'), ('getLocale() method', 'enables', 'container to determine type of returned object'), ('returned object', 'type', 'Locale')]"
"Notice how the HttpServletRequest and HttpServletResponse are not obtained by the ThreadLocal.get() method, but via the static methods getRequest() and getResponse().","[('HttpServletRequest', 'not obtained by', 'ThreadLocal.get() method'), ('HttpServletRequest', 'obtained by', 'getRequest()'), ('HttpServletResponse', 'not obtained by', 'ThreadLocal.get() method'), ('HttpServletResponse', 'obtained by', 'getResponse()')]"
"The getRequest() method functions as a cast from Object to its return value HttpServletRequest, enabling the container to determine the type of the returned object (HttpServletRequest).","[('getRequest() method', 'functions as', 'cast from Object to HttpServletRequest'), ('container', 'determine type of', 'returned object'), ('returned object', 'type', 'HttpServletRequest')]"
"Instantiation time localization means that you inject localized dependencies (texts, paths, number and date formatters etc.)","[('Instantiation time localization', 'involves', 'injecting localized dependencies'), ('localized dependencies', 'includes', 'texts'), ('localized dependencies', 'includes', 'paths'), ('localized dependencies', 'includes', 'number and date formatters')]"
"As you can imagine, the more resources the MyComponent needs, the larger both the class and the configuration grows.","[('MyComponent', 'needs', 'resources'), ('resources', 'affect', 'class size'), ('resources', 'affect', 'configuration size')]"
"As you can imagine, only the execute() method will grow as the number of localized dependencies grow.","[('execute() method', 'will grow as', 'number of localized dependencies grow')]"
"Assuming that the MyService class implements an interface called IService, you can create a mock implementation of the IService interface using this code:","[('MyService', 'implements', 'IService'), ('IService', 'has mock implementation', 'code')]"
This mockService factory returns a dynamic implementation of the IService interface based on Java's java.lang.reflect.Proxy class.,"[('mockService factory', 'returns', 'dynamic implementation of the IService interface'), ('dynamic implementation of the IService interface', 'based on', ""Java's java.lang.reflect.Proxy class"")]"
"The serviceMock instance passed to the getMock() method should be the mock object obtained from the mockService factory, using the container.instance(""mockService"") method call.",
"In other words, the instance returned from the MockFactory.createProxy() method call.","[('MockFactory', 'has method', 'createProxy()'), ('createProxy()', 'returns', 'instance')]"
This way it is possible to detect if close() is called on the database connection after some method call that uses the connection has completed.,"[('close()', 'is called on', 'database connection'), ('method call', 'uses', 'connection')]"
"A suggestion would be to have a PersonDao.getConnection() method, even though you'd probably mostly use it during testing.","[('PersonDao', 'has method', 'getConnection()'), ('getConnection()', 'used during', 'testing')]"
From version 2.1.9 it is possible to replace factories at runtime.,"[('version 2.1.9', 'enables', 'replace factories at runtime')]"
"It is also possible to replace several script factories at a time, by using the ScriptFactoryBuilder.replaceFactories(InputStream) method.","[('ScriptFactoryBuilder', 'has method', 'replaceFactories'), ('replaceFactories', 'takes parameter', 'InputStream'), ('replaceFactories', 'action', 'replace several script factories at a time')]"
Rather than configuring the PersonDao by hand with dependencies (and their dependencies recursively) you just reuse the configuration of the PersonDao from the application container configuration (the file containerConfig.bcs).,"[('PersonDao', 'configured by', 'application container configuration'), ('application container configuration', 'contains', 'PersonDao'), ('application container configuration', 'stored in', 'containerConfig.bcs')]"
"When designing Butterfly we considered using an XML format for configuration like several alternative DI containers do (Spring, Nano etc.).","[('Butterfly', 'considered using', 'XML format'), ('XML format', 'used for', 'configuration'), ('several alternative DI containers', 'include', 'Spring'), ('several alternative DI containers', 'include', 'Nano')]"
In this example a java.util.ArrayList() instance is created inside the call to setSomeList().,"[('java.util.ArrayList', 'instance is created inside the call to', 'setSomeList')]"
As you can see the List.add() method is called twice to add the string and myDataSource factory product to the list.,"[('List.add() method', 'called to add', 'string'), ('List.add() method', 'called to add', 'myDataSource factory product'), ('List.add() method', 'called to add', 'list')]"
The fact One of the advantages you get when designing your own language is the freedom to e.g make methods that return void chainable.,"[('designing your own language', 'has advantage', 'freedom'), ('methods', 'return', 'void'), ('methods', 'are', 'chainable')]"
"The [] around the values in the setSomeList() call signals that the values are to be put inside a List or array, depending on the setSomeList() parameter type.","[('setSomeList() call', 'contains', 'values'), ('values', 'are to be put inside', 'List'), ('values', 'are to be put inside', 'array'), ('setSomeList() call', 'signals', 'values are to be put inside a List or array'), ('setSomeList()', 'has parameter type', 'List or array')]"
It is possible to map classes to tables and columns using annotations.,"[('classes', 'can be mapped to', 'tables'), ('classes', 'can be mapped to', 'columns'), ('mapping', 'uses', 'annotations')]"
You cannot have more than one mapping for the same class using annotation based mapping alone.,"[('mapping', 'applies to', 'class'), ('annotation based mapping', 'limits', 'more than one mapping')]"
Each annotation is only allowed once in the code for a given class by the Java compiler.,"[('annotation', 'allowed once in', 'code'), ('code', 'for', 'class'), ('Java compiler', 'enforces', 'annotation')]"
There are two types of annotations available: A class annotation Annotations for getters and setters.,"[('Annotations', 'has type', 'class annotation'), ('Annotations', 'has type', 'Annotations for getters and setters')]"
AClassMapping The class annotation (AClassMapping) is used ontop of your class name for your POJO classes.,"[('AClassMapping', 'used on top of', 'class name'), ('AClassMapping', 'used for', 'POJO classes')]"
"If you set the mappingMode to ""modify"" then Butterfly Persistence will first use automatic mapping to guess as much as it can, and then look at the annotations and modify the class mapping accordingly.",
"The tableName element can be set to the name of the table the class is to be mapped to, if it cannot be guessed by the automatic mapping mechanism.","[('tableName element', 'can be set to', 'name of the table'), ('class', 'is to be mapped to', 'table')]"
"If you have a database generated (e.g auto-incremented) primary key that is mapped to a getter method, you will have to mark the getter method as database generated, to avoid having Butterly Persistence try to set that value in the database.","[('database generated primary key', 'mapped to', 'getter method'), ('getter method', 'marked as', 'database generated'), ('Butterly Persistence', 'try to set', 'value in the database')]"
The class annotation (AClassMapping) is used ontop of your class name for your POJO classes.,"[('AClassMapping', 'used on top of', 'class name'), ('AClassMapping', 'used for', 'POJO classes')]"
"Notice how the second class definition uses manual mapping, so the getter and setter must be fully mapped to columns in the database.","[('second class definition', 'uses', 'manual mapping'), ('getter and setter', 'must be', 'fully mapped to columns in the database')]"
The ASetterMapping annotation is used to map setters of classes to columns in database tables or SQL queries.,"[('ASetterMapping annotation', 'used to map', 'setters of classes'), ('setters of classes', 'mapped to', 'columns in database tables'), ('setters of classes', 'mapped to', 'SQL queries')]"
In this example the Employee.class object is the object mapping key.,"[('Employee.class', 'is', 'object mapping key')]"
"However, if you want Butterfly Persistence to be able to auto-map the target class to the database, the object mapping key should be either a Class object, or an IObjectMappingKey instance.","[('Butterfly Persistence', 'can auto-map', 'target class'), ('object mapping key', 'should be', 'Class object'), ('object mapping key', 'should be', 'IObjectMappingKey instance')]"
"The IObjectMappingKey instance can contain more information about the class to be mapped, than a Class object can.","[('IObjectMappingKey instance', 'can contain', 'more information'), ('more information', 'about', 'class to be mapped'), ('Class object', 'can contain', 'information')]"
"An IObjectMappingKey instance has a getObjectClass() method that returns the Class object of the class to map, so automatic mapping is possible in either case.","[('IObjectMappingKey instance', 'has method', 'getObjectClass()'), ('getObjectClass()', 'returns', 'Class object'), ('Class object', 'of', 'class to map'), ('automatic mapping', 'is possible in', 'either case')]"
When checking for tables with similar names to the class to map only the class name itself is used.,"[('checking', 'object', 'tables with similar names'), ('tables with similar names', 'related to', 'class'), ('map', 'object', 'class name')]"
The ObjectMapper generates various textual combinations based on the class name and checks the database meta data to see if any of these match.,"[('ObjectMapper', 'generates', 'various textual combinations'), ('ObjectMapper', 'checks', 'database meta data'), ('textual combinations', 'based on', 'class name'), ('textual combinations', 'match', 'database meta data')]"
"The ObjectMapper mapper breaks the class name into words, based on the uppercase letters and numbers in the class name.","[('ObjectMapper', 'breaks', 'class name'), ('class name', 'contains', 'words'), ('words', 'based on', 'uppercase letters'), ('words', 'based on', 'numbers')]"
Based on these combinations the PersistentObject class name would be similar to the table names PersistentObject persistentObject persistentobject PERSISTENTOBJECT Persistent_Object persistent_object PERSISTENT_OBJECT PersistentObjects persistentObjects persistentobjects PERSISTENTOBJECTS PERSISTENTOBJECTs Persistent_Objects persistent_objects PERSISTENT_OBJECTS PERSISTENT_OBJECTs As you can see there is a reasonable chance that the table name will be guessed if it is similar to the class name.,"[('PersistentObject', 'similar to', 'table names'), ('table names', 'similar to', 'PersistentObject')]"
"The Object Mapper uses reflection to iterate the methods of the class to be mapped, and filters out all other methods than getters and setters.","[('Object Mapper', 'uses', 'reflection'), ('reflection', 'iterates', 'methods of the class'), ('Object Mapper', 'filters out', 'all other methods than getters and setters')]"
If your custom mapper implementation returns an object mapping from the getObjectMapping() method then automatic and annotation based mapping are not applied.,"[('custom mapper implementation', 'returns', 'object mapping'), ('object mapping', 'from method', 'getObjectMapping()'), ('automatic mapping', 'not applied', 'object mapping'), ('annotation based mapping', 'not applied', 'object mapping')]"
"If a table name is returned from the getTableName() method, then Butterfly Persistence will not try to guess a table name, nor look at the class annotation for table name.","[('getTableName() method', 'returns', 'table name'), ('Butterfly Persistence', 'will not try to guess', 'table name'), ('Butterfly Persistence', 'will not look at', 'class annotation for table name')]"
If null is returned Butterfly Persistence will look at the class annotation to see if a table name is set there.,"[('Butterfly Persistence', 'will look at', 'class annotation'), ('class annotation', 'to see if', 'table name is set')]"
If the getObjectMapping() method returned null Butterfly Persistence will call the modify() method to allow your custom object mapper to modify the automatically generated mapping.,"[('getObjectMapping() method', 'returns', nan), ('Butterfly Persistence', 'calls', 'modify() method'), ('modify() method', 'allows', 'custom object mapper'), ('custom object mapper', 'modifies', 'automatically generated mapping')]"
Before doing so Butterfly Persistence will have applied the annotations in the class to the mapping.,"[('Butterfly Persistence', 'will have applied', 'the annotations'), ('the annotations', 'applied to', 'the mapping'), ('the annotations', 'applied in', 'the class')]"
"If you want Butterfly Persistence to manage the opening of connections, pass a javax.sql.DataSource implementation into the constructor of the PersistenceManager.","[('Butterfly Persistence', 'manages', 'opening of connections'), ('javax.sql.DataSource implementation', 'passed into', 'constructor of the PersistenceManager')]"
The readLong() method comes in another version too which takes an optional list of parameters.,"[('readLong() method', 'has version', 'another version'), ('another version', 'takes', 'optional list of parameters')]"
They will be inserted in the sequence they are passed to the readLong() method.,"[('They', 'inserted in', 'sequence'), ('sequence', 'passed to', 'readLong() method')]"
"The string (4,5,6,7) is an id string which could be returned by the readIdString() method.","[('string (4,5,6,7)', 'is', 'id string'), ('id string', 'could be returned by', 'readIdString() method')]"
The readIdString() method comes in a variant that takes an optional list of parameters.,"[('readIdString() method', 'has variant', 'variant that takes an optional list of parameters')]"
The IJdbcDao has a few read() methods that allows you to decide what to do with each record in the ResultSet resulting from some SQL query.,"[('IJdbcDao', 'has method', 'read()'), ('read()', 'allows', 'decide what to do with each record in the ResultSet'), ('ResultSet', 'results from', 'SQL query')]"
To do so you must provide the read() method with an implementation of the IResultSetProcessor interface.,"[('read() method', 'requires implementation of', 'IResultSetProcessor interface')]"
The init() method is called before the iteration of the ResultSet begins.,"[('init() method', 'is called before', 'iteration of the ResultSet')]"
The process() method is called for each record in the ResultSet The read() method returns an object.,"[('process() method', 'is called for', 'each record in the ResultSet'), ('read() method', 'returns', 'an object')]"
This is the object is obtained from the getResult() method of the IResultSetProcessor.,"[('object', 'obtained from method', 'getResult()'), ('getResult()', 'method of', 'IResultSetProcessor')]"
Here is an example of how to use a IResultSetProcessor with the read() methods:,"[('IResultSetProcessor', 'used with', 'read() methods')]"
It may be a good idea to create a base class for your IResultSetProcessor implementations with empty method implementations for init() and perhaps a default behaviour for getResult().,"[('IResultSetProcessor', 'has base class', 'base class'), ('base class', 'has method', 'init()'), ('base class', 'has method', 'getResult()'), ('init()', 'has implementation', 'empty'), ('getResult()', 'has default behaviour', 'default behaviour')]"
The read() method comes in a version that takes an optional number of parameters.,"[('read() method', 'has version', 'version that takes an optional number of parameters')]"
Notice how the number 1975 is passed into the read() method at the end.,"[('1975', 'passed into', 'read() method')]"
The execute() method should execute the PreparedStatement and return the result of the execution.,"[('execute() method', 'should execute', 'PreparedStatement'), ('execute() method', 'should return', 'result of the execution')]"
The postProcess() method is normally used to call methods on the PreparedStatement after execution.,"[('postProcess() method', 'used to call methods on', 'PreparedStatement')]"
"To read the ids of X records returned from a query into a string of the format (id1, id2, id3, ...) you will do like this:","[('query', 'returns', 'X records'), ('X records', 'have attribute', 'ids'), ('ids', 'read into', 'string'), ('string', 'format', '(id1, id2, id3, ...)')]"
"From version 5.3.9 you no longer need to cast the returned object, if you use a Class object as object mapping key.","[('version 5.3.9', 'no longer need to cast', 'returned object'), ('Class object', 'used as', 'object mapping key')]"
You can also parameterize the SQL statement and pass the parameters to the readList() method.,"[('SQL statement', 'can be parameterized', 'parameters'), ('parameters', 'are passed to', 'readList() method')]"
"This text contains a few examples of how to use the object DAO, IObjectDao, so you can get an idea about how to use the IObjectDao class:","[('text', 'contains', 'examples'), ('examples', 'related to', 'use of object DAO'), ('examples', 'related to', 'use of IObjectDao'), ('examples', 'provides', 'idea'), ('idea', 'about', 'use of IObjectDao class')]"
In addition the Person class and persons table are defined like this:,"[('Person class', 'defined in', 'text'), ('persons table', 'defined in', 'text')]"
"Thus, it doesn't matter how many fields in a class are mapped to columns in the ""items"" table.",
"Therefore you need to create a special object mapping for the given class, that only maps the fields you want to write to columns in the database.","[('special object mapping', 'created for', 'given class'), ('special object mapping', 'maps fields to', 'columns in the database')]"
"The object mapping key could be any object you choose, but if you want help from Butterfly Persistence to map a class to the database, the object mapping key should be either a java.lang.Class object, or an ObjectMappingKey instance.","[('object mapping key', 'could be', 'any object'), ('Butterfly Persistence', 'helps to map', 'class to the database'), ('object mapping key', 'should be', 'java.lang.Class object'), ('object mapping key', 'should be', 'ObjectMappingKey instance')]"
"For instance, Employee.class is the object mapping key in the method call below:","[('Employee.class', 'is', 'object mapping key')]"
"To enable easy, always-in-time custom object mapping Butterfly Persistence provides the ObjectMappingKey class for advanced object mapping keys.","[('Butterfly Persistence', 'provides', 'ObjectMappingKey class'), ('ObjectMappingKey class', 'used for', 'advanced object mapping keys')]"
Creating an ObjectMappingKey instance is done using the ObjectMappingKey class factory methods.,"[('ObjectMappingKey', 'instance creation method', 'ObjectMappingKey class factory methods')]"
"That is because the ObjectMappingKey's factory methods gives each ObjectMappingKey instance a unique id, an int, which is used by its equals() and hashCode() methods.","[('ObjectMappingKey', 'has factory methods', 'ObjectMappingKey instance'), ('ObjectMappingKey instance', 'has unique id', 'int'), ('unique id', 'used by', 'equals() methods'), ('unique id', 'used by', 'hashCode() methods')]"
"This speeds up object mapping cache lookups because the hashCode() method returns this int id, and because equals() also only compares int id's, instead of Class objects, table names etc.","[('hashCode() method', 'returns', 'int id'), ('equals()', 'compares', 'int id')]"
Instead of the class MyCustomObjectMapper you should use your own class.,"[('MyCustomObjectMapper', 'is a type of', 'class'), ('your own class', 'is a type of', 'class')]"
The extended class CustomObjectMapperBase is an empty implementation of the ICustomObjectMapper interface.,"[('CustomObjectMapperBase', 'is an implementation of', 'ICustomObjectMapper'), ('CustomObjectMapperBase', 'is a type of', 'extended class'), ('CustomObjectMapperBase', 'has property', 'empty implementation')]"
Just call the IObjectMapping.removeGetterMapping(String name) or IObjectMapping.removeSetterMapping(String name) method to do so.,"[('IObjectMapping', 'has method', 'removeGetterMapping'), ('IObjectMapping', 'has method', 'removeSetterMapping'), ('removeGetterMapping', 'takes parameter', 'String name'), ('removeSetterMapping', 'takes parameter', 'String name')]"
The ObjectMappingKey class has some static shortcut factory methods to create object mapping keys that has custom object mappers for auto-generated columns.,"[('ObjectMappingKey class', 'has method', 'static shortcut factory methods'), ('static shortcut factory methods', 'create', 'object mapping keys'), ('object mapping keys', 'has', 'custom object mappers'), ('custom object mappers', 'used for', 'auto-generated columns')]"
The only thing required to use Butterfly Persistence is that you add the JAR file to the classpath of your application.,"[('Butterfly Persistence', 'requires', 'JAR file'), ('JAR file', 'added to', 'classpath of application')]"
"A lot of things are cached internally in the PersistenceManager instance, like object mappings, sql etc., so you should not create a new instance everytime you need it.","[('PersistenceManager instance', 'caches', 'object mappings'), ('PersistenceManager instance', 'caches', 'sql'), ('PersistenceManager instance', 'caches', 'etc.')]"
Version control systems typically also makes it easier for multiple people to collaborate - e.g.,"[('Version control systems', 'facilitate', 'collaboration'), ('collaboration', 'involves', 'multiple people')]"
"The Docker base image you are using may itself consist of multiple layers, and can itself be based on another base image etc., until you get down to the most basic Docker image you can create - a raw Linux container image with no special settings applied.","[('Docker base image', 'consists of', 'multiple layers'), ('Docker base image', 'based on', 'another base image'), ('most basic Docker image', 'is', 'raw Linux container image')]"
This example copies a single file from the Docker host at /myapp/target/myapp.jar to the Docker image at /myapp/myapp.jar .,"[('/myapp/target/myapp.jar', 'located on', 'Docker host'), ('/myapp/myapp.jar', 'located on', 'Docker image'), ('/myapp/target/myapp.jar', 'copied to', '/myapp/myapp.jar')]"
This example copies the two files /myapp/config/prod/conf1.cfg and /myapp/conig/prod/conf2.cfg into the Docker image directory /myapp/config/ .,"[('/myapp/config/prod/conf1.cfg', 'copied into', '/myapp/config/'), ('/myapp/conig/prod/conf2.cfg', 'copied into', '/myapp/config/'), ('/myapp/config/', 'is part of', 'Docker image directory')]"
"In other words, you can create a directory inside the docker image, e.g.","[('you', 'can create', 'directory'), ('directory', 'inside', 'docker image')]"
"called /data which can later be mounted to a directory, e.g.","[('/data', 'can be mounted to', 'directory')]"
In a Maven repository a JAR file is identified by its group name (e.g.,"[('JAR file', 'identified by', 'group name'), ('group name', 'example of', 'Maven repository')]"
"the organization that made it), its artifact name (the name of the project / software / tool / API), and a version number (e.g.","[('organization', 'creates', 'artifact'), ('artifact', 'has name', 'artifact name'), ('artifact', 'has version', 'version number')]"
"This example declares a dependency on Log4J using the group name log4j, the artifact name log4j and the version 1.2.17 .","[('This example', 'declares dependency on', 'Log4J'), ('Log4J', 'has group name', 'log4j'), ('Log4J', 'has artifact name', 'log4j'), ('Log4J', 'has version', '1.2.17')]"
By default the testCompile dependency configuration also includes the compiled classes and the dependencies from the compile dependency configuration.,"[('testCompile dependency configuration', 'includes', 'compiled classes'), ('testCompile dependency configuration', 'includes', 'dependencies from the compile dependency configuration')]"
The build task will compile all your Java classes and create a JAR file with them in.,"[('build task', 'will compile', 'Java classes'), ('build task', 'will create', 'JAR file'), ('JAR file', 'contains', 'Java classes')]"
Gradle outputs classes and JAR file to the directory named build inside your project root directory.,"[('Gradle', 'outputs', 'classes'), ('Gradle', 'outputs', 'JAR file'), ('classes', 'located in', 'directory named build'), ('JAR file', 'located in', 'directory named build'), ('directory named build', 'located in', 'project root directory')]"
The compiled classes are written to build/classes and the JAR file to build/libs .,"[('compiled classes', 'written to', 'build/classes'), ('JAR file', 'written to', 'build/libs')]"
"This is because the classes, jar and assemble tasks are now all UP-TO-DATE from the last run.","[('classes', 'status', 'UP-TO-DATE'), ('jar', 'status', 'UP-TO-DATE'), ('assemble tasks', 'status', 'UP-TO-DATE'), ('classes', 'temporal relation', 'last run'), ('jar', 'temporal relation', 'last run'), ('assemble tasks', 'temporal relation', 'last run')]"
"Running the clean task removes the build directory, and thus all compiled classes and created JAR files.","[('clean task', 'removes', 'build directory'), ('clean task', 'removes', 'compiled classes'), ('clean task', 'removes', 'created JAR files')]"
"Second, this example calls the myTask doFirst() method, passing along a closure as parameter.","[('example', 'calls', 'myTask doFirst() method'), ('myTask doFirst() method', 'has parameter', 'closure')]"
"Third, this example calls the myTask doLast() method, passing along another closure as parameter.","[('example', 'calls method', 'myTask doLast()'), ('myTask doLast()', 'receives parameter', 'closure')]"
"When the task myTask is executed Gradle will first execute all closures passed as parameters the doFirst() method, and then all closures passed as parameters the doLast() method.","[('myTask', 'is executed by', 'Gradle'), ('Gradle', 'executes', 'closures passed as parameters to doFirst() method'), ('Gradle', 'executes', 'closures passed as parameters to doLast() method')]"
"First of all you do not need the semicolon ; after the doFirst() and doLast() method calls, if the code line with the method calls ends with a new line.","[('doFirst()', 'followed by', 'doLast()'), ('doFirst()', 'is a', 'method call'), ('doLast()', 'is a', 'method call'), ('semicolon', 'not needed after', 'doFirst()'), ('semicolon', 'not needed after', 'doLast()'), ('code line', 'ends with', 'new line')]"
"Second, you do not need the parentheses around the closure when calling doFirst() or doLast().","[('you', 'do not need', 'parentheses'), ('parentheses', 'around', 'closure'), ('closure', 'when calling', 'doFirst()'), ('closure', 'when calling', 'doLast()')]"
With these two syntax optimizations you can write the doFirst() and doLast() method calls like this:,"[('syntax optimizations', 'allow', 'write doFirst() and doLast() method calls like this')]"
Often you will not need to pass closures to both doFirst() and doLast() .,"[('you', 'will not need to pass', 'closures'), ('closures', 'can be passed to', 'doFirst()'), ('closures', 'can be passed to', 'doLast()')]"
It is quite common to pass just a single closure to the doLast() method.,"[('doLast()', 'method receives', 'closure')]"
"Because this is such a common use case, Gradle has a shortcut for passing a closure to the doLast() method.","[('Gradle', 'has shortcut for', 'passing a closure to the doLast() method')]"
The two characters << corresponds to calling the doLast() method like this:,"[('<<', 'corresponds to', 'calling the doLast() method')]"
You can even define the task on the same line as you pass the closure to the doLast() method.,"[('task', 'defined on', 'same line'), ('closure', 'passed to', 'doLast() method')]"
You can also add multiple closures using the doLast() shortcut notation.,"[('You', 'can add', 'multiple closures'), ('multiple closures', 'using', 'doLast() shortcut notation')]"
"A task could be compiling the source code, generating JavaDoc, zipping the compiled classes into a JAR file etc.","[('task', 'could be', 'compiling the source code'), ('task', 'could be', 'generating JavaDoc'), ('task', 'could be', 'zipping the compiled classes into a JAR file')]"
The build script is typically called build.gradle and is normally located in the root directory of the project you are building.,"[('build script', 'typically called', 'build.gradle'), ('build script', 'normally located in', 'root directory'), ('root directory', 'part of', 'project')]"
When you specify another build script Gradle does not use its settings.gradle file.,"[('Gradle', 'does not use', 'settings.gradle file'), ('you', 'specify', 'another build script')]"
Gradle will use the build.gradle file found in the project directory (subproject-dir) and will execute the build task in that build script.,"[('Gradle', 'uses file', 'build.gradle'), ('build.gradle', 'located in', 'project directory'), ('project directory', 'contains', 'subproject-dir'), ('Gradle', 'executes task', 'build task'), ('build task', 'defined in', 'build script')]"
"Note, that the Predicate interface contains a single unimplemented method named test() which returns a boolean.","[('Predicate interface', 'contains method', 'test()'), ('test()', 'returns', 'boolean')]"
"After creating the two basic functions, a third Predicate is composed, which calls the test() methods of the two first functions.","[('Predicate', 'composed of', 'two basic functions'), ('Predicate', 'calls', 'test() methods'), ('test() methods', 'belong to', 'two first functions')]"
The Predicate interface (java.util.function.Predicate) contains a few methods that help you compose new Predicate instances from other Predicate instances.,"[('Predicate interface', 'part of', 'java.util.function.Predicate'), ('Predicate interface', 'contains', 'methods'), ('methods', 'help compose', 'new Predicate instances'), ('new Predicate instances', 'composed from', 'other Predicate instances')]"
The and() method is used to combine two other Predicate functions in the same way I showed in the beginning of this Java functional composition tutorial.,"[('and() method', 'used to combine', 'two Predicate functions'), ('I', 'showed', 'in the beginning of this Java functional composition tutorial')]"
Here is an example of functional composition with the Predicate and() method:,"[('functional composition', 'example of', 'Predicate and() method')]"
This Predicate composition example composes a new Predicate from two other Predicate instances using the and() method of one of the basic Predicate instances.,"[('Predicate composition example', 'composes', 'new Predicate'), ('new Predicate', 'composed from', 'two other Predicate instances'), ('and() method', 'used by', 'Predicate composition example'), ('and() method', 'belongs to', 'basic Predicate instances')]"
The composed Predicate will return true from it's test() method if both of the Predicate instances it was composed from also return true.,"[('composed Predicate', 'will return', 'true'), ('composed Predicate', 'has method', 'test()'), ('Predicate instances', 'composed from', 'composed Predicate'), ('Predicate instances', 'return', 'true')]"
"The Predicate or() method is used to combine a Predicate instance with another, to compose a third Predicate instance.","[('Predicate or() method', 'used to', 'combine a Predicate instance with another'), ('Predicate or() method', 'used to', 'compose a third Predicate instance')]"
"The composed Predicate will return true if either of the Predicate instances it is composed from return true, when their test() methods are called with same input parameter as the composed Predicate.","[('composed Predicate', 'will return', 'true'), ('Predicate instances', 'composed from', 'composed Predicate'), ('Predicate instances', 'return', 'true'), ('test() methods', 'called with', 'same input parameter'), ('composed Predicate', 'called with', 'same input parameter')]"
This Predicate or() functional composition example first creates two basic Predicate instances.,"[('example', 'creates', 'Predicate instances'), ('Predicate instances', 'type', 'basic')]"
"Second, the example creates a third Predicate composed from the first two, by calling the or() method on the first Predicate and passing the second Predicate as parameter to the or() method.","[('example', 'creates', 'third Predicate'), ('third Predicate', 'composed from', 'first Predicate'), ('third Predicate', 'composed from', 'second Predicate'), ('or() method', 'called on', 'first Predicate'), ('second Predicate', 'passed as parameter to', 'or() method')]"
The Java Function interface (java.util.function.Function) also contains a few methods that can be used to compose new Function instances from existing ones.,"[('Java Function interface', 'contains', 'methods'), ('methods', 'can be used to', 'compose new Function instances'), ('compose new Function instances', 'from', 'existing ones')]"
"The Java Function compose() method composes a new Function instance from the Function instance it is called on, and the Function instance passed as parameter to the compose() method.","[('compose() method', 'composes', 'new Function instance'), ('compose() method', 'called on', 'Function instance'), ('compose() method', 'parameter', 'Function instance')]"
"The Function returned by compose() will first call the Function passed as parameter to compose(), and then it will call the Function which compose() was called on.","[('compose()', 'returns', 'Function'), ('Function', 'called by', 'compose()'), ('Function', 'passed as parameter to', 'compose()'), ('compose()', 'called on', 'Function')]"
"This is easier to understand with an example, so here is a Java Function compose() example:","[('example', 'is easier to understand with', 'Java Function compose() example')]"
The Java Function andThen() method works opposite of the compose() method.,"[('Java Function andThen() method', 'works opposite of', 'compose() method')]"
"A Function composed with andThen() will first call the Function that andThen() was called on, and then it will call the Function passed as parameter to the andThen() method.","[('Function', 'composed with', 'andThen()'), ('andThen()', 'first call', 'Function that andThen() was called on'), ('andThen()', 'then call', 'Function passed as parameter to the andThen() method')]"
"Then the andThen() method is called on the multiply Function to compose a new Function, passing the add Function as parameter to andThen().","[('andThen() method', 'is called on', 'multiply Function'), ('multiply Function', 'compose', 'new Function'), ('add Function', 'is passed as parameter to', 'andThen()')]"
Calling the Function composed by andThen() with the value 3 will result in the following calculation 3 * 2 + 3 and the result will be 9.,"[('Function', 'composed by', 'andThen()'), ('andThen()', 'called with value', '3'), ('3', 'multiplied by', '2'), ('3 * 2', 'added to', '3'), ('3 * 2 + 3', 'results in', '9')]"
"Note: As mentioned in the beginning, andThen() works opposite of compose().","[('andThen()', 'works opposite of', 'compose()')]"
"Therefore, calling a.andThen(b) is actually the same as calling b.compose(a) .","[('a.andThen(b)', 'is the same as', 'b.compose(a)')]"
The Java Function interface (java.util.function.Function) interface is one of the most central functional interfaces in Java.,"[('Java Function interface', 'type', 'functional interface'), ('Java Function interface', 'part of', 'java.util.function.Function'), ('java.util.function.Function', 'part of', 'Java')]"
The only method you have to implement to implement the Function interface is the apply() method.,"[('Function interface', 'has method', 'apply() method')]"
"This Function implementation implements the apply() method so it takes a Long as parameter, and returns a Long.","[('This Function implementation', 'implements', 'apply() method'), ('apply() method', 'takes parameter', 'Long'), ('apply() method', 'returns', 'Long')]"
"Second, the example calls the apply() method on the AddThree instance.","[('example', 'calls method', 'apply()'), ('apply()', 'method of', 'AddThree instance')]"
"As you can see, the Function interface implementation is now inlined in the declaration of the adderLambda variable, rather than in a separate class.","[('Function interface implementation', 'inlined in', 'declaration of the adderLambda variable'), ('Function interface implementation', 'not in', 'separate class')]"
"The Java Predicate interface, java.util.function.Predicate, represents a simple function that takes a single value as parameter, and returns true or false.","[('Java Predicate interface', 'part of', 'java.util.function.Predicate'), ('java.util.function.Predicate', 'represents', 'simple function'), ('simple function', 'takes', 'single value as parameter'), ('simple function', 'returns', 'true or false')]"
"The Predicate interface contains more methods than the test() method, but the rest of the methods are default or static methods which you don't have to implement.","[('Predicate interface', 'contains', 'more methods'), ('Predicate interface', 'contains', 'test() method'), ('rest of the methods', 'are', 'default or static methods'), ('you', 'do not have to implement', 'default or static methods')]"
"You can implement the Predicate interface using a class, like this:","[('Predicate interface', 'can be implemented using', 'class')]"
This lambda implementation of the Predicate interface effectively does the same as the implementation above that uses a class.,"[('lambda implementation', 'implements', 'Predicate interface'), ('lambda implementation', 'does the same as', 'implementation above'), ('implementation above', 'uses', 'class')]"
This Java Consumer implementation prints the value passed as parameter to it out to System.out.,"[('Java Consumer implementation', 'prints', 'value'), ('value', 'passed as parameter to', 'Java Consumer implementation'), ('Java Consumer implementation', 'prints to', 'System.out')]"
"Especially the idea of ""no side effects"" makes it hard to e.g.",
"In the functional programming paradigm, functions are first class objects in the language.","[('functions', 'are', 'first class objects'), ('first class objects', 'in', 'the language'), ('functions', 'in', 'the functional programming paradigm')]"
Notice how the return value of the sum() function only depends on the input parameters.,"[('return value of the sum() function', 'depends on', 'input parameters')]"
"Notice also that the sum() has no side effects, meaning it does not modify any state (variables) outside the function anywhere.","[('sum()', 'has property', 'no side effects'), ('sum()', 'does not modify', 'any state outside the function')]"
"Notice how the method add() uses a member variable to calculate its return value, and it also modifies the state of the value member variable, so it has a side effect.","[('add()', 'uses', 'member variable'), ('add()', 'calculates', 'return value'), ('add()', 'modifies', 'state of the value member variable'), ('add()', 'has', 'side effect')]"
Notice how the createFactory() method returns a lambda expression as result.,"[('createFactory() method', 'returns', 'lambda expression')]"
Notice also that the createFactory() method takes two instances as parameters which are both implementations of interfaces (IProducer and IConfigurator).,"[('createFactory() method', 'takes as parameter', 'two instances'), ('two instances', 'are implementations of', 'IProducer'), ('two instances', 'are implementations of', 'IConfigurator')]"
Therefore they can be implemented by Java lambda expressions - and therefore the createFactory() method is a higher order function.,"[('Java lambda expressions', 'can implement', 'they'), ('createFactory() method', 'is a', 'higher order function')]"
"A function may have local variables containing temporary state internally, but the function cannot reference any member variables of the class or object the function belongs to.","[('function', 'may have', 'local variables'), ('local variables', 'contain', 'temporary state'), ('function', 'cannot reference', 'member variables'), ('member variables', 'belong to', 'class'), ('member variables', 'belong to', 'object'), ('function', 'belongs to', 'class'), ('function', 'belongs to', 'object')]"
"State outside of a function refers both to member variables in the class or object the function, and member variables inside parameters to the functions, or state in external systems like file systems or databases.","[('State', 'refers to', 'member variables in the class or object'), ('State', 'refers to', 'member variables inside parameters to the functions'), ('State', 'refers to', 'state in external systems'), ('External systems', 'includes', 'file systems'), ('External systems', 'includes', 'databases')]"
"This is still a functional interface, because only run() is not implemented (abstract).","[('This', 'is a type of', 'functional interface'), ('run()', 'is not implemented in', 'This')]"
The first example of a higher order function is the Collections.sort() method which takes a Comparator as parameter.,"[('Collections.sort()', 'is an example of', 'higher order function'), ('Collections.sort()', 'takes parameter', 'Comparator')]"
The lambda parameter is what makes Collections.sort() a higher order function.,"[('lambda parameter', 'makes', 'Collections.sort() a higher order function')]"
"Second, the example calls the reversed() method on the Comparator lambda.","[('example', 'calls method', 'reversed()'), ('reversed()', 'method of', 'Comparator lambda')]"
"The reversed() method returns a new Comparator lambda, which reverse the result returned by the first Comparator implementation.","[('reversed() method', 'returns', 'new Comparator lambda'), ('new Comparator lambda', 'reverse', 'result'), ('result', 'returned by', 'first Comparator implementation')]"
"By ""reversing"" I mean that it simply returns -1 * comparator.compare(a,b)",
"Because the reversed() method returns a lambda (function), the reversed() method is considered a higher order function.","[('reversed() method', 'returns', 'lambda'), ('reversed() method', 'is considered', 'higher order function')]"
"Third, the example sorts the List of Strings using the Collections.sort() method.","[('example', 'sorts', 'List of Strings'), ('example', 'uses method', 'Collections.sort()')]"
"In contrast, when you are using the Java Collections iteration features (e.g a Java Iterator or the Java for-each loop used with a Java Iterable) you have to implement the iteration of the elements yourself.","[('Java Collections', 'has feature', 'Java Iterator'), ('Java Collections', 'has feature', 'Java for-each loop'), ('Java for-each loop', 'used with', 'Java Iterable'), ('Java Collections iteration features', 'require', 'implement the iteration of the elements yourself')]"
"Finally, the example calls the stream() method to obtain a Stream instance.","[('example', 'calls', 'stream() method'), ('stream() method', 'obtains', 'Stream instance')]"
The call to the map() method of the Stream interface is a non-terminal operation.,"[('call to the map() method', 'part of', 'Stream interface'), ('map() method', 'is a', 'non-terminal operation')]"
The map() method will be covered in more detail later on.,"[('map() method', 'will be covered in', 'more detail later on')]"
Notice how the second call to Stream map() is called on the Stream returned by the first map() call.,"[('second call to Stream map()', 'is called on', 'Stream returned by the first map() call')]"
The Java Stream filter() can be used to filter out elements from a Java Stream.,"[('Java Stream filter()', 'can be used to', 'filter out elements'), ('filter out elements', 'from', 'Java Stream')]"
Here is an example of calling the Java Stream filter() method:,"[('Java Stream', 'has method', 'filter()')]"
The Java Stream map() method converts (maps) an element to another object.,"[('Java Stream map() method', 'converts', 'element'), ('element', 'converted to', 'another object')]"
The Java Stream flatMap() methods maps a single element into multiple elements.,"[('Java Stream flatMap() method', 'maps', 'single element'), ('Java Stream flatMap() method', 'maps into', 'multiple elements')]"
This example should give you an idea about how flatMap() can be used to map a single element into multiple elements.,"[('flatMap()', 'used to', 'map a single element into multiple elements')]"
This Java Stream flatMap() example first creates a List with 3 strings containing book titles.,"[('Java Stream flatMap() example', 'creates', 'List'), ('List', 'contains', '3 strings'), ('3 strings', 'contain', 'book titles')]"
"Then a Stream for the List is obtained, and flatMap() called.","[('Stream', 'obtained for', 'List'), ('flatMap()', 'called on', 'Stream')]"
The flatMap() operation called on the Stream has to return another Stream representing the flat mapped elements.,"[('flatMap() operation', 'called on', 'Stream'), ('flatMap() operation', 'has to return', 'another Stream'), ('another Stream', 'representing', 'flat mapped elements')]"
Note that this example finishes with a call to forEach() which is a terminal operation.,"[('example', 'finishes with', 'call to forEach()'), ('forEach()', 'is a', 'terminal operation')]"
The Java Stream distinct() method is a non-terminal operation that returns a new Stream which will only contain the distinct elements from the original stream.,"[('Java Stream distinct() method', 'is a', 'non-terminal operation'), ('Java Stream distinct() method', 'returns', 'new Stream'), ('new Stream', 'contains', 'distinct elements'), ('distinct elements', 'from', 'original stream')]"
Only the first occurrence of this element will be included in the Stream returned by distinct().,"[('element', 'included in', 'Stream'), ('Stream', 'returned by', 'distinct()')]"
"Thus, the resulting List (from calling collect()) will only contain one, two and three.","[('List', 'contains', 'one'), ('List', 'contains', 'two'), ('List', 'contains', 'three')]"
The Java Stream limit() method can limit the number of elements in a stream to a number given to the limit() method as parameter.,"[('Java Stream limit() method', 'can limit', 'number of elements in a stream'), ('number of elements in a stream', 'limited to', 'number given to the limit() method as parameter')]"
The limit() method returns a new Stream which will at most contain the given number of elements.,"[('limit() method', 'returns', 'new Stream'), ('new Stream', 'contains at most', 'given number of elements')]"
"This example first creates a Stream, then calls limit() on it, and then calls forEach() with a lambda that prints out the elements in the stream.","[('example', 'creates', 'Stream'), ('example', 'calls', 'limit()'), ('example', 'calls', 'forEach()'), ('forEach()', 'uses', 'lambda'), ('lambda', 'prints out', 'elements'), ('elements', 'located in', 'stream')]"
The Java Stream peek() method is a non-terminal operation that takes a Consumer (java.util.function.Consumer) as parameter.,"[('Java Stream peek() method', 'is a', 'non-terminal operation'), ('non-terminal operation', 'takes parameter', 'Consumer'), ('Consumer', 'is a', 'java.util.function.Consumer')]"
The peek() method returns a new Stream which contains all the elements in the original stream.,"[('peek() method', 'returns', 'new Stream'), ('new Stream', 'contains', 'all the elements in the original stream')]"
"The purpose of the peek() method is, as the method says, to peek at the elements in the stream, not to transform them.","[('peek() method', 'has purpose', 'to peek at the elements in the stream'), ('peek() method', 'does not have purpose', 'to transform them')]"
It is the call to count() at the end of the example that is the terminal operation.,"[('call to count()', 'is', 'terminal operation')]"
"Since count() returns a long, the Stream chain of non-terminal operations (the map() calls) is ended.","[('count()', 'returns', 'long'), ('Stream chain', 'contains', 'non-terminal operations'), ('non-terminal operations', 'includes', 'map() calls'), ('Stream chain', 'is ended by', 'non-terminal operations')]"
"The Java Stream anyMatch() method is a terminal operation that takes a single Predicate as parameter, starts the internal iteration of the Stream, and applies the Predicate parameter to each element.","[('Java Stream anyMatch() method', 'type', 'terminal operation'), ('Java Stream anyMatch() method', 'takes', 'Predicate as parameter'), ('Java Stream anyMatch() method', 'starts', 'internal iteration of the Stream'), ('Java Stream anyMatch() method', 'applies', 'Predicate parameter to each element')]"
"If the Predicate returns true for any of the elements, the anyMatch() method returns true.","[('Predicate', 'returns', 'true'), ('any of the elements', 'condition', 'Predicate returns true'), ('anyMatch() method', 'returns', 'true'), ('anyMatch() method', 'condition', 'Predicate returns true for any of the elements')]"
"In the example above, the anyMatch() method call will return true, because the first string element in the stream starts with ""One"".",
"The Java Stream allMatch() method is a terminal operation that takes a single Predicate as parameter, starts the internal iteration of elements in the Stream, and applies the Predicate parameter to each element.","[('Java Stream allMatch() method', 'type', 'terminal operation'), ('Java Stream allMatch() method', 'takes', 'Predicate as parameter'), ('Java Stream allMatch() method', 'starts', 'internal iteration of elements in the Stream'), ('Java Stream allMatch() method', 'applies', 'Predicate parameter to each element')]"
"If the Predicate returns true for all elements in the Stream, the allMatch() will return true.","[('Predicate', 'returns', 'true'), ('Predicate', 'applies to', 'all elements in the Stream'), ('allMatch()', 'returns', 'true'), ('all elements in the Stream', 'condition', 'Predicate returns true')]"
"If not all elements match the Predicate, the allMatch() method returns false.","[('elements', 'match', 'Predicate'), ('allMatch() method', 'returns', 'false')]"
"In the example above, the allMatch() method will return false, because only one of the strings in the Stream starts with ""One"".",
"The Java Stream noneMatch() method is a terminal operation that will iterate the elements in the stream and return true or false, depending on whether no elements in the stream matches the Predicate passed to noneMatch() as parameter.","[('Java Stream noneMatch() method', 'is a', 'terminal operation'), ('Java Stream noneMatch() method', 'iterates', 'elements in the stream'), ('Java Stream noneMatch() method', 'returns', 'true or false'), ('elements in the stream', 'matches', 'Predicate passed to noneMatch()')]"
"The noneMatch() method will return true if no elements are matched by the Predicate, and false if one or more elements are matched.","[('noneMatch() method', 'returns', 'true'), ('noneMatch() method', 'returns', 'false'), ('elements', 'matched by', 'Predicate'), ('no elements', 'matched by', 'Predicate'), ('one or more elements', 'matched by', 'Predicate')]"
"The Java Stream collect() method is a terminal operation that starts the internal iteration of elements, and collects the elements in the stream in a collection or object of some kind.","[('Java Stream collect() method', 'is a', 'terminal operation'), ('terminal operation', 'starts', 'internal iteration of elements'), ('internal iteration of elements', 'collects', 'elements in the stream'), ('elements in the stream', 'collected in', 'collection or object')]"
"Luckily, the Java class java.util.stream.Collectors contains a set of pre-implemented Collector implementations you can use, for the most common operations.","[('java.util.stream.Collectors', 'contains', 'Collector implementations'), ('Collector implementations', 'used for', 'common operations')]"
"In the example above, it was the Collector implementation returned by Collectors.toList() that was used.","[('Collector implementation', 'returned by', 'Collectors.toList()'), ('Collectors.toList()', 'used in', 'example above')]"
"The Java Stream count() method is a terminal operation which starts the internal iteration of the elements in the Stream, and counts the elements.","[('Java Stream count() method', 'is a', 'terminal operation'), ('terminal operation', 'starts', 'internal iteration'), ('internal iteration', 'of', 'elements in the Stream'), ('Java Stream count() method', 'counts', 'elements')]"
"This example first creates a List of strings, then obtain the Stream for that List, adds a flatMap() operation for it, and then finishes with a call to count().","[('example', 'creates', 'List of strings'), ('example', 'obtains', 'Stream'), ('example', 'adds', 'flatMap() operation'), ('example', 'finishes with', 'call to count()'), ('List of strings', 'has Stream', 'Stream'), ('Stream', 'has operation', 'flatMap() operation')]"
"The count() method will start the iteration of the elements in the Stream which will result in the string elements being split up into words in the flatMap() operation, and then counted.","[('count() method', 'starts', 'iteration of the elements in the Stream'), ('iteration of the elements in the Stream', 'results in', 'string elements being split up into words'), ('string elements', 'split up into', 'words'), ('flatMap() operation', 'counts', 'words')]"
The Java Stream findAny() method can find a single element from the Stream.,"[('Java Stream findAny() method', 'can find', 'single element'), ('single element', 'from', 'Stream')]"
You can check if an element was found via the Optional isPresent() method.,"[('element', 'can be checked via', 'Optional isPresent() method')]"
"The Java Stream findFirst() method finds the first element in the Stream, if any elements are present in the Stream.","[('Java Stream', 'has method', 'findFirst()'), ('findFirst()', 'finds', 'first element'), ('first element', 'located in', 'Stream')]"
"The findFirst() method returns an Optional from which you can obtain the element, if present.","[('findFirst() method', 'returns', 'Optional'), ('Optional', 'contains', 'element')]"
You can check if the Optional returned contains an element via its isPresent() method.,"[('Optional', 'has method', 'isPresent()'), ('isPresent()', 'checks if', 'Optional contains an element')]"
"The Java Stream forEach() method is a terminal operation which starts the internal iteration of the elements in the Stream, and applies a Consumer (java.util.function.Consumer) to each element in the Stream.","[('Java Stream', 'has method', 'forEach()'), ('forEach()', 'is a', 'terminal operation'), ('terminal operation', 'starts', 'internal iteration'), ('internal iteration', 'applies', 'Consumer'), ('Consumer', 'is a', 'java.util.function.Consumer'), ('Consumer', 'applies to each element in', 'Stream')]"
The Java Stream min() method is a terminal operation that returns the smallest element in the Stream.,"[('Java Stream min() method', 'is a', 'terminal operation'), ('Java Stream min() method', 'returns', 'smallest element in the Stream')]"
Which element is the smallest is determined by the Comparator implementation you pass to the min() method.,"[('Comparator implementation', 'determines', 'smallest element'), ('Comparator implementation', 'passed to', 'min() method')]"
Notice how the min() method returns an Optional which may or may not contain a result.,"[('min() method', 'returns', 'Optional'), ('Optional', 'may contain', 'result'), ('Optional', 'may not contain', 'result')]"
"If the Stream is empty, the Optional get() method will throw a NoSuchElementException.","[('Stream', 'state', 'empty'), ('Optional get() method', 'throws', 'NoSuchElementException')]"
The Java Stream max() method is a terminal operation that returns the largest element in the Stream.,"[('Java Stream max() method', 'is a', 'terminal operation'), ('Java Stream max() method', 'returns', 'largest element in the Stream')]"
Which element is the largest is determined by the Comparator implementation you pass to the max() method.,"[('Comparator implementation', 'determines', 'largest element'), ('Comparator implementation', 'passed to', 'max() method')]"
Notice how the max() method returns an Optional which may or may not contain a result.,"[('max() method', 'returns', 'Optional'), ('Optional', 'may contain', 'result'), ('Optional', 'may not contain', 'result')]"
The Java Stream reduce() method is a terminal operation that can reduce all elements in the stream to a single element.,"[('Java Stream reduce() method', 'is a', 'terminal operation'), ('Java Stream reduce() method', 'can reduce', 'all elements in the stream'), ('all elements in the stream', 'reduced to', 'a single element')]"
This Optional contains the value (if any) returned by the lambda expression passed to the reduce() method.,"[('Optional', 'contains', 'value'), ('lambda expression', 'passed to', 'reduce() method'), ('reduce() method', 'returns', 'value')]"
"The Java Stream toArray() method is a terminal operation that starts the internal iteration of the elements in the stream, and returns an array of Object containing all the elements.","[('Java Stream', 'has method', 'toArray()'), ('toArray()', 'is a', 'terminal operation'), ('terminal operation', 'starts', 'internal iteration'), ('internal iteration', 'involves', 'elements in the stream'), ('toArray()', 'returns', 'array of Object'), ('array of Object', 'contains', 'all the elements')]"
The Java Stream interface contains a static method called concat() which can concatenate two streams into one.,"[('Java Stream interface', 'contains', 'static method'), ('static method', 'called', 'concat()'), ('concat()', 'can concatenate', 'two streams into one')]"
Here is an example of using the Java Stream concat() method:,"[('Java Stream', 'method', 'concat()')]"
The Java Stream interface contains a static method called of() which can be used to create a Stream from one or more objects.,"[('Java Stream interface', 'contains', 'static method of()'), ('static method of()', 'used to create', 'Stream'), ('Stream', 'created from', 'one or more objects')]"
Here is an example of using the Java Stream of() metho:,"[('Java', 'has method', 'Stream of()')]"
"A graph based stream processing API could instead support a ""sample"" operation where each node in the stream processing graph is asked for any value it may hold internally (e.g.",
Some graph based stream processing APIs are also designed to kind of hide the iteration of the elements from the user of the API (e.g.,"[('graph based stream processing APIs', 'designed to', 'hide the iteration of the elements'), ('graph based stream processing APIs', 'used by', 'user of the API')]"
The full code for the command line argument parsers is listed at the end of this tutorial (it's just one class).,"[('full code', 'listed at', 'end of this tutorial'), ('command line argument parsers', 'has code', 'full code'), ('full code', 'is', 'one class')]"
The interpretation of these command line arguments could be that the copy program should copy file.txt to a file named file2.txt and overwrite file2.txt if it already exists.,"[('copy program', 'should copy', 'file.txt'), ('copy program', 'should copy to', 'file2.txt'), ('copy program', 'should overwrite', 'file2.txt')]"
These command line arguments consists of one switch (-overwrite) and two targets (file.txt and file.2.txt).,"[('command line arguments', 'consists of', 'one switch'), ('command line arguments', 'consists of', 'two targets'), ('one switch', 'example', '-overwrite'), ('two targets', 'example', 'file.txt'), ('two targets', 'example', 'file.2.txt')]"
"When the switch -overwrite is removed, the two arguments file.txt and file2.txt remain.",
The command line argument parser consists of a single Java class named CliArgs.,"[('command line argument parser', 'consists of', 'single Java class'), ('single Java class', 'named', 'CliArgs')]"
The CliArgs class takes an array of String as argument to its constructor.,"[('CliArgs', 'takes as argument', 'array of String'), ('array of String', 'is argument to', 'constructor')]"
The CliArgs class contains the following methods you can use to obtain switch information and values:,"[('CliArgs', 'contains', 'methods'), ('methods', 'used to', 'obtain switch information'), ('methods', 'used to', 'obtain values')]"
The switchPresent() method can be used to ask if a given switch is present or not.,"[('switchPresent()', 'can be used to', 'ask if a given switch is present or not')]"
"If the command line arguments contains the -overwrite switch anywhere, the switchPresent() method will return true.","[('command line arguments', 'contains', '-overwrite switch'), ('switchPresent() method', 'will return', 'true')]"
The switchValue() method can be use to obtain the value of a switch.,"[('switchValue()', 'method of', 'switch'), ('switchValue()', 'used to obtain', 'value')]"
Here is a code example showing how to use switchValue() to read the value of the -port switch:,"[('switchValue()', 'used to read', '-port switch')]"
If you want the value of a switch parsed into a long or double you can use the switchLongValue() and switchDoubleValue() methods.,"[('switch', 'parsed into', 'long'), ('switch', 'parsed into', 'double'), ('switchLongValue()', 'used for', 'long'), ('switchDoubleValue()', 'used for', 'double')]"
The switchValues() method is used to obtain multiple values for a switch.,"[('switchValues() method', 'used to obtain', 'multiple values for a switch')]"
The switchValues() method will return all values after the switch and until the next switch is met (next argument starting with a - character).,"[('switchValues() method', 'will return', 'all values after the switch'), ('all values after the switch', 'continue until', 'next switch is met'), ('next switch', 'is met by', 'next argument starting with a - character')]"
The values of the -from switch will be file1.txt and file2.txt.,"[('-from switch', 'has value', 'file1.txt'), ('-from switch', 'has value', 'file2.txt')]"
The values of the -to switch will be copy1.txt and copy2.txt.,"[('-to switch', 'has value', 'copy1.txt'), ('-to switch', 'has value', 'copy2.txt')]"
Instead you can create a swith POJO (Plain Old Java Object) class to hold all the switches.,"[('swith POJO class', 'used to hold', 'all the switches')]"
"You can now read all the switches from the command line directly into an instance of the CliSwitches class, using the switchPojo() method.","[('command line', 'reads into', 'instance of the CliSwitches class'), ('instance of the CliSwitches class', 'uses method', 'switchPojo()')]"
The CliArgs switchPojo() method will use the property names inside the class to match against switches in the command line.,"[('CliArgs', 'has method', 'switchPojo()'), ('switchPojo()', 'uses', 'property names'), ('property names', 'located in', 'class'), ('switchPojo()', 'matches against', 'switches'), ('switches', 'located in', 'command line')]"
The targets() method returns all the arguments which are not switches or switch values.,"[('targets() method', 'returns', 'arguments'), ('arguments', 'are not', 'switches'), ('arguments', 'are not', 'switch values')]"
"The CliArgs class distinguishes between switch values and targets by assuming, that all arguments which have not been ""taken"" already as switch values must be targets.",
"will the method targets() as executed in the code above, return the String","[('method', 'executed in', 'code'), ('method', 'return', 'String')]"
"Therefore the targets() method call will return the argument web-root , because web-root is the only argument that has not been ""taken"" yet, even if it is located in the middle of the argument list.",
You may need to have at least N next bytes (e.g.,"[('You', 'may need', 'at least N next bytes')]"
"To be able to move forth and back in the stream data, you may need to keep the next e.g.","[('move', 'action', 'forth and back'), ('forth and back', 'context', 'stream data')]"
To solve this problem I will develop a RollingBufferInputStream class which keeps at least N bytes available in a buffer.,"[('RollingBufferInputStream', 'is a', 'class'), ('RollingBufferInputStream', 'developed to', 'solve this problem'), ('RollingBufferInputStream', 'keeps at least', 'N bytes'), ('N bytes', 'available in', 'buffer')]"
"The RollingBufferInputStream class which I have developed, can be used to iterate an InputStream while at the same time making sure there is always block size bytes available in the buffer.","[('RollingBufferInputStream', 'is a', 'class'), ('RollingBufferInputStream', 'developed by', 'I'), ('RollingBufferInputStream', 'can be used to', 'iterate InputStream'), ('RollingBufferInputStream', 'ensures', 'block size bytes available in the buffer')]"
"Note: Even if the class is called RollingBufferInputStream, it is not an InputStream subclass.","[('RollingBufferInputStream', 'is not a subclass of', 'InputStream')]"
"First you ask if the buffer has N available bytes, by calling hasAvailableBytes().","[('you', 'ask', 'if the buffer has N available bytes'), ('you', 'call', 'hasAvailableBytes()')]"
This outline mostly serves to show you the interface of the RollingBufferInputStream class.,"[('outline', 'serves to show', 'interface'), ('interface', 'of', 'RollingBufferInputStream class')]"
"If the call to hasAvailableBytes() detects that there is not enough bytes available in the buffer, it will attempt to fill the buffer.","[('call to hasAvailableBytes()', 'detects', 'not enough bytes available in the buffer'), ('call to hasAvailableBytes()', 'will attempt to', 'fill the buffer')]"
"Here is the full hasAvailableBytes() method implementation, so you can see how it works:","[('hasAvailableBytes()', 'is a', 'method')]"
"Filling data into the buffer is done by the method fillDataFromStreamIntoBuffer(), which is shown here:","[('fillDataFromStreamIntoBuffer()', 'fills', 'buffer'), ('fillDataFromStreamIntoBuffer()', 'shown in', 'here')]"
"You could use the String.replace() method, but for large amounts of data, and high number of replacements, this performs badly.","[('String.replace() method', 'used for', 'replacements'), ('String.replace() method', 'performs', 'badly'), ('String.replace() method', 'used for', 'large amounts of data'), ('String.replace() method', 'used for', 'high number of replacements')]"
The String.replace() method creates a new String instance - which is a copy of the original String with the replacements applied.,"[('String.replace() method', 'creates', 'new String instance'), ('new String instance', 'is a copy of', 'original String'), ('new String instance', 'has', 'replacements applied')]"
"If you have to perform 5 replacements, you have to call replace() 5 times, each time on the string returned by the last replace() call, like this:","[('perform', 'requires', '5 replacements'), ('call', 'requires', 'replace() 5 times'), ('replace() 5 times', 'performed on', 'string returned by last replace() call')]"
"... where N = the size of the string, and M = the number of replacements to perform.","[('N', 'is', 'size of the string'), ('M', 'is', 'number of replacements to perform')]"
"Instead of using the String.replace() method I will here present a different, more scalable solution called a TokenReplacingReader.","[('String.replace()', 'is a method of', 'String'), ('TokenReplacingReader', 'is a', 'solution'), ('TokenReplacingReader', 'is more scalable than', 'String.replace()')]"
The token name (without the enclosing ${} ) is passed to the ITokenResolver.resolveToken(String tokenName) method.,"[('token name', 'passed to method', 'ITokenResolver.resolveToken(String tokenName)')]"
"The TokenReplacingReader is itself a subclass of java.io.Reader, so any class that can use a Reader, can use a TokenReplacingReader.","[('TokenReplacingReader', 'is a subclass of', 'java.io.Reader'), ('class', 'can use', 'Reader'), ('class', 'can use', 'TokenReplacingReader')]"
The TokenReplacingReader does not use as much memory as the String.replace() method.,"[('TokenReplacingReader', 'does not use as much memory as', 'String.replace() method')]"
"... where N is the size of the data to replace tokens in, and M is the number of replacements.","[('N', 'is the size of', 'data'), ('M', 'is the number of', 'replacements'), ('tokens', 'are replaced in', 'data')]"
This is faster than the O(N * M) of the String.replace() method.,"[('String.replace() method', 'has time complexity', 'O(N * M)')]"
You could create a variant of the TokenReplacingReader which can replace XML entities (e.g.,"[('TokenReplacingReader', 'can replace', 'XML entities')]"
"Additionally, since TokenReplacingReader is a java.io.Reader, and it gets its characters from a Reader itself, you can chain it with other java.io.Reader's or InputStreams which does other things (like unzipping, decrypting, converting from UTF-8, UTF-16 etc.)","[('TokenReplacingReader', 'is a', 'java.io.Reader'), ('TokenReplacingReader', 'gets characters from', 'Reader'), ('TokenReplacingReader', 'can be chained with', 'java.io.Reader'), ('TokenReplacingReader', 'can be chained with', 'InputStreams'), ('java.io.Reader', 'does', 'unzipping'), ('java.io.Reader', 'does', 'decrypting'), ('java.io.Reader', 'does', 'converting from UTF-8'), ('java.io.Reader', 'does', 'converting from UTF-16'), ('InputStreams', 'does', 'unzipping'), ('InputStreams', 'does', 'decrypting'), ('InputStreams', 'does', 'converting from UTF-8'), ('InputStreams', 'does', 'converting from UTF-16')]"
Implementing a Java web crawler is a fun and challenging task often given in university programming classes.,"[('Java web crawler', 'is a', 'task'), ('task', 'is', 'fun'), ('task', 'is', 'challenging'), ('task', 'given in', 'university programming classes')]"
That way the thread listening for incoming requests spends as much time as possible in the serverSocket.accept() call.,"[('thread', 'listening for', 'incoming requests'), ('thread', 'spends time in', 'serverSocket.accept() call')]"
That way the risk is minimized for clients being denied access to the server because the listening thread is not inside the accept() call.,"[('risk', 'is minimized for', 'clients'), ('clients', 'being denied access to', 'server'), ('listening thread', 'is not inside', 'accept() call')]"
"Here is the code for the WorkerRunnable class, which is passed to the worker thread constructor:","[('WorkerRunnable', 'is a', 'class'), ('WorkerRunnable', 'is passed to', 'worker thread constructor')]"
"As mentioned earlier the more time the thread calling serverSocket.accept() spends inside this method call, the more responsive the server will be.","[('thread', 'calls method', 'serverSocket.accept()'), ('serverSocket.accept()', 'affects', 'responsiveness of server'), ('time', 'spent inside', 'serverSocket.accept()'), ('more time', 'increases', 'responsiveness of server')]"
Only when the listening thread is inside the accept() call can clients connect to the server.,"[('listening thread', 'inside', 'accept() call'), ('clients', 'can connect to', 'server')]"
Clients can only connect to the server while the server is inside the serverSocket.accept() method call.,"[('Clients', 'can connect to', 'server'), ('server', 'is inside', 'serverSocket.accept() method call')]"
"The longer time the listening thread spends outside the serverSocket.accept() call, the higher the probability that the client will be denied access to the server.","[('listening thread', 'spends time outside', 'serverSocket.accept() call'), ('higher probability', 'results in', 'client denied access'), ('client', 'denied access to', 'server')]"
That way the listening thread spends as little time as possible outside the serverSocket.accept() call.,"[('listening thread', 'spends time outside', 'serverSocket.accept() call')]"
"For instance, if you process 1.000 requests concurrently and each request takes 1 second, then all requests will take 1.000 seconds to complete.","[('process', 'has quantity', '1.000 requests'), ('request', 'takes time', '1 second'), ('all requests', 'take time', '1.000 seconds')]"
"To use IText PDF API for Java you must first download the IText JAR file from the IText website, and include it on your application class path.","[('IText PDF API', 'used for', 'Java'), ('IText JAR file', 'downloaded from', 'IText website'), ('IText JAR file', 'included on', 'application class path')]"
"The com.itextpdf.text.Anchor class in IText represents an link, either to an external website, or internally in the document.","[('com.itextpdf.text.Anchor', 'class in', 'IText'), ('com.itextpdf.text.Anchor', 'represents', 'link'), ('link', 'type', 'external website'), ('link', 'type', 'internal document')]"
"The com.itextpdf.text.Chunk class in IText represents the smallest possible ""chunk"" of text.",
"If you need to generate a PDF document from scratch, you will use the Document class.","[('You', 'need to generate', 'PDF document'), ('PDF document', 'generated from', 'scratch'), ('You', 'will use', 'Document class')]"
"You can specify fonts for most text objects (Chunk, Phrase, Paragraph etc.)","[('fonts', 'can be specified for', 'text objects'), ('text objects', 'includes', 'Chunk'), ('text objects', 'includes', 'Phrase'), ('text objects', 'includes', 'Paragraph')]"
The com.itextpdf.text.Image is used to add images to IText PDF documents.,"[('com.itextpdf.text.Image', 'used to add', 'images'), ('com.itextpdf.text.Image', 'used in', 'IText PDF documents')]"
You set the absolute position of an image using the setAbsolutePosition() method.,"[('You', 'use method', 'setAbsolutePosition()'), ('setAbsolutePosition()', 'sets position of', 'image')]"
"If you already have a finished PDF, and just want to add a header, footer or watermark to it, IText provides the com.itextpdf.pdf.PdfStamper class.","[('IText', 'provides', 'com.itextpdf.pdf.PdfStamper class'), ('com.itextpdf.pdf.PdfStamper class', 'used for', 'add a header'), ('com.itextpdf.pdf.PdfStamper class', 'used for', 'add a footer'), ('com.itextpdf.pdf.PdfStamper class', 'used for', 'add a watermark')]"
You can set the alignment of the paragraph using the setAlignment() method.,"[('setAlignment() method', 'used for', 'set the alignment of the paragraph')]"
"You can write text as superscript or subscript using the Chunk class, and it's setTextRise() method.","[('Chunk class', 'has method', 'setTextRise()'), ('setTextRise()', 'used for', 'write text as superscript'), ('setTextRise()', 'used for', 'write text as subscript')]"
You can add tables to a PDF document using the com.itextpdf.text.PdfPTable class in IText.,"[('com.itextpdf.text.PdfPTable', 'used for', 'add tables'), ('add tables', 'to', 'PDF document'), ('com.itextpdf.text.PdfPTable', 'part of', 'IText')]"
"To add cells to the table you call the addCell() method, passing PdfPCell instances, or other IText objects like Paragraph etc.","[('addCell()', 'method for', 'add cells to the table'), ('addCell()', 'requires', 'PdfPCell instances'), ('addCell()', 'requires', 'IText objects'), ('IText objects', 'includes', 'Paragraph')]"
"You can set the column widths using the setWidths() method, like this:","[('column widths', 'can be set using', 'setWidths() method')]"
"If you need a cell to span multiple columns you can do so using the setColspan() method, like this:","[('cell', 'can span', 'multiple columns'), ('setColspan()', 'used for', 'spanning multiple columns')]"
"In text mode the settings of the added element (Phrase, Paragraph etc.)","[('added element', 'has setting', 'text mode'), ('added element', 'includes', 'Phrase'), ('added element', 'includes', 'Paragraph')]"
Content added via the PdfCell.addElement() method is considered composite mode content.,"[('Content', 'added via method', 'PdfCell.addElement()'), ('Content', 'considered', 'composite mode content')]"
"You can set the default cell settings of new cells added, using the table.addCell() methods, like this:","[('table', 'has method', 'addCell()'), ('addCell()', 'sets', 'default cell settings'), ('default cell settings', 'applies to', 'new cells')]"
The method setIndent() sets the indentation of the first paragraph in the cell.,"[('setIndent()', 'sets', 'indentation'), ('indentation', 'of', 'first paragraph'), ('first paragraph', 'in', 'cell')]"
The method setFollowingIndent() sets the indentation of the following paragraphs in the cell.,"[('setFollowingIndent()', 'sets', 'indentation of the following paragraphs'), ('indentation of the following paragraphs', 'located in', 'cell')]"
The method setRightIndent() sets the right indentation of the cell content.,"[('setRightIndent()', 'sets', 'right indentation of the cell content')]"
"If the cell is in composite mode, just set the leading on the element added, e.g.","[('cell', 'is in mode', 'composite mode'), ('leading', 'set on', 'element')]"
The second method call sets the leading to 0 points + 1.5 x font height.,"[('second method call', 'sets', 'leading'), ('leading', 'equals', '0 points + 1.5 x font height')]"
"You can set the rotation of the cell content using the setRotation() method, like this:","[('setRotation()', 'used for', 'set the rotation of the cell content')]"
"You can add underline and strikethrough text using the Chunk class, and its setUnderline() method.","[('Chunk class', 'has method', 'setUnderline()'), ('setUnderline()', 'used for', 'add underline'), ('setUnderline()', 'used for', 'add strikethrough text')]"
Quite often Java applications keep objects in data structures that contain java.util.ArrayList instances.,"[('Java applications', 'keep objects in', 'data structures'), ('data structures', 'contain', 'java.util.ArrayList instances')]"
This tutorial will also look at the performance of the OpenArrayList class - a class that mimics the java.util.ArrayList but designed with performance in mind.,"[('OpenArrayList', 'mimics', 'java.util.ArrayList'), ('OpenArrayList', 'designed with', 'performance')]"
Each element is obtained from the ArrayList instance using the get() method.,"[('element', 'obtained from', 'ArrayList instance'), ('element', 'obtained using', 'get() method')]"
The third way to iterate an ArrayList is to use an java.util.Iterator obtained from the ArrayList.,"[('java.util.Iterator', 'obtained from', 'ArrayList'), ('third way', 'to iterate', 'ArrayList')]"
The benchmarks were executed using JDK 1.8.0_u60 on a Intel Core i7-4770 Haswell server which was doing nothing but the benchmarks.,"[('benchmarks', 'executed using', 'JDK 1.8.0_u60'), ('benchmarks', 'executed on', 'Intel Core i7-4770 Haswell server'), ('Intel Core i7-4770 Haswell server', 'running', 'benchmarks')]"
"You can also see that iterating an ArrayList using a standard Java for loop with a counter, and obtaining each element by calling the ArrayList get() method is about 10% faster for an ArrayList with 10 elements, and around 12,5% faster when the ArrayList contains 100 elements.","[('iterating an ArrayList using a standard Java for loop with a counter', 'faster by', '10% for an ArrayList with 10 elements'), ('iterating an ArrayList using a standard Java for loop with a counter', 'faster by', '12.5% when the ArrayList contains 100 elements')]"
The OpenArrayList class is a very simple imitation of the ArrayList which I have implemented to see if it could iterate a collection of elements faster than an ArrayList .,"[('OpenArrayList', 'is a type of', 'class'), ('OpenArrayList', 'imitates', 'ArrayList'), ('I', 'implemented', 'OpenArrayList'), ('OpenArrayList', 'iterates', 'collection of elements'), ('OpenArrayList', 'compared to', 'ArrayList')]"
"This should be a tiny bit faster than calling the ArrayList get() method, although the JVM could optimize the get() method call away.","[('ArrayList', 'has method', 'get()'), ('JVM', 'could optimize', 'get() method call')]"
Another advantage of making the elements array public is that you can write to it or copy from it using System.arraycopy() which is very fast.,"[('elements array', 'has advantage', 'public'), ('System.arraycopy()', 'can write to', 'elements array'), ('System.arraycopy()', 'can copy from', 'elements array'), ('System.arraycopy()', 'is', 'very fast')]"
The fact that the performance is so close is probably a sign that the JVM has optimized the get() call away.,"[('performance', 'is close to', 'sign'), ('JVM', 'has optimized', 'get() call')]"
"As you can see, the readMyData() method returns a MyData object.","[('readMyData()', 'returns', 'MyData object')]"
What is worth noting about this read pattern is that every time you call the readMyData() method a new MyData object is returned.,"[('readMyData()', 'method returns', 'MyData object'), ('MyData object', 'is', 'new')]"
If the readMyData() method is called frequently that will lead to a lot of MyData objects being created.,"[('readMyData() method', 'is called frequently', 'leads to'), ('leads to', 'creation of', 'a lot of MyData objects')]"
Here is how the earlier readMyData() method would look using the read-into-existing pattern:,"[('readMyData() method', 'uses pattern', 'read-into-existing')]"
"It is now up to the caller of the readMyData() method to decide if an existing MyData instance should be reused, or if a new instance should be created.","[('caller', 'decide', 'reuse MyData instance'), ('caller', 'decide', 'create new MyData instance'), ('readMyData() method', 'has caller', 'caller')]"
Reusing an object also means that the chance the object is located in the CPU cache is much higher than when you create a new object for each call to the readMyData() method.,"[('Reusing an object', 'increases', 'chance the object is located in the CPU cache'), ('Creating a new object for each call to the readMyData() method', 'decreases', 'chance the object is located in the CPU cache')]"
To change the previous example code to read data directly from the underlying source we need to change the implementation of the MyData class:,"[('previous example code', 'needs to change', 'implementation of the MyData class'), ('implementation of the MyData class', 'reads data from', 'underlying source')]"
"To use the MyData class in its new variation, you will use code like this:","[('MyData class', 'has variation', 'new variation')]"
Just call setSource() when you need to read data out of a new byte array.,"[('setSource()', 'action', 'read data'), ('read data', 'source', 'new byte array')]"
"Third, only if you actually call both getVal1() and getVal2() will the corresponding data be read out of the underlying byte array.","[('getVal1()', 'action', 'call'), ('getVal2()', 'action', 'call'), ('data', 'read out of', 'underlying byte array')]"
"Assuming that each MyData object consists of 2 bytes from the underlying source, here is how the MyData class would look with a navigation method added:","[('MyData object', 'consists of', '2 bytes'), ('MyData object', 'source', 'underlying source'), ('MyData class', 'has method', 'navigation method')]"
The first change is the that the setSource() method now takes an extra parameter called offset.,"[('setSource() method', 'has change', 'first change'), ('first change', 'involves', 'extra parameter'), ('extra parameter', 'called', 'offset')]"
The second change is that the getVal1() and getVal2() methods now use the value of the internal offset variable as index into the source array when reading values out.,"[('getVal1()', 'uses', 'internal offset variable'), ('getVal2()', 'uses', 'internal offset variable'), ('internal offset variable', 'used as', 'index'), ('index', 'used in', 'source array'), ('source array', 'used for', 'reading values')]"
"The next() method increments the internal offset variable by 2, so that the offset variable points to the next record in the array.","[('next() method', 'increments', 'internal offset variable'), ('internal offset variable', 'points to', 'next record'), ('next record', 'located in', 'array')]"
The fourth change is the addition of the hasNext() method which returns true if the source byte array has more records (bytes) in it.,"[('hasNext() method', 'is a', 'method'), ('hasNext() method', 'returns', 'true'), ('source byte array', 'contains', 'records'), ('source byte array', 'contains', 'bytes'), ('records', 'are in', 'source byte array'), ('bytes', 'are in', 'source byte array')]"
"As you can see, using the MyData class in the navigator pattern implementation is pretty straightforward.","[('MyData class', 'used in', 'navigator pattern implementation')]"
"Additionally, if your server works on many tasks at the same time (e.g incoming HTTP requests), the other CPUs in your server may already be busy working on their own tasks.","[('server', 'works on', 'many tasks'), ('tasks', 'example of', 'incoming HTTP requests'), ('CPUs', 'located in', 'server'), ('CPUs', 'busy with', 'own tasks')]"
"My own experiences come from from a mix of Java performance experiments, as well as the design and development of VStack.co - a fully hosted application backend which I have cofounded with WorpCloud Ltd.","[('My own experiences', 'come from', 'Java performance experiments'), ('My own experiences', 'come from', 'design and development of VStack.co'), ('VStack.co', 'is', 'a fully hosted application backend'), ('I', 'cofounded', 'VStack.co'), ('I', 'cofounded', 'with WorpCloud Ltd'), ('WorpCloud Ltd', 'cofounded', 'VStack.co')]"
"The Java ArrayList class only works for objects - not for primitive types (byte, int, long etc).","[('Java ArrayList class', 'works for', 'objects'), ('Java ArrayList class', 'does not work for', 'primitive types'), ('primitive types', 'includes', 'byte'), ('primitive types', 'includes', 'int'), ('primitive types', 'includes', 'long')]"
The code consist of 3 Java classes and 2 unit tests.,"[('code', 'consist of', '3 Java classes'), ('code', 'consist of', '2 unit tests')]"
100.000 x 1MB = 100GB (approximately - not precisely - but you get the picture).,"[('100.000 x 1MB', 'equals', '100GB')]"
"Note, that in languages with built-in garbage collection (like Java, C# etc.)","[('Java', 'has feature', 'built-in garbage collection'), ('C#', 'has feature', 'built-in garbage collection'), ('Java', 'is a type of', 'language'), ('C#', 'is a type of', 'language')]"
Even at 4GB (1.000.000 x 4KB) modern servers should be able to handle it.,"[('4GB', 'is equivalent to', '1.000.000 x 4KB'), ('modern servers', 'should be able to handle', '4GB')]"
"Additionally, if you use a small block size, you may have to expand blocks more often than if you use e.g.","[('you', 'use', 'small block size'), ('you', 'may have to expand', 'blocks')]"
"To obtain a ResizableArray instance, call the ResizableArrayBuffer's getArray() method, like this:","[('ResizableArrayBuffer', 'has method', 'getArray()'), ('getArray()', 'returns', 'ResizableArray')]"
The ResizableArray class in the GitHub repository only contains a single write() method which takes a ByteBuffer as parameter.,"[('ResizableArray', 'part of', 'GitHub repository'), ('ResizableArray', 'contains method', 'write()'), ('write()', 'takes parameter', 'ByteBuffer')]"
"It should be pretty easy to add more write() methods yourself, though.","[('You', 'can add', 'write() methods')]"
The value returned by write() is the number of bytes copied from the ByteBuffer.,"[('write()', 'returns', 'number of bytes'), ('number of bytes', 'copied from', 'ByteBuffer')]"
"If the ResizableArray cannot contain all the data in the ByteBuffer after expanding itself to the max size, the write() method will return -1 and no data will have been copied at all!","[('ResizableArray', 'cannot contain', 'all the data in the ByteBuffer'), ('ResizableArray', 'expanding itself to', 'max size'), ('write() method', 'will return', '-1'), ('data', 'will have been copied', 'no')]"
"You do so simply by calling the free() method on the ResizableArray, like this:","[('ResizableArray', 'has method', 'free()')]"
"Calling free() takes care of returning the used block to the correct block queue, regardless of the size of the block allocated to the ResizableArray.","[('free()', 'returns', 'used block'), ('used block', 'belongs to', 'correct block queue'), ('block', 'allocated to', 'ResizableArray')]"
I have implemented batch mode put() and take() operations for both ring buffer implementations.,"[('I', 'implemented', 'batch mode put() operations'), ('I', 'implemented', 'batch mode take() operations'), ('batch mode put() operations', 'for', 'ring buffer implementations'), ('batch mode take() operations', 'for', 'ring buffer implementations')]"
My benchmarks showed that batch put() and take() operations provides up to 4 times the throughput of putting and taking a single element at a time.,"[('batch put() and take() operations', 'provides', 'up to 4 times the throughput'), ('putting and taking a single element at a time', 'compared to', 'batch put() and take() operations')]"
Here is an implementation of the ring buffer that uses a fill count including the batch put() and take() operations.,"[('ring buffer', 'uses', 'fill count'), ('ring buffer', 'includes', 'batch put() operations'), ('ring buffer', 'includes', 'batch take() operations')]"
"Here is an implementation of the ring buffer that uses a read position and flip marker, including the batch put() and take() operations.","[('ring buffer', 'uses', 'read position'), ('ring buffer', 'uses', 'flip marker'), ('ring buffer', 'includes', 'batch put() operations'), ('ring buffer', 'includes', 'batch take() operations')]"
"The JMH Maven archetype will generate a new Java project with a single, example benchmark Java class, and a Maven pom.xml file.","[('JMH Maven archetype', 'will generate', 'new Java project'), ('new Java project', 'contains', 'example benchmark Java class'), ('new Java project', 'contains', 'Maven pom.xml file')]"
The Maven pom.xml file contains the correct dependencies to compile and build your JMH microbenchmark suite.,"[('Maven pom.xml file', 'contains', 'correct dependencies'), ('correct dependencies', 'used for', 'compile and build JMH microbenchmark suite')]"
"It is time to write your first JMH benchmark class, or at least see how it is done.","[('You', 'write', 'JMH benchmark class'), ('You', 'see', 'how it is done')]"
The generated MyBenchmark class is a JMH class template which you can use to implement your JMH benchmarks.,"[('MyBenchmark class', 'is a', 'JMH class template'), ('JMH class template', 'used to', 'implement JMH benchmarks')]"
"You can either implement your benchmarks directly in the generated MyBenchmark class, or create a new class in the same Java package.","[('You', 'can implement', 'benchmarks'), ('benchmarks', 'can be implemented in', 'MyBenchmark class'), ('You', 'can create', 'new class'), ('new class', 'located in', 'same Java package')]"
To make it easy for you to write your first JMH benchmark I will just use the generated class in this example.,"[('you', 'write', 'first JMH benchmark'), ('I', 'use', 'generated class'), ('generated class', 'used in', 'example')]"
You can put the code you want to measure inside the testMethod() method body.,"[('code', 'can be put inside', 'testMethod() method body')]"
"For now, just imagine that the testMethod() body actually contained a good benchmark implementation.","[('testMethod()', 'contains', 'benchmark implementation')]"
"When you build your JMH benchmarks, Maven will always generate a JAR file named benchmarks.jar in the target directory (Maven's standard output directory).","[('Maven', 'generates', 'JAR file'), ('JAR file', 'named', 'benchmarks.jar'), ('benchmarks.jar', 'located in', 'target directory'), ('target directory', 'type', ""Maven's standard output directory"")]"
It contains your compiled benchmark classes as well as all JMH classes needed to run the benchmark.,"[('It', 'contains', 'compiled benchmark classes'), ('It', 'contains', 'JMH classes'), ('JMH classes', 'needed to run', 'benchmark')]"
"If your benchmarks has any external dependencies (JAR files from other projects needed to run your benchmarks), declare these dependencies inside the Maven pom.xml, and they will be included in the benchmarks.jar too.","[('benchmarks', 'has external dependencies', 'JAR files'), ('JAR files', 'needed to run', 'benchmarks'), ('dependencies', 'declare inside', 'Maven pom.xml'), ('dependencies', 'included in', 'benchmarks.jar')]"
"Since benchmarks.jar is fully self contained, you can copy that JAR file to another computer to run your JMH benchmarks on that computer.","[('benchmarks.jar', 'is', 'self contained'), ('benchmarks.jar', 'can be copied to', 'another computer'), ('benchmarks.jar', 'used to run', 'JMH benchmarks'), ('JMH benchmarks', 'can be run on', 'another computer')]"
This means that you want the output shown using the time unit minutes (e.g.,"[('output', 'shown using', 'time unit minutes')]"
"State variables are declared in special state classes, and an instance of that state class can then be provided as parameter to the benchmark method.","[('State variables', 'are declared in', 'state classes'), ('instance', 'is of', 'state class'), ('state class', 'provided as parameter to', 'benchmark method')]"
In this example I have added a nested static class named MyState.,"[('nested static class', 'named', 'MyState')]"
Notice that the testMethod() benchmark method now takes an instance of MyState as parameter.,"[('testMethod()', 'benchmark method takes as parameter', 'instance of MyState')]"
Notice also that the testMethod() body has now been changed to use the MyState object when performing its sum calculation.,"[('testMethod()', 'has body changed to use', 'MyState object'), ('MyState object', 'used for', 'sum calculation')]"
Notice the two new methods in the MyState class named doSetup() and doTearDown().,"[('MyState class', 'contains method', 'doSetup()'), ('MyState class', 'contains method', 'doTearDown()')]"
"If you have any doubts about when a setup or tear down method is called, try inserting a System.out.println() statement in the method.","[('you', 'have doubts about', 'when a setup or tear down method is called'), ('you', 'try inserting', 'System.out.println() statement in the method')]"
"If your benchmark method is calculating multiple values that might end up being eliminated as dead code, you can either combine the two values into a single, and return that value (e.g.","[('benchmark method', 'calculating', 'multiple values'), ('multiple values', 'might end up being', 'eliminated as dead code'), ('you', 'can combine', 'two values into a single'), ('you', 'can return', 'that value')]"
Notice how the testMethod() benchmark method now takes a Blackhole object as parameter.,"[('testMethod()', 'has parameter', 'Blackhole object')]"
Notice also how the calculated sum in the sum variable is now passed to the consume() method of the Blackhole instance.,"[('sum variable', 'contains', 'calculated sum'), ('calculated sum', 'passed to', 'consume() method'), ('consume() method', 'part of', 'Blackhole instance')]"
"If your benchmark method produces multiple results you can pass each of these results to a black hole, meaning calling consume() on the Blackhole instance for each value.","[('benchmark method', 'produces', 'multiple results'), ('you', 'can pass', 'each of these results'), ('calling', 'consume()', 'Blackhole instance'), ('Blackhole instance', 'for each', 'value')]"
"The JVM could even continue and never call the testMethod() because it knows it always returns 3, and just inline the constant 3 wherever the testMethod() was to be called.","[('JVM', 'could continue', 'never call the testMethod()'), ('testMethod()', 'always returns', '3'), ('JVM', 'inline', 'constant 3')]"
Sometimes a lot of time is even spent just allocating and freeing memory (e.g.,"[('time', 'spent on', 'allocating memory'), ('time', 'spent on', 'freeing memory')]"
"When you control object allocation, deallocation and reallocation you can make limits like e.g.","[('You', 'control', 'object allocation'), ('You', 'control', 'object deallocation'), ('You', 'control', 'object reallocation')]"
having a maximum of 10.000 messages in memory at a time.,"[('memory', 'contains', 'messages')]"
"The batch size can thus vary from 1 to a maximum upper limit set by the system, e.g.","[('batch size', 'can vary from', '1'), ('batch size', 'can vary to', 'maximum upper limit'), ('maximum upper limit', 'set by', 'system')]"
"To achieve lower latency, yet allowing for micro batching to happen, you can loop over the input channels (inbound network connections, directories etc.)","[('lower latency', 'achieved by', 'loop over the input channels'), ('micro batching', 'allowed by', 'loop over the input channels'), ('input channels', 'includes', 'inbound network connections'), ('input channels', 'includes', 'directories')]"
Therefore it can be beneficial to batch up data sent outside a process to minimize the overhead per data block (e.g.,"[('Batching data', 'beneficial for', 'minimizing overhead per data block'), ('Data', 'sent outside', 'a process')]"
"Instead of traversing the whole data structure to serve just one ""request"" (task, message etc.)",
Notice how two different DAO's were called from inside the control's execute() method.,"[('control', 'has method', 'execute()'), ('execute()', 'calls', ""DAO's"")]"
"To make this happen you need to obtain a database connection (or equivalent object) inside the Control.execute() method, and pass this connection (or other object) to each DAO.","[('Control.execute()', 'requires', 'database connection'), ('Control.execute()', 'requires', 'equivalent object'), ('Control.execute()', 'passes', 'connection'), ('Control.execute()', 'passes', 'other object'), ('connection', 'used by', 'DAO'), ('other object', 'used by', 'DAO')]"
"Well, you could if you call a setConnection() method on them afterwards.","[('you', 'could call', 'setConnection() method')]"
The DaoManager is a class that you put in between the Control and the DAO's.,"[('DaoManager', 'is a', 'class'), ('DaoManager', 'located between', 'Control'), ('DaoManager', 'located between', ""DAO's"")]"
Once the DaoManager.executeAndClose() method finishes the database connection inside the DaoManager is closed.,"[('DaoManager.executeAndClose()', 'finishes', 'database connection'), ('DaoManager', 'contains', 'database connection'), ('DaoManager', 'closes', 'database connection')]"
"As you can see from the code example in the previous section, the scope of the connection when managed by the DaoManager.executeAndClose() is the boundaries of the executeAndClose() method.","[('code example', 'located in', 'previous section'), ('connection', 'managed by', 'DaoManager.executeAndClose()'), ('scope of the connection', 'is', 'boundaries of the executeAndClose() method')]"
This could be the case in a desktop application if each control is registered independently as listeners on e.g.,"[('control', 'registered as', 'listeners'), ('listeners', 'used in', 'desktop application')]"
It is the DaoManager's executeAndClose() method that demarcates the life span of the underlying connection.,"[('DaoManager', 'has method', 'executeAndClose()'), ('executeAndClose()', 'demarcates', 'life span of the underlying connection')]"
"If you call this method from each control's execute() method (or whatever the central execution method in your controls is called), each control will open and close a connection separately.","[('control', 'has method', 'execute()'), ('method', 'called from', 'control'), ('control', 'will open', 'connection'), ('control', 'will close', 'connection')]"
The ScopingDataSource will be moved to Butterfly Persistence from around version 5.2.0 or 5.4.0 which will be released in 2009.,"[('ScopingDataSource', 'will be moved to', 'Butterfly Persistence'), ('Butterfly Persistence', 'version', '5.2.0'), ('Butterfly Persistence', 'version', '5.4.0'), ('5.2.0', 'release year', '2009'), ('5.4.0', 'release year', '2009')]"
The ScopingDataSource is an implementation of the standard Java interface javax.sql.DataSource.,"[('ScopingDataSource', 'is an implementation of', 'javax.sql.DataSource')]"
"Once this method is called, whenever the tread that called this method calls the ScopingDataSource.getConnection() method, the same connection instance is returned.","[('method', 'is called by', 'thread'), ('thread', 'calls', 'ScopingDataSource.getConnection() method'), ('ScopingDataSource.getConnection() method', 'returns', 'same connection instance')]"
"This ScopingConnection ignores all calls to the close() method, so the underlying connection can be reused.","[('ScopingConnection', 'ignores', 'calls to the close() method'), ('underlying connection', 'can be', 'reused')]"
"When you are ready to close the connection your control calls the ScopingDataSource.endConnectionScope(), and the currently open connection (if any) is closed.","[('control', 'calls', 'ScopingDataSource.endConnectionScope()'), ('ScopingDataSource.endConnectionScope()', 'closes', 'currently open connection')]"
"From here on the ScopingDataSource behaves just like a regular DataSource, returning a new Connection for every call to getConnection().","[('ScopingDataSource', 'behaves like', 'regular DataSource'), ('ScopingDataSource', 'returns', 'new Connection'), ('getConnection()', 'called by', 'ScopingDataSource')]"
"The calls to beginConnectionScope() and endConnectionScope() do not have to be located within the same method, nor within the same class.","[('beginConnectionScope()', 'can be called by', 'method'), ('endConnectionScope()', 'can be called by', 'method'), ('beginConnectionScope()', 'can be called by', 'class'), ('endConnectionScope()', 'can be called by', 'class')]"
"You can just extend the DBControlBase and override the doExecute() method, then all connection scoping is done for you.","[('DBControlBase', 'can be extended', 'You'), ('doExecute()', 'can be overridden', 'You'), ('connection scoping', 'is done for', 'You')]"
"They can be called outside the Control.execute() method too, or inside a parent control.","[('They', 'can be called', 'outside the Control.execute() method'), ('They', 'can be called', 'inside a parent control')]"
"If your Control class implements an interface, you can implement a Dynamic Proxy which implements the same interface.","[('Control class', 'implements', 'interface'), ('Dynamic Proxy', 'implements', 'interface')]"
"When the execute() method is called on the control interface, this dynamic proxy will call the beginConnectionScope(), then call your controls execute() method, and finally the endConnectionScope().","[('dynamic proxy', 'calls', 'beginConnectionScope()'), ('dynamic proxy', 'calls', 'execute() method'), ('dynamic proxy', 'calls', 'endConnectionScope()'), ('execute() method', 'called on', 'control interface')]"
The only difference is that you call beginTransactionScope() and endTransactionScope() instead.,"[('you', 'call', 'beginTransactionScope()'), ('you', 'call', 'endTransactionScope()')]"
"When a connection is obtained from the ScopingDataSource while inside a transaction scope, connection.setAutoCommit(false) is called.","[('connection', 'obtained from', 'ScopingDataSource'), ('connection', 'inside', 'transaction scope'), ('connection', 'method called', 'setAutoCommit(false)')]"
"If an exception is thrown before the endTransactionScope() method is called, you should catch that exception and call abortTransactionScope(Exception) with that exception.","[('exception', 'is thrown before', 'endTransactionScope() method is called'), ('you', 'should catch', 'exception'), ('you', 'call', 'abortTransactionScope(Exception)'), ('abortTransactionScope(Exception)', 'called with', 'exception')]"
The first problem you run into when designing DAO classes is connection scoping.,"[('designing DAO classes', 'first problem', 'connection scoping')]"
A naive implementation of a DAO class using JDBC to target a relational database might look like below (at least I have designed DAO's like this in the past).,"[('DAO class', 'uses', 'JDBC'), ('DAO class', 'targets', 'relational database')]"
Notice how the readPerson() method opens its own connection and closes it again once it is done.,"[('readPerson() method', 'opens', 'connection'), ('readPerson() method', 'closes', 'connection')]"
You might also be able to hide connection closing from the domain logic by adding a close() method to the DAO.,"[('close()', 'method of', 'DAO'), ('connection closing', 'hidden from', 'domain logic')]"
But somewhere in the domain logic you would have to call that close() method.,"[('close() method', 'is called in', 'domain logic')]"
The method call daoFactory.beginConnectionScope() marks the beginning of a connection scope.,"[('daoFactory.beginConnectionScope()', 'marks the beginning of', 'connection scope')]"
The method call daoFactory.endConnectionScope() ends the current connection scope and closes the connection associated with the scope.,"[('daoFactory.endConnectionScope()', 'ends', 'current connection scope'), ('daoFactory.endConnectionScope()', 'closes', 'connection associated with the scope')]"
This way neither of the DAO's need to have close() methods.,"[('DAO', 'does not need', 'close() methods')]"
The methods beginTransaction() and endTransaction() mark the beginning and end of the transaction.,"[('beginTransaction()', 'marks', 'beginning of the transaction'), ('endTransaction()', 'marks', 'end of the transaction')]"
The beginTransaction() method will call connection.setAutoCommit(false) for the connection associated with the transaction scope.,"[('beginTransaction() method', 'will call', 'connection.setAutoCommit(false)'), ('connection.setAutoCommit(false)', 'for', 'connection associated with the transaction scope')]"
The endTransaction() method will attempt to commit the transaction and call setAutoCommit(false) again.,"[('endTransaction() method', 'will attempt to', 'commit the transaction'), ('endTransaction() method', 'will call', 'setAutoCommit(false) again')]"
Notice the new method call in the catch-block of the transaction scope: daoFactory.abortTransaction(e).,"[('catch-block', 'contains', 'method call'), ('method call', 'is', 'daoFactory.abortTransaction(e)'), ('method call', 'located in', 'transaction scope')]"
This method call rolls the transaction back if an exception is thrown from any of the dao methods or from endTransaction().,"[('method call', 'rolls', 'transaction back'), ('exception', 'thrown from', 'dao methods'), ('exception', 'thrown from', 'endTransaction()')]"
"The DAO layer usually consists of a smaller set of classes, than the number of domain logic classes that uses it.","[('DAO layer', 'consists of', 'smaller set of classes'), ('domain logic classes', 'uses', 'DAO layer')]"
"It is also a somewhat more controlled operation, since you can search for all DAO classes, and make sure they are changed to use the new persistence mechanism.","[('You', 'can search for', 'all DAO classes'), ('DAO classes', 'use', 'new persistence mechanism')]"
"To solve the problems mentioned earlier, you can move some of the code to a DaoManager class.","[('problems', 'mentioned in', 'earlier'), ('code', 'can be moved to', 'DaoManager class')]"
Notice that the getPersonDao() method isn't synchronized even though it returns a kind of singleton.,"[('getPersonDao() method', 'returns', 'singleton')]"
"Rather than implementing a close() method in the DaoManager class, a template method will be added called executeAndClose().","[('DaoManager class', 'method not implemented', 'close()'), ('template method', 'will be added', 'executeAndClose()')]"
This instance then has it's execute() method invoked with the DaoManager itself as parameter.,"[('instance', 'has method', 'execute()'), ('execute()', 'invoked with parameter', 'DaoManager'), ('execute()', 'invoked with parameter', 'instance')]"
Now the scope of the connection is marked by the scope of the method call executeAndClose().,"[('connection', 'scope marked by', 'scope of the method call executeAndClose()')]"
"Any exception handling related to the connection.close() call can be hidden away inside the executeAndClose() method, and reused throughout the application.","[('exception handling', 'related to', 'connection.close() call'), ('exception handling', 'can be hidden away inside', 'executeAndClose() method'), ('executeAndClose() method', 'can be reused throughout', 'application')]"
You can add a transaction() method similar to the executeAndClose() method which takes care of transaction management.,"[('transaction() method', 'is similar to', 'executeAndClose() method'), ('transaction() method', 'takes care of', 'transaction management')]"
"For instance, if both commit() and rollback() throws exceptions, both of these exception are not properly preserved or handled.","[('commit()', 'throws', 'exceptions'), ('rollback()', 'throws', 'exceptions')]"
Using the transaction() method is analogous to using the executeAndClose() method:,"[('transaction() method', 'is analogous to', 'executeAndClose() method')]"
This could be done by wrapping the call to transaction() inside the call to executeAndClose().,"[('transaction()', 'wrapped inside', 'executeAndClose()')]"
"As you can see a DaoManager class can solve the problems of marking both connection life span and transaction boundaries, and automatically open and close connections and commit / rollback transactions.","[('DaoManager class', 'can solve', 'problems of marking connection life span'), ('DaoManager class', 'can solve', 'problems of marking transaction boundaries'), ('DaoManager class', 'can automatically open and close', 'connections'), ('DaoManager class', 'can automatically commit / rollback', 'transactions')]"
"If you implement a base event listener class that all event listeners (or actions, or whatever your framework calls them) extend, you can put the DaoManager code in that class (or a subclass of the base class).","[('base event listener class', 'implemented by', 'you'), ('event listeners', 'extend', 'base event listener class'), ('actions', 'extend', 'base event listener class'), ('framework', 'calls', 'event listeners'), ('framework', 'calls', 'actions'), ('DaoManager code', 'put in', 'base event listener class'), ('DaoManager code', 'put in', 'subclass of the base class')]"
Here is an example of a subclass that executes the persistence code marked in bold in the first code box in this section:,"[('subclass', 'executes', 'persistence code'), ('persistence code', 'marked in', 'bold'), ('persistence code', 'located in', 'first code box'), ('first code box', 'located in', 'this section')]"
Now your domain logic class only contains the persistence code that is actually interesting.,"[('domain logic class', 'contains', 'persistence code')]"
It may not always be possible or feasible to implement such a persistence action base class.,"[('persistence action base class', 'implementation feasibility', 'not always possible')]"
It would be tempting to put that validation code inside the doPersistenceAction() method.,"[('validation code', 'inside', 'doPersistenceAction() method')]"
"But remember, a connection has been opened already when the DaoManager is instantiated, which happens before the doPersistenceAction() method is called.","[('DaoManager', 'connection opened', 'already'), ('connection', 'opened when', 'DaoManager instantiated'), ('DaoManager', 'instantiated before', 'doPersistenceAction() method called')]"
"Furthermore, if the validation fails and aborts the doPersistenceAction() method call, you have opened a connection without ever using it.","[('validation', 'fails', 'doPersistenceAction() method call'), ('validation', 'aborts', 'doPersistenceAction() method call'), ('you', 'opened', 'connection')]"
"If you are using a persistence API you will inject whatever class you obtain connections or their equivalents from (sessions in Hibernate, IDaos in Butterfly Persistence).","[('persistence API', 'used by', 'you'), ('you', 'inject', 'class'), ('class', 'obtain', 'connections'), ('class', 'obtain', 'equivalents'), ('equivalents', 'include', 'sessions in Hibernate'), ('equivalents', 'include', 'IDaos in Butterfly Persistence')]"
"This is done to avoid obtaining the connection before the DaoCommand.execute() method is called, to postpone obtaining the connection as much as possible.","[('DaoCommand.execute() method', 'is called before', 'obtaining the connection'), ('obtaining the connection', 'is postponed by', 'this')]"
"Inside the DaoCommand.execute() method the getPersonDaoTx() will be called, and then getConnectionTx() will be called, and then connection.setAutoCommit(false) will be called at that time.","[('DaoCommand.execute()', 'calls', 'getPersonDaoTx()'), ('getPersonDaoTx()', 'calls', 'getConnectionTx()'), ('getConnectionTx()', 'calls', 'connection.setAutoCommit(false)')]"
"After this code is executed, you can now access the cookies in the cookieMap using the cookie names as keys (cookieMap.get(""cookieName"")).",
"Second, it sets the expiration to 24 hours using the setMaxAge() method.","[('it', 'sets', 'expiration'), ('expiration', 'has duration', '24 hours'), ('it', 'uses method', 'setMaxAge()')]"
"Cookies are most often used to store user specific information, like e.g.","[('Cookies', 'used to store', 'user specific information')]"
The browser includes the Accept-Encoding HTTP header in requests sent to an HTTP server (e.g.,"[('browser', 'includes', 'Accept-Encoding HTTP header'), ('Accept-Encoding HTTP header', 'included in', 'requests'), ('requests', 'sent to', 'HTTP server')]"
That class is mapped to a set of URL's in the web.xml file.,"[('class', 'mapped to', ""set of URL's""), (""set of URL's"", 'located in', 'web.xml file')]"
"It does so by using a GZIPOutputStream internally, which is a standard Java class.","[('GZIPOutputStream', 'used by', 'It'), ('GZIPOutputStream', 'is a', 'standard Java class')]"
Remember to replace the class name with the fully qualified name of your own GZip Servlet filter class.,"[('class name', 'replace with', 'fully qualified name of your own GZip Servlet filter class')]"
"In general, If no header exists with the name passed to getHeader(), null is returned.","[('header', 'does not exist with name', 'passed to getHeader()'), ('getHeader()', 'returns', nan)]"
"NOTE: You will have to call this method before calling any getParameter() method, because calling the getParameter() method on an HTTP POST request will cause the servlet engine to parse the HTTP request body for parameters.","[('call this method', 'before', 'calling any getParameter() method'), ('calling the getParameter() method', 'on', 'HTTP POST request'), ('calling the getParameter() method', 'cause', 'servlet engine to parse the HTTP request body for parameters')]"
"For instance, you can access context parameters set in the web.xml file, you can forward the request to other servlets, and you can store application wide parameters in the ServletContext too.","[('context parameters', 'set in', 'web.xml file'), ('you', 'can access', 'context parameters'), ('you', 'can forward', 'request'), ('request', 'forward to', 'other servlets'), ('you', 'can store', 'application wide parameters'), ('application wide parameters', 'store in', 'ServletContext')]"
In order to write binary data back to the browser you cannot use the Writer obtained from response.getWriter().,"[('binary data', 'write back to', 'browser'), ('Writer', 'obtained from', 'response.getWriter()'), ('you', 'cannot use', 'Writer')]"
Instead you have to use the OutputStream obtained from the response.getOutputStream() method.,"[('response', 'has method', 'getOutputStream()'), ('getOutputStream()', 'returns', 'OutputStream')]"
The javax.servlet.http.HttpServlet class is a slightly more advanced base class than the GenericServlet shown in the Simple Servlet example.,"[('javax.servlet.http.HttpServlet', 'is a type of', 'base class'), ('javax.servlet.http.HttpServlet', 'is more advanced than', 'GenericServlet'), ('GenericServlet', 'is shown in', 'Simple Servlet example')]"
"The HttpServlet class reads the HTTP request, and determines if the request is an HTTP GET, POST, PUT, DELETE, HEAD etc.","[('HttpServlet', 'reads', 'HTTP request'), ('HttpServlet', 'determines if', 'request is HTTP GET'), ('HttpServlet', 'determines if', 'request is HTTP POST'), ('HttpServlet', 'determines if', 'request is HTTP PUT'), ('HttpServlet', 'determines if', 'request is HTTP DELETE'), ('HttpServlet', 'determines if', 'request is HTTP HEAD')]"
"HTTP GET requests only, you will extend the HttpServlet class, and override the doGet() method only.","[('HTTP GET requests', 'used in', 'doGet() method'), ('HttpServlet class', 'extended by', 'doGet() method')]"
"The HttpServlet class has methods you can override for each HTTP method (GET, POST etc.).","[('HttpServlet class', 'has methods for', 'HTTP method'), ('HTTP method', 'includes', 'GET'), ('HTTP method', 'includes', 'POST')]"
A Java Servlet is just an ordinary Java class which implements the interface,"[('Java Servlet', 'is a', 'Java class'), ('Java Servlet', 'implements', 'interface')]"
The easiest way to implement this interface is to extend either the class GenericServlet or HttpServlet.,"[('GenericServlet', 'is a', 'class'), ('HttpServlet', 'is a', 'class'), ('interface', 'implemented by', 'extending GenericServlet'), ('interface', 'implemented by', 'extending HttpServlet')]"
"When an HTTP request arrives at the web server, targeted for your Servlet, the web server calls your Servlet's service() method.","[('HTTP request', 'arrives at', 'web server'), ('HTTP request', 'targeted for', 'Servlet'), ('web server', 'calls', ""Servlet's service() method"")]"
"The service() method then reads the request, and generates a response which is sent back to the client (e.g.","[('service() method', 'reads', 'request'), ('service() method', 'generates', 'response'), ('response', 'sent back to', 'client')]"
"You will need to run your Java Servlets inside a Servlet compatible ""Servlet Container"" (e.g.",
"The RequestDispatcher class enables your servlet to ""call"" another servlet from inside another servlet.",
The above code obtains a RequestDispatcher targeted at whatever Servlet (or JSP) that is mapped to the URL /anotherUrl.simple.,"[('RequestDispatcher', 'targets', 'Servlet'), ('RequestDispatcher', 'targets', 'JSP'), ('Servlet', 'mapped to URL', '/anotherUrl.simple'), ('JSP', 'mapped to URL', '/anotherUrl.simple')]"
You can call the RequestDispatcher using either its include() or forward() method:,"[('RequestDispatcher', 'has method', 'include()'), ('RequestDispatcher', 'has method', 'forward()')]"
By calling either the include() or forward() method the servlet container activates whatever Servlet is mapped to the URL the RequestDispatcher.,"[('include() method', 'activates', 'Servlet'), ('forward() method', 'activates', 'Servlet'), ('Servlet', 'mapped to', 'URL'), ('RequestDispatcher', 'contains', 'URL')]"
There is a little difference between calling the forward() and include() method.,"[('forward()', 'compared to', 'include()'), ('include()', 'compared to', 'forward()')]"
"The forward() method intended for use in forwarding the request, meaning after the response of the calling servlet has been committed.","[('forward() method', 'intended for', 'use in forwarding the request'), ('use in forwarding the request', 'occurs after', 'response of the calling servlet has been committed')]"
"The include() method merges the response written by the calling servlet, and the activated servlet.","[('include() method', 'merges', 'response'), ('include() method', 'merges', 'calling servlet'), ('include() method', 'merges', 'activated servlet')]"
"This way you can achieve ""server side includes"" using the include().",
The red boxes represent state (variables) that your servlet's service() method should be careful about accessing.,"[('red boxes', 'represent', 'state (variables)'), (""servlet's service() method"", 'should be careful about accessing', 'state (variables)')]"
"Of course it is not only the member variables and static variables inside the servlet class itself, that you need to be careful about accessing.","[('member variables', 'located in', 'servlet class'), ('static variables', 'located in', 'servlet class')]"
"Static variables in any other class which are accessed by your servlet, must also be thread safe.","[('Static variables', 'accessed by', 'servlet'), ('Static variables', 'must be', 'thread safe')]"
In order to create a servlet filter you must implement the javax.servlet.Filter interface.,"[('servlet filter', 'created by implementing', 'javax.servlet.Filter interface')]"
"When the servlet filter is loaded the first time, its init() method is called, just like with servlets.","[('servlet filter', 'has method', 'init()'), ('init()', 'called when', 'servlet filter is loaded the first time'), ('init()', 'called like', 'servlets')]"
"Notice how the doFilter() method checks a request parameter, myParam, to see if it equals the string ""blockTheRequest"".",
"If not, the request is forwarded to the target of the request, by calling the filterChain.doFilter() method.","[('request', 'is forwarded to', 'target of the request'), ('filterChain.doFilter() method', 'is called by', 'request')]"
"You need to configure the servlet filter in the web.xml file of your web application, before it works.","[('servlet filter', 'needs to be configured in', 'web.xml file'), ('web.xml file', 'belongs to', 'web application')]"
With this configuration all requests with URL's ending in .simple will be intercepted by the servlet filter.,"[(""requests with URL's ending in .simple"", 'intercepted by', 'servlet filter')]"
Before a servlet can be invoked the servlet container must first load its class definition.,"[('Servlet', 'can be invoked', 'Servlet Container'), ('Servlet Container', 'must first load', 'Class Definition')]"
"When the servlet class is loaded, the servlet container creates an instance of the servlet.","[('servlet class', 'loaded by', 'servlet container'), ('servlet container', 'creates instance of', 'servlet')]"
"When a servlet instance is created, its init() method is invoked.","[('servlet instance', 'creation event', 'init() method invoked')]"
The init() method allows a servlet to initialize itself before the first request is processed.,"[('init() method', 'allows', 'servlet'), ('servlet', 'initialize', 'itself'), ('init() method', 'occurs before', 'first request is processed')]"
You can specify init parameters to the servlet in the web.xml file.,"[('init parameters', 'can be specified to', 'servlet'), ('init parameters', 'can be specified in', 'web.xml file')]"
"For every request received to the servlet, the servlets service() method is called.","[('request', 'received by', 'servlet'), ('servlet', 'has method', 'service()'), ('service()', 'called for', 'request')]"
"As long as the servlet is active in the servlet container, the service() method can be called.","[('servlet', 'is active in', 'servlet container'), ('service() method', 'can be called', 'servlet')]"
"When a servlet is unloaded by the servlet container, its destroy() method is called.","[('servlet', 'unloaded by', 'servlet container'), ('destroy() method', 'called on', 'servlet')]"
"Once the servlet has been activated via the service() method, the servlet processes the request, and generates a response.","[('servlet', 'activated via', 'service() method'), ('servlet', 'processes', 'request'), ('servlet', 'generates', 'response')]"
This is done in the web.xml file of your Java web application.,"[('This', 'done in', 'web.xml file'), ('web.xml file', 'part of', 'Java web application')]"
"To configure a servlet in the web.xml file, you write this:","[('servlet', 'configured in', 'web.xml file')]"
"Here you give the servlet a name, and writes the class name of the servlet.","[('servlet', 'has name', 'name'), ('servlet', 'has class name', 'class name')]"
"In the above example, all URL's ending in .html are sent to the servlet.","[('URL', 'ends with', '.html'), ('URL', 'sent to', 'servlet')]"
You can pass parameters to a servlet from the web.xml file.,"[('web.xml file', 'passes parameters to', 'servlet')]"
Here is how you read the init parameters from inside your servlet - in the servlets init() method:,"[('servlet', 'has method', 'init()'), ('init() method', 'reads', 'init parameters')]"
A servlets init() method is called when the servlet container loads the servlet for the first time.,"[('servlet container', 'loads', 'servlet'), ('servlet', 'has method', 'init()'), ('init()', 'called when', 'servlet container loads servlet for the first time')]"
"No one can access the servlet until the servlet has been loaded, and the init() method has been called successfully.","[('servlet', 'cannot be accessed until', 'servlet has been loaded'), ('servlet', 'cannot be accessed until', 'init() method has been called successfully')]"
"Remember, the servlets init() method is called when the servlet is loaded.","[('servlets', 'method', 'init()'), ('init()', 'called when', 'servlet is loaded')]"
Here is how you access the parameter from inside an HttpServlet subclass:,"[('HttpServlet subclass', 'contains method', 'access the parameter')]"
In this text I will show you a simple unit test implemented using JUnit 4.8.1.,"[('unit test', 'implemented using', 'JUnit 4.8.1')]"
First I will show you the class I want to test:,"[('I', 'want to test', 'class')]"
I have kept the class very simple to make it eaiser to understand what is going on.,"[('I', 'have kept', 'the class'), ('the class', 'is', 'very simple'), ('very simple', 'to make it easier to understand', 'what is going on')]"
To test this class I need a unit test that test each of its public methods.,"[('unit test', 'tests', 'public methods'), ('unit test', 'tests', 'class')]"
"The class only has one public method, concatenate(), so all I need to test is this method.","[('class', 'has method', 'concatenate()'), ('concatenate()', 'is public method of', 'class'), ('I', 'need to test', 'concatenate()')]"
Each test method usually tests a single method of the target class.,"[('Test method', 'tests', 'Single method'), ('Single method', 'part of', 'Target class')]"
"Sometimes, a test method can test more than one method in the target class, and sometimes, if the method to test is big, you split the test into multiple test methods.","[('Test method', 'can test', 'more than one method in the target class'), ('Method to test', 'is', 'big'), ('You', 'split', 'the test into multiple test methods')]"
Here is the JUnit unit test that test that the concatenate() method:,"[('JUnit unit test', 'tests', 'concatenate() method')]"
"The unit test class is an ordinary class, with one method, testConcatenate().","[('unit test class', 'is a type of', 'ordinary class'), ('unit test class', 'contains method', 'testConcatenate()')]"
In this method we compare the output of the called method (concatenate()) with the expected output.,"[('called method', 'has output', 'output'), ('called method', 'is', 'concatenate()'), ('output', 'compared with', 'expected output')]"
"In other words, we compare ""onetwo"" (expected output) with the value returned by the concatenate() method, which is kept in the variable result.",
"The assertEquals() method is a statically imported method, which normally resides in the org.junit.Assert class.","[('assertEquals()', 'is a', 'statically imported method'), ('assertEquals()', 'resides in', 'org.junit.Assert class')]"
Notice the static import of this class at the top of MyUnitTest.,"[('MyUnitTest', 'has static import', 'class')]"
Using the static import of the method is shorter than writing Assert.assertEquals().,"[('static import', 'is shorter than', 'writing Assert.assertEquals()')]"
You can have as many test methods in a unit test class as you want.,"[('unit test class', 'can contain', 'test methods')]"
This is how simple a unit test can be with JUnit 4.8.2 .,"[('unit test', 'can be simple with', 'JUnit 4.8.2')]"
"As you may have figured out from the simple test, most of the secret of implementing JUnit unit tests, is in the use of the assert methods in the class org.junit.Assert.","[('JUnit unit tests', 'implemented by', 'use of assert methods'), ('assert methods', 'located in', 'class org.junit.Assert')]"
In this text I will take a closer look at what assert methods are available in this class.,"[('assert methods', 'are available in', 'this class')]"
"The code for this class is not shown, but you don't really need the code in order to understand how to test it.","[('code', 'related to', 'class'), ('class', 'has code', 'not shown'), ('understand', 'requires', 'test')]"
The assertArrayEquals() method will test whether two arrays are equal to each other.,"[('assertArrayEquals()', 'tests', 'two arrays'), ('two arrays', 'are equal to', 'each other')]"
"To check for element equality, the elements in the array are compared using their equals() method.","[('elements in the array', 'compared using', 'equals() method'), ('equals() method', 'used for', 'check for element equality')]"
"More specifically, the elements of each array are compared one by one using their equals() method.","[('elements', 'are compared using', 'equals() method'), ('elements', 'are part of', 'array')]"
"Second the myUnit.getTheStringArray() method is called, which is the method we want to test.","[('myUnit', 'has method', 'getTheStringArray()'), ('getTheStringArray()', 'is called', 'Second'), ('getTheStringArray()', 'is', 'method we want to test')]"
"Third, the result of the myUnit.getTheStringArray() method call is compared to the expected array.","[('myUnit', 'has method', 'getTheStringArray()'), ('getTheStringArray()', 'result compared to', 'expected array')]"
"If the arrays are equal, the assertArrayEquals() will proceed without errors.","[('arrays', 'are', 'equal'), ('assertArrayEquals()', 'will proceed without', 'errors')]"
"The assertEquals() method compares two objects for equality, using their equals() method.","[('assertEquals() method', 'compares', 'two objects'), ('two objects', 'compared for', 'equality'), ('equals() method', 'used by', 'assertEquals() method')]"
"First the myUnit.concatenate() method is called, and the result is stored in the variable result.","[('myUnit', 'has method', 'concatenate()'), ('concatenate()', 'is called', 'first'), ('concatenate()', 'result is stored in', 'result')]"
"Second, the result value is compared to the expected value ""onetwo"", using the assertEquals() method.",
"If the two objects are equal according to their implementation of their equals() method, the assertEquals() method will return normally.","[('two objects', 'are equal according to', 'implementation of their equals() method'), ('assertEquals() method', 'will return', 'normally')]"
"Otherwise the assertEquals() method will throw an exception, and the test will stop there.","[('assertEquals() method', 'will throw', 'exception'), ('test', 'will stop', 'there')]"
"This example compared to String objects, but the assertEquals() method can compare any two objects to each other.","[('assertEquals() method', 'can compare', 'any two objects'), ('example', 'compared to', 'String objects')]"
The assertEquals() method also come in versions which compare primitive types like int and float to each other.,"[('assertEquals() method', 'has version', 'compare primitive types'), ('compare primitive types', 'includes', 'int'), ('compare primitive types', 'includes', 'float')]"
"The assertTrue() and assertFalse() methods tests a single variable to see if its value is either true, or false.","[('assertTrue()', 'tests', 'single variable'), ('assertFalse()', 'tests', 'single variable'), ('single variable', 'value is', 'true'), ('single variable', 'value is', 'false')]"
"As you can see, the method call to myUnit.getTheBollean() is inlined inside the assertTrue() assertFalse() calls.","[('method call', 'inlined inside', 'assertTrue()'), ('method call', 'inlined inside', 'assertFalse()'), ('method call', 'involves', 'myUnit.getTheBollean()')]"
"If the getTheBoolean() method returns true, the assertTrue() method will return normally.","[('getTheBoolean() method', 'returns', 'true'), ('assertTrue() method', 'will return', 'normally')]"
"If the getTheBoolean() method returns false, the assertFalse() method will return normally.","[('getTheBoolean() method', 'returns', 'false'), ('assertFalse() method', 'will return', 'normally')]"
"Of course the above test will fail in either the assertTrue() or assertFalse() call, if the getTheBoolean() method returns the same value in both calls.","[('test', 'will fail in', 'assertTrue() call'), ('test', 'will fail in', 'assertFalse() call'), ('getTheBoolean() method', 'returns', 'same value in both calls')]"
The assertNull() and assertNotNull() methods test a single variable to see if it is null or not null.,"[('assertNull()', 'tests', 'single variable'), ('assertNotNull()', 'tests', 'single variable'), ('single variable', 'can be', nan), ('single variable', 'can be', 'not null')]"
The call to myUnit.getTheObject() is inlined in the assertNull() and assertNotNull() calls.,"[('myUnit', 'has method', 'getTheObject()'), ('getTheObject()', 'is inlined in', 'assertNull()'), ('getTheObject()', 'is inlined in', 'assertNotNull()')]"
"If the myUnit.getTheObject() returns null, the assertNull() method will return normally.","[('myUnit.getTheObject()', 'returns', nan), ('assertNull()', 'will return', 'normally')]"
"If a non-null value is returned, the assertNull() method will throw an exception, and the test will be aborted here.","[('assertNull() method', 'will throw', 'exception'), ('test', 'will be aborted', 'here')]"
"The assertNotNull() method works oppositely of the assertNull() method, throwing an exception if a null value is passed to it, and returning normally if a non-null value is passed to it.","[('assertNotNull() method', 'works oppositely of', 'assertNull() method'), ('assertNotNull() method', 'throws', 'exception'), ('assertNotNull() method', 'condition', 'null value is passed'), ('assertNotNull() method', 'returns', 'normally'), ('assertNotNull() method', 'condition', 'non-null value is passed')]"
The assertSame() and assertNotSame() methods tests if two object references point to the same object or not.,"[('assertSame()', 'tests', 'if two object references point to the same object'), ('assertNotSame()', 'tests', 'if two object references do not point to the same object')]"
It is not enough that the two objects pointed to are equals according to their equals() methods.,"[('two objects', 'are equals according to', 'their equals() methods')]"
The calls to myUnit.getTheSameObject() are inlined into the assertSame() and assertNotSame() method calls.,"[('myUnit', 'has method', 'getTheSameObject()'), ('getTheSameObject()', 'inlined into', 'assertSame()'), ('getTheSameObject()', 'inlined into', 'assertNotSame()')]"
"If the two references points to the same object, the assertSame() method will return normally.","[('two references', 'points to', 'same object'), ('assertSame() method', 'will return', 'normally')]"
"If the two objects do not poin to the same object, the assertNotSame() method will return normally.","[('two objects', 'do not point to', 'same object'), ('assertNotSame() method', 'will return', 'normally')]"
The assertThat() method compares an object to an org.hamcrest.Matcher to see if the given object matches whatever the Matcher requires it to match.,"[('assertThat()', 'compares', 'object'), ('object', 'compared to', 'org.hamcrest.Matcher'), ('org.hamcrest.Matcher', 'requires', 'match'), ('object', 'matches', 'Matcher')]"
"If you are testing a component that uses a database, e.g.","[('component', 'uses', 'database')]"
"a DAO class, you may want to test that the component really inserts data into the database, updates it etc.","[('DAO class', 'inserts data into', 'database'), ('DAO class', 'updates', 'database')]"
It is just a standard Java class - nothing secret about it.,"[('It', 'is a type of', 'standard Java class')]"
"Exactly what methods you will put in your own TestData class, depends on the data used by your application.","[('methods', 'depends on', 'data'), ('methods', 'used by', 'application')]"
"Also, you may want some of the methods to take parameters, rather than e.g.","[('methods', 'may take', 'parameters')]"
"Once you have such a TestData class, you can use and reuse it in your unit tests.","[('TestData class', 'can be used in', 'unit tests'), ('TestData class', 'can be reused in', 'unit tests')]"
"The TestData class can contain all kinds of business wise complex test data setups, which are then easy to setup in the database, once they have been programmed once.","[('TestData class', 'can contain', 'business wise complex test data setups'), ('business wise complex test data setups', 'are easy to setup in', 'database')]"
"Below is a diagram illustrating a unit test, a unit (which is being tested), and a dependency which is some class used by the unit.","[('diagram', 'illustrates', 'unit test'), ('diagram', 'illustrates', 'unit'), ('diagram', 'illustrates', 'dependency'), ('unit', 'is being tested', 'unit test'), ('dependency', 'is used by', 'unit')]"
"If a method or field is private, only instances of that class can access that method or field.","[('method', 'access level', 'private'), ('field', 'access level', 'private'), ('instances of that class', 'can access', 'method'), ('instances of that class', 'can access', 'field')]"
"A protected method or field, on the other hand, is also accessible to other classes in the same package, and for subclasses of the unit too.","[('protected method or field', 'is accessible to', 'other classes in the same package'), ('protected method or field', 'is accessible to', 'subclasses of the unit')]"
"By encapsulating calls to external dependencies (components) in protected methods, you can create a subclass mock of the unit to test, and override these protected methods, to make them record information about whether they were called or not.","[('calls to external dependencies', 'encapsulated in', 'protected methods'), ('you', 'create', 'subclass mock'), ('subclass mock', 'of', 'unit to test'), ('you', 'override', 'protected methods'), ('protected methods', 'record information about', 'whether they were called or not')]"
"By ""boundary class"" I mean classes that plug into some framework.",
You may need the whole framework running in order to test your boundary class.,"[('You', 'may need', 'whole framework'), ('whole framework', 'used for', 'test boundary class')]"
"Examples of boundary classes are Servlets, Struts actions, custom Swing components, EJB's etc.","[('Servlets', 'is an example of', 'boundary class'), ('Struts actions', 'is an example of', 'boundary class'), ('custom Swing components', 'is an example of', 'boundary class'), (""EJB's"", 'is an example of', 'boundary class')]"
Each of these boundary classes need a larger framework or server running in order to test them.,"[('boundary classes', 'need', 'larger framework'), ('boundary classes', 'need', 'server'), ('larger framework', 'used for', 'test boundary classes'), ('server', 'used for', 'test boundary classes')]"
"A way to get around that is to move the business logic out of the boundary class, and into it's own component.","[('business logic', 'moved out of', 'boundary class'), ('business logic', 'moved into', 'its own component')]"
Make sure that the business logic component does not know anything about the boundary classes.,"[('business logic component', 'does not know', 'boundary classes')]"
"For instance, if your boundary class is a servlet, your business logic class should not know anything about the HttpRequest or HttpResponse interfaces.","[('boundary class', 'example of', 'servlet'), ('business logic class', 'should not know about', 'HttpRequest interface'), ('business logic class', 'should not know about', 'HttpResponse interface')]"
"Preferably, the business logic class only takes the parameters it needs, as the types it needs.","[('business logic class', 'takes', 'parameters'), ('parameters', 'needed by', 'business logic class'), ('parameters', 'have type', 'types needed by business logic class')]"
"When your business logic class is separated from the boundary class, you can test the business logic class separately.","[('business logic class', 'is separated from', 'boundary class'), ('you', 'can test', 'business logic class')]"
"When the boundary classes are minimized to dispatch logic, the risk of errors in them are a lot smaller, in case you choose not to unit test them.","[('Boundary classes', 'minimized to', 'dispatch logic'), ('Minimization of boundary classes', 'reduces', 'risk of errors'), ('Risk of errors', 'is smaller', 'when boundary classes are minimized'), ('Unit test', 'is optional for', 'boundary classes')]"
"For an example of this, see the Servlet Unit Testing text, in which I show how to unit test the business logic of a servlet, by moving the business logic to a separate class.","[('Servlet Unit Testing text', 'contains example', 'unit test the business logic of a servlet'), ('unit test the business logic of a servlet', 'achieved by', 'moving the business logic to a separate class')]"
In this text I will give a few suggestions to how you can test such classes.,"[('I', 'will give', 'suggestions'), ('suggestions', 'related to', 'how you can test such classes')]"
Let's look at how to write a unit test for this class.,"[('unit test', 'written for', 'class')]"
The ByteArrayInputStream is then used as input into the MyIOUnitTest.read() method.,"[('ByteArrayInputStream', 'used as input into', 'MyIOUnitTest.read() method')]"
Here is the unit test which uses a ByteArrayOutputStream to collect the data written to the OutputStream passed to the MyIOUnit.write() method:,"[('unit test', 'uses', 'ByteArrayOutputStream'), ('ByteArrayOutputStream', 'collects data written to', 'OutputStream'), ('OutputStream', 'passed to method', 'MyIOUnit.write()')]"
"Notice how the output.toByteArray() method is called, and passed into a String.","[('output.toByteArray()', 'passed into', 'String')]"
"If your input or output component uses a Reader or Writer instead of an InputStream or OutputStream, you can use the classes CharArrayReader and CharArrayWriter instead of ByteArrayInputStream and ByteArrayOutputStream.","[('input or output component', 'uses', 'Reader'), ('input or output component', 'uses', 'Writer'), ('Reader', 'alternative', 'CharArrayReader'), ('Writer', 'alternative', 'CharArrayWriter'), ('InputStream', 'alternative', 'ByteArrayInputStream'), ('OutputStream', 'alternative', 'ByteArrayOutputStream')]"
You may also be able to use the StringReader and StringWriter classes in your unit tests.,"[('StringReader', 'used in', 'unit tests'), ('StringWriter', 'used in', 'unit tests')]"
"Unit testing means testing the smaller units of your application, like classes and methods.","[('Unit testing', 'means', 'testing the smaller units of your application'), ('smaller units of your application', 'include', 'classes'), ('smaller units of your application', 'include', 'methods')]"
"JUnit 4.8.2 ships with Hamcrest internally, so you don't have to download it, and add it yourself.","[('JUnit 4.8.2', 'ships with', 'Hamcrest')]"
"Matchers are used with the org.junit.Assert.assertThat() method, which looks like this:","[('Matchers', 'used with', 'org.junit.Assert.assertThat() method')]"
"The assertThat() method just takes care of the ""plumming"" - meaning calling the Matcher with the given object.",
"In the example above, the org.hamcrest.CoreMatchers.is() method is used to create a Matcher.","[('org.hamcrest.CoreMatchers.is()', 'used to create', 'Matcher')]"
"The Matcher returned by is() returns true, if the two values compared are equal, and false if not.","[('Matcher', 'returned by', 'is()'), ('Matcher', 'returns', 'true'), ('Matcher', 'returns', 'false'), ('two values', 'compared', 'equal'), ('two values', 'compared', 'not equal')]"
"The is() method returns one matcher, and the not() method returns another.","[('is() method', 'returns', 'one matcher'), ('not() method', 'returns', 'another matcher')]"
The matcher returned by not() negates the matcher output of the matcher given as input.,"[('not()', 'negates', 'matcher output'), ('matcher output', 'produced by', 'matcher given as input')]"
"In this case, it is the output of the matcher returned by the is() method, that is negated.","[('matcher', 'output', 'is() method')]"
You can write your own matchers and plug into the assertThat() method.,"[('You', 'can write', 'your own matchers'), ('your own matchers', 'can plug into', 'assertThat() method')]"
The static method matches() creates a new matcher and returns it.,"[('static method', 'creates', 'new matcher'), ('static method', 'returns', 'new matcher')]"
You just embed the call to the static method matches() inside the assertThat() method.,"[('call to the static method matches()', 'embedded inside', 'assertThat() method')]"
In several situations mock testing is easier than testing with the real collaborators of a class.,"[('mock testing', 'is easier than', 'testing with the real collaborators of a class')]"
When testing a DAO you may use a mock java.sql.Connection and java.sql.ResultSet object with the DAO to check that the DAO makes the correct JDBC calls.,"[('DAO', 'uses', 'mock java.sql.Connection'), ('DAO', 'uses', 'java.sql.ResultSet object'), ('DAO', 'makes', 'JDBC calls')]"
It is not visible from the value returned by the DAO if it remembered to call ResultSet.close() and Connection.close() before returning.,"[('DAO', 'returns', 'value'), ('DAO', 'calls', 'ResultSet.close()'), ('DAO', 'calls', 'Connection.close()')]"
The above situation was exactly the case for the GenericDao class in Mr. Persister.,"[('GenericDao class', 'situation', 'above situation'), ('GenericDao class', 'located in', 'Mr. Persister')]"
Ideally the JDBC driver would detect that when calling the PreparedStatement.executeUpdate() method.,"[('JDBC driver', 'detects', 'calling the PreparedStatement.executeUpdate() method')]"
Therefore we decided to compare the PreparedStatement.getParameterMetaData().getParameterCount() with parameters.length before calling PreparedStatement.executeUpdate().,"[('PreparedStatement.getParameterMetaData().getParameterCount()', 'compared with', 'parameters.length'), ('PreparedStatement.executeUpdate()', 'called after', 'comparison')]"
"This works with the HSQLDB driver, but the MySQL driver haven't implemented the PreparedStatement.getParameterMetaData() method.","[('HSQLDB driver', 'works with', 'PreparedStatement.getParameterMetaData() method'), ('MySQL driver', 'have not implemented', 'PreparedStatement.getParameterMetaData() method')]"
Fortunately the MySQL driver does throw an exception if the ?-signs and the parameters set doesn't match when calling PreparedStatement.executeUpdate().,"[('MySQL driver', 'throws', 'exception'), ('?-signs and the parameters set', 'does not match', 'PreparedStatement.executeUpdate()')]"
"In the classpath element I add the output locations of my project code, and test code.","[('classpath element', 'contains', 'output locations of project code'), ('classpath element', 'contains', 'output locations of test code')]"
In the test element I declare which unit test class to execute.,"[('test element', 'declares', 'unit test class')]"
The classpath stuff is the same as in the first example.,"[('classpath stuff', 'is the same as', 'first example')]"
"In this example I execute all files that has the text ""Test"" and "".java"" in their file name, regardless of what directory they are located in, recursively.",
"What I usually do instead, is to ""move the code out of the boundary class"", as I have described in the text Design for Testability.",
"Basically, I would try to push the main business logic in the servlet into a separate class which has no dependencies on the Servlet API's, if possible.","[('main business logic', 'located in', 'servlet'), ('main business logic', 'pushed into', 'separate class'), ('separate class', 'has no dependencies on', ""Servlet API's"")]"
"So, I will take the concatenation logic and move into a separate class, which can be tested independent from the MyServlet class.","[('concatenation logic', 'will be moved into', 'a separate class'), ('a separate class', 'can be tested independent from', 'MyServlet class')]"
Notice how the concatenation logic has been moved to a class called MyConcatenator.,"[('concatenation logic', 'moved to', 'MyConcatenator'), ('MyConcatenator', 'is a', 'class')]"
Notice how the concatenate() method only refers to a string array.,"[('concatenate() method', 'refers to', 'string array')]"
Notice again how it was not necessary to reference any servlet classes or interfaces in this unit test.,"[('unit test', 'does not reference', 'servlet classes'), ('unit test', 'does not reference', 'interfaces')]"
By real objects I mean the objects the tested unit (class) will be using in the real application.,"[('tested unit', 'uses', 'real objects'), ('real objects', 'used in', 'real application')]"
"If you have a class Calculator, that needs a dao (Data Access Object) object to load the data it needs from a database, then the dao object is a ""real object"".",
In order to test the Calculator class you will have to provide it with a dao object that has a valid connection to the database.,"[('Calculator class', 'requires', 'dao object'), ('dao object', 'has', 'valid connection'), ('valid connection', 'to', 'database')]"
Instead you can provide the Calculator instance with a fake dao class which just returns the data you need for the test.,"[('Calculator instance', 'can be provided with', 'fake dao class'), ('fake dao class', 'returns', 'data'), ('data', 'needed for', 'test')]"
The fake dao class will not actually read the data from the database.,"[('fake dao class', 'will not read', 'data from the database')]"
A replacement for a real object which makes it easier to test the Calculator class.,"[('replacement', 'makes it easier to test', 'Calculator class')]"
Nor can you see if the connection.close() method was called before returning the value.,"[('connection', 'has method', 'close()'), ('close()', 'called before', 'returning the value')]"
"If you add a String ""myReturnValue"" as return value to the stub and then call connection.prepareStatement(""select * from houses"") which returns a PreparedStatement, you will get an exception.",
"The String return value cannot be returned from the connection.prepareStatement(""...""); You will have to make sure yourself that the return values and called methods on the stub match.",
If the connection.close() method has not been called a java.lang.AssertionError is thrown.,"[('connection.close() method', 'has not been called', 'java.lang.AssertionError is thrown')]"
You just provide the real collaborator to the MockFactory instead of an interface (class object).,"[('MockFactory', 'receives', 'real collaborator'), ('real collaborator', 'provided to', 'MockFactory')]"
You can even turn the proxyConnection into a stub temporarily by adding a return value to the proxy via the mock.addReturnValue(...).,"[('proxyConnection', 'can be turned into', 'stub'), ('stub', 'created by', 'adding a return value'), ('return value', 'added to', 'proxy'), ('mock', 'provides method', 'addReturnValue')]"
"Subclass mock objects is a mock object that is created by subclassing the class you want to test, and overriding some of its methods.","[('Subclass mock objects', 'is a', 'mock object'), ('Subclass mock objects', 'created by', 'subclassing the class you want to test'), ('Subclass mock objects', 'overrides', 'some of its methods')]"
The class MyUnit is the class I am trying to unit test.,"[('MyUnit', 'is a', 'class'), ('I', 'am trying to', 'unit test MyUnit')]"
"In this unit test, I want to check if the MyUnit class calls the MyDependency class correctly.","[('MyUnit', 'calls', 'MyDependency')]"
"The first thing to do is to refactory the MyUnit class, so that all calls to the MyDependency class are encapsulated in their own methods.","[('MyUnit class', 'needs to be refactored', 'MyUnit class'), ('MyUnit class', 'calls', 'MyDependency class'), ('calls to MyDependency class', 'are encapsulated in', 'own methods')]"
"Notice how the two calls to MyDependency.callOne() and MyDependency.callTwo() are now encapsulated in two protected methods, callOne() and callTwo().","[('MyDependency.callOne()', 'encapsulated in', 'callOne()'), ('MyDependency.callTwo()', 'encapsulated in', 'callTwo()')]"
The second step is to create a subclass mock of the MyUnit class.,"[('second step', 'involves', 'create a subclass mock'), ('subclass mock', 'of', 'MyUnit class')]"
Here is a unit test method that uses the MyUnitMock class:,"[('unit test method', 'uses', 'MyUnitMock class')]"
"Third, assertions are made about whether the callOne() and callTwo() method were invoked.","[('assertions', 'are made about', 'callOne() method'), ('assertions', 'are made about', 'callTwo() method')]"
"As you can see, it is possible to test almost all of a class by using subclass mocks, as described above.","[('subclass mocks', 'used for', 'test almost all of a class')]"
"There are, however, situations where it works better to use a completely separate mock dependency object with the original class instead.","[('situations', 'where', 'it works better'), ('it', 'use', 'mock dependency object'), ('mock dependency object', 'type', 'separate'), ('mock dependency object', 'used with', 'original class')]"
"If the throwIllegalArgumentException() method returns normall, then this fail() call is executed, causing the test to fail.","[('throwIllegalArgumentException()', 'method returns', 'normally'), ('fail()', 'is executed', 'if throwIllegalArgumentException() returns normally'), ('fail()', 'causes', 'test to fail')]"
"Correspondingly, if the throwIllegalArgumentException() method throws the expected IllegalArgumentException, it is caught in the catch-clause, and ignored.","[('throwIllegalArgumentException() method', 'throws', 'IllegalArgumentException'), ('IllegalArgumentException', 'caught in', 'catch-clause')]"
"Instead you want users trying to access your web app to see a nice ""This web app is down for maintenance..."" page.",
"A ""This web app is down for maintenance..."" page lets them know that the down time is controlled and expected.",
Here is how the web.xml configuration looks for such a setup:,
"For instance, imagine that a user sends a request that takes 1 minute to process (e.g.","[('user', 'sends', 'request'), ('request', 'takes', '1 minute to process')]"
"I've posted the full solution including the servlet filter Java code, the web.xml configuration, the maintenance message page and the maintenance GUI page, for your convenience below.","[('full solution', 'includes', 'servlet filter Java code'), ('full solution', 'includes', 'web.xml configuration'), ('full solution', 'includes', 'maintenance message page'), ('full solution', 'includes', 'maintenance GUI page')]"
"Apparently the field name ""comment"" caused the text (""Comment..."") in the textarea not to show up in Firefox... weird, right...?!",
"In order to get a Java web server or servlet container to run your Java web application, you need to package the resources inside it (servlets, JSP's etc.)","[('Java web server', 'runs', 'Java web application'), ('servlet container', 'runs', 'Java web application'), ('Java web application', 'contains', 'resources'), ('resources', 'include', 'servlets'), ('resources', 'include', ""JSP's"")]"
... then the index.jsp page will be accessible at the URL,"[('index.jsp', 'accessible at', 'URL')]"
"For instance, if you create a subdirectory called layout, and put a file inside it called theLayout.jsp, then you could access that file from the outside, via this URL:","[('layout', 'contains file', 'theLayout.jsp'), ('theLayout.jsp', 'located in', 'layout')]"
"Inside the WEB-INF directory there are two important directories (classes and lib, and one important file (web.xml).","[('WEB-INF', 'contains', 'classes'), ('WEB-INF', 'contains', 'lib'), ('WEB-INF', 'contains', 'web.xml')]"
"The web.xml file contains information about the web application, which is used by the Java web server / servlet container in order to properly deploy and execute the web application.","[('web.xml file', 'contains information about', 'web application'), ('web application', 'used by', 'Java web server / servlet container'), ('Java web server / servlet container', 'deploy and execute', 'web application')]"
"For instance, the web.xml contains information about which servlets a web application should deploy, and what URL's they should be mapped to.","[('web.xml', 'contains information about', 'servlets'), ('web.xml', 'contains information about', 'web application'), ('servlets', 'should be deployed by', 'web application'), ('servlets', 'should be mapped to', ""URL's"")]"
I will not get into more detail about the web.xml file here.,"[('I', 'will not get into more detail about', 'web.xml file')]"
The classes directory contains all compiled Java classes that are part of your web application.,"[('classes directory', 'contains', 'compiled Java classes'), ('compiled Java classes', 'part of', 'web application')]"
"The classes should be located in a directory structure matching their package structure, just like if you were to run them directly from the commandline, or package them in a JAR file.","[('classes', 'should be located in', 'directory structure'), ('directory structure', 'matches', 'package structure'), ('run them', 'from', 'commandline'), ('package them', 'in', 'JAR file')]"
"You could, however, also put your own classes into a JAR file, and locate it here, rather than putting those classes in the classes directory.","[('You', 'could put classes into', 'JAR file'), ('You', 'could locate JAR file', 'here'), ('You', 'could put classes in', 'classes directory')]"
Perl or C. A Servlet is an ordinary Java class that implements a special Servlet interface.,"[('Servlet', 'is a', 'Java class'), ('Java class', 'implements', 'Servlet interface')]"
"Here is a small servlet and JSP example to better illustrate the difference: public void service(ServletRequest request, ServletResponse response){ PrintWriter writer = ((HttpServletResponse) response)).getWriter(); writer.write(""<html>""); writer.write(""<body>""); writer.write(""<table>""); for(int i=0; i<10; i++){ writer.write(""<tr><td>""); writer.write("""" + i); writer.write(""</td></tr>""); } writer.write(""</table>""); writer.write(""</body>""); writer.write(""</html>""); } <html> <body> <table> <% for(int i=0; i<10; i++){ %><tr><td><%=i%></td></tr><% } %> </table> </body> </html> As you can see, the JSP example is much shorter than the Servlet example, and it is much easier to get an overview of the HTML.",
This is illustrated below: component.control --> component.control --> component.control --> component.control --> component.control component.view --> component.view --> component.view --> component.view --> component.view First all components in the hierarchy executes their control logic (domain logic).,"[('component.control', 'executes', 'control logic'), ('component.view', 'executes', 'control logic')]"
A Servlet is an ordinary Java class that implements a special Servlet interface.,"[('Servlet', 'is a', 'Java class'), ('Servlet', 'implements', 'Servlet interface')]"
JCTools is an open source toolkit and is released under the Apache License 2.0.,"[('JCTools', 'is', 'open source toolkit'), ('JCTools', 'released under', 'Apache License 2.0')]"
"A Fat JAR is a single JAR file that contains all the compiled Java classes from your project, and all compiled Java classes from all JAR files your project depends on (see Maven Dependencies).","[('A Fat JAR', 'contains', 'compiled Java classes from your project'), ('A Fat JAR', 'contains', 'compiled Java classes from all JAR files your project depends on'), ('compiled Java classes from all JAR files your project depends on', 'see', 'Maven Dependencies')]"
"Fat JARs are handy when you need to build an executable JAR file, e.g.","[('Fat JARs', 'are handy when', 'you need to build an executable JAR file')]"
"This makes execution much easier, because you don't have to list all the JAR files your microservice depends on, on the classpath.","[('execution', 'is easier because', ""you don't have to list all the JAR files your microservice depends on on the classpath"")]"
"When you execute Maven package phase with the maven-assembly-plugin configuration shown earlier, Maven will output a Fat JAR in the target directory, into which Maven outputs all of its other build products (e.g.","[('Maven', 'executes phase', 'package'), ('Maven', 'uses plugin', 'maven-assembly-plugin'), ('maven-assembly-plugin', 'outputs', 'Fat JAR'), ('Fat JAR', 'located in', 'target directory'), ('Maven', 'outputs', 'build products')]"
"The list contains more than 1.300 Maven archetypes, so it is not really that easy to find the archetype you need.","[('The list', 'contains', 'more than 1.300 Maven archetypes')]"
"Too look at the list of available Maven archetypes, you can pipe the output into a file, and open that file in e.g.","[('list of available Maven archetypes', 'can be piped into', 'file'), ('file', 'can be opened in', 'e.g.')]"
"Keep in mind, that when you execute the clean goal of Maven, the target directory is removed, meaning you lose all compiled classes from previous builds.","[('clean goal of Maven', 'removes', 'target directory'), ('target directory', 'contains', 'compiled classes from previous builds')]"
"That means, that Maven will have to build all of your project again from scratch, rather than being able to just compile the classes that were changed since last build.","[('Maven', 'action', 'build project'), ('Maven', 'action', 'compile classes'), ('project', 'state', 'from scratch'), ('classes', 'state', 'changed since last build')]"
"However, sometimes it can be nice to have a clean, fresh build, e.g.","[('it', 'can be', 'nice'), ('build', 'is a type of', 'clean'), ('build', 'is a type of', 'fresh')]"
The pom.xml file is the Maven POM file (Project Object Model).,"[('pom.xml file', 'is a type of', 'Maven POM file'), ('Maven POM file', 'stands for', 'Project Object Model')]"
The .mvn directory is a directory where you can put some Maven configuration files.,"[('.mvn directory', 'is a type of', 'directory'), ('.mvn directory', 'can contain', 'Maven configuration files')]"
One of these Maven configuration files is the jvm.config file which can be used to configure the Java VM that is used by Maven to build your project.,"[('jvm.config file', 'is a type of', 'Maven configuration file'), ('jvm.config file', 'used to configure', 'Java VM'), ('Java VM', 'used by', 'Maven'), ('Maven', 'used to build', 'project')]"
The resource files will be available for loading via the classpath.,"[('resource files', 'available for', 'loading'), ('loading', 'via', 'classpath')]"
The default Java compiler version used by Maven is Java 1.5 .,"[('Maven', 'uses default Java compiler version', 'Java 1.5')]"
"To make Maven compile your Java code with a newer version of the Java compiler, you need to specify the Java compiler explicitly in your project's POM file (pom.xml).","[('Maven', 'compiles', 'Java code'), ('Java code', 'compiled with', 'newer version of Java compiler'), ('you', 'need to specify', 'Java compiler'), ('Java compiler', 'specified in', ""project's POM file""), (""project's POM file"", 'file name', 'pom.xml')]"
Notice also that the version of the Maven Java compiler plugin has changed from 3.6.1 to 3.8.0 .,"[('Maven Java compiler plugin', 'version changed from', '3.6.1'), ('Maven Java compiler plugin', 'version changed to', '3.8.0')]"
The first version of this Maven tutorial is based on Maven 3.6.3.,"[('first version of this Maven tutorial', 'based on', 'Maven 3.6.3')]"
The POM file is named pom.xml and should be located in the root directory of your project.,"[('POM file', 'is named', 'pom.xml'), ('pom.xml', 'should be located in', 'root directory'), ('root directory', 'is part of', 'your project')]"
"This command first executes the clean build life cycle, which removes compiled classes from the Maven output directory, and then it executes the install build phase.","[('command', 'executes', 'clean build life cycle'), ('clean build life cycle', 'removes', 'compiled classes'), ('compiled classes', 'located in', 'Maven output directory'), ('command', 'executes', 'install build phase')]"
These JAR files are needed on the classpath when you compile your project code.,"[('JAR files', 'needed on', 'classpath'), ('classpath', 'used for', 'compile project code')]"
"The example above needs the org.jsoup group's jsoup artifact in version 1.7.1, and the junit group's junit artifact in version 4.8.1.","[('org.jsoup', 'produces', 'jsoup'), ('jsoup', 'version', '1.7.1'), ('junit', 'produces', 'junit'), ('junit', 'version', '4.8.1')]"
"Thus Maven only needs to download the dependencies once, even if multiple projects depends on them (e.g.","[('Maven', 'downloads', 'dependencies'), ('multiple projects', 'depends on', 'dependencies')]"
Your Maven settings file is also located in your user-home/.m2 directory and is called settings.xml.,"[('Maven settings file', 'located in', 'user-home/.m2 directory'), ('Maven settings file', 'called', 'settings.xml')]"
"The clean life cycle handles everything related to removing temporary files from the output directory, including generated source files, compiled classes, previous JAR files etc.","[('clean life cycle', 'handles', 'removing temporary files from the output directory'), ('removing temporary files from the output directory', 'includes', 'generated source files'), ('removing temporary files from the output directory', 'includes', 'compiled classes'), ('removing temporary files from the output directory', 'includes', 'previous JAR files')]"
One way to choose what profile is being executed is in the settings.xml file.,"[('profile', 'is executed in', 'settings.xml file')]"
"You do so by creating a simple Java class that extends a special Maven class, and then create a POM for the project.","[('simple Java class', 'extends', 'special Maven class'), ('You', 'create', 'simple Java class'), ('You', 'create', 'POM'), ('POM', 'for', 'project')]"
It is the argument -Dmaven.test.skip=true that makes Maven skip the tests completely.,"[('-Dmaven.test.skip=true', 'makes', 'Maven skip the tests completely')]"
To configure the Maven Surefire plugin to enable Java preview features you need the following configuration in your Maven POM file - in the <build><plugins>...</plugins></build> section:,"[('Maven Surefire plugin', 'requires configuration', 'Maven POM file'), ('Java preview features', 'enabled by', 'Maven Surefire plugin'), ('Maven POM file', 'contains section', 'build'), ('build', 'contains section', 'plugins')]"
To publish a JAR file with compiled Java classes to the Maven central repository you need to go through set of steps.,"[('JAR file', 'contains', 'compiled Java classes'), ('JAR file', 'published to', 'Maven central repository'), ('publishing JAR file', 'requires', 'set of steps')]"
You can find more information about creating and publishing a public key / priate key pair from the Sonatype producers page: https://central.sonatype.org/pages/producers.html.,"[('Sonatype producers page', 'provides information about', 'creating and publishing a public key / private key pair'), ('Sonatype producers page', 'URL', 'https://central.sonatype.org/pages/producers.html')]"
"For a full POM file, check out the pom.xml in this github repository: RION Ops for Java GitHub Repository","[('POM file', 'can be found in', 'pom.xml'), ('pom.xml', 'located in', 'RION Ops for Java GitHub Repository'), ('RION Ops for Java GitHub Repository', 'hosted on', 'GitHub')]"
From Maven 3.3 and forward you can set the memory limits in a file called jvm.config located in the .mvn directory inside your project directory.,"[('Maven 3.3', 'allows setting', 'memory limits'), ('memory limits', 'set in', 'jvm.config'), ('jvm.config', 'located in', '.mvn directory'), ('.mvn directory', 'located inside', 'project directory')]"
Inside the jvm.config file you need the following settings to be able to control the memory limits of Maven during a Maven build:,"[('jvm.config file', 'contains', 'settings'), ('settings', 'control', 'memory limits of Maven'), ('memory limits of Maven', 'affect', 'Maven build')]"
"Once you have created the project root directory, create a file called pom.xml inside the directory.","[('project root directory', 'contains', 'pom.xml'), ('pom.xml', 'located in', 'project root directory')]"
"When you have created the pom.xml file inside the project root directory it is a good idea to just test that Maven works, and that Maven understands the pom.xml file.","[('pom.xml file', 'located in', 'project root directory'), ('Maven', 'understands', 'pom.xml file')]"
"To test the pom.xml file, open a command prompt and change directory (cd) into the project root directory.","[('pom.xml file', 'is tested by', 'open a command prompt'), ('open a command prompt', 'action', 'change directory'), ('change directory', 'action', 'into the project root directory')]"
Inside the helloworld directory (java package) insert a file named HelloWorld.java.,"[('helloworld directory', 'contains', 'HelloWorld.java'), ('HelloWorld.java', 'is a', 'file'), ('helloworld directory', 'is a', 'java package')]"
Maven will compile the Java source file and create a JAR file containing the compiled Java class.,"[('Maven', 'will compile', 'Java source file'), ('Maven', 'will create', 'JAR file'), ('JAR file', 'contains', 'compiled Java class')]"
"Inside the target directory you will find the finished JAR file, as well as lots of temporary files (e.g.","[('JAR file', 'located in', 'target directory'), ('temporary files', 'located in', 'target directory')]"
The Mem Ops Bytes class represents a sequence of bytes from a byte array.,"[('Mem Ops Bytes class', 'represents', 'sequence of bytes'), ('sequence of bytes', 'originates from', 'byte array')]"
"To avoid fragmenting the Java heap with Bytes instances, the Bytes class is designed to be obtained from an ObjectPool .","[('Bytes class', 'designed to be obtained from', 'ObjectPool'), ('Bytes instances', 'fragment', 'Java heap')]"
"To use the Bytes class effectively you should create a BytesAllocatorAutoDefrag, a BytesFactory and an ObjectPool .","[('BytesAllocatorAutoDefrag', 'used to create', 'Bytes'), ('BytesFactory', 'used to create', 'Bytes'), ('ObjectPool', 'used to create', 'Bytes')]"
To obtain a Bytes instance from the ObjectPool you simply call the ObjectPool instance() method.,"[('ObjectPool', 'provides method', 'instance()'), ('instance()', 'returns', 'Bytes instance')]"
Calling free() will free the Bytes instance back to the ObjectPool and the allocated bytes back to the BytesAllocatorAutoDefrag.,"[('free()', 'action', 'free the Bytes instance'), ('Bytes instance', 'freed back to', 'ObjectPool'), ('allocated bytes', 'freed back to', 'BytesAllocatorAutoDefrag')]"
"In this section I will try to give you a few visual use case examples that shows how to use the Bytes class, and its fields.","[('Bytes class', 'has part', 'fields')]"
"The use cases are actually quite similar in how they use the Bytes class, even if they are doing different things.","[('use cases', 'are similar in', 'how they use the Bytes class'), ('use cases', 'are doing', 'different things')]"
The Mem Ops BytesAllocatorAutoDefrag class is capable of allocating smaller sections (blocks) of a bigger byte array.,"[('Mem Ops BytesAllocatorAutoDefrag class', 'capable of', 'allocating smaller sections'), ('allocating smaller sections', 'part of', 'bigger byte array')]"
"When you free a byte array section, the BytesAllocatorAutoDefrag class will automatically defragment its internal big byte array so the freed section is joined with adjacent free sections to form a larger free section from which future sections can be allocated.","[('BytesAllocatorAutoDefrag', 'defragments', 'internal big byte array'), ('freed section', 'joined with', 'adjacent free sections'), ('joined section', 'forms', 'larger free section'), ('larger free section', 'used for', 'future sections allocation')]"
To use the BytesAllocatorAutoDefrag class you must first create an instance of it.,"[('BytesAllocatorAutoDefrag', 'instance of', 'class')]"
"In order to allocate a block (section) of bytes from the underlying byte array, you call the allocate() method.","[('allocate() method', 'used to', 'allocate a block of bytes'), ('block of bytes', 'from', 'underlying byte array')]"
"Once allocated, no other allocate() call can allocate the same block until it has been freed.","[('allocate()', 'cannot allocate', 'same block'), ('same block', 'must be', 'freed')]"
"The allocate() method returns the offset into the big, underlying byte array where the allocated block starts.","[('allocate() method', 'returns', 'offset'), ('offset', 'located in', 'big, underlying byte array'), ('allocated block', 'starts at', 'offset')]"
You can get a reference to the underlying byte array via the getData() method.,"[('getData() method', 'provides reference to', 'underlying byte array')]"
"Once you have allocated a block of bytes from the BytesAllocatorAutoDefrag you can access it via the data array, from the offset returned by allocate() and until offset + length - 1.","[('BytesAllocatorAutoDefrag', 'allocates', 'block of bytes'), ('block of bytes', 'accessed via', 'data array'), ('offset', 'returned by', 'allocate()'), ('access', 'range', 'offset to offset + length - 1')]"
The free() method takes the start and end offset of the block to free.,"[('free() method', 'takes', 'start offset'), ('free() method', 'takes', 'end offset'), ('free() method', 'frees', 'block')]"
The Mem Ops BytesAllocatorManualDefrag class is capable of allocating smaller sections (blocks) of a bigger byte array.,"[('Mem Ops BytesAllocatorManualDefrag class', 'capable of', 'allocating smaller sections'), ('allocating smaller sections', 'part of', 'bigger byte array')]"
"When you free a byte array section, the ByteArrayAllocatorAutoDefrag class will mark it as free, but will not defragment the underlying byte array until you explicitly to tell it to.","[('ByteArrayAllocatorAutoDefrag', 'marks as free', 'byte array section'), ('ByteArrayAllocatorAutoDefrag', 'does not defragment', 'underlying byte array'), ('you', 'tell explicitly', 'ByteArrayAllocatorAutoDefrag')]"
To use the BytesAllocatorManualDefrag class you must first create an instance of it.,"[('BytesAllocatorManualDefrag', 'instance of', 'class')]"
"Once you have allocated a block of bytes from the BytesAllocatorManualDefrag you can access it via the data array, from the offset returned by allocate() and until offset + length - 1.","[('BytesAllocatorManualDefrag', 'allocates', 'block of bytes'), ('block of bytes', 'accessed via', 'data array'), ('offset', 'returned by', 'allocate()'), ('access', 'range', 'offset to offset + length - 1')]"
To defragment the free blocks you call the defragment() method of the BytesAllocatorManualDefrag .,"[('defragment() method', 'belongs to', 'BytesAllocatorManualDefrag'), ('defragment() method', 'used to', 'defragment free blocks')]"
It is during such idle times you should call defragment() .,"[('you', 'should call', 'defragment()'), ('idle times', 'during', 'call defragment()')]"
"If your system is constantly very busy, there may never be an idle period during which to call defragment().","[('system', 'has condition', 'constantly very busy'), ('system', 'may never have', 'idle period'), ('idle period', 'used for', 'call defragment()')]"
Calling defragment() will most likely result in a longer pause than if you immediately defragment free blocks like the ByteArrayAllocatorAutoDefrag does.,"[('defragment()', 'results in', 'longer pause'), ('defragment()', 'compared to', 'defragment free blocks'), ('ByteArrayAllocatorAutoDefrag', 'defragments', 'free blocks')]"
"Systems that need to create high numbers of objects at a rapid pace, but do not need all of these objects at the same time, can benefit from using object pools rather than instantiating the objects using the Java new XYZObject() .","[('Systems', 'need to create', 'high numbers of objects'), ('Systems', 'can benefit from using', 'object pools'), ('object pools', 'used instead of', 'instantiating the objects using the Java new XYZObject()')]"
The Bytes class represents a byte sequence allocated from a shared byte array.,"[('Bytes class', 'represents', 'byte sequence'), ('byte sequence', 'allocated from', 'shared byte array')]"
The Mem Ops ObjectPool class is capable of pooling instances of objects which can be reused.,"[('Mem Ops ObjectPool', 'capable of', 'pooling instances of objects'), ('instances of objects', 'can be', 'reused')]"
To use the Mem Ops ObjectPool you must first create an instance of the com.nanosai.memops.objects.ObjectPool class.,"[('Mem Ops ObjectPool', 'used by', 'create an instance'), ('create an instance', 'of', 'com.nanosai.memops.objects.ObjectPool class')]"
Notice that the ObjectPool class constructor takes two parameters: The capacity and an IObjectFactory implementation.,"[('ObjectPool class constructor', 'takes parameter', 'capacity'), ('ObjectPool class constructor', 'takes parameter', 'IObjectFactory implementation')]"
"As you can see, the IObjectFactory only contains a single method named instance().","[('IObjectFactory', 'contains method', 'instance()')]"
The type returned from the instance() method is decided by you when you implement the IObjectFactory interface.,"[('instance() method', 'returns type', 'decided by you'), ('you', 'implement', 'IObjectFactory interface')]"
You free an object instance for reuse by calling the ObjectPool free() method.,"[('Object instance', 'freed for reuse by', 'calling the ObjectPool free() method')]"
"You just tell what module that contains the main class to run, and ModRun resolves and loads all its dependencies too.","[('module', 'contains', 'main class'), ('ModRun', 'resolves', 'dependencies'), ('ModRun', 'loads', 'dependencies')]"
"By loading the classes of a module with its own ClassLoader, ModRun can control what classes are visible to each module.","[('ModRun', 'controls', 'what classes are visible to each module'), ('module', 'has', 'ClassLoader'), ('ClassLoader', 'loads', 'classes of a module')]"
A module can only see the classes from itself or from its dependencies (modules) and transitive dependencies.,"[('module', 'can see classes from', 'itself'), ('module', 'can see classes from', 'its dependencies'), ('module', 'can see classes from', 'transitive dependencies')]"
"A module cannot see classes from modules ""above"" itself in the dependency graph.",
The JVM will consider classes loaded from the two different versions of the API as different classes because they are loaded with different ClassLoader instances.,"[('JVM', 'considers', 'classes loaded from the two different versions of the API as different classes'), ('classes loaded from the two different versions of the API', 'loaded with', 'different ClassLoader instances')]"
Each instance of the module have the classes loaded from its dependency graph isolated from the other instances of the same module (at least it can - if you want to).,"[('instance', 'has', 'classes'), ('classes', 'loaded from', 'dependency graph'), ('dependency graph', 'isolated from', 'other instances')]"
Loading the classes from each module with its own ClassLoader makes application multi tenancy easier.,"[('ClassLoader', 'loads classes from', 'module'), ('application', 'has property', 'multi tenancy'), ('Loading classes', 'makes easier', 'multi tenancy')]"
"ModRun can load multiple applications into the same JVM at the same time, and have their classes be completely isolated from each other, so one application cannot access the classes of another application.","[('ModRun', 'can load', 'multiple applications'), ('multiple applications', 'loaded into', 'same JVM'), ('classes', 'isolated from', 'each other'), ('one application', 'cannot access', 'classes of another application')]"
"Here is an example that creates a module from a Maven repository, loads a class from the module, creates an instance of the class and calls a method on the instance via reflection:","[('example', 'creates', 'module'), ('module', 'from', 'Maven repository'), ('example', 'loads', 'class'), ('class', 'from', 'module'), ('example', 'creates', 'instance'), ('instance', 'of', 'class'), ('example', 'calls', 'method'), ('method', 'on', 'instance'), ('method', 'via', 'reflection')]"
Installing Netty in your Java project only requires that you download the Netty JAR files and include them on the classpath.,"[('Netty', 'used in', 'Java project'), ('Netty JAR files', 'required for', 'Netty'), ('Netty JAR files', 'included on', 'classpath')]"
"A Netty EventLoop is a loop that keeps looking for new events, e.g.","[('Netty EventLoop', 'is a type of', 'loop'), ('loop', 'function', 'looking for new events')]"
"Third, the NioServerSocketChannel class instance is set on the ServerBootstrap instance.","[('NioServerSocketChannel class instance', 'is set on', 'ServerBootstrap instance')]"
Its method initChannel() is called whenever a new incoming TCP connection is accepted by the TCP server.,"[('initChannel()', 'is called', 'whenever a new incoming TCP connection is accepted'), ('new incoming TCP connection', 'is accepted by', 'TCP server')]"
"As you can see, the ChannelInitializer is added to the ServerBootstrap using the childHandler() method.","[('ChannelInitializer', 'is added to', 'ServerBootstrap'), ('ServerBootstrap', 'uses method', 'childHandler()')]"
The serverBootstrap.bind() method returns a ChannelFuture which can be used to know when the binding of the server (binding to local address and TCP port) is done.,"[('serverBootstrap.bind()', 'returns', 'ChannelFuture'), ('ChannelFuture', 'used to know', 'when the binding of the server is done'), ('binding of the server', 'involves', 'binding to local address'), ('binding of the server', 'involves', 'binding to TCP port')]"
"By calling sync() on the ChannelFuture the main thread that creates the server waits until the server has started, before continuing.","[('main thread', 'calls', 'sync()'), ('sync()', 'called on', 'ChannelFuture'), ('main thread', 'creates', 'server'), ('main thread', 'waits until', 'server has started')]"
The channelRead() method is called whenever data is received from the SocketChannel the HelloServerHandler instance is attached to.,"[('channelRead() method', 'is called whenever data is received from', 'SocketChannel'), ('HelloServerHandler instance', 'is attached to', 'SocketChannel')]"
"As you can see, the channelRead() responds with ""Hello "" + whatever the client sent to the server.",
The channelReadComplete() method is called when there is no more data to read from the SocketChannel.,"[('channelReadComplete()', 'is called when', 'no more data to read from the SocketChannel'), ('no more data to read from', 'source', 'SocketChannel')]"
The exceptionCaught() method is called if an exception is thrown while receiving or sending data from the SocketChannel.,"[('exceptionCaught() method', 'is called if', 'exception is thrown'), ('exception is thrown', 'while', 'receiving data from SocketChannel'), ('exception is thrown', 'while', 'sending data from SocketChannel')]"
That means that you create a Java application with a class with a main() method and inside that application you create one of the Netty servers.,"[('Java application', 'contains', 'class'), ('class', 'contains', 'main() method'), ('Java application', 'creates', 'Netty server')]"
The RION Ops RionObjectReader class can read a RION Object field into a Java object.,"[('RION Ops RionObjectReader', 'can read', 'RION Object field'), ('RION Object field', 'into', 'Java object')]"
The easiest way to create an instance of the RionObjectReader is via the RionObjectReaderBuilder class.,"[('RionObjectReader', 'created via', 'RionObjectReaderBuilder')]"
This class makes it easier to configure and create a RionObjectReader instance.,"[('This class', 'makes easier', 'configure and create a RionObjectReader instance')]"
Here is an example of creating a RionObjectReader via the RionObjectReaderBuilder class:,"[('RionObjectReader', 'created via', 'RionObjectReaderBuilder class')]"
The RionObjectReader readCyclic() method reads a cyclic object graph stored as RION in a byte array.,"[('RionObjectReader', 'has method', 'readCyclic()'), ('readCyclic()', 'reads', 'cyclic object graph'), ('cyclic object graph', 'stored as', 'RION'), ('RION', 'stored in', 'byte array')]"
The RION Ops RionObjectWriter class makes it easy to write Java objects as a RION field to a byte array.,"[('RION Ops RionObjectWriter class', 'function', 'write Java objects as a RION field'), ('RION Ops RionObjectWriter class', 'output', 'byte array')]"
"To use the RionObjectWriter you must first create an instance of the RionObjectWriter class, com.nanosai.rionops.rion.object.RionObjectWriter.","[('RionObjectWriter', 'instance of', 'RionObjectWriter class'), ('RionObjectWriter class', 'part of', 'com.nanosai.rionops.rion.object')]"
The easiest way to create a RionObjectWriter instance is via the RionObjectWriterBuilder class.,"[('RionObjectWriterBuilder', 'creates', 'RionObjectWriter')]"
"These examples build a RionObjectWriter which will serialize all fields (private, protected, default and public) found in the Pojo class to RION.","[('RionObjectWriter', 'serializes', 'fields'), ('fields', 'found in', 'Pojo class'), ('fields', 'types', 'private'), ('fields', 'types', 'protected'), ('fields', 'types', 'default'), ('fields', 'types', 'public'), ('RionObjectWriter', 'serializes to', 'RION')]"
"Once created, the RionObjectWriter instance then only serialize objects of the given class.","[('RionObjectWriter instance', 'can serialize', 'objects'), ('objects', 'instance of', 'given class')]"
To serialize objects of multiple classes you will have to create a RionObjectWriter for each class.,"[('RionObjectWriter', 'created for', 'each class'), ('serialize', 'applies to', 'objects of multiple classes')]"
Note: You only need one RionObjectWriter per root class you want to serialize.,"[('RionObjectWriter', 'required for', 'root class'), ('root class', 'purpose', 'serialize')]"
"If a given class represents an object graph consisting of other classes referenced from within the root class (or any of its field's classes recursively), all of these classes will be serialized too.","[('class', 'represents', 'object graph'), ('object graph', 'consists of', 'other classes'), ('other classes', 'referenced from', 'root class'), ('root class', 'contains', ""field's classes""), (""field's classes"", 'related to', 'root class'), ('classes', 'will be', 'serialized')]"
"To elaborate, in the example above, if the Pojo class contained fields of class Pojo2 and Pojo3 internally, these would be serialized too because they are part of an object graph rooted by a Pojo object.","[('Pojo class', 'contains fields of class', 'Pojo2'), ('Pojo class', 'contains fields of class', 'Pojo3'), ('Pojo2', 'part of', 'object graph'), ('Pojo3', 'part of', 'object graph'), ('object graph', 'rooted by', 'Pojo object')]"
The RionObjectWriter contains an writeAcyclic() and writeCyclic() method for these purposes.,"[('RionObjectWriter', 'contains', 'writeAcyclic()'), ('RionObjectWriter', 'contains', 'writeCyclic()'), ('writeAcyclic()', 'purpose', 'these purposes'), ('writeCyclic()', 'purpose', 'these purposes')]"
The RionObjectWriter writeAcyclic() can write an acyclic object graph as RION into a byte array.,"[('RionObjectWriter', 'can write', 'acyclic object graph'), ('acyclic object graph', 'written as', 'RION'), ('RION', 'written into', 'byte array')]"
"If the object is part of a cyclic (not acyclic) object graph, the writeAcyclic() method will enter an infinite recursion and eventually crash.","[('object', 'is part of', 'cyclic object graph'), ('cyclic object graph', 'opposite of', 'acyclic object graph'), ('writeAcyclic() method', 'will enter', 'infinite recursion'), ('infinite recursion', 'will cause', 'crash')]"
Here is an example of writing an object using the RionObjectWriter writeAcyclic() method:,"[('RionObjectWriter', 'has method', 'writeAcyclic()'), ('writeAcyclic()', 'used for', 'writing an object')]"
The RionObjectWriter writeCyclic() method can write a cyclic object graph as RION to a byte array.,"[('RionObjectWriter', 'has method', 'writeCyclic()'), ('writeCyclic()', 'can write', 'cyclic object graph'), ('cyclic object graph', 'format', 'RION'), ('RION', 'output to', 'byte array')]"
Here is an example of writing a cyclic object graph to RION using the RionObjectWriter writeCyclic() method.,"[('RionObjectWriter', 'has method', 'writeCyclic()'), ('writeCyclic()', 'used for', 'writing a cyclic object graph'), ('writing a cyclic object graph', 'to', 'RION')]"
"The RION Ops RionReader class, com.nanosai.rionops.rion.read.RionReader makes it easy to write RION fields from a Java byte array.","[('RION Ops', 'contains class', 'RionReader'), ('RionReader', 'located in package', 'com.nanosai.rionops.rion.read'), ('RionReader', 'makes easy to', 'write RION fields'), ('RionReader', 'uses', 'Java byte array')]"
Setting a source byte array is done via the method setSource().,"[('setSource()', 'method of', 'Setting a source byte array')]"
Here is an example of setting the source byte array on a RionReader via its setSource() method:,"[('RionReader', 'has method', 'setSource()'), ('setSource()', 'sets', 'source byte array')]"
"Third, the example loops as long as hasNext() returns true, and iterates through all the RION fields in the source byte array, one by one.","[('example', 'loops as long as', 'hasNext() returns true'), ('example', 'iterates through', 'RION fields'), ('RION fields', 'located in', 'source byte array')]"
You can read a RION Bytes field using the RionReader readBytes() method.,"[('RION Bytes field', 'can be read using', 'RionReader readBytes() method')]"
The readBytes() method will read the bytes of the RION Bytes field into this byte array.,"[('readBytes() method', 'reads', 'bytes of the RION Bytes field'), ('bytes of the RION Bytes field', 'into', 'byte array')]"
Here is an example of reading a RION Bytes field with the readBytes() method:,"[('RION Bytes field', 'read with', 'readBytes() method')]"
The value returned by the readBytes() method is the number of bytes read into the destination byte array.,"[('readBytes() method', 'returns', 'value'), ('value', 'is', 'number of bytes read'), ('number of bytes read', 'into', 'destination byte array')]"
"The readBytes() method also comes in a version where you can specify the offset into the destination byte array to start writing the Bytes field value, and a maximal length (number of bytes) to read.","[('readBytes() method', 'has version', 'version with offset and maximal length'), ('version with offset and maximal length', 'allows', 'specify offset into destination byte array'), ('version with offset and maximal length', 'allows', 'specify maximal length to read')]"
Here is an example of reading a RION Bytes field using that readBytes() method:,"[('readBytes() method', 'used for', 'reading a RION Bytes field')]"
"This example tells the readBytes() method to start writing the Bytes field value into the destination array from offset 2, and to maximally read 10 bytes.","[('readBytes() method', 'writes field value', 'Bytes'), ('Bytes', 'written into', 'destination array'), ('writing starts from', 'offset', '2'), ('maximally reads', 'bytes', '10')]"
To read a RION Boolean field you can use the RionReader readBoolean() method.,"[('RION Boolean field', 'can be read by', 'RionReader readBoolean() method')]"
Here is an example of reading RION Boolean field using the RionReader readBoolean() method:,"[('RionReader', 'has method', 'readBoolean()'), ('readBoolean()', 'reads', 'RION Boolean field')]"
Here is an example of reading a Java Boolean object using the RionReader readBooleanObj() method:,"[('RionReader', 'has method', 'readBooleanObj()'), ('readBooleanObj()', 'reads', 'Java Boolean object')]"
To read a RION Int64 field you can use the RionReader readInt64() method.,"[('RION Int64 field', 'can be read by', 'RionReader readInt64() method')]"
Here is an example of reading a RION Int64 field using the RionReader readInt64() method:,"[('RION Int64 field', 'read using', 'RionReader readInt64() method')]"
Here is an example of reading a RION Int64 field into a Java Long object using the RionReader readInt64Obj() method:,"[('RION Int64 field', 'read into', 'Java Long object'), ('RionReader', 'has method', 'readInt64Obj()')]"
These methods are named readFloat32() and readFloat64() Here are two examples of reading a RION Float field into a Java float and double variable:,"[('readFloat32()', 'is a method of', 'reading a RION Float field into a Java float variable'), ('readFloat64()', 'is a method of', 'reading a RION Float field into a Java double variable')]"
Use the readFloat32Obj() or readFloat64Obj() methods if the RION Float field can be set to null in your concrete use case.,"[('readFloat32Obj()', 'used for', 'RION Float field'), ('readFloat64Obj()', 'used for', 'RION Float field'), ('RION Float field', 'can be', nan)]"
The RionReader class has a method named readUtf8String() which can read a RION UTF-8 field into a Java String.,"[('RionReader class', 'has method', 'readUtf8String()'), ('readUtf8String()', 'can read', 'RION UTF-8 field'), ('RION UTF-8 field', 'into', 'Java String')]"
Here is an example of reading a RION UTF-8 field into a Java String with readUtf8String() :,"[('RION UTF-8 field', 'read into', 'Java String'), ('readUtf8String()', 'used for', 'reading RION UTF-8 field into Java String')]"
The readUtcCalendar() method of the RionReader class can read a RION UTC field as a Java Calendar instance.,"[('readUtcCalendar()', 'method of', 'RionReader class'), ('readUtcCalendar()', 'can read', 'RION UTC field'), ('RION UTC field', 'as', 'Java Calendar instance')]"
When reading a composite RION field you need to use the RionReader moveInto() and moveOutOf() methods.,"[('RION field', 'read using', 'RionReader moveInto() method'), ('RION field', 'read using', 'RionReader moveOutOf() method')]"
"The moveInto() method will move the RionReader's internal state ""into"" the given RION field.",
"That means, that the hasNext() method now returns true as long as the RION field you moved into has more nested fields.","[('hasNext() method', 'returns', 'true'), ('RION field', 'contains', 'nested fields')]"
"The moveOutOf() method moves the RionReader's internal state ""out of"" the given RION field.",
Now the hasNext() method will return true if the parent scope (parent RION field or the total source byte array for the RionReader) has more RION fields.,"[('hasNext() method', 'will return', 'true'), ('parent scope', 'contains', 'parent RION field'), ('parent scope', 'contains', 'total source byte array'), ('total source byte array', 'for', 'RionReader'), ('parent scope', 'has', 'more RION fields')]"
"At the outer nesting level (top level) of the above RION field sequence, the RionReader hasNext() will return true, as long as there are RION fields at this nesting level.","[('RION field sequence', 'has part', 'outer nesting level'), ('outer nesting level', 'has part', 'top level'), ('RionReader', 'has function', 'hasNext()'), ('hasNext()', 'returns', 'true'), ('RION fields', 'located at', 'outer nesting level')]"
"Now the RionReader hasNext() method returns true 2 times, because there are 2 nested RION fields inside the RION Object field.","[('RionReader', 'has method', 'hasNext()'), ('hasNext()', 'returns', 'true'), ('true', 'occurs', '2 times'), ('2 times', 'because of', '2 nested RION fields'), ('2 nested RION fields', 'inside', 'RION Object field')]"
"Once the hasNext() method returns false, you ""move out of"" the composite RION field again.",
You can improve on the above code in various ways - e.g.,"[('You', 'can improve', 'code')]"
"To read a RION Table field, you have to ""move into"" it with moveInto(), then read the first field which is an Int64 RION field representing the row count, and then 1 to N Key or Key Short fields representing the column headers (column names / keys) of the table, and then finally 1 to N fields per row.",
The RionReader class contains a method named isNull() which will tell you if the current RION field pointed to by the RionReader has the field value null.,"[('RionReader', 'contains', 'method'), ('method', 'named', 'isNull()'), ('isNull()', 'tells if', 'current RION field has field value null'), ('RionReader', 'points to', 'current RION field')]"
Here is an example of checking if a given RION field is null via the RionReader isNull() method:,"[('RION field', 'checked by', 'RionReader isNull() method')]"
"The RION Ops RionWriter class, com.nanosai.rionops.rion.write.RionWriter, enables you to write RION fields easily and efficiently.","[('RION Ops', 'contains class', 'RionWriter'), ('RionWriter', 'located in package', 'com.nanosai.rionops.rion.write'), ('RionWriter', 'enables', 'write RION fields')]"
You set the destination byte array of the RionWriter using the setDestination() method.,"[('RionWriter', 'has method', 'setDestination()'), ('setDestination()', 'sets', 'destination byte array')]"
The RionWriter contains a method named writeBytes() which can be used to write a RION Bytes field to the destination byte array.,"[('RionWriter', 'contains method', 'writeBytes()'), ('writeBytes()', 'used to', 'write RION Bytes field'), ('write RION Bytes field', 'to', 'destination byte array')]"
Here is a Java example of writing a RION Bytes field from a byte array using the RionWriter writeBytes() method:,"[('Java', 'example of', 'writing a RION Bytes field'), ('RION Bytes field', 'written from', 'byte array'), ('RionWriter', 'method', 'writeBytes()')]"
The writeBytes() method also exists in a version that takes a source offset and source length which specifies from what offset and how many bytes forward in the source byte array to write to the RION Bytes field in the destination byte array.,"[('writeBytes() method', 'has version', 'version with source offset and source length'), ('version with source offset and source length', 'specifies', 'offset and number of bytes'), ('offset and number of bytes', 'determine', 'bytes to write to RION Bytes field'), ('RION Bytes field', 'located in', 'destination byte array'), ('bytes to write', 'come from', 'source byte array')]"
The RionWriter method writeBoolean() writes a boolean value (true / false) as a RION Boolean field to the destination byte array.,"[('RionWriter method writeBoolean()', 'writes', 'boolean value'), ('boolean value', 'type', 'RION Boolean field'), ('RION Boolean field', 'written to', 'destination byte array')]"
Here is a Java example of writing a RION Boolean field using the RionWriter writeBoolean() method:,"[('Java', 'example of', 'writing a RION Boolean field'), ('RionWriter', 'method', 'writeBoolean()')]"
The RionWriter method writeInt64() will write a 64 bit integer as a RION IntPos or IntNeg field to the destination byte array.,"[('RionWriter', 'has method', 'writeInt64()'), ('writeInt64()', 'writes', '64 bit integer'), ('64 bit integer', 'written as', 'RION IntPos or IntNeg field'), ('RION IntPos or IntNeg field', 'written to', 'destination byte array')]"
"Here are two examples of writing int64 values (long values) as RION IntPos and IntNeg fields to the destination byte array, using the RionWriter writeInt64() method:","[('int64 values', 'written as', 'RION IntPos fields'), ('int64 values', 'written as', 'RION IntNeg fields'), ('RionWriter', 'has method', 'writeInt64()'), ('writeInt64()', 'writes', 'int64 values'), ('int64 values', 'written to', 'destination byte array')]"
The RionWriter methods writeFloat32() and writeFloat64() writes a 32 bit and 64 bit floating point number as a RION Float field to the destination byte array.,"[('RionWriter', 'has method', 'writeFloat32()'), ('RionWriter', 'has method', 'writeFloat64()'), ('writeFloat32()', 'writes', '32 bit floating point number'), ('writeFloat64()', 'writes', '64 bit floating point number'), ('32 bit floating point number', 'written as', 'RION Float field'), ('64 bit floating point number', 'written as', 'RION Float field'), ('RION Float field', 'written to', 'destination byte array')]"
"Here are two examples of writing a 32 bit and 64 bit floating point number as RION Float fields to the destination byte array, using the RionWriter writeFloat32() and writeFloat64() methods:","[('32 bit floating point number', 'written as', 'RION Float field'), ('64 bit floating point number', 'written as', 'RION Float field'), ('RION Float field', 'written to', 'destination byte array'), ('RionWriter', 'provides method', 'writeFloat32()'), ('RionWriter', 'provides method', 'writeFloat64()')]"
The RionWriter method writeUtf8() writes a Java String as a RION UTF-8 or UTF-8-Short field to the destination byte array.,"[('RionWriter', 'has method', 'writeUtf8()'), ('writeUtf8()', 'writes', 'Java String'), ('writeUtf8()', 'writes as', 'RION UTF-8 field'), ('writeUtf8()', 'writes as', 'UTF-8-Short field'), ('writeUtf8()', 'writes to', 'destination byte array')]"
Here is an example of writing a RION UTF-8 field to a byte array using the RionWriter writeUtf8() method:,"[('RionWriter', 'has method', 'writeUtf8()'), ('writeUtf8()', 'writes', 'RION UTF-8 field'), ('RION UTF-8 field', 'written to', 'byte array')]"
The RionWriter method writeUtc() method writes a date and time in the shape of a Java Calendar as a RION UTC field (UTC date-time) to the destination byte array.,"[('RionWriter method', 'has method', 'writeUtc()'), ('writeUtc()', 'writes', 'date and time'), ('date and time', 'represented as', 'Java Calendar'), ('Java Calendar', 'written as', 'RION UTC field'), ('RION UTC field', 'written to', 'destination byte array')]"
Here is an example of writing a Java Calendar as a RION UTC field to the destination byte array using the RionWriter writeUtc() method:,"[('Java Calendar', 'written as', 'RION UTC field'), ('RION UTC field', 'written to', 'destination byte array'), ('RionWriter', 'provides method', 'writeUtc()')]"
The RionWriter class has functionality that helps you reserve length bytes for composite RION fields and jump back up and fill them in correctly later.,"[('RionWriter class', 'has functionality', 'reserve length bytes for composite RION fields'), ('RionWriter class', 'has functionality', 'jump back up and fill them in correctly later')]"
One of the mechanisms in the RionWriter class that helps you reserve length bytes and set their value correctly later requires an internal stack to keep track of where the reserved length bytes are located.,"[('RionWriter class', 'contains mechanism', 'mechanism in the RionWriter class'), ('mechanism in the RionWriter class', 'helps', 'reserve length bytes'), ('mechanism in the RionWriter class', 'requires', 'internal stack'), ('internal stack', 'keeps track of', 'where the reserved length bytes are located')]"
Here is an example of setting the nested field stack for a RionWriter via its setNestedFieldStack() method:,"[('RionWriter', 'has method', 'setNestedFieldStack()'), ('setNestedFieldStack()', 'used for', 'setting the nested field stack')]"
"However, it is possible for all RION fields to take the value null, so it is possible to include e.g.","[('RION fields', 'can take value', nan)]"
"The writeObjectBeginPush() method writes the beginning of the RION Object field, and reserves and reserve as many length bytes as you pass to it as parameter (2 in the example above).","[('writeObjectBeginPush()', 'writes', 'beginning of the RION Object field'), ('writeObjectBeginPush()', 'reserves', 'length bytes'), ('length bytes', 'quantity', 'parameter')]"
"The writeObjectEndPop() method pops the RION Object field start index off the nested field stack, calculates the total length of the Object field and writes the total Object field length into its reserved length bytes.","[('writeObjectEndPop()', 'method pops', 'RION Object field start index'), ('RION Object field start index', 'off', 'nested field stack'), ('writeObjectEndPop()', 'calculates', 'total length of the Object field'), ('writeObjectEndPop()', 'writes', 'total Object field length'), ('total Object field length', 'into', 'reserved length bytes')]"
There are also versions of the writeObjectBegin() and writeObjectEnd() method that does not use the internal nested field stack.,"[('writeObjectBegin()', 'has version', 'method that does not use the internal nested field stack'), ('writeObjectEnd()', 'has version', 'method that does not use the internal nested field stack')]"
The String arguments passed to the main() method are the command line arguments passed to the application when it is executed.,"[('String arguments', 'passed to', 'main() method'), ('command line arguments', 'passed to', 'application')]"
The Main argument is the name of the object to run the main() method of.,"[('Main argument', 'is the name of', 'object'), ('object', 'to run method of', 'main()')]"
"The arguments ""arg1"" and ""arg2"" are passed in the String array to the main() method.",
The until keyword makes sure to only iterate until myArray.length - 1.,"[('until keyword', 'ensures', 'iterate until myArray.length - 1')]"
"If you had needed i to also take the value of myArray.length in the final iteration, you could have used the to keyword instead of the until keyword.","[('i', 'take the value of', 'myArray.length'), ('you', 'could have used', 'to keyword'), ('you', 'could have used instead of', 'until keyword')]"
"This means that you can define classes in Scala, and instantiate objects of these classes.","[('Scala', 'allows', 'define classes'), ('Scala', 'allows', 'instantiate objects'), ('objects', 'instance of', 'classes')]"
"That means, that a class defines what information objects of that class holds, and what behaviour (methods) it exposes.","[('class', 'defines', 'information objects'), ('class', 'holds', 'information objects'), ('class', 'exposes', 'behaviour'), ('behaviour', 'includes', 'methods')]"
The other aspects of Scala classes will be covered in separate texts.,"[('Scala classes', 'aspects covered in', 'separate texts')]"
Here I have just shown you how to declare a method inside a class.,"[('method', 'declared inside', 'class')]"
"Notice how this addToMyField() method does not have the equals sign, and no return type specified.","[('addToMyField() method', 'does not have', 'equals sign'), ('addToMyField() method', 'does not have', 'return type specified')]"
"When an exception is thrown from inside the throwsException() method, the execution is interrupted and the execution jumps to the catch clause surrounding the code that threw the exception.","[('exception', 'thrown from', 'throwsException() method'), ('exception', 'interrupts', 'execution'), ('execution', 'jumps to', 'catch clause'), ('catch clause', 'surrounds', 'code that threw the exception')]"
"In the example above, when the throwsException() method is called, and it throws an exception, the statement below the throwsException() method call is never executed.","[('throwsException() method', 'is called', 'example above'), ('throwsException() method', 'throws', 'exception'), ('statement', 'is below', 'throwsException() method call'), ('statement', 'is never executed', 'when throwsException() method throws exception')]"
"In the example above, only one exception is caught, Exception which is the superclass of most exceptions.","[('Exception', 'is superclass of', 'most exceptions')]"
"Rather than compute the .toUpperCase() value twice, by nesting them inside each if-statement, the uppercase version of aString is computed just once, and assigned to the variable aStringUC.","[('.toUpperCase() value', 'computed', 'twice'), ('uppercase version of aString', 'computed', 'once'), ('uppercase version of aString', 'assigned to', 'variable aStringUC')]"
"You can thus use all the classes of the Java SDK's in Scala, and also your own, custom Java classes, or your favourite Java open source projects.","[('Scala', 'can use', 'Java SDK classes'), ('Scala', 'can use', 'custom Java classes'), ('Scala', 'can use', 'Java open source projects')]"
"Instead a Scala class can have what is called a singleton object, or sometime a companion object.","[('Scala class', 'can have', 'singleton object'), ('Scala class', 'can have', 'companion object'), ('singleton object', 'is called', 'companion object')]"
"When a singleton object is named the same as a class, it is called a companion object.","[('singleton object', 'named the same as', 'class'), ('singleton object', 'is called', 'companion object')]"
A companion object must be defined inside the same source file as the class.,"[('companion object', 'must be defined inside', 'same source file'), ('companion object', 'associated with', 'class')]"
"In this class you can both instantiate Main and call sayHelloWorld() or call the sayHi() method on the companion object directly, like this:","[('Main', 'can be instantiated in', 'this class'), ('sayHelloWorld()', 'can be called in', 'this class'), ('sayHi()', 'can be called on', 'companion object')]"
This also means that you can use all Java classes in your Scala code.,"[('Scala code', 'can use', 'Java classes')]"
The Scala version used in the examples in this tutorial is Scala 2.8.0 .,"[('examples', 'use', 'Scala version'), ('Scala version', 'is', 'Scala 2.8.0')]"
"The Stream Ops StreamOps class, com.nanosai.streamops.StreamOps, provides a convenient facade for the Stream Ops API.","[('StreamOps class', 'part of', 'com.nanosai.streamops.StreamOps'), ('StreamOps class', 'provides', 'convenient facade'), ('convenient facade', 'for', 'Stream Ops API')]"
The StreamOps class can create the most commonly used components of the Stream Ops API.,"[('StreamOps class', 'can create', 'most commonly used components of the Stream Ops API')]"
"Thus, the StreamOps class is a good place to start, both when using Stream Ops, but also when exploring what you can do with Stream Ops and how it works.","[('StreamOps class', 'is a good place to start', 'using Stream Ops'), ('StreamOps class', 'is a good place to start', 'exploring what you can do with Stream Ops'), ('StreamOps class', 'is a good place to start', 'how Stream Ops works')]"
In this tutorial we will only go over the components the StreamOps and related factory classes can create.,"[('StreamOps', 'can create', 'components'), ('factory classes', 'related to', 'StreamOps'), ('factory classes', 'can create', 'components')]"
"You can create instances of these classes via the new operator, or you can use a StreamStorageFactory.","[('instances', 'can be created via', 'new operator'), ('instances', 'can be created via', 'StreamStorageFactory')]"
You can create a StreamStorageFS instance via the StreamStorageFactory createStreamStorageFS() method.,"[('StreamStorageFactory', 'has method', 'createStreamStorageFS()'), ('createStreamStorageFS()', 'creates', 'StreamStorageFS'), ('StreamStorageFS', 'instance of', 'StreamStorageFS')]"
Here is an example of creating a StreamStorageFS instance via the createStreamStorageFS() method:,"[('createStreamStorageFS()', 'creates', 'StreamStorageFS instance')]"
You can create a StreamStorageRootFS instance via the StreamStorageFactory createStreamStorageRootFS() method.,"[('StreamStorageFactory', 'has method', 'createStreamStorageRootFS()'), ('createStreamStorageRootFS()', 'creates', 'StreamStorageRootFS'), ('StreamStorageRootFS', 'instance of', 'StreamStorageRootFS')]"
"The Stream Ops StreamStorageFS class, com.nanosai.streamops.storage.file.StreamStorageFS, provides disk storage for a data stream.","[('Stream Ops StreamStorageFS class', 'provides', 'disk storage'), ('disk storage', 'for', 'data stream')]"
"More specifically, the StreamStorageFS class can write an ordered sequence of records to disk, and later read the records from disk again in the exact same order.","[('StreamStorageFS', 'can write', 'ordered sequence of records'), ('StreamStorageFS', 'can read', 'records from disk'), ('ordered sequence of records', 'written to', 'disk'), ('records', 'read from', 'disk'), ('records', 'read in', 'exact same order')]"
The StreamStorageFS class is one of the core classes of the Stream Ops data storage engine.,"[('StreamStorageFS', 'is a core class of', 'Stream Ops data storage engine')]"
Many of the other classes in the Stream Ops data storage engine revolve around this class.,"[('Other classes', 'revolve around', 'Stream Ops data storage engine class')]"
To use the StreamStorageFS class you must first create a StreamStorageFS instance.,"[('StreamStorageFS', 'instance of', 'StreamStorageFS class'), ('StreamStorageFS class', 'requires', 'create StreamStorageFS instance')]"
"Once a StreamStorageFS instance is open for appending records, you can append a record to the stream via the append() method.","[('StreamStorageFS instance', 'is open for', 'appending records'), ('append() method', 'used for', 'append a record to the stream')]"
You can obtain a list of StreamStorageBlockFS instances from a StreamStorageFS by calling getStorageBlocks().,"[('StreamStorageFS', 'method', 'getStorageBlocks()'), ('getStorageBlocks()', 'returns', 'list of StreamStorageBlockFS instances')]"
The StreamStorageFS class contains a method to read bytes from a stream block file.,"[('StreamStorageFS', 'contains', 'method'), ('method', 'reads', 'bytes'), ('method', 'from', 'stream block file')]"
"The readBytes() method reads bytes from the file represented by the given StreamStorageBlockFS instance, into the byte[] array passed as parameter.","[('readBytes() method', 'reads bytes from', 'file'), ('file', 'represented by', 'StreamStorageBlockFS instance'), ('readBytes() method', 'reads bytes into', 'byte[] array')]"
The readBytes() method will start fromByte bytes into the block file.,"[('readBytes() method', 'starts from', 'fromByte bytes'), ('fromByte bytes', 'located in', 'block file')]"
The Stream Ops for Java class named StreamStorageRootFS (com.nanosai.streamops.engine.storage.file.StreamStorageRootFS) class represents the root of a file based stream storage system.,"[('StreamStorageRootFS', 'is a', 'class'), ('StreamStorageRootFS', 'part of', 'Stream Ops for Java'), ('StreamStorageRootFS', 'represents', 'root of a file based stream storage system')]"
You can always obtain the root directory path a StreamStorageRootFS was created with via its getRootDirPath() method.,"[('StreamStorageRootFS', 'has method', 'getRootDirPath()'), ('getRootDirPath()', 'obtains', 'root directory path')]"
Here is an example of obtaining the root directory path of a StreamStorageRootFS via its getRootDirPath() method:,"[('StreamStorageRootFS', 'has method', 'getRootDirPath()'), ('getRootDirPath()', 'obtains', 'root directory path')]"
"When you write records to a stream via the StreamStorageFS instance, the StreamStorageFS class will divide the records into multiple files.","[('you', 'write records to', 'stream'), ('StreamStorageFS instance', 'used by', 'you'), ('StreamStorageFS class', 'divide records into', 'multiple files')]"
Creating a Buffer is done using the static buffer() method in the Buffer interface.,"[('Creating a Buffer', 'done using method', 'buffer()'), ('buffer()', 'method of', 'Buffer interface')]"
If you want the bytes stored in the Buffer to be encoded using a special encoding (e.g.,"[('Buffer', 'can be encoded using', 'special encoding')]"
"you can specify the encoding as the second parameter to the buffer() method, like this:","[('buffer() method', 'has parameter', 'encoding')]"
You can read the length of a Buffer using its length() method.,"[('Buffer', 'has method', 'length()'), ('length()', 'measures', 'length of Buffer')]"
You can write to a specific position inside a buffer using one of the set...() methods.,"[('You', 'can write to', 'specific position inside a buffer'), ('specific position inside a buffer', 'using method', 'set...() methods')]"
You can also write data to a Buffer using one of the append...() methods.,"[('You', 'can write data to', 'Buffer'), ('Buffer', 'has method', 'append...()')]"
You can read the data stored in a Buffer using the many get...() methods.,"[('Buffer', 'stores', 'data'), ('You', 'can read', 'data'), ('get...() methods', 'used for', 'reading data')]"
After the vertx run part of the command you must write the fully qualified class name of the verticle to deploy.,"[('vertx run part of the command', 'requires', 'fully qualified class name of the verticle to deploy')]"
To deploy a verticle class you must run the vertx run classname command from the root directory of the compiled classes for the verticle to deploy.,"[('verticle class', 'deployed by', 'vertx run classname command'), ('vertx run classname command', 'executed from', 'root directory'), ('root directory', 'contains', 'compiled classes'), ('compiled classes', 'used for', 'verticle to deploy')]"
"Thus, the root directory of your classes becomes the classpath for deploying the verticle.","[('root directory', 'becomes', 'classpath'), ('classpath', 'for', 'deploying the verticle')]"
Whatever directory you run the vertx run command from is automatically added to the classpath when looking for the verticle class.,"[('directory', 'associated with action', 'run'), ('vertx run command', 'executed from', 'directory'), ('directory', 'added to', 'classpath'), ('classpath', 'used for', 'looking for verticle class')]"
You can also run a Java verticle class which is located inside a JAR file.,"[('Java verticle class', 'located inside', 'JAR file')]"
Sometimes you need a classpath which contains more than one directory or JAR file.,"[('classpath', 'contains', 'directory'), ('classpath', 'contains', 'JAR file')]"
In those situations you can provide a normal classpath string as the -cp argument value.,"[('you', 'can provide', 'normal classpath string'), ('normal classpath string', 'used as', '-cp argument value')]"
Each entry (directory or JAR file) in the classpath string must be separated by either a semicolon (on Windows) or a colon (on Unix / Linux).,"[('entry', 'contained in', 'classpath string'), ('classpath string', 'separated by', 'semicolon'), ('classpath string', 'separated by', 'colon'), ('semicolon', 'used on', 'Windows'), ('colon', 'used on', 'Unix'), ('colon', 'used on', 'Linux')]"
This example contains two JAR files in the classpath separated by a semicolon.,"[('example', 'contains', 'JAR files'), ('JAR files', 'located in', 'classpath'), ('JAR files', 'separated by', 'semicolon')]"
"If you have a very long classpath your command line may get very long, and thus be hard to read in a text editor.","[('very long classpath', 'may cause', 'command line to get very long'), ('very long command line', 'may be', 'hard to read'), ('hard to read command line', 'location', 'text editor')]"
"Instead you can build the classpath up as an environment variable, one entry per line, and use that environment variable in the command line.","[('classpath', 'can be built as', 'environment variable'), ('environment variable', 'used in', 'command line')]"
run.cmd and you can execute it from a Windows command line.,"[('run.cmd', 'can be executed from', 'Windows command line')]"
Notice the use of / as directory separator and the use of : as classpath entry separator.,"[('/', 'used as', 'directory separator'), (':', 'used as', 'classpath entry separator')]"
That might be useful if you deploy a class file that is written in Groovy or Scala (but which are compiled into Java classes).,"[('class file', 'written in', 'Groovy'), ('class file', 'written in', 'Scala'), ('Groovy', 'compiled into', 'Java classes'), ('Scala', 'compiled into', 'Java classes')]"
The first parameter to the getNow() method is the TCP port to connect to the remote HTTP server on.,"[('getNow() method', 'has parameter', 'first parameter'), ('first parameter', 'used for', 'TCP port'), ('TCP port', 'connects to', 'remote HTTP server')]"
The getNow() method exists in a version where you can leave the port out.,"[('getNow() method', 'exists in', 'version'), ('version', 'can leave out', 'port')]"
The second parameter to the getNow() method is the domain name of the remote HTTP server to connect to.,"[('getNow() method', 'has parameter', 'second parameter'), ('second parameter', 'related to', 'domain name'), ('domain name', 'associated with', 'remote HTTP server')]"
The third parameter to the getNow() method is the URI to the resource to retrieve.,"[('getNow() method', 'has parameter', 'third parameter'), ('third parameter', 'related to', 'URI'), ('URI', 'related to', 'resource to retrieve')]"
The Handler implementation passed to the getNow() method is called when the headers of the HTTP response are received.,"[('Handler implementation', 'passed to method', 'getNow()'), ('Handler implementation', 'called when', 'headers of the HTTP response are received')]"
"However, if you do need to access the body of the HTTP response, you need to register another handler on the HttpClientResponse that is passed as parameter to the first Handler's handle() method.","[('HttpClientResponse', 'is passed as parameter to', ""first Handler's handle() method""), ('you', 'need to register', 'another handler'), ('another handler', 'is registered on', 'HttpClientResponse'), ('you', 'need to access', 'body of the HTTP response')]"
The Handler implementation passed to the bodyHandler() method of the HttpClientResponse is called when the full HTTP response body is received.,"[('Handler implementation', 'passed to method', 'bodyHandler()'), ('bodyHandler()', 'method of', 'HttpClientResponse'), ('Handler implementation', 'called when', 'full HTTP response body is received')]"
"Once you have created the HTTP server, you can start it using its listen() method.","[('HTTP server', 'can be started using', 'listen() method')]"
"The HttpServer class has more versions of the listen() method too, which gives you different options for starting the HTTP server.","[('HttpServer class', 'has method', 'listen()'), ('listen()', 'has version', 'more versions'), ('more versions', 'provide', 'different options'), ('different options', 'used for', 'starting the HTTP server')]"
"Every time an HTTP request arrives at the HTTP server, the handle() method of the Handler object is called.","[('HTTP request', 'arrives at', 'HTTP server'), ('handle() method', 'called by', 'HTTP server'), ('handle() method', 'belongs to', 'Handler object')]"
Inside the handle() method you can execute the code needed to handle the HTTP request.,"[('handle() method', 'can execute', 'code'), ('code', 'needed to handle', 'HTTP request')]"
You can access HTTP headers and parameters from the HttpServerRequest object passed as parameter to the handle() method.,"[('HttpServerRequest', 'passed as parameter to', 'handle() method'), ('HTTP headers', 'accessed from', 'HttpServerRequest'), ('parameters', 'accessed from', 'HttpServerRequest')]"
"After writing the headers back you can write the response body back via the write() method, like this:","[('you', 'can write', 'response body'), ('response body', 'written via', 'write() method')]"
You can call write() multiple times to add more data to the response body.,"[('write()', 'can be called', 'multiple times'), ('write()', 'adds data to', 'response body')]"
The write() method is asynchronous and returns immediately after queuing up the string or buffer.,"[('write() method', 'is', 'asynchronous'), ('write() method', 'returns', 'immediately'), ('write() method', 'queues up', 'string or buffer')]"
This is done by calling the end() method as shown in the previous example.,"[('end() method', 'used in', 'previous example')]"
The end() method can take either a String or Buffer as parameter.,"[('end() method', 'can take parameter', 'String'), ('end() method', 'can take parameter', 'Buffer')]"
To close an HTTP server you simply call its close() method like this:,"[('HTTP server', 'has method', 'close()'), ('close()', 'action', 'close HTTP server')]"
"The close() method executes asynchronously, so the HTTP server may not be fully closed by the time the close() method returns.","[('close() method', 'executes', 'asynchronously'), ('HTTP server', 'may not be', 'fully closed'), ('close() method', 'returns', 'time')]"
"You can pass a close handler as parameter to the close() method, to be notified when the HTTP server is fully closed.","[('close handler', 'can be passed as parameter to', 'close() method'), ('close() method', 'notifies', 'close handler'), ('HTTP server', 'is fully closed by', 'close() method')]"
"You can just unzip the zip file and add these JAR files to the classpath of your Java application, and you are good to go.","[('zip file', 'can be unzipped', 'JAR files'), ('JAR files', 'can be added to', 'classpath'), ('classpath', 'belongs to', 'Java application')]"
As long as the JAR files are available on the classpath of your application.,"[('JAR files', 'available on', 'classpath'), ('classpath', 'part of', 'application')]"
You connect to a remote server by calling the connect() method.,"[('You', 'connect to', 'remote server'), ('connect()', 'method of', 'You')]"
You obtain a reference to the NetSocket connected to the remote server via the AsyncResult instance passed to the handler's handle() method.,"[('NetSocket', 'connected to', 'remote server'), ('AsyncResult instance', 'passed to', ""handler's handle() method""), ('You', 'obtain reference to', 'NetSocket')]"
You can write data to the TCP connection via the NetSocket write() method.,"[('NetSocket', 'has method', 'write()'), ('write()', 'writes data to', 'TCP connection')]"
The data may not be sent by the time the write() method returns.,"[('data', 'may not be sent by', 'time the write() method returns')]"
The Handler's handle() method will get called when data is received from the remote server.,"[('Handler', 'has method', 'handle()'), ('handle()', 'gets called when', 'data is received from the remote server')]"
You close the TCP client by calling the close() method of the NetClient instance.,"[('You', 'close', 'TCP client'), ('close()', 'method of', 'NetClient instance')]"
"Again, the NetClient's close() method is asynchronous, so the underlying TCP connection may not yet be closed by the time the close() method returns.","[('NetClient', 'has method', 'close()'), ('close()', 'is', 'asynchronous'), ('TCP connection', 'may not yet be', 'closed'), ('close()', 'method returns', 'TCP connection may not yet be closed')]"
"Once you have created the TCP server, you can start it using its listen() method.","[('TCP server', 'can be started using', 'listen() method')]"
This example starts the server and instructs it to listen on TCP port 10.000 .,"[('example', 'starts', 'server'), ('server', 'listens on', 'TCP port 10.000')]"
The NetServer class contains more versions of the listen() method which gives you different options for starting the TCP server.,"[('NetServer class', 'contains', 'versions of the listen() method'), ('versions of the listen() method', 'give options for', 'starting the TCP server')]"
The handle() method of the connect handler is called whenever a new TCP connection is created by a client of the TCP server.,"[('handle() method', 'part of', 'connect handler'), ('connect handler', 'called when', 'new TCP connection is created'), ('new TCP connection', 'created by', 'client'), ('client', 'connects to', 'TCP server')]"
The NetSocket object passed as parameter to the handle() method gives access to the incoming connection (socket etc.,"[('NetSocket object', 'passed as parameter to', 'handle() method'), ('NetSocket object', 'gives access to', 'incoming connection')]"
You can do so via the NetSocket instance passed to the connect handler's handle() method.,"[('NetSocket instance', 'passed to', ""connect handler's handle() method"")]"
The NetSocket class contains more versions of the write() method which enables you to write e.g.,"[('NetSocket class', 'contains', 'write() method'), ('write() method', 'enables', 'you')]"
When you are finished with the TCP server you can close it using its close() method.,"[('TCP server', 'can be closed using', 'close() method')]"
"Closing the TCP server is an asynchronous actions, so the close() method may exit before the TCP server is actually closed.","[('Closing the TCP server', 'is', 'asynchronous action'), ('close() method', 'may exit before', 'TCP server is actually closed')]"
"If you need to be notified of when the TCP server has shut down, you can pass a Handler to the close() method.","[('TCP server', 'action', 'shut down'), ('Handler', 'can be passed to', 'close() method'), ('close() method', 'notifies', 'when TCP server has shut down')]"
"The setTimer() method takes a time interval in milliseconds as first parameter, and a Handler implementation as second parameter.","[('setTimer() method', 'takes', 'time interval in milliseconds'), ('setTimer() method', 'takes', 'Handler implementation')]"
The Handler's handle() method is called when the time interval has elapsed.,"[('Handler', 'has method', 'handle()'), ('handle()', 'is called when', 'time interval has elapsed')]"
This timer ID is also passed as parameter to the Handler's handle() method.,"[('timer ID', 'passed as parameter to', ""Handler's handle() method"")]"
"The setPeriodic() method takes a time interval in milliseconds as first parameter, and a Handler implementation as second parameter.","[('setPeriodic() method', 'takes', 'time interval in milliseconds'), ('setPeriodic() method', 'takes', 'Handler implementation')]"
The Handler's handle() method is called every time the time interval has elapsed.,"[('Handler', 'has method', 'handle()'), ('handle()', 'is called every time', 'time interval has elapsed')]"
This timer ID is also passed to the Handler's handle() method whenever it is called.,"[('timer ID', 'is passed to', ""Handler's handle() method"")]"
Support for Scala and Clojure should be arriving soon (it was originally planned for v. 3.0 but I am not sure if they got it in).,"[('Scala', 'support arriving', 'soon'), ('Clojure', 'support arriving', 'soon'), ('support for Scala and Clojure', 'originally planned for', 'v. 3.0')]"
You don't have to learn both a language and a new platform (e.g.,"[('You', 'do not have to learn', 'both a language and a new platform')]"
You will see later in this tutorial how to use both versions of the start() method.,"[('tutorial', 'contains information about', 'start() method'), ('start() method', 'has version', 'both versions')]"
Here is an example of overriding the stop() method in your own verticle:,"[('stop() method', 'overridden in', 'your own verticle')]"
Sending messages via the event bus can be done via either the send() or publish() method on the event bus.,"[('messages', 'can be sent via', 'event bus'), ('messages', 'can be sent via', 'send() method'), ('messages', 'can be sent via', 'publish() method'), ('send() method', 'is a method on', 'event bus'), ('publish() method', 'is a method on', 'event bus')]"
The send() method sends the message to just one of the listening verticles.,"[('send() method', 'sends message to', 'one of the listening verticles')]"
This is useful for distributing work load over multiple verticles (e.g.,"[('work load', 'distributed over', 'multiple verticles')]"
"The first message is sent via the publish() method, so both consumers receive the message.","[('first message', 'sent via', 'publish() method'), ('first message', 'received by', 'both consumers')]"
"The second message is sent via the send() method, so only one of the consumers will receive the message.","[('second message', 'sent via', 'send() method'), ('send() method', 'sends message to', 'one of the consumers')]"
A verticle has a start() and a stop() method which are called when the verticle is deployed and when it is undeployed.,"[('verticle', 'has method', 'start()'), ('verticle', 'has method', 'stop()'), ('start()', 'called when', 'verticle is deployed'), ('stop()', 'called when', 'verticle is undeployed')]"
"You should perform any necessary initialization work inside the start() method, and any necessary cleanup work inside the stop() method.","[('initialization work', 'should be performed inside', 'start() method'), ('cleanup work', 'should be performed inside', 'stop() method')]"
"For instance, you can specify how many verticle instances of a given verticle class to deploy.","[('verticle instances', 'are instances of', 'verticle class')]"
The startsWith() and endsWith() methods check if the String starts with a certain substring,"[('startsWith()', 'method of', 'String'), ('endsWith()', 'method of', 'String'), ('startsWith()', 'checks if String starts with', 'substring'), ('endsWith()', 'checks if String ends with', 'substring')]"
In the above example the two methods getTime() and setTime() can access the time member variable,"[('getTime()', 'can access', 'time member variable'), ('setTime()', 'can access', 'time member variable')]"
The convertToInt() method has the same signature as the deserialize() method of the Deserializer deserialize() method,"[('convertToInt()', 'has same signature as', 'deserialize() method'), ('deserialize() method', 'part of', 'Deserializer'), ('deserialize() method', 'part of', 'Deserializer deserialize() method')]"
Deque.removeLast() is different from pollLast() which returns null if the Deque is empty,"[('Deque.removeLast()', 'is different from', 'pollLast()'), ('pollLast()', 'returns', nan), ('pollLast()', 'condition', 'Deque is empty')]"
The floor() method does the opposite of the ceiling() method meaning it returns the greatest element that is less than or equal to the given parameter value,"[('floor() method', 'does the opposite of', 'ceiling() method'), ('floor() method', 'returns', 'greatest element less than or equal to given parameter value')]"
You can also specify METHOD or FIELD or you can leave the target out alltogether so the annotation can be used for both classes methods and fields,"[('annotation', 'can be used for', 'classes'), ('annotation', 'can be used for', 'methods'), ('annotation', 'can be used for', 'fields')]"
For instance finest() finer() fine() info() warning() and severe() each corresponds to one of the log levels,"[('finest()', 'corresponds to', 'log level'), ('finer()', 'corresponds to', 'log level'), ('fine()', 'corresponds to', 'log level'), ('info()', 'corresponds to', 'log level'), ('warning()', 'corresponds to', 'log level'), ('severe()', 'corresponds to', 'log level')]"
You can encrypt or decrypt data into an existing byte array by passing the destination byte array as parameter to the update() and or doFinal() method,"[('encrypt or decrypt data', 'method', 'update()'), ('encrypt or decrypt data', 'method', 'doFinal()'), ('update()', 'parameter', 'destination byte array'), ('doFinal()', 'parameter', 'destination byte array'), ('destination byte array', 'type', 'existing byte array')]"
Second if the lock is locked the threads are blocked in the wait() call inside the while(isLocked) loop in the lock() method,"[('lock', 'state', 'locked'), ('threads', 'are blocked in', 'wait() call'), ('wait() call', 'is inside', 'while(isLocked) loop'), ('while(isLocked) loop', 'is in', 'lock() method')]"
Deque.removeFirst() is different from pollFirst() which returns null if the Deque is empty,"[('Deque.removeFirst()', 'is different from', 'pollFirst()'), ('pollFirst()', 'returns', nan), ('pollFirst()', 'condition', 'Deque is empty')]"
The peek() works like the element() method except it does not throw an exception if the Queue is empty,"[('peek()', 'works like', 'element() method'), ('peek()', 'does not throw', 'exception'), ('Queue', 'can be', 'empty')]"
The addAll() method takes a Collection as parameter so you can pass either a List or Java Set as parameter,"[('addAll() method', 'takes parameter', 'Collection'), ('Collection', 'can be', 'List'), ('Collection', 'can be', 'Java Set')]"
The Java Properties class java.util.Properties is like a Java Map of Java String key and value pairs,"[('Java Properties class', 'is like', 'Java Map'), ('Java Properties class', 'contains', 'Java String key and value pairs')]"
java.io.InputStream means that you use the Java FileInputStream as an InputStream (FileInputStream behaves like an InputStream),"[('java.io.InputStream', 'used as', 'InputStream'), ('Java FileInputStream', 'used as', 'InputStream'), ('FileInputStream', 'behaves like', 'InputStream')]"
Since PipedInputStream is a subclass of InputStream PipedInputStream has the same basic methods and use patterns as an InputStream,"[('PipedInputStream', 'subclass of', 'InputStream'), ('PipedInputStream', 'has methods and use patterns as', 'InputStream')]"
Choice.select(int pos) is done by having a different thread call the Selector.wakeup() method on the Selector which the first thread has called select() on,"[('Choice.select(int pos)', 'is done by', 'having a different thread call the Selector.wakeup() method'), ('Selector.wakeup() method', 'called on', 'Selector'), ('first thread', 'has called', 'select() on Selector')]"
While isLocked is true the thread calling lock() is parked waiting in the wait() call,"[('isLocked', 'state', 'true'), ('thread', 'calls', 'lock()'), ('thread', 'is parked', 'waiting'), ('waiting', 'occurs in', 'wait() call')]"
The AtomicInteger class is located in the java.util.concurrent.atomic package so the full class name is java.util.concurrent.atomic.AtomicInteger,"[('AtomicInteger', 'located in package', 'java.util.concurrent.atomic'), ('java.util.concurrent.atomic.AtomicInteger', 'full class name', 'AtomicInteger')]"
But no thread can actually execute unlock() until the thread waiting in lock() leaves the outer synchronized block,"[('thread', 'can execute', 'unlock()'), ('thread', 'waiting in', 'lock()'), ('thread', 'leaves', 'outer synchronized block')]"
The System class also has a getProperty() and setProperty() method which are shortcuts to the Properties getProperty() and setProperty() methods of the System Properties instance. ,
Closeable.close() closes the Selector and invalidates all SelectionKey instances registered with this Selector,"[('Closeable.close()', 'closes', 'Selector'), ('Closeable.close()', 'invalidates', 'SelectionKey instances'), ('SelectionKey instances', 'registered with', 'Selector')]"
Any.stream() is similar to how you obtain an Iterator by calling the items.iterator() method but a Stream is a different animal than an Iterator,"[('Any.stream()', 'is similar to', 'items.iterator() method'), ('Stream', 'is a different animal than', 'Iterator')]"
An interesting aspect to note about the BufferedInputStream is that is supports the mark() and reset() methods inherited from the InputStream,"[('BufferedInputStream', 'supports', 'mark()'), ('BufferedInputStream', 'supports', 'reset()'), ('mark()', 'inherited from', 'InputStream'), ('reset()', 'inherited from', 'InputStream')]"
"You can search for an object on the stack to get it's index, using the search() method. The object's equals() method is called on every object on the Stack to determine if the searched-for object is present on the Stack. ","[('search()', 'used for', 'get index of object on stack'), ('equals()', 'called on', 'every object on the Stack'), ('equals()', 'used to determine', 'if searched-for object is present on the Stack')]"
Actually java.sql.Timestamp extends java.util.Date so anything you can do with a java.util.Date you can also do with a java.sql.Timestamp,"[('java.sql.Timestamp', 'extends', 'java.util.Date'), ('java.util.Date', 'can do anything with', 'java.sql.Timestamp')]"
"If the Deque is empty, removeFirst() will throw an exception. This is different from pollFirst() which returns null if the Deque is empty.","[('removeFirst()', 'throws', 'exception'), ('pollFirst()', 'returns', nan), ('pollFirst()', 'condition', 'Deque is empty'), ('removeFirst()', 'condition', 'Deque is empty')]"
You read bytes from a Java ByteArrayInputStream just like you would from a regular InputStream via its read() method,"[('Java ByteArrayInputStream', 'read bytes via', 'read() method'), ('Java ByteArrayInputStream', 'is a type of', 'InputStream')]"
You create a DateFormat using the getDateInstance() and getTimeInstance() method of the DateFormat class,"[('DateFormat', 'created using', 'getDateInstance()'), ('DateFormat', 'created using', 'getTimeInstance()'), ('getDateInstance()', 'method of', 'DateFormat class'), ('getTimeInstance()', 'method of', 'DateFormat class')]"
You can use addBatch() and executeBatch() methods to execute batch updates.,"[('addBatch()', 'used for', 'execute batch updates'), ('executeBatch()', 'used for', 'execute batch updates')]"
The Java FileOutputStream class is a subclass of Java OutputStream meaning you can use a FileOutputStream as an OutputStream,"[('Java FileOutputStream', 'is a subclass of', 'Java OutputStream'), ('Java FileOutputStream', 'can be used as', 'OutputStream')]"
In the example above I passed it a FileInputStream connected to a file named myfile.zip,"[('FileInputStream', 'connected to', 'file'), ('file', 'named', 'myfile.zip')]"
java.util.logging.LogRecord Throwable is either passed as parameter to a Logger log method or set directly on a LogRecord which is then passed to a Logger,"[('Throwable', 'is passed as parameter to', 'Logger log method'), ('Throwable', 'is set directly on', 'LogRecord'), ('LogRecord', 'is passed to', 'Logger')]"
As you can see a new StringBuilder is created passing along the first String to its constructor and the second String to its append() method before finally calling the toString() method,"[('StringBuilder', 'created with', 'first String'), ('StringBuilder', 'append', 'second String')]"
A thread cannot call wait() notify() or notifyAll() without holding the lock on the object the method is called on,"[('thread', 'cannot call', 'wait()'), ('thread', 'cannot call', 'notify()'), ('thread', 'cannot call', 'notifyAll()'), ('thread', 'must hold lock on', 'object'), ('method', 'called on', 'object')]"
The AtomicReferenceArray in the java.util.concurrent.atomic package is an array of object references which can be updated atomically,"[('AtomicReferenceArray', 'part of', 'java.util.concurrent.atomic package'), ('AtomicReferenceArray', 'is a', 'array of object references'), ('array of object references', 'can be', 'updated atomically')]"
Spin locks and the methods wait() and notify() are covered in more detail in the text Thread Signaling,"[('Spin locks', 'covered in', 'Thread Signaling'), ('methods wait() and notify()', 'covered in', 'Thread Signaling')]"
The AtomicLong class is located in the java.util.concurrent.atomic package so the full class name is java.util.concurrent.atomic.AtomicLong,"[('AtomicLong', 'located in package', 'java.util.concurrent.atomic'), ('AtomicLong', 'full class name', 'java.util.concurrent.atomic.AtomicLong')]"
"The Arrays class contains a set of methods called binarySearch(). This method helps you perform a binary search in an array. The array must first be sorted. You can do so yourself, or via the Arrays.sort() method covered earlier in this text.","[('Arrays class', 'contains', 'methods'), ('methods', 'called', 'binarySearch()'), ('binarySearch()', 'helps you perform', 'binary search'), ('binary search', 'performed in', 'array'), ('array', 'must be', 'sorted')]"
The Java Reader (java.io.Reader) and Java Writer class (java.io.Writer) in Java IO work much like the InputStream and OutputStream with the exception that Reader and Writer are character based,"[('Java Reader', 'part of', 'java.io.Reader'), ('Java Writer', 'part of', 'java.io.Writer'), ('Java Reader', 'works like', 'InputStream'), ('Java Reader', 'works like', 'OutputStream'), ('Java Writer', 'works like', 'InputStream'), ('Java Writer', 'works like', 'OutputStream'), ('Java Reader', 'based on', 'character'), ('Java Writer', 'based on', 'character')]"
The methods getAndIncrement() and incrementAndGet() works like getAndAdd() and addAndGet() but just add 1 to the value of the AtomicInteger,"[('getAndIncrement()', 'works like', 'getAndAdd()'), ('incrementAndGet()', 'works like', 'addAndGet()'), ('getAndIncrement()', 'adds', '1'), ('incrementAndGet()', 'adds', '1'), ('getAndIncrement()', 'operates on', 'AtomicInteger'), ('incrementAndGet()', 'operates on', 'AtomicInteger')]"
"The tailSet() method works the same way as the headSet() method, except it returns all elements that are equal to or higher than the given parameter element","[('tailSet() method', 'works the same way as', 'headSet() method'), ('tailSet() method', 'returns', 'all elements that are equal to or higher than the given parameter element')]"
If a different thread calls wakeup() and no thread is currently blocked inside select() the next thread that calls select() will wake up immediately,"[('different thread', 'calls', 'wakeup()'), ('no thread', 'is currently blocked inside', 'select()'), ('next thread', 'calls', 'select()'), ('next thread', 'will wake up', 'immediately')]"
HashMap maps a key and a value. It does not guarantee any order of the elements stored internally in the map.TreeMap also maps a key and a value. Furthermore it guarantees the order in which keys or values are iterated - which is the sort order of the keys or values. ,
It is worth noting that both unlockRead() and unlockWrite() calls notifyAll() rather than notify(),"[('unlockRead()', 'calls', 'notifyAll()'), ('unlockWrite()', 'calls', 'notifyAll()')]"
Notice the call to update() and then doFinal() for these two blocks of data,"[('update()', 'called for', 'two blocks of data'), ('doFinal()', 'called for', 'two blocks of data')]"
You simply pass an offset and length to the update() and or doFinal() method,"[('offset', 'is passed to', 'update() method'), ('offset', 'is passed to', 'doFinal() method'), ('length', 'is passed to', 'update() method'), ('length', 'is passed to', 'doFinal() method')]"
The Java Collections addAll() method can add a variable number of elements to a Collection (typically either a List or a Set,"[('Java Collections', 'has method', 'addAll()'), ('addAll()', 'can add elements to', 'Collection'), ('Collection', 'typically is', 'List'), ('Collection', 'typically is', 'Set')]"
Once a thread is awakened it cannot exit the wait() call until the thread calling notify() has left its synchronized block,"[('thread', 'is awakened', 'thread'), ('thread', 'cannot exit', 'wait() call'), ('thread', 'calls', 'notify()'), ('thread', 'has left', 'synchronized block')]"
java.lang.ThreadLocal is possible to set an initial value for a Java ThreadLocal which will get used the first time get() is called before set() has been called with a new value,"[('java.lang.ThreadLocal', 'has capability', 'set an initial value'), ('initial value', 'used when', 'first time get() is called'), ('get()', 'called before', 'set()')]"
The Reader and Writer classes are stream oriented classes that enable a Java application to read and write streams of characters,"[('Reader', 'is a', 'stream oriented class'), ('Writer', 'is a', 'stream oriented class'), ('Reader', 'enables', 'Java application to read streams of characters'), ('Writer', 'enables', 'Java application to write streams of characters')]"
If the doNotify() method had called notifyAll() instead of notify() all waiting threads had been awakened and checked for signals in turn,"[('doNotify() method', 'calls', 'notifyAll()'), ('doNotify() method', 'calls', 'notify()'), ('notifyAll()', 'affects', 'all waiting threads'), ('all waiting threads', 'are', 'awakened'), ('all waiting threads', 'checked for', 'signals')]"
The run() method is what is executed by the thread after you call start(),"[('run() method', 'executed by', 'thread'), ('thread', 'executes', 'run() method'), ('you', 'call', 'start()')]"
You can convert Strings to uppercase and lowercase using the methods toUpperCase() and toLowerCase(),"[('Strings', 'can be converted to', 'uppercase'), ('Strings', 'can be converted to', 'lowercase'), ('toUpperCase()', 'method for', 'uppercase'), ('toLowerCase()', 'method for', 'lowercase')]"
To make the Calculator class thread safe you could have declared the getValue() setValue() and add() methods synchronized,"[('Calculator class', 'has method', 'getValue()'), ('Calculator class', 'has method', 'setValue()'), ('Calculator class', 'has method', 'add()'), ('getValue()', 'can be', 'synchronized'), ('setValue()', 'can be', 'synchronized'), ('add()', 'can be', 'synchronized'), ('synchronized', 'makes', 'Calculator class thread safe')]"
"If the call to take() happens before the call to release() the thread calling release() will still know that take() was called, because the signal is stored internally in the signal variable. ","[('call to take()', 'happens before', 'call to release()'), ('thread calling release()', 'will know', 'take() was called'), ('signal', 'is stored in', 'signal variable')]"
The getAndAdd() method does the same as the addAndGet() method except the getAndAdd() method returns the value of the element before a value is added to it,"[('getAndAdd()', 'does the same as', 'addAndGet()'), ('getAndAdd()', 'returns', 'value of the element before a value is added')]"
Adding and getting elements to a generic Map is done using the put() and get() methods just like you have always done,"[('Adding elements', 'done using', 'put() method'), ('Getting elements', 'done using', 'get() method')]"
When guarding a critical section with a ReadWriteLock and the critical section may throw exceptions it is important to call the readUnlock() and writeUnlock() methods from inside a finallyclause,"[('ReadWriteLock', 'guards', 'critical section'), ('critical section', 'may throw', 'exceptions'), ('readUnlock()', 'called from', 'finally clause'), ('writeUnlock()', 'called from', 'finally clause')]"
The FileChannel class has a transferTo() and a transferFrom() method which does this for you,"[('FileChannel', 'has method', 'transferTo()'), ('FileChannel', 'has method', 'transferFrom()')]"
To generate a KeyPair with a KeyPairGenerator you call the generateKeyPair() method,"[('KeyPairGenerator', 'method', 'generateKeyPair()'), ('generateKeyPair()', 'generates', 'KeyPair')]"
You can convert a OutputStream to a character based Writer using the Java OutputStreamWriter class,"[('OutputStream', 'can be converted to', 'Writer'), ('OutputStreamWriter', 'used for conversion', 'OutputStream to Writer'), ('OutputStreamWriter', 'part of', 'Java')]"
If you created your SortedSet with a Comparator you can obtain that Comparator via the SortedSet comparator() method,"[('SortedSet', 'created with', 'Comparator'), ('SortedSet', 'has method', 'comparator()'), ('comparator()', 'obtains', 'Comparator')]"
"In order to update the database you need to use a Statement. But, instead of calling the executeQuery() method, you call the executeUpdate() method.","[('You', 'need to use', 'Statement'), ('You', 'call', 'executeUpdate() method'), ('You', 'do not call', 'executeQuery() method'), ('Statement', 'used to update', 'database')]"
Instances of this class are used together with UDP DatagramSockets and normal Socket and ServerSocket,"[('Instances of this class', 'used with', 'UDP DatagramSockets'), ('Instances of this class', 'used with', 'normal Socket'), ('Instances of this class', 'used with', 'ServerSocket')]"
The Java InputStreamReader class java.io.InputStreamReader wraps a Java InputStream thereby turning the byte based InputStream into a character based Reader,"[('Java InputStreamReader', 'class', 'java.io.InputStreamReader'), ('java.io.InputStreamReader', 'wraps', 'Java InputStream'), ('Java InputStream', 'type', 'byte based'), ('java.io.InputStreamReader', 'turns', 'InputStream'), ('InputStream', 'type', 'character based'), ('character based', 'type', 'Reader')]"
The Math is located in the java.lang package and not in the java.math package,"[('The Math', 'located in', 'java.lang package'), ('The Math', 'not located in', 'java.math package')]"
The Java StringReader class enables you to turn an ordinary String into a Reader,"[('Java StringReader class', 'enables', 'turn an ordinary String into a Reader')]"
All elements inserted into the PriorityBlockingQueue must implement the java.lang.Comparable interface,"[('elements', 'inserted into', 'PriorityBlockingQueue'), ('elements', 'must implement', 'java.lang.Comparable interface')]"
As mentioned earlier the DataInputStream class is often used together with a DataOutputStream,"[('DataInputStream', 'is often used together with', 'DataOutputStream')]"
java.io.FileReader works much like the FileInputStream except the FileInputStream reads bytes whereas the FileReader reads characters,"[('java.io.FileReader', 'works like', 'FileInputStream'), ('FileInputStream', 'reads', 'bytes'), ('FileReader', 'reads', 'characters')]"
Deque.pollLast() is different than removeLast() which throws an exception if the Deque is empty,"[('Deque.pollLast()', 'is different than', 'removeLast()'), ('removeLast()', 'throws', 'exception'), ('Deque', 'is empty', 'throws exception')]"
The java.util.concurrent.locks package has the following implementations of the Lock interface,"[('java.util.concurrent.locks package', 'has implementation', 'Lock interface')]"
The methods start() and end() will give the indexes into the text where the found match starts and ends,"[('methods', 'include', 'start()'), ('methods', 'include', 'end()'), ('start()', 'gives', 'indexes where match starts'), ('end()', 'gives', 'indexes where match ends')]"
The tailSet() method works the same way as the headSet() method except it returns all elements that are equal to or higher than the given parameter element,"[('tailSet() method', 'works the same way as', 'headSet() method'), ('tailSet() method', 'returns elements', 'equal to or higher than the given parameter element')]"
A thread that calls wait() on any object becomes inactive until another thread calls notify() on that object,"[('Thread', 'calls', 'wait()'), ('Thread', 'becomes', 'inactive'), ('Another thread', 'calls', 'notify()'), ('wait()', 'on', 'object'), ('notify()', 'on', 'object')]"
Here is an example of listing all files in a directory via the Java File list() and listFiles() methods,"[('Java', 'provides method', 'File list()'), ('Java', 'provides method', 'listFiles()'), ('File list()', 'used for', 'listing all files in a directory'), ('listFiles()', 'used for', 'listing all files in a directory')]"
You can peek at the element at the head of a Queue without taking the element out of the Queue. This is done via the Queue element() or peek() methods.,"[('Queue', 'has method', 'element()'), ('Queue', 'has method', 'peek()'), ('element()', 'allows', 'peek at the element at the head of a Queue'), ('peek()', 'allows', 'peek at the element at the head of a Queue')]"
The methods Class.getField(String name) and Class.getFields() methods only return public fields so they wont work,"[('Class.getField(String name)', 'returns', 'public fields'), ('Class.getFields()', 'returns', 'public fields')]"
When you do so you can call connect() read() and write() in asynchronous mode,"[('you', 'can call', 'connect()'), ('you', 'can call', 'read()'), ('you', 'can call', 'write()'), ('connect()', 'mode', 'asynchronous'), ('read()', 'mode', 'asynchronous'), ('write()', 'mode', 'asynchronous')]"
"if you are writing a component that needs to read input from a stream, try to make our component depend on an InputStream, rather than any of it's subclasses (e.g. FileInputStream).","[('component', 'needs to read input from', 'stream'), ('component', 'depend on', 'InputStream'), ('InputStream', 'has subclass', 'FileInputStream')]"
For inexplicable reasons it is possible for threads to wake up even if notify() and notifyAll() has not been called,"[('threads', 'can wake up', 'even if notify() and notifyAll() has not been called')]"
The applyLocalizedPattern() does the same as applyPattern() except it interpretes the characters in the pattern according to the Locale the DecimalFormat was created with,"[('applyLocalizedPattern()', 'does the same as', 'applyPattern()'), ('applyLocalizedPattern()', 'interprets characters according to', 'Locale'), ('DecimalFormat', 'created with', 'Locale')]"
"You can access these two parts of the duration using the Duration methods:getNano(),getSeconds()","[('Duration', 'has method', 'getNano()'), ('Duration', 'has method', 'getSeconds()')]"
If you look back at the doSynchronized() method you will notice that the comment between lock() and unlock() states that the code in between these two calls take a long time to execute,"[('doSynchronized()', 'contains', 'comment'), ('comment', 'located between', 'lock()'), ('comment', 'located between', 'unlock()'), ('code', 'takes time to', 'execute')]"
When the thread calling lock() right after calls queueObject.wait() it will remain blocked until some other thread calls unlock() which may never happen,"[('thread', 'calls', 'lock()'), ('thread', 'calls', 'queueObject.wait()'), ('thread', 'remains blocked until', 'other thread calls unlock()')]"
Creating a pipe using Java IO is done via the PipedOutputStream and PipedInputStream classes. A PipedInputStream should be connected to a PipedOutputStream. The data written to the PipedOutputStream by one thread can be read from the connected PipedInputStream by another thread.,"[('Creating a pipe using Java IO', 'done via', 'PipedOutputStream'), ('Creating a pipe using Java IO', 'done via', 'PipedInputStream'), ('PipedInputStream', 'should be connected to', 'PipedOutputStream'), ('Data', 'written to', 'PipedOutputStream'), ('Data', 'can be read from', 'PipedInputStream'), ('PipedOutputStream', 'written by', 'one thread'), ('PipedInputStream', 'read by', 'another thread')]"
Once a thread is awakened it cannot exit the wait() call until the thread calling notify() has left its synchronized block. ,
"TreeSet also guarantees the order of the elements when iterated, but the order is the sorting order of the elements. In other words, the order in which the elements whould be sorted if you used a Collections.sort() on a List or array containing these elements. This order is determined either by their natural order (if they implement Comparable), or by a specific Comparator implementation","[('TreeSet', 'guarantees', 'order of the elements when iterated'), ('order of the elements when iterated', 'is', 'sorting order of the elements'), ('sorting order of the elements', 'is determined by', 'natural order'), ('sorting order of the elements', 'is determined by', 'specific Comparator implementation'), ('elements', 'implement', 'Comparable'), ('Collections.sort()', 'used on', 'List'), ('Collections.sort()', 'used on', 'array')]"
"You can also obtain an Iterator from many of the Java Collection data structures, e.g. a List, Set, Map, Queue, Deque or Map.","[('Iterator', 'can be obtained from', 'Java Collection data structures'), ('Java Collection data structures', 'includes', 'List'), ('Java Collection data structures', 'includes', 'Set'), ('Java Collection data structures', 'includes', 'Map'), ('Java Collection data structures', 'includes', 'Queue'), ('Java Collection data structures', 'includes', 'Deque'), ('Java Collection data structures', 'includes', 'Map')]"
Instead the critical section is guarded by the lock.lock() and lock.unlock() calls,"[('critical section', 'guarded by', 'lock.lock()'), ('critical section', 'guarded by', 'lock.unlock()')]"
The methods mark() and reset() methods are typically used when implementing parsers,"[('mark()', 'used in', 'implementing parsers'), ('reset()', 'used in', 'implementing parsers')]"
Once you have obtained a Field reference you can get and set its values using the Field.get() and Field.set()methods like this,"[('Field', 'has method', 'get()'), ('Field', 'has method', 'set()'), ('Field reference', 'allows', 'get()'), ('Field reference', 'allows', 'set()')]"
The poll() and remove() both removes the first element in the Queue,"[('poll()', 'removes', 'first element in the Queue'), ('remove()', 'removes', 'first element in the Queue')]"
Any other thread calling lock() will be blocked until the thread that locked the lock calls unlock(),"[('Thread', 'calls', 'lock()'), ('Thread', 'blocked until', 'thread that locked the lock calls unlock()')]"
The java.text.DateFormat class is used to format dates as strings according to a specific Locale,"[('java.text.DateFormat', 'used to', 'format dates as strings'), ('format dates as strings', 'according to', 'specific Locale')]"
The InputStream class has two methods called mark() and reset() which subclasses of InputStream may or may not support,"[('InputStream', 'has method', 'mark()'), ('InputStream', 'has method', 'reset()'), ('mark()', 'may be supported by', 'subclasses of InputStream'), ('reset()', 'may be supported by', 'subclasses of InputStream')]"
java.nio.channels.Selector is not the Channel that pushes the data into the Selector and from there into the component even if that is what the above diagram suggests,"[('java.nio.channels.Selector', 'is not', 'Channel'), ('Channel', 'pushes data into', 'java.nio.channels.Selector'), ('java.nio.channels.Selector', 'pushes data into', 'component')]"
When connected you can also use the read() and write() method as if you were using a traditional channel,"[('read()', 'method of', 'connected'), ('write()', 'method of', 'connected'), ('connected', 'used as', 'traditional channel')]"
"The mark() sets a mark internally in the InputStream which marks the point in the stream to which data has been read so far. The code using the InputStream can then continue reading data from it. If the code using the InputStream wants to go back to the point in the stream where the mark was set, the code calls reset() on the InputStream. ","[('mark()', 'sets', 'mark'), ('mark', 'located in', 'InputStream'), ('InputStream', 'used by', 'code'), ('code', 'reads data from', 'InputStream'), ('code', 'calls', 'reset()'), ('reset()', 'called on', 'InputStream'), ('mark', 'point in stream', 'data has been read so far')]"
These two types of tasks are represented by the RecursiveAction and RecursiveTask classes,"[('RecursiveAction', 'represents', 'type of task'), ('RecursiveTask', 'represents', 'type of task')]"
The java.util.concurrent package has the following implementations of the BlockingQueue interface,"[('java.util.concurrent package', 'has implementation', 'BlockingQueue interface')]"
If the objects in the Java List do not implement the Comparable interface or if you want to sort the objects in another order than their compare() implementation then you need to use a Comparator implementation (java.util.Comparator),"[('objects in the Java List', 'do not implement', 'Comparable interface'), ('you', 'want to sort', 'objects in another order'), ('you', 'need to use', 'Comparator implementation'), ('Comparator implementation', 'located in', 'java.util.Comparator')]"
The Java SimpleDateFormat class is also capable of formatting a Date object into a StringBuffer instead of returning an individual String with the date formatted,"[('Java SimpleDateFormat class', 'capable of formatting', 'Date object'), ('Java SimpleDateFormat class', 'formats into', 'StringBuffer'), ('Java SimpleDateFormat class', 'does not return', 'individual String'), ('Java SimpleDateFormat class', 'formats', 'date')]"
If the markSupported() method returns false then mark() and reset() are not supported,"[('markSupported() method', 'returns', 'false'), ('mark() and reset()', 'are not supported', 'if markSupported() method returns false')]"
The Matcher replaceAll() and replaceFirst() methods can be used to replace parts of the string the Matcher is searching through,"[('Matcher', 'has method', 'replaceAll()'), ('Matcher', 'has method', 'replaceFirst()'), ('replaceAll()', 'used to', 'replace parts of the string'), ('replaceFirst()', 'used to', 'replace parts of the string'), ('Matcher', 'searches through', 'string')]"
In that way the PrintWriter is a bit different from other Writer subclasses which tend to have mostly constructors that can take other Writer instances as parameters (except for a few like OutputStreamWriter),"[('PrintWriter', 'is a subclass of', 'Writer'), ('Writer', 'has subclass', 'PrintWriter'), ('Writer', 'has constructor', 'other Writer instances'), ('OutputStreamWriter', 'is a subclass of', 'Writer'), ('Writer', 'has subclass', 'OutputStreamWriter')]"
The reduce() method can be combined with the filter() method too,"[('reduce() method', 'can be combined with', 'filter() method')]"
In case you prefer to use Java NIO instead of Java Networking (standard API) then you can also use a ServerSocketChannel instead of the java.net.ServerSocket,"[('Java NIO', 'alternative to', 'Java Networking'), ('Java Networking', 'standard API', 'Java'), ('ServerSocketChannel', 'alternative to', 'java.net.ServerSocket')]"
The problem is that since the doNotify() call only calls notify() and not notifyAll() only one thread is awakened even if 4 threads are waiting on the same string instance (the empty string),"[('doNotify() call', 'calls', 'notify()'), ('doNotify() call', 'does not call', 'notifyAll()'), ('one thread', 'is awakened', 'doNotify() call'), ('4 threads', 'are waiting on', 'the same string instance'), ('the same string instance', 'is', 'the empty string')]"
You can convert a FileOutputStream to a character based Writer using the Java OutputStreamWriter class,"[('FileOutputStream', 'can be converted to', 'Writer'), ('OutputStreamWriter', 'used for conversion', 'FileOutputStream to Writer'), ('OutputStreamWriter', 'part of', 'Java')]"
The channel returned by the SelectionKey.channel() method should be cast to the channel you need to work with a ServerSocketChannel or SocketChannel etc,"[('SelectionKey.channel()', 'returns', 'channel'), ('channel', 'cast to', 'ServerSocketChannel'), ('channel', 'cast to', 'SocketChannel')]"
java.io.Writer works just like combining the Reader with InputStream or the Writer with OutputStream,"[('java.io.Writer', 'works like', 'Reader'), ('java.io.Writer', 'works like', 'InputStream'), ('java.io.Writer', 'works like', 'Writer'), ('java.io.Writer', 'works like', 'OutputStream')]"
Object.wait(long timeout) means that the majority of the time waited to be able to lock the lock and enter the critical section is spent waiting in the wait() call inside the lock() method not being blocked trying to enter the lock() method,"[('Object.wait(long timeout)', 'means', 'majority of the time waited to lock the lock and enter the critical section is spent waiting in the wait() call inside the lock() method'), ('majority of the time waited to lock the lock and enter the critical section is spent waiting in the wait() call inside the lock() method', 'not being blocked', 'trying to enter the lock() method')]"
Remember that even if the 4 threads call wait() and notify() on the same shared string instance the signals from the doWait() and doNotify() calls are stored individually in the two MyWaitNotify instances,"[('4 threads', 'call', 'wait()'), ('4 threads', 'call', 'notify()'), ('wait()', 'called on', 'shared string instance'), ('notify()', 'called on', 'shared string instance'), ('signals', 'stored in', 'doWait()'), ('signals', 'stored in', 'doNotify()'), ('signals', 'stored individually in', 'two MyWaitNotify instances')]"
The rest of the components like Pipe and FileLock are merely utility classes to be used in conjunction with the three core components,"[('Pipe', 'is a', 'utility class'), ('FileLock', 'is a', 'utility class'), ('Pipe', 'used in conjunction with', 'three core components'), ('FileLock', 'used in conjunction with', 'three core components')]"
java.io.PrintStream example first creates a PrintStream which is connected to an OutputStream,"[('java.io.PrintStream', 'creates', 'PrintStream'), ('PrintStream', 'connected to', 'OutputStream')]"
"If the Deque is empty, pollLast() returns null. This is different than removeLast() which throws an exception if the Deque is empty.","[('pollLast()', 'returns', nan), ('removeLast()', 'throws', 'exception'), ('Deque', 'is empty', 'pollLast()'), ('Deque', 'is empty', 'removeLast()')]"
The Map computeIfAbsent() method works similarly to the compute() method but the lambda expression is only called if no entry exists already for the given key,"[('Map computeIfAbsent() method', 'works similarly to', 'compute() method'), ('lambda expression', 'is only called if', 'no entry exists already for the given key')]"
You can get and set the nanoseconds using the getNanos() and setNanos(),"[('getNanos()', 'can get', 'nanoseconds'), ('setNanos()', 'can set', 'nanoseconds')]"
This OutputStream write() example first creates a FileOutputStream to which the data will be written. Then the example enters a while loop. The condition to exit the while loop is the return value of the method hasMoreData().,"[('OutputStream', 'has method', 'write()'), ('write()', 'writes to', 'FileOutputStream'), ('FileOutputStream', 'receives data from', 'write()'), ('example', 'creates', 'FileOutputStream'), ('example', 'enters', 'while loop'), ('while loop', 'exit condition', 'return value of hasMoreData()'), ('hasMoreData()', 'returns', 'value')]"
Since the BufferedWriter collects the characters written internally in a buffer before writing them to the underlying Writer the speedup is not as noticeable as with other Writer classes (that do not use buffering),"[('BufferedWriter', 'collects', 'characters'), ('BufferedWriter', 'writes to', 'underlying Writer'), ('BufferedWriter', 'provides', 'speedup'), ('BufferedWriter', 'uses', 'buffering'), ('other Writer classes', 'do not use', 'buffering')]"
The Java compiler then generates the corresponding fields getter methods and a hashCode() and equals() method,"[('Java compiler', 'generates', 'corresponding fields getter methods'), ('Java compiler', 'generates', 'hashCode() method'), ('Java compiler', 'generates', 'equals() method')]"
The bigger the result String grows the longer it takes to copy the characters from it into a new StringBuilder and again copy the characters from the StringBuilder into the temporary String created by the toString() method,"[('result String', 'grows', 'bigger'), ('copy', 'takes longer', 'result String'), ('characters', 'copied from', 'result String'), ('characters', 'copied into', 'new StringBuilder'), ('characters', 'copied from', 'StringBuilder'), ('characters', 'copied into', 'temporary String'), ('temporary String', 'created by', 'toString() method')]"
"Instead of calling the stop() method you will have to implement your thread code so it can be stopped, you can implements Runnable which contains an extra method called doStop() which signals to the Runnable to stop.","[('Runnable', 'contains method', 'doStop()'), ('doStop()', 'signals to', 'Runnable')]"
The logp() methods work like the log() methods except each method take an extra two parameters The sourceClass and sourceMethod parameter,"[('logp() methods', 'work like', 'log() methods'), ('logp() methods', 'take extra parameters', 'sourceClass'), ('logp() methods', 'take extra parameters', 'sourceMethod')]"
But since the thread waiting in lock() has not yet called queueObject.wait() the call to queueObject.notify() passes into oblivion,"[('thread', 'waiting in', 'lock()'), ('thread', 'has not yet called', 'queueObject.wait()'), ('call to', 'passes into', 'oblivion'), ('queueObject.notify()', 'passes into', 'oblivion')]"
It is possible to compare two buffers using equals() and compareTo(),"[('equals()', 'used to compare', 'two buffers'), ('compareTo()', 'used to compare', 'two buffers')]"
The names take() and release() may seem a bit odd when using a semaphore for signaling,"[('take()', 'used for', 'semaphore signaling'), ('release()', 'used for', 'semaphore signaling')]"
If you need to read and write the date and time to a database use the java.sql.Date and java.sql.Timestamp classes,"[('java.sql.Date', 'used for', 'read and write date and time to a database'), ('java.sql.Timestamp', 'used for', 'read and write date and time to a database')]"
Since PipedOutputStream is a subclass of OutputStream PipedOutputStream has the same basic methods and use patterns as an OutputStream,"[('PipedOutputStream', 'subclass of', 'OutputStream'), ('PipedOutputStream', 'has methods and use patterns as', 'OutputStream')]"
In the following sections I will explain how to use the ReentrantLock class as a Lock,"[('ReentrantLock class', 'used as', 'Lock')]"
In contrast to the signaling use case the methods take() and release() are now called by the same thread,"[('methods take() and release()', 'called by', 'the same thread')]"
The methods notify() and notifyAll() do not save the method calls to them in case no threads are waiting when they are called,"[('methods notify()', 'do not save', 'method calls'), ('methods notifyAll()', 'do not save', 'method calls'), ('threads', 'are waiting', 'when they are called')]"
The Matcher appendReplacement() and appendTail() methods are used to replace string tokens in an input text and append the resulting string to a StringBuffer,"[('Matcher', 'has method', 'appendReplacement()'), ('Matcher', 'has method', 'appendTail()'), ('appendReplacement()', 'used to', 'replace string tokens'), ('appendTail()', 'used to', 'append resulting string'), ('resulting string', 'appended to', 'StringBuffer')]"
The Java BufferedReader class is a subclass of the Java Reader class so you can use a BufferedReader anywhere a Reader is required,"[('Java BufferedReader class', 'is a subclass of', 'Java Reader class'), ('Java BufferedReader class', 'can be used anywhere', 'Reader is required')]"
You can convert a Java Set to a Java List by creating a List and calling its addAll() method passing the Set as parameter to the addAll() method,"[('Java Set', 'can be converted to', 'Java List'), ('Java List', 'created by', 'creating a List'), ('addAll() method', 'called by', 'Java List'), ('Set', 'passed as parameter to', 'addAll() method')]"
The add() and offer() methods differ in how the behave if the Queue is full so no more elements can be added,"[('add()', 'differs in behavior from', 'offer()'), ('offer()', 'differs in behavior from', 'add()'), ('Queue', 'can be', 'full'), ('elements', 'can be added to', 'Queue')]"
The Collections binarySearch() method can search a Java List for an element using a binary search algorithm. The List must be sorted in ascending order before you search it using binarySearch() .,"[('Collections binarySearch() method', 'can search', 'Java List'), ('Collections binarySearch() method', 'uses', 'binary search algorithm'), ('Java List', 'must be', 'sorted in ascending order')]"
If unlockWrite() was not called from inside a finallyclause and an exception was thrown from the critical section the ReadWriteLock would remain write locked forever causing all threads calling lockRead() or lockWrite() on that ReadWriteLock instance to halt indefinately,"[('unlockWrite()', 'not called from', 'finally clause'), ('exception', 'thrown from', 'critical section'), ('ReadWriteLock', 'would remain', 'write locked forever'), ('threads', 'calling', 'lockRead()'), ('threads', 'calling', 'lockWrite()'), ('threads', 'to halt', 'indefinitely'), ('lockRead()', 'called on', 'ReadWriteLock instance'), ('lockWrite()', 'called on', 'ReadWriteLock instance')]"
Third the characters written to the StringWriter are obtained via the two methods toString() and getBuffer(),"[('characters', 'written to', 'StringWriter'), ('characters', 'obtained via', 'toString()'), ('characters', 'obtained via', 'getBuffer()')]"
The decrementAndGet() subtracts 1 from the AtomicInteger value and returns its value after the subtraction. The getAndDecrement() also subtracts 1 from the AtomicInteger value but returns the value the AtomicInteger had before the subtraction.,"[('decrementAndGet()', 'subtracts', '1'), ('decrementAndGet()', 'operates on', 'AtomicInteger value'), ('decrementAndGet()', 'returns', 'value after subtraction'), ('getAndDecrement()', 'subtracts', '1'), ('getAndDecrement()', 'operates on', 'AtomicInteger value'), ('getAndDecrement()', 'returns', 'value before subtraction')]"
"If the Deque is empty, removeLast() will throw an exception. This is different from pollLast() which returns null if the Deque is empty.","[('removeLast()', 'throws', 'exception'), ('pollLast()', 'returns', nan), ('pollLast()', 'condition', 'Deque is empty'), ('removeLast()', 'condition', 'Deque is empty')]"
You may be familiar with these two wellknown PrintStream instances in Java System.out and System.err,"[('System.out', 'instance of', 'PrintStream'), ('System.err', 'instance of', 'PrintStream'), ('PrintStream', 'used in', 'Java')]"
"If adding the element fails, for instance if the Deque is full, the push() method will throw an exception. This is similar to how the addFirst() method works.","[('push() method', 'throws', 'exception'), ('Deque', 'can be', 'full'), ('addFirst() method', 'works similar to', 'push() method')]"
Finally you can access the localized values in the ResourceBundle via its different getString() and getObject() etc,"[('ResourceBundle', 'provides method', 'getString()'), ('ResourceBundle', 'provides method', 'getObject()'), ('getString()', 'accesses', 'localized values'), ('getObject()', 'accesses', 'localized values')]"
"The tailMap() method is similar to the headMap() method, except that tailMap() returns all elements that are equal to or higher than the given parameter element. ","[('tailMap()', 'is similar to', 'headMap()'), ('tailMap()', 'returns', 'all elements equal to or higher than the given parameter element')]"
That you would not call wait() and notify() on an internal monitor object but rather on the This is probably true,"[('you', 'would not call', 'wait()'), ('you', 'would not call', 'notify()'), ('wait()', 'called on', 'internal monitor object'), ('notify()', 'called on', 'internal monitor object')]"
You can parse a String into a java.util.Date instance using the parse() method of the SimpleDateFormat instance,"[('String', 'can be parsed into', 'java.util.Date instance'), ('parse() method', 'is used by', 'SimpleDateFormat instance'), ('SimpleDateFormat instance', 'uses', 'parse() method')]"
"If the Deque is empty, peekFirst() returns null. This is similar to how peek() works","[('Deque', 'is empty', 'peekFirst() returns null'), ('peekFirst()', 'is similar to', 'peek()')]"
When creating and starting a thread a common mistake is to call the run() method of the Thread instead of start() like this,"[('creating and starting a thread', 'common mistake', 'call the run() method of the Thread instead of start()')]"
java.util.logging.Handler is not a Filter even though it has the same effect,"[('java.util.logging.Handler', 'is not a', 'Filter'), ('java.util.logging.Handler', 'has effect', 'same as Filter')]"
The Java PrintStream class contains the powerful format() and printf() methods (they do exactly the same but the name printf is more familiar to Cprogrammers),"[('Java PrintStream class', 'contains', 'format() method'), ('Java PrintStream class', 'contains', 'printf() method'), ('format() method', 'is equivalent to', 'printf() method'), ('printf() method', 'is more familiar to', 'C programmers')]"
java.util.TreeSet Comparator will then decide the ordering of the elements in the TreeSet,"[('java.util.TreeSet', 'uses', 'Comparator'), ('Comparator', 'decides ordering of elements in', 'TreeSet')]"
Exactly how to handle the calls to commit() and or rollback() is covered in the JDBC Transactions Tutorial,"[('commit()', 'covered in', 'JDBC Transactions Tutorial'), ('rollback()', 'covered in', 'JDBC Transactions Tutorial')]"
You may be tempted then to always call notifyAll() instead notify() but this is a bad idea performance wise,"[('You', 'may be tempted to', 'always call notifyAll()'), ('always call notifyAll()', 'instead of', 'notify()'), ('calling notifyAll()', 'is a bad idea', 'performance wise')]"
The File class contains the method mkdir() and mkdirs() for that purpose,"[('File class', 'contains method', 'mkdir()'), ('File class', 'contains method', 'mkdirs()')]"
The lock() method locks the Lock instance so that all threads calling lock() are blocked until unlock() is executed,"[('lock() method', 'locks', 'Lock instance'), ('threads', 'are blocked until', 'unlock() is executed')]"
The call to read() reads a character from the PushbackReader just like from any other Reader,"[('read()', 'reads', 'character'), ('character', 'from', 'PushbackReader'), ('PushbackReader', 'is a type of', 'Reader')]"
java.io.BufferedInputStream is typically much faster than reading a single byte at a time from an InputStream especially for disk access and larger data amounts,"[('java.io.BufferedInputStream', 'faster than', 'reading a single byte at a time from an InputStream'), ('java.io.BufferedInputStream', 'used for', 'disk access'), ('java.io.BufferedInputStream', 'used for', 'larger data amounts')]"
Even though the Java Networking APIs enable you to open and close network connections via sockets all communication happens via the Java IO classes InputStream and OutputStream,"[('Java Networking APIs', 'enable', 'open and close network connections'), ('network connections', 'via', 'sockets'), ('communication', 'happens via', 'Java IO classes'), ('Java IO classes', 'include', 'InputStream'), ('Java IO classes', 'include', 'OutputStream')]"
The tailMap() method is similar to the headMap() method except that tailMap() returns all elements that are equal to or higher than the given parameter element,"[('tailMap()', 'is similar to', 'headMap()'), ('tailMap()', 'returns', 'all elements that are equal to or higher than the given parameter element')]"
Again here the first() and next() methods return the unicode index of the found word boundary,"[('first()', 'returns', 'unicode index'), ('next()', 'returns', 'unicode index'), ('unicode index', 'of', 'found word boundary')]"
"The `getAndIncrement()` method does the same as the `incrementAndGet()` method, except the `getAndIncrement()` method returns the value of the element *before* it is incremented.","[('getAndIncrement()', 'does the same as', 'incrementAndGet()'), ('getAndIncrement()', 'returns', 'value of the element before it is incremented')]"
When creating and starting a thread a common mistake is to call the run() method of the Thread instead of start(),"[('creating and starting a thread', 'common mistake', 'call the run() method of the Thread instead of start()')]"
Obviously if the input parameter to contains() is null the contains() method will not use the equals() method to compare against each element but rather use the == operator,"[('input parameter', 'is', nan), ('contains() method', 'does not use', 'equals() method'), ('contains() method', 'uses', '== operator')]"
Thus you can use the return values of start() and end() inside a String.substring() call,"[('start()', 'return value used in', 'String.substring()'), ('end()', 'return value used in', 'String.substring()')]"
The PrintWriter class has all the same methods as the PrintStream except for the methods to write raw bytes,"[('PrintWriter', 'has methods', 'PrintStream'), ('PrintWriter', 'lacks methods', 'write raw bytes')]"
"The Java SortedMap interface, java.util.SortedMap, is a subtype of the java.util.Map interface, with the addition that the elements stored in a Java SortedMap map are sorted internally. This means you can iterate the elements stored in a SortedMap in the sort order.","[('Java SortedMap interface', 'subtype of', 'java.util.Map interface'), ('java.util.SortedMap', 'subtype of', 'java.util.Map interface'), ('elements', 'stored in', 'Java SortedMap'), ('elements', 'sorted internally in', 'Java SortedMap'), ('elements', 'iterated in', 'sort order')]"
Similarly the compareTo() method should throw a ClassCastException if the input parameter is not of the same class as the class of the object compareTo() is called on,"[('compareTo() method', 'should throw', 'ClassCastException'), ('input parameter', 'is not of the same class as', 'class of the object compareTo() is called on')]"
The class java.lang.Object defines three methods wait() notify() and notifyAll() to facilitate this,"[('java.lang.Object', 'defines method', 'wait()'), ('java.lang.Object', 'defines method', 'notify()'), ('java.lang.Object', 'defines method', 'notifyAll()')]"
Both Java File and FileChannel works but in case you want a pure Java NIO solution use the Java NIO FileChannel class,"[('Java File', 'works with', 'FileChannel'), ('Java NIO', 'provides', 'FileChannel'), ('Java NIO FileChannel class', 'is a', 'pure Java NIO solution')]"
The methods getAndIncrement() and incrementAndGet() works like getAndAdd() and addAndGet() but just add 1 to the value of the AtomicLong,"[('getAndIncrement()', 'works like', 'getAndAdd()'), ('incrementAndGet()', 'works like', 'addAndGet()'), ('getAndIncrement()', 'adds', '1'), ('incrementAndGet()', 'adds', '1'), ('getAndAdd()', 'adds', 'value of the AtomicLong'), ('addAndGet()', 'adds', 'value of the AtomicLong')]"
"celingEntry(), floorEntry(), higherEntry(), lowerEntry(),The NavigableMap also has methods to get the entry for a given key, rather than the key itself. These methods behave like the ceilingKey() etc. methods, except they return a Map.Entry instead of the key object itself.","[('NavigableMap', 'has method', 'ceilingEntry()'), ('NavigableMap', 'has method', 'floorEntry()'), ('NavigableMap', 'has method', 'higherEntry()'), ('NavigableMap', 'has method', 'lowerEntry()'), ('NavigableMap', 'has method', 'ceilingKey()'), ('ceilingEntry()', 'returns', 'Map.Entry'), ('floorEntry()', 'returns', 'Map.Entry'), ('higherEntry()', 'returns', 'Map.Entry'), ('lowerEntry()', 'returns', 'Map.Entry')]"
The Java GZIPOutputStream class (java.util.zip.GZIPOutStream) can be used to GZIP compress data and write it to an OutputStream,"[('Java GZIPOutputStream class', 'can be used to', 'GZIP compress data'), ('Java GZIPOutputStream class', 'write to', 'OutputStream')]"
Object.wait(long timeout) allows other threads to call wait() or notify() too since these methods must be called from inside a synchronized block,"[('Object.wait(long timeout)', 'allows', 'other threads'), ('other threads', 'can call', 'wait()'), ('other threads', 'can call', 'notify()'), ('wait()', 'must be called from inside', 'synchronized block'), ('notify()', 'must be called from inside', 'synchronized block')]"
The java.util.TimeZone class is used in conjunction with the java.util.Calendar class,"[('java.util.TimeZone', 'used in conjunction with', 'java.util.Calendar')]"
You do so by calling the Cipher update() or doFinal() methods,"[('You', 'perform action by calling', 'Cipher update()'), ('You', 'perform action by calling', 'doFinal() methods')]"
The BlockingDeque interface in the java.util.concurrent class represents a deque which is thread safe to put into and take instances from,"[('BlockingDeque', 'part of', 'java.util.concurrent'), ('BlockingDeque', 'represents', 'deque'), ('BlockingDeque', 'is', 'thread safe')]"
Here are two examples of taking an element from a Java Queue using its poll() and remove() methods,"[('Java Queue', 'has method', 'poll()'), ('Java Queue', 'has method', 'remove()'), ('poll()', 'used for', 'taking an element from a Java Queue'), ('remove()', 'used for', 'taking an element from a Java Queue')]"
If you need an integer value use the round() floor() or ceil() method,"[('round()', 'used for', 'integer value'), ('floor()', 'used for', 'integer value'), ('ceil()', 'used for', 'integer value')]"
Notice how it is possible to change that reference through both the setValue() and add() methods,"[('reference', 'can be changed through', 'setValue() method'), ('reference', 'can be changed through', 'add() method')]"
a given date is or convert dates and times between time zones use the java.util.Calendar and java.util.GregorianCalendar classes,"[('java.util.Calendar', 'used for', 'convert dates and times between time zones'), ('java.util.GregorianCalendar', 'used for', 'convert dates and times between time zones')]"
If the call to take() happens before the call to release() the thread calling release() will still know that take() was called because the signal is stored internally in the signal variable,"[('call to take()', 'happens before', 'call to release()'), ('thread calling release()', 'will know', 'take() was called'), ('signal', 'is stored in', 'signal variable')]"
The compareAndSet() method can compare the reference stored in the AtomicReference instance with an expected reference and if they two references are the same (not equal as in equals() but same as in ==) then a new reference can be set on the AtomicReference instance,"[('compareAndSet()', 'method of', 'AtomicReference'), ('compareAndSet()', 'compares', 'reference stored in AtomicReference'), ('compareAndSet()', 'compares with', 'expected reference'), ('compareAndSet()', 'sets', 'new reference on AtomicReference'), ('reference stored in AtomicReference', 'compared with', 'expected reference'), ('reference stored in AtomicReference', 'same as', 'expected reference'), ('new reference', 'set on', 'AtomicReference')]"
Anders Hejlsberg on checked vs. unchecked exceptions httpwww.artima.comintvhandcuffs.html James Gosling on checked exceptions httpwww.artima.comintvsolid.html Bill Venners on Exceptions httpwww.artima.cominterfacedesignexceptions.html Bruce Eckel on checked exceptions httpwww.artima.comintvtypingP.html Designing with Exceptions (Bill Venners www.artima.com) httpwww.artima.comdesigntechniquesdesexcept.html Effective Java (Joshua Bloch Addison Wesley 2001) Daniel Pietraru in favor of checked exceptions Exceptional Java Checked exceptions are priceless茂驴�?For everything else there is the RuntimeException,"[('Anders Hejlsberg', 'discusses', 'checked vs. unchecked exceptions'), ('James Gosling', 'discusses', 'checked exceptions'), ('Bill Venners', 'discusses', 'Exceptions'), ('Bruce Eckel', 'discusses', 'checked exceptions'), ('Bill Venners', 'writes', 'Designing with Exceptions'), ('Joshua Bloch', 'writes', 'Effective Java'), ('Effective Java', 'published by', 'Addison Wesley'), ('Effective Java', 'published in', '2001'), ('Daniel Pietraru', 'supports', 'checked exceptions'), ('Exceptional Java', 'supports', 'checked exceptions'), ('checked exceptions', 'described as', 'priceless'), ('RuntimeException', 'contrasted with', 'checked exceptions')]"
But the thread waiting in the lock() method will not leave that block until the isLocked is set to false and a monitorObject.notify() is executed as it happens in unlock(),"[('thread', 'waiting in', 'lock() method'), ('isLocked', 'set to', 'false'), ('monitorObject.notify()', 'executed in', 'unlock()')]"
As you saw in the previous section when you register a Channel with a Selector the register() method returns a SelectionKey objects,"[('register()', 'returns', 'SelectionKey objects'), ('Channel', 'register with', 'Selector')]"
By walking through all directories and deleting all files (inside visitFile()) in each directory and afterwards delete the directory itself (inside postVisitDirectory()) you can delete a directory with all subdirectories and files,"[('visitFile()', 'is a method in', 'deleting all files'), ('postVisitDirectory()', 'is a method in', 'delete the directory itself'), ('deleting all files', 'occurs in', 'each directory'), ('delete the directory itself', 'occurs after', 'deleting all files'), ('delete a directory', 'includes', 'all subdirectories and files')]"
The lower() method does the opposite of the higher() method meaning it returns the highest element that is less than (not equal to) the given parameter,"[('lower() method', 'does the opposite of', 'higher() method'), ('lower() method', 'returns', 'highest element less than given parameter')]"
In many cases though you can replace the use of the File class with use of the Path interface,"[('File class', 'can be replaced with', 'Path interface')]"
Once the Mac instance is initialized you can calculate a MAC from data by calling the update() and doFinal() method,"[('Mac instance', 'can calculate', 'MAC'), ('MAC', 'calculated from', 'data'), ('update()', 'method of', 'Mac instance'), ('doFinal()', 'method of', 'Mac instance')]"
Deque.offerFirst(E e) is different from the addFirst() method which will throw an exception is adding an element to the beginning of the Deque fails,"[('Deque.offerFirst(E e)', 'different from', 'addFirst() method'), ('addFirst() method', 'throws', 'exception'), ('addFirst() method', 'action', 'adding an element to the beginning of the Deque'), ('adding an element to the beginning of the Deque', 'fails', 'exception')]"
The main difference between the Runnable run() method and the Callable call() method is that the call() method can return an Object from the method call,"[('Runnable run() method', 'difference with', 'Callable call() method'), ('Callable call() method', 'can return', 'Object')]"
The toNanos() is different from the getNano() in that the getNano() only returns the part of the Duration which is less than one second,"[('toNanos()', 'is different from', 'getNano()'), ('getNano()', 'returns', 'part of the Duration'), ('part of the Duration', 'is less than', 'one second')]"
Collection.add(E e) is different from the offer() method which will return false if it cannot insert the element,"[('Collection.add(E e)', 'different from', 'offer() method'), ('offer() method', 'action', 'return false if it cannot insert the element')]"
To take an element from a Java Queue you can call either its poll() or remove() method,"[('Java Queue', 'method', 'poll()'), ('Java Queue', 'method', 'remove()'), ('poll()', 'action', 'take an element'), ('remove()', 'action', 'take an element')]"
java.util.TreeMap Comparator will then be used to sort the keys of the key value pairs stored in the SortedMap,"[('java.util.TreeMap', 'uses', 'Comparator'), ('Comparator', 'sorts', 'keys'), ('keys', 'belong to', 'key value pairs'), ('key value pairs', 'stored in', 'SortedMap')]"
If a thread calls lock() twice without calling unlock() in between the second call to lock() will block,"[('thread', 'calls', 'lock()'), ('thread', 'calls', 'lock()'), ('lock()', 'without calling', 'unlock()')]"
The start() call will return as soon as the thread is started. It will not wait until the run() method is done.,"[('start() call', 'returns', 'as soon as the thread is started'), ('start() call', 'does not wait', 'until the run() method is done')]"
"If the Deque is empty, peekFirst() returns null. This is similar to how peek() works, but the method name peekFirst() is a bit more saying about which end of the Deque you peek at.","[('Deque', 'method', 'peekFirst()'), ('Deque', 'method', 'peek()'), ('peekFirst()', 'returns', nan), ('peekFirst()', 'similar to', 'peek()'), ('peekFirst()', 'indicates', 'which end of the Deque you peek at')]"
If isLocked is true however the thread calling lock() is parked waiting in the monitorObject.wait() call,"[('isLocked', 'is', 'true'), ('thread', 'calls', 'lock()'), ('thread', 'is parked waiting in', 'monitorObject.wait() call')]"
The remove() method will use the o.equals() to decide if the object o passed as parameter matches a given element in the BlockingQueue.,"[('remove() method', 'uses', 'o.equals()'), ('object o', 'passed as', 'parameter'), ('object o', 'matches', 'given element'), ('given element', 'in', 'BlockingQueue')]"
"In general you can call the?markSupported()?method to find out if?mark()?and?reset()are supported on a given?InputStream?or not, but the?BufferedInputStream?supports them.","[('BufferedInputStream', 'supports', 'mark()'), ('BufferedInputStream', 'supports', 'reset()'), ('InputStream', 'method', 'markSupported()'), ('markSupported()', 'determines if supported on', 'InputStream'), ('mark()', 'determines if supported on', 'InputStream'), ('reset()', 'determines if supported on', 'InputStream')]"
If you compare the Lock and FairLock classes you will notice that there is somewhat more going on inside the lock() and unlock() in the FairLock class,"[('Lock', 'compared to', 'FairLock'), ('FairLock', 'contains method', 'lock()'), ('FairLock', 'contains method', 'unlock()')]"
The third variant of getConnection() takes a database URL and a Properties object as parameter,"[('getConnection()', 'has variant', 'third variant'), ('third variant', 'takes', 'database URL'), ('third variant', 'takes', 'Properties object')]"
"You can get the current line number from the?LineNumberReader?by calling the?getLineNumber()method. You can also set the current line number, should you need to, by calling the?setLineNumber()?method","[('LineNumberReader', 'has method', 'getLineNumber()'), ('LineNumberReader', 'has method', 'setLineNumber()')]"
Executing unlock() sets isLocked back to false and notifies (awakens) one of the threads waiting in the wait() call in the lock() method if any,"[('unlock()', 'sets', 'isLocked back to false'), ('unlock()', 'notifies', 'one of the threads waiting in the wait() call'), ('one of the threads waiting in the wait() call', 'located in', 'lock() method')]"
The SimpleDateFormat class does this via a version of the format() method that takes the Date StringBuffer and a FieldPosition instance as parameters,"[('SimpleDateFormat', 'has method', 'format()'), ('format()', 'takes parameter', 'Date StringBuffer'), ('format()', 'takes parameter', 'FieldPosition instance')]"
The getAndIncrement() method does the same as the incrementAndGet() method except the getAndIncrement() method returns the value of the element before it is incremented,"[('getAndIncrement()', 'does the same as', 'incrementAndGet()'), ('getAndIncrement()', 'returns', 'value of the element before it is incremented')]"
java.util.TreeMap Comparator will then be used to sort the keys of the key value pairs stored in the NavigableMap,"[('java.util.TreeMap', 'uses', 'Comparator'), ('Comparator', 'sorts', 'keys'), ('keys', 'belong to', 'key value pairs'), ('key value pairs', 'stored in', 'NavigableMap')]"
In other words the calling thread must call wait() or notify() from inside a synchronized block,"[('calling thread', 'must call', 'wait()'), ('calling thread', 'must call', 'notify()'), ('wait()', 'called from inside', 'synchronized block'), ('notify()', 'called from inside', 'synchronized block')]"
As you can see both the waiting and notifying thread calls wait() and notify() from within a synchronized block,"[('waiting thread', 'calls', 'wait()'), ('notifying thread', 'calls', 'notify()'), ('wait()', 'called from', 'synchronized block'), ('notify()', 'called from', 'synchronized block')]"
However unless you need to specify all these parameters explicitly for your ThreadPoolExecutor it is often easier to use one of the factory methods in the java.util.concurrent.Executors class as shown in the ExecutorService text,"[('ThreadPoolExecutor', 'has parameter', 'parameters'), ('java.util.concurrent.Executors', 'contains', 'factory methods'), ('factory methods', 'used in', 'ExecutorService text')]"
"You can choose between the following Deque implementations in the Java Collections API:java.util.LinkedList,java.util.ArrayDeque","[('Deque implementations', 'available in', 'Java Collections API'), ('Java Collections API', 'contains', 'java.util.LinkedList'), ('Java Collections API', 'contains', 'java.util.ArrayDeque')]"
Put shortly the thread waiting in lock() needs an unlock() call to execute successfully for it to exit lock() and the synchronized blocks inside it,"[('thread', 'waiting in', 'lock()'), ('thread', 'needs', 'unlock() call'), ('unlock() call', 'allows', 'thread to exit lock()'), ('thread', 'contains', 'synchronized blocks')]"
Java NIO has more classes and components than these but the Channel Buffer and Selector forms the core of the API in my opinion,"[('Java NIO', 'has component', 'Channel'), ('Java NIO', 'has component', 'Buffer'), ('Java NIO', 'has component', 'Selector'), ('Channel', 'part of', 'Java NIO'), ('Buffer', 'part of', 'Java NIO'), ('Selector', 'part of', 'Java NIO'), ('Channel', 'forms core of', 'Java NIO'), ('Buffer', 'forms core of', 'Java NIO'), ('Selector', 'forms core of', 'Java NIO')]"
The DateTimeFormatter is located in the java.time.format package so the fully qualified class name is java.time.format.DateTimeFormatter,"[('DateTimeFormatter', 'located in', 'java.time.format package'), ('java.time.format.DateTimeFormatter', 'is a', 'fully qualified class name')]"
The ceilingEntry() is thus similar to the ceilingKey() method except the ceilingKey() method only returns the key and ceilingKey() returns a Map.Entry object containing both the key and value,"[('ceilingEntry()', 'is similar to', 'ceilingKey() method'), ('ceilingKey() method', 'returns', 'key'), ('ceilingEntry()', 'returns', 'Map.Entry object'), ('Map.Entry object', 'contains', 'key'), ('Map.Entry object', 'contains', 'value')]"
"unless you need to specify all these parameters explicitly for your ThreadPoolExecutor, it is often easier to use one of the factory methods in the java.util.concurrent.Executors class","[('ThreadPoolExecutor', 'has parameter', 'parameters'), ('java.util.concurrent.Executors', 'contains', 'factory methods'), ('factory methods', 'used for', 'ThreadPoolExecutor')]"
Once the read operation has completed the data read into the ByteBuffer and then into a String and printed to System.out,"[('read operation', 'completes', 'data read into ByteBuffer'), ('data', 'read into', 'ByteBuffer'), ('ByteBuffer', 'converted into', 'String'), ('String', 'printed to', 'System.out')]"
javax.lang.model.util.Elements is possible to specify generic types for most (if not all) of the components in the Java Collections API,"[('javax.lang.model.util.Elements', 'related to', 'Java Collections API'), ('Java Collections API', 'contains', 'generic types')]"
The Java PrintWriter class contains the powerful format() and printf() methods,"[('Java PrintWriter class', 'contains', 'format() methods'), ('Java PrintWriter class', 'contains', 'printf() methods')]"
If an InputStream subclass supports the mark() and reset() methods then that subclass should override the markSupported() to return true,"[('InputStream subclass', 'supports', 'mark()'), ('InputStream subclass', 'supports', 'reset()'), ('InputStream subclass', 'should override', 'markSupported()'), ('markSupported()', 'should return', 'true')]"
Not until a thread has called release() will the thread calling take() be allowed to deliver its signal,"[('thread', 'calls', 'release()'), ('thread', 'calls', 'take()'), ('thread calling take()', 'allowed to', 'deliver its signal')]"
The poll() and remove() both removes the first element in the Queue. They differ in how they behave if the Queue is empty. The poll() method returns null if the Queue is empty. The remove() method throws an exception if the Queue is empty.,"[('poll()', 'removes', 'first element in the Queue'), ('remove()', 'removes', 'first element in the Queue'), ('poll()', 'returns', 'null if the Queue is empty'), ('remove()', 'throws', 'exception if the Queue is empty')]"
Notice how the execute() method will throw an IllegalStateException if execute() is called after stop() has been called,"[('execute()', 'throws', 'IllegalStateException'), ('execute()', 'called after', 'stop()')]"
The methods hashCode() and equals() play a distinct role in the objects you insert into Java collections,"[('hashCode()', 'plays a role in', 'objects'), ('equals()', 'plays a role in', 'objects'), ('objects', 'insert into', 'Java collections')]"
Notice the two synchronized blocks inside the set() and get() method,"[('synchronized blocks', 'located inside', 'set() method'), ('synchronized blocks', 'located inside', 'get() method')]"
Therefore if a thread calls notify() before the thread to signal has called wait() the signal will be missed by the waiting thread,"[('thread', 'calls', 'notify()'), ('thread to signal', 'has called', 'wait()'), ('signal', 'will be missed by', 'waiting thread')]"
"celingEntry(), floorEntry(), higherEntry(), lowerEntry(),These methods behave like the ceilingKey() etc. methods, except they return a Map.Entry instead of the key object itself.","[('ceilingEntry()', 'behaves like', 'ceilingKey()'), ('floorEntry()', 'behaves like', 'ceilingKey()'), ('higherEntry()', 'behaves like', 'ceilingKey()'), ('lowerEntry()', 'behaves like', 'ceilingKey()'), ('ceilingEntry()', 'returns', 'Map.Entry'), ('floorEntry()', 'returns', 'Map.Entry'), ('higherEntry()', 'returns', 'Map.Entry'), ('lowerEntry()', 'returns', 'Map.Entry')]"
By default the ConsoleHandler uses a SimpleFormatter to format the messages before writing them to System.err,"[('ConsoleHandler', 'uses', 'SimpleFormatter'), ('SimpleFormatter', 'formats', 'messages'), ('ConsoleHandler', 'writes to', 'System.err')]"
The hashCode() method of objects is used when you insert them into a HashTable HashMap or HashSet,"[('hashCode() method', 'used when inserting into', 'HashTable'), ('hashCode() method', 'used when inserting into', 'HashMap'), ('hashCode() method', 'used when inserting into', 'HashSet')]"
So as you can see a combination of the hashCode() and equals() methods are used when storing and when looking up objects in a hashtable,"[('hashCode()', 'used in', 'storing objects in a hashtable'), ('equals()', 'used in', 'storing objects in a hashtable'), ('hashCode()', 'used in', 'looking up objects in a hashtable'), ('equals()', 'used in', 'looking up objects in a hashtable')]"
Here is a modified version of MySignal called MyWaitNotify that uses wait() and notify(),"[('MyWaitNotify', 'is a modified version of', 'MySignal'), ('MyWaitNotify', 'uses', 'wait()'), ('MyWaitNotify', 'uses', 'notify()')]"
To set a new System stream use one of th emethods System.setIn() System.setOut() or System.setErr(),"[('System', 'has method', 'System.setIn()'), ('System', 'has method', 'System.setOut()'), ('System', 'has method', 'System.setErr()')]"
"The add() and offer() methods differ in how the behave if the Queue is full, so no more elements can be added. The add() method throws an exception in that case, whereas the offer() method just returns false.","[('add()', 'differs in behavior from', 'offer()'), ('Queue', 'can be', 'full'), ('add()', 'throws', 'exception'), ('offer()', 'returns', 'false')]"
Both the Pattern and Matcher classes are covered in detail in their own texts,"[('Pattern', 'covered in', 'own texts'), ('Matcher', 'covered in', 'own texts')]"
The Java Set interface as a method called removeAll() which removes all elements in the Set which are also present in another Collection,"[('Java Set interface', 'has method', 'removeAll()'), ('removeAll()', 'removes elements from', 'Set'), ('removeAll()', 'removes elements present in', 'another Collection')]"
The Map compute() method takes a key object and a lambda expression as parameters. The lambda expression must implement the java.util.function.BiFunction interface.,"[('Map compute() method', 'takes', 'key object'), ('Map compute() method', 'takes', 'lambda expression'), ('lambda expression', 'must implement', 'java.util.function.BiFunction interface')]"
java.text.CollationKey is faster than the stringwise comparison the RuleBasedCollator uses normally,"[('java.text.CollationKey', 'is faster than', 'stringwise comparison'), ('stringwise comparison', 'used by', 'RuleBasedCollator')]"
The ForkJoinPool located in the java.util.concurrent package so the full class name is java.util.concurrent.ForkJoinPool,"[('ForkJoinPool', 'located in', 'java.util.concurrent package'), ('ForkJoinPool', 'full class name', 'java.util.concurrent.ForkJoinPool')]"
Notice how notifyAll() is only called from enqueue() and dequeue() if the queue size is equal to the size bounds (0 or limit),"[('notifyAll()', 'called from', 'enqueue()'), ('notifyAll()', 'called from', 'dequeue()'), ('queue size', 'equal to', 'size bounds'), ('size bounds', 'includes', '0'), ('size bounds', 'includes', 'limit')]"
In other words you can add all elements from a List or Set into a List with addAll(),"[('List', 'can add elements from', 'List'), ('List', 'can add elements from', 'Set'), ('addAll()', 'used to add elements into', 'List')]"
Since only one thread is allowed to take the semaphore all other threads calling take() will be blocked until release() is called,"[('one thread', 'allowed to take', 'the semaphore'), ('all other threads', 'blocked until', 'release() is called')]"
The format() and printf() methods allow you to mix text and data in very advanced ways using a formatting string,"[('format()', 'allows', 'mix text and data'), ('printf()', 'allows', 'mix text and data'), ('format()', 'uses', 'formatting string'), ('printf()', 'uses', 'formatting string')]"
The Collections replaceAll() method uses the equals() method of each element to determine if the element is equal to the element to replace or not,"[('Collections replaceAll() method', 'uses', 'equals() method'), ('equals() method', 'determines', 'if element is equal to element to replace')]"
The call to unread() pushes a character back into the PushbackReader. The next time read() is called the pushed back characters will be read first. ,
java.sql.ResultSet ResultSet has 3 different columns (Name Age Gender) and 3 records with different values for each column,"[('java.sql.ResultSet', 'has columns', 'Name'), ('java.sql.ResultSet', 'has columns', 'Age'), ('java.sql.ResultSet', 'has columns', 'Gender'), ('java.sql.ResultSet', 'has records', '3')]"
First the ResourceBundle class will look for a ListResourceBundle and then for a PropertyResourceBundle,"[('ResourceBundle', 'will look for', 'ListResourceBundle'), ('ResourceBundle', 'will look for', 'PropertyResourceBundle')]"
The returned long value can be used to initialize java.util.Date java.sql.Date java.sql.Timestamp and java.util.GregorianCalendar objects,"[('long value', 'can be used to initialize', 'java.util.Date'), ('long value', 'can be used to initialize', 'java.sql.Date'), ('long value', 'can be used to initialize', 'java.sql.Timestamp'), ('long value', 'can be used to initialize', 'java.util.GregorianCalendar')]"
In fact the implementation of the ExecutorService interface present in the java.util.concurrent package is a thread pool implementation,"[('ExecutorService interface', 'present in', 'java.util.concurrent package'), ('ExecutorService interface', 'is a', 'thread pool implementation')]"
Notice how the Collections.sort() method now takes a java.util.Comparator as parameter in addition to the List,"[('Collections.sort() method', 'takes as parameter', 'java.util.Comparator'), ('Collections.sort() method', 'takes as parameter', 'List')]"
For instance ordinary debug trace logging calls to entering() and exiting() would be called at the beginning and end of a method call,"[('ordinary debug trace logging calls', 'related to', 'entering()'), ('ordinary debug trace logging calls', 'related to', 'exiting()'), ('entering()', 'occurs at', 'beginning of a method call'), ('exiting()', 'occurs at', 'end of a method call')]"
Each of the methods ceilingEntry() floorEntry() higherEntry() and lowerEntry() will be covered in the following sections,
java.text.SimpleDateFormat is not exactly clear how the FieldPosition instance is used,"[('java.text.SimpleDateFormat', 'unclear usage of', 'FieldPosition instance')]"
The LocalDate Java class is located in the java.time package so its fully qualified class name is java.time.LocalDate,"[('LocalDate', 'is a class in', 'java.time package'), ('LocalDate', 'fully qualified class name', 'java.time.LocalDate')]"
If there is no more data to read from the underlying Reader then the BufferedReader readLine() method will return null,"[('BufferedReader readLine() method', 'returns', nan), ('no more data', 'to read from', 'underlying Reader')]"
java.util.List is different from a Java Set where each element can occur only once,"[('java.util.List', 'is different from', 'Java Set'), ('Java Set', 'characteristic', 'each element can occur only once')]"
Deque.addLast(E e) is different from the offerLast() method which will return false if the element cannot be added to the Deque,"[('Deque.addLast(E e)', 'different from', 'offerLast() method'), ('offerLast() method', 'return', 'false'), ('element', 'cannot be added to', 'Deque')]"
Do not confuse this class with the java.util.Arrays class in the Java Collections suite which contains utility methods for sorting arrays converting them to collections etc,"[('this class', 'not to be confused with', 'java.util.Arrays class'), ('java.util.Arrays class', 'part of', 'Java Collections suite'), ('Java Collections suite', 'contains', 'utility methods'), ('utility methods', 'used for', 'sorting arrays'), ('utility methods', 'used for', 'converting arrays to collections')]"
You obtain a Collection of the values stored in a Map via the values() method,"[('Collection', 'obtained via', 'values() method'), ('values() method', 'operates on', 'Map'), ('Map', 'stores', 'values')]"
Unfortunately if an exception is thrown during the write() call in the example above that exception will cause the program flow to break before the close() method is called,"[('exception', 'thrown during', 'write() call'), ('exception', 'cause', 'program flow to break'), ('program flow', 'break before', 'close() method is called')]"
Being a subclass of Hashtable you can actually use the get() and put() method of the Hashtable class which allow the use of nonstring keys and values,"[('Hashtable', 'has subclass', 'Being'), ('Being', 'can use method', 'get()'), ('Being', 'can use method', 'put()'), ('get()', 'method of', 'Hashtable'), ('put()', 'method of', 'Hashtable'), ('Hashtable', 'allows use of', 'nonstring keys'), ('Hashtable', 'allows use of', 'nonstring values')]"
"A Java Properties instance clearly is as Hashtable, but it should not share the Hashtable interface. So - the ""Is a"" part of this rule should be interpreted as ""Should be usable as a"" instead. Using that formulation, Properties would not have been made a subclass of Hashtable, because Properties should not be usable as a Hashtable .",
"I mean, only the same, single thread is ever allowed to call inc(). Multiple threads can call count().","[('single thread', 'allowed to call', 'inc()'), ('multiple threads', 'can call', 'count()')]"
" If the Deque is empty, poll() returns null. This is different than remove() which throws an exception if the Deque is empty. ","[('poll()', 'returns', nan), ('remove()', 'throws', 'exception'), ('poll()', 'condition', 'Deque is empty'), ('remove()', 'condition', 'Deque is empty')]"
The peek() works like the element() method except it does not throw an exception if the Queue is empty. Instead it just returns null.,"[('peek()', 'works like', 'element() method'), ('peek()', 'does not throw', 'exception'), ('Queue', 'is empty', 'returns null')]"
Notice the doStop() and keepRunning() methods. The doStop() is intended to be called from another thread than the thread executing the MyRunnable's run() method. The keepRunning() method is called internally by the thread executing the MyRunnable's run() method. As long as doStop() has not been called the keepRunning() method will return true - meaning the thread executing the run() method will keep running.,"[('doStop()', 'is intended to be called from', 'another thread'), ('keepRunning()', 'is called internally by', ""the thread executing the MyRunnable's run() method""), ('doStop()', 'has not been called', 'keepRunning() method will return true'), ('thread', 'executes', ""MyRunnable's run() method""), ('thread', 'will keep running', 'as long as doStop() has not been called')]"
System.err works like System.out except it is normally only used to output error texts,"[('System.err', 'works like', 'System.out'), ('System.err', 'used to', 'output error texts')]"
To do so set the upper bound to 1 and have the call to take() and release() guard the critical section,"[('upper bound', 'set to', '1'), ('call to take()', 'guards', 'critical section'), ('call to release()', 'guards', 'critical section')]"
java.io.InputStream method is useful if you need to read all bytes from a file via a FileInputStream into a byte array,"[('java.io.InputStream method', 'useful for', 'reading all bytes from a file'), ('reading all bytes from a file', 'via', 'FileInputStream'), ('reading all bytes from a file', 'into', 'byte array')]"
Notice how the getMonth() and getDayOfWeek() methods return an enum instead of an int,"[('getMonth()', 'returns', 'enum'), ('getDayOfWeek()', 'returns', 'enum')]"
java.io.InputStreamReader example first creates a FileInputStream and then wraps it in an InputStreamReader,"[('java.io.InputStreamReader example', 'creates', 'FileInputStream'), ('java.io.InputStreamReader example', 'wraps', 'InputStreamReader')]"
Deque.offerLast(E e) is different from the addLast() method which will throw an exception is adding an element to the end of the Deque fails,"[('Deque.offerLast(E e)', 'different from', 'addLast() method'), ('addLast() method', 'throws', 'exception'), ('Deque.offerLast(E e)', 'adds element to end of', 'Deque'), ('addLast() method', 'adds element to end of', 'Deque')]"
Java has 3 streams called System.in System.out and System.err which are commonly used to provide input to and output from Java applications,"[('Java', 'has stream', 'System.in'), ('Java', 'has stream', 'System.out'), ('Java', 'has stream', 'System.err'), ('System.in', 'used for', 'provide input to Java applications'), ('System.out', 'used for', 'output from Java applications'), ('System.err', 'used for', 'output from Java applications')]"
To access a private field you will need to call the Class.getDeclaredField(String name) or Class.getDeclaredFields() method,"[('private field', 'access method', 'Class.getDeclaredField(String name)'), ('private field', 'access method', 'Class.getDeclaredFields()')]"
"If the Deque is empty, pollFirst() returns null. This is different than removeFirst() which throws an exception if the Deque is empty.","[('pollFirst()', 'returns', nan), ('removeFirst()', 'throws', 'exception'), ('Deque', 'is empty', 'pollFirst()'), ('Deque', 'is empty', 'removeFirst()')]"
Once you have opened a socket (network connection) though you read and write data to and from it via Java IO InputStream and OutputStream classes,"[('socket', 'is a', 'network connection'), ('you', 'open', 'socket'), ('you', 'read data from', 'socket'), ('you', 'write data to', 'socket'), ('Java IO InputStream', 'used for', 'reading data'), ('OutputStream classes', 'used for', 'writing data')]"
java.util.Set is different from a Java List where each element can occur more than once,"[('java.util.Set', 'different from', 'Java List'), ('Java List', 'allows', 'element to occur more than once')]"
Keep in mind that if some of the operations in the transaction fail you would most likely want to call the rollback() method instead of commit(),"[('operations', 'part of', 'transaction'), ('transaction', 'contains', 'operations'), ('operations', 'can fail', 'transaction'), ('rollback()', 'method of', 'transaction'), ('commit()', 'method of', 'transaction'), ('rollback()', 'alternative to', 'commit()')]"
The min() and max() methods return an Optional instance which has a get() method on which you use to obtain the value,"[('min() method', 'returns', 'Optional instance'), ('max() method', 'returns', 'Optional instance'), ('Optional instance', 'has method', 'get() method'), ('get() method', 'used to obtain', 'value')]"
Only one thread can execute inside any of the two add() and subtract() methods at any given time,"[('thread', 'can execute inside', 'add() method'), ('thread', 'can execute inside', 'subtract() method'), ('add() method', 'at any given time', 'one thread'), ('subtract() method', 'at any given time', 'one thread')]"
A Java Callable is different from a Runnable in that the Runnable interface run() method does not return a value and it cannot throw checked exceptions (only RuntimeExceptions),"[('Java Callable', 'different from', 'Runnable'), ('Runnable', 'has method', 'run()'), ('run()', 'does not return', 'value'), ('run()', 'cannot throw', 'checked exceptions'), ('run()', 'can throw', 'RuntimeExceptions')]"
The ConcurrentHashMap is very similar to the java.util.HashTable class except that ConcurrentHashMap offers better concurrency than HashTable does,"[('ConcurrentHashMap', 'is similar to', 'java.util.HashTable'), ('ConcurrentHashMap', 'offers better concurrency than', 'HashTable')]"
You shut down a ScheduledExecutorService using the shutdown() or shutdownNow() methods which are inherited from the ExecutorService interface,"[('ScheduledExecutorService', 'shut down using', 'shutdown()'), ('ScheduledExecutorService', 'shut down using', 'shutdownNow()'), ('shutdown()', 'inherited from', 'ExecutorService interface'), ('shutdownNow()', 'inherited from', 'ExecutorService interface')]"
It is the last line of this example that calls the List stream() method to obtain the Stream representing the elements in the List.Once you have obtained a Stream from a List you can iterate the Stream by calling its forEach() method. ,
Using that formulation Properties would not have been made a subclass of Hashtable because Properties should not be usable as a Hashtable,"[('Properties', 'subclass of', 'Hashtable'), ('Properties', 'should not be usable as', 'Hashtable')]"
Many of the core components in the Java Collection API rely on the correct implementation of the `hashCode()` and `equals()` methods.,"[('Java Collection API', 'contains', 'core components'), ('core components', 'rely on', 'correct implementation of hashCode()'), ('core components', 'rely on', 'correct implementation of equals()')]"
System.in System.out and System.err are initialized by the Java runtime when a Java VM starts up so you dont have to instantiate any streams yourself (although you can exchange them at runtime),"[('System.in', 'initialized by', 'Java runtime'), ('System.out', 'initialized by', 'Java runtime'), ('System.err', 'initialized by', 'Java runtime'), ('Java VM', 'starts up', 'Java runtime'), ('Java runtime', 'can exchange', 'System.in'), ('Java runtime', 'can exchange', 'System.out'), ('Java runtime', 'can exchange', 'System.err')]"
" In case the write() method throws an exception, the close() method will never get called.","[('write() method', 'throws', 'exception'), ('close() method', 'will never get called', 'exception')]"
You create a Path instance using a static method in the Paths class (java.nio.file.Paths) named Paths.get(),"[('Path', 'created using method', 'Paths.get()'), ('Paths.get()', 'located in class', 'Paths'), ('Paths', 'part of package', 'java.nio.file')]"
"If no permits are available, the acquire() call will block until a permit is released by another thread. Similarly, a release() calls is blocked if no more permits can be released into this semaphore.","[('acquire() call', 'blocked until', 'permit is released by another thread'), ('release() call', 'blocked if', 'no more permits can be released into this semaphore')]"
The submaps are the maps returned by various methods like headMap() subMap() and tailMap(),"[('submaps', 'returned by', 'headMap()'), ('submaps', 'returned by', 'subMap()'), ('submaps', 'returned by', 'tailMap()')]"
If your Java SortedMap was created using a Comparator you can obtain the Comparator used via the SortedMap comparator() method,"[('Java SortedMap', 'created using', 'Comparator'), ('Java SortedMap', 'obtain', 'Comparator'), ('SortedMap', 'method', 'comparator()')]"
You can change this pattern later using the applyPattern() or applyLocalizedPattern() method,"[('You', 'can change', 'pattern'), ('pattern', 'can be changed using', 'applyPattern() method'), ('pattern', 'can be changed using', 'applyLocalizedPattern() method')]"
The AtomicBoolean class is located in the java.util.concurrent.atomic package so the full class name is java.util.concurrent.atomic.AtomicBoolean,"[('AtomicBoolean', 'located in package', 'java.util.concurrent.atomic'), ('AtomicBoolean', 'full class name', 'java.util.concurrent.atomic.AtomicBoolean')]"
java.io.InputStreamReader example creates a FileInputStream and wraps it in a InputStreamReader,"[('java.io.InputStreamReader example', 'creates', 'FileInputStream'), ('FileInputStream', 'wrapped in', 'InputStreamReader')]"
When the process() method of the subclass is called the full process is executed including the stepBefore() and stepAfter() of the abstract superclass and the action() method of the subclass,"[('subclass', 'has method', 'process()'), ('process()', 'executes', 'full process'), ('full process', 'includes', 'stepBefore()'), ('full process', 'includes', 'stepAfter()'), ('full process', 'includes', 'action()'), ('stepBefore()', 'belongs to', 'abstract superclass'), ('stepAfter()', 'belongs to', 'abstract superclass'), ('action()', 'belongs to', 'subclass')]"
If you want to set a different offset for the dest byte array there is a version of update() and doFinal() which takes an offset parameter extra,"[('update()', 'has version with parameter', 'offset'), ('doFinal()', 'has version with parameter', 'offset'), ('offset', 'applies to', 'dest byte array')]"
java.security.cert.X509Certificate class represents an X.509 certificate which is used as identity certificate in HTTPS and TLS,"[('java.security.cert.X509Certificate', 'represents', 'X.509 certificate'), ('X.509 certificate', 'used as', 'identity certificate'), ('identity certificate', 'used in', 'HTTPS'), ('identity certificate', 'used in', 'TLS')]"
java.io.PrintWriter example first creates a PrintWriter instance which is connected to a FileWriter,"[('java.io.PrintWriter example', 'creates', 'PrintWriter instance'), ('PrintWriter instance', 'connected to', 'FileWriter')]"
The Java CharArrayReader is handy when you have data in a char array but need to pass that data to some component which can only read from a Reader (or a Reader subclass),"[('Java CharArrayReader', 'used for', 'data in a char array'), ('data in a char array', 'passed to', 'component'), ('component', 'can read from', 'Reader'), ('component', 'can read from', 'Reader subclass')]"
The compareAndSet() method can compare the reference stored in the AtomicStampedReference instance with an expected reference and the stored stamp with an expected stamp and if they two references and stamps are the same (not equal as in equals() but same as in ==) then a new reference can be set on the AtomicStampedReference instance,"[('compareAndSet()', 'method of', 'AtomicStampedReference'), ('compareAndSet()', 'compares', 'reference'), ('compareAndSet()', 'compares', 'stored stamp'), ('compareAndSet()', 'compares with', 'expected reference'), ('compareAndSet()', 'compares with', 'expected stamp'), ('compareAndSet()', 'sets', 'new reference'), ('new reference', 'set on', 'AtomicStampedReference')]"
The BoundedSemaphore class shown below has two testandset methods take() and release(),"[('BoundedSemaphore', 'has method', 'take()'), ('BoundedSemaphore', 'has method', 'release()')]"
For a 100% precise description of how to implement equals() and hashCode() you should check out the official JavaDoc,"[('description', 'related to', 'implement equals()'), ('description', 'related to', 'implement hashCode()'), ('JavaDoc', 'provides', 'description')]"
You could view the LocalDateTime as a combination of the LocalDate and LocalTime classes of the Java 8 date time API,"[('LocalDateTime', 'combination of', 'LocalDate'), ('LocalDateTime', 'combination of', 'LocalTime'), ('LocalDate', 'part of', 'LocalDateTime'), ('LocalTime', 'part of', 'LocalDateTime'), ('LocalDateTime', 'part of', 'Java 8 date time API'), ('LocalDate', 'part of', 'Java 8 date time API'), ('LocalTime', 'part of', 'Java 8 date time API')]"
InputStream.read() example creates an AsynchronousFileChannel and then creates a ByteBuffer which is passed to the read() method as parameter along with a position of 0,"[('InputStream.read() example', 'creates', 'AsynchronousFileChannel'), ('InputStream.read() example', 'creates', 'ByteBuffer'), ('ByteBuffer', 'passed to', 'read() method'), ('read() method', 'parameter', 'ByteBuffer'), ('read() method', 'parameter', 'position of 0')]"
When the thread that locked the Lock in the first place tries to unlock it by calling unlock() it will be blocked trying to enter the synchronized(this) block in the unlock() method,"[('thread', 'locks', 'Lock'), ('thread', 'tries to unlock', 'Lock'), ('thread', 'calls', 'unlock()'), ('thread', 'blocked by', 'synchronized(this) block'), ('synchronized(this) block', 'located in', 'unlock() method')]"
Of course you could do this with the start() and end() methods but it is easier to do so with the group functions,"[('start()', 'alternative to', 'group functions'), ('end()', 'alternative to', 'group functions')]"
java.lang.StringBuffer text explains how to use the SimpleDateFormat class to format dates,"[('java.lang.StringBuffer', 'explains', 'how to use the SimpleDateFormat class to format dates'), ('SimpleDateFormat class', 'used to', 'format dates')]"
The Java?ExecutorService?submit(Callable)?method is similar to the?submit(Runnable)?method except it takes a?Java Callable?instead of a?Runnable.?,"[('Java ExecutorService', 'has method', 'submit(Callable)'), ('Java ExecutorService', 'has method', 'submit(Runnable)'), ('submit(Callable)', 'similar to', 'submit(Runnable)'), ('submit(Callable)', 'takes', 'Java Callable'), ('submit(Runnable)', 'takes', 'Runnable')]"
Just to make it clear You should NOT use the put() and get() method of the Properties class!,"[('You', 'should NOT use', 'put() method of the Properties class'), ('You', 'should NOT use', 'get() method of the Properties class')]"
The Java compiler auto generates getter methods toString() hashcode() and equals() methods for these data fields so you dont have to write that boilerplate code yourself,"[('Java compiler', 'auto generates', 'getter methods'), ('Java compiler', 'auto generates', 'toString()'), ('Java compiler', 'auto generates', 'hashcode()'), ('Java compiler', 'auto generates', 'equals()'), ('getter methods', 'are for', 'data fields'), ('toString()', 'are for', 'data fields'), ('hashcode()', 'are for', 'data fields'), ('equals()', 'are for', 'data fields')]"
java.nio.channels.Selector means that you cannot use FileChannel with a Selector since FileChannel cannot be switched into nonblocking mode,"[('java.nio.channels.Selector', 'incompatible with', 'FileChannel'), ('FileChannel', 'cannot be switched into', 'nonblocking mode')]"
Just set a new InputStream for System.in or a new OutputStream for System.out or System.err and all further data will be read written to the new stream,"[('System.in', 'can be set to', 'new InputStream'), ('System.out', 'can be set to', 'new OutputStream'), ('System.err', 'can be set to', 'new OutputStream'), ('data', 'will be read from', 'new stream'), ('data', 'will be written to', 'new stream')]"
Creating a pipe using Java IO is done via the PipedOutputStream and PipedInputStream classes,"[('Creating a pipe', 'done via', 'PipedOutputStream'), ('Creating a pipe', 'done via', 'PipedInputStream'), ('PipedOutputStream', 'used in', 'Java IO'), ('PipedInputStream', 'used in', 'Java IO')]"
The biggest difference between java.sql.Date and java.sql.Timestamp is that the java.sql.Date only keeps the date not the time of the date it represents,"[('java.sql.Date', 'difference', 'java.sql.Timestamp'), ('java.sql.Date', 'keeps', 'date'), ('java.sql.Date', 'does not keep', 'time')]"
Since the parameters of the Finder.find() and MyClass.doFind() methods match it is possible to create a lambda expression that implements Finder.find() and references the MyClass.doFind() method,"[('Finder.find()', 'has parameter', 'parameters'), ('MyClass.doFind()', 'has parameter', 'parameters'), ('parameters', 'match', 'parameters'), ('lambda expression', 'implements', 'Finder.find()'), ('lambda expression', 'references', 'MyClass.doFind()')]"
Here is an example of obtaining the Comparator used by a SortedMap via its comparator() method,"[('SortedMap', 'has method', 'comparator()'), ('comparator()', 'obtains', 'Comparator')]"
"The getAndDecrement() method does the same as the decrementAndGet() method, except the getAndDecrement() method returns the value of the element before it is decremented. ","[('getAndDecrement() method', 'does the same as', 'decrementAndGet() method'), ('getAndDecrement() method', 'returns value of element before', 'decremented')]"
The Matcher lookingAt() method works like the matches() method with one major difference,"[('lookingAt() method', 'works like', 'matches() method'), ('lookingAt() method', 'has difference', 'one major difference')]"
In general you can call the markSupported() method to find out if mark() and reset() are supported on a given InputStream or not but the BufferedInputStream supports them,"[('markSupported()', 'determines if', 'mark()'), ('markSupported()', 'determines if', 'reset()'), ('mark()', 'supported by', 'BufferedInputStream'), ('reset()', 'supported by', 'BufferedInputStream')]"
Lock.lock() result is that any thread calling either lock() or unlock() will become blocked indefinately,"[('Lock.lock()', 'result', 'any thread calling either lock() or unlock() will become blocked indefinitely')]"
The getAndDecrement() method does the same as the decrementAndGet() method except the getAndDecrement() method returns the value of the element before it is decremented,"[('getAndDecrement() method', 'does the same as', 'decrementAndGet() method'), ('getAndDecrement() method', 'returns', 'value of the element before it is decremented')]"
The Collection interface has two methods to check if a Collection contains one or more certain elements. These are the contains() and containsAll() methods.,"[('Collection interface', 'has method', 'contains()'), ('Collection interface', 'has method', 'containsAll()'), ('contains()', 'checks if', 'Collection contains certain elements'), ('containsAll()', 'checks if', 'Collection contains certain elements')]"
"The newLine() method which can write a new-line character to the underlying Writer. In addition, you may need to call flush() if you need to be absolutely sure that the characters written until now is flushed out of the buffer and onto the network or disk.","[('newLine()', 'can write', 'new-line character'), ('new-line character', 'written to', 'underlying Writer'), ('flush()', 'may need to call', 'to be absolutely sure characters are flushed'), ('characters', 'flushed out of', 'buffer'), ('buffer', 'flushed onto', 'network'), ('buffer', 'flushed onto', 'disk')]"
To calculate a MAC value you call the Mac update() or doFinal() method,"[('MAC value', 'calculated by calling', 'Mac update() method'), ('MAC value', 'calculated by calling', 'doFinal() method')]"
The java.util.concurrent package has the following implementations of the BlockingDeque interface,"[('java.util.concurrent package', 'has implementation', 'BlockingDeque interface')]"
Notice how the calculate() method both locks the Calculator instance Lock before performing any calculations and also call the add() and subtract() methods which also locks the lock,"[('calculate() method', 'locks', 'Calculator instance Lock'), ('calculate() method', 'performs', 'calculations'), ('calculate() method', 'calls', 'add() method'), ('calculate() method', 'calls', 'subtract() method'), ('add() method', 'locks', 'lock'), ('subtract() method', 'locks', 'lock')]"
After calling read() the example loops until the isDone() method of the returned Future returns true,"[('example', 'calls method', 'read()'), ('example', 'loops until', 'isDone() method returns true'), ('isDone() method', 'returns', 'true'), ('read()', 'returns', 'Future')]"
Deque.pollFirst() is different than removeFirst() which throws an exception if the Deque is empty,"[('Deque.pollFirst()', 'is different than', 'removeFirst()'), ('removeFirst()', 'throws', 'exception'), ('Deque', 'is empty', 'throws exception')]"
Adding and getting elements to a generic Map is done using the put() and get() methods,"[('Adding elements', 'is done using', 'put() method'), ('Getting elements', 'is done using', 'get() method'), ('put() method', 'used for', 'Adding elements'), ('get() method', 'used for', 'Getting elements')]"
Java IO contains many subclasses of the InputStream OutputStream Reader and Writer classes,"[('Java IO', 'contains', 'InputStream'), ('Java IO', 'contains', 'OutputStream'), ('Java IO', 'contains', 'Reader'), ('Java IO', 'contains', 'Writer'), ('InputStream', 'is a subclass of', 'Java IO'), ('OutputStream', 'is a subclass of', 'Java IO'), ('Reader', 'is a subclass of', 'Java IO'), ('Writer', 'is a subclass of', 'Java IO')]"
Even if you can get get() and put() to work I would recommend that you do not use these methods,"[('I', 'recommend', 'you do not use get()'), ('I', 'recommend', 'you do not use put()')]"
Lock.unlock() will remain blocked until the thread waiting in lock() leaves the synchronized(this) block,"[('Lock.unlock()', 'remains blocked until', 'thread waiting in lock() leaves synchronized(this) block'), ('thread', 'waiting in', 'lock()'), ('thread', 'leaves', 'synchronized(this) block')]"
The Path interface is located in the java.nio.file package so the fully qualified name of the Java Path interface is java.nio.file.Path,"[('Path interface', 'located in', 'java.nio.file package'), ('java.nio.file package', 'contains', 'Path interface'), ('Path interface', 'fully qualified name', 'java.nio.file.Path')]"
Here are two examples of adding elements to a Java Queue via its add() and offer() methods,"[('Java Queue', 'has method', 'add()'), ('Java Queue', 'has method', 'offer()')]"
The methods Class.getMethod(String name Class[] parameterTypes) and Class.getMethods() methods only return public methods so they wont work,"[('Class.getMethod(String name Class[] parameterTypes)', 'returns', 'public methods'), ('Class.getMethods()', 'returns', 'public methods'), ('public methods', 'are not returned by', 'Class.getMethod(String name Class[] parameterTypes)'), ('public methods', 'are not returned by', 'Class.getMethods()')]"
"BlockingQueue.offer(E e, long timeout, TimeUnit unit) is different from the add() method which will throw an exception is adding an element to the end of the Deque fails","[('BlockingQueue.offer(E e, long timeout, TimeUnit unit)', 'different from', 'add() method'), ('add() method', 'action', 'throw an exception'), ('add() method', 'action', 'adding an element to the end of the Deque'), ('adding an element to the end of the Deque', 'condition', 'fails')]"
The ByteArrayInputStream class is a subclass of the InputStream class so you can use a ByteArrayInputStream as an InputStream,"[('ByteArrayInputStream', 'is a subclass of', 'InputStream'), ('ByteArrayInputStream', 'can be used as', 'InputStream')]"
If you need to set a date on a java.sql.PreparedStatement or get a date from a java.sql.ResultSet you will interact with java.sql.Date,"[('java.sql.PreparedStatement', 'interacts with', 'java.sql.Date'), ('java.sql.ResultSet', 'interacts with', 'java.sql.Date')]"
The java.nio.file.Files class works with java.nio.file.Path instances so you need to understand the Path class before you can work with the Files class,"[('java.nio.file.Files', 'works with', 'java.nio.file.Path'), ('java.nio.file.Path', 'instance of', 'Path class'), ('java.nio.file.Files', 'requires understanding of', 'Path class')]"
Both PipedInputStream and PipedOutputStream has a connect() method that can connect one to the other,"[('PipedInputStream', 'has method', 'connect()'), ('PipedOutputStream', 'has method', 'connect()'), ('connect()', 'can connect', 'PipedInputStream'), ('connect()', 'can connect', 'PipedOutputStream')]"
java.awt.List is the last line of this example that calls the List stream() method to obtain the Stream representing the elements in the List,"[('java.awt.List', 'calls method', 'List stream()'), ('List stream()', 'obtains', 'Stream'), ('Stream', 'represents elements in', 'List')]"
Queue.poll() is different than remove() which throws an exception if the Deque is empty,"[('Queue.poll()', 'is different than', 'remove()'), ('remove()', 'throws', 'exception'), ('Deque', 'is empty', 'throws exception')]"
java.util.Collection represents an ordered sequence of objects just like a Java List but its intended use is slightly different,"[('java.util.Collection', 'represents', 'ordered sequence of objects'), ('ordered sequence of objects', 'is similar to', 'Java List')]"
Another difference between call() and run() is that call() can throw an exception whereas run() cannot (except for unchecked exceptions subclasses of RuntimeException),"[('call()', 'can throw', 'exception'), ('run()', 'cannot throw', 'exception'), ('unchecked exceptions', 'subclass of', 'RuntimeException')]"
As you can see the key Iterator returns every key stored in a Java Map one by one (one for each call to next()),"[('key Iterator', 'returns', 'every key stored in a Java Map'), ('Java Map', 'contains', 'key')]"
The awaitTermination() method is typically called after calling shutdown() or shutdownNow(),"[('awaitTermination()', 'is typically called after', 'shutdown()'), ('awaitTermination()', 'is typically called after', 'shutdownNow()')]"
Collection.remove(Object o) is different from poll() which returns null if the Deque is empty,"[('Collection.remove(Object o)', 'different from', 'poll()'), ('poll()', 'returns', nan), ('Deque', 'can be', 'empty')]"
The Java GZIPInputStream and GZIPOutputStream classes are used to ZIP compress a single file,"[('Java GZIPInputStream', 'used to', 'ZIP compress a single file'), ('Java GZIPOutputStream', 'used to', 'ZIP compress a single file')]"
The java.util.concurrent package contains the following implementations of the ConcurrentMap interface,"[('java.util.concurrent package', 'contains implementation', 'ConcurrentMap interface')]"
Receiving data via a DatagramSocket is done by first creating a DatagramPacket and then receiving data into it via the DatagramSocket receive() method,"[('DatagramSocket', 'receives data via', 'receive() method'), ('DatagramPacket', 'is created for', 'receiving data'), ('DatagramSocket', 'receives data into', 'DatagramPacket')]"
"Notice how the while loop continues until a -1 value is read from the ByteArrayInputStream read() method. After that, the while loop exits, and the ByteArrayInputStream close() method is called.","[('while loop', 'continues until', '-1 value is read'), ('-1 value', 'is read from', 'ByteArrayInputStream read() method'), ('while loop', 'exits after', '-1 value is read'), ('ByteArrayInputStream close() method', 'is called after', 'while loop exits')]"
Notice how we can call the addAndReturn() method using both String and Integer and their corresponding collections,"[('addAndReturn()', 'can be called with', 'String'), ('addAndReturn()', 'can be called with', 'Integer'), ('addAndReturn()', 'can be called with', 'String collections'), ('addAndReturn()', 'can be called with', 'Integer collections')]"
"As you can see, the DecimalFormat is created with a formatting pattern. You can change this pattern later using the applyPattern() or applyLocalizedPattern() method.","[('DecimalFormat', 'created with', 'formatting pattern'), ('formatting pattern', 'can be changed using', 'applyPattern() method'), ('formatting pattern', 'can be changed using', 'applyLocalizedPattern() method')]"
For that you need to use the find() start() and end() methods,"[('find()', 'used with', 'start()'), ('find()', 'used with', 'end()')]"
The Java Stack class actually implements the Java List interface but you rarely use a Stack as a List except perhaps if you need to inspect all elements currently stored on the stack,"[('Java Stack class', 'implements', 'Java List interface'), ('Stack', 'used as', 'List'), ('Stack', 'stores', 'elements')]"
In Java 6 to 13 there is only one implementation of the NavigableSet interface in the java.util package The java.util.TreeSet class,"[('Java 6', 'has implementation of', 'NavigableSet interface'), ('Java 7', 'has implementation of', 'NavigableSet interface'), ('Java 8', 'has implementation of', 'NavigableSet interface'), ('Java 9', 'has implementation of', 'NavigableSet interface'), ('Java 10', 'has implementation of', 'NavigableSet interface'), ('Java 11', 'has implementation of', 'NavigableSet interface'), ('Java 12', 'has implementation of', 'NavigableSet interface'), ('Java 13', 'has implementation of', 'NavigableSet interface'), ('NavigableSet interface', 'implemented by', 'java.util.TreeSet class'), ('java.util.TreeSet class', 'located in', 'java.util package')]"
In many ways the java.nio.file.Path interface is similar to the java.io.File class but there are some minor differences,"[('java.nio.file.Path', 'is similar to', 'java.io.File'), ('java.nio.file.Path', 'has differences with', 'java.io.File')]"
java.io.CharArrayReader is also possible to write data to an ByteArrayOutputStream or CharArrayWriter,"[('java.io.CharArrayReader', 'can write data to', 'ByteArrayOutputStream'), ('java.io.CharArrayReader', 'can write data to', 'CharArrayWriter')]"
"The first method, addAndGet() adds a number to the AtomicInteger and returns its value after the addition. The second method, getAndAdd() also adds a number to the AtomicInteger but returns the value the AtomicInteger had before the value was added. ","[('addAndGet()', 'adds number to', 'AtomicInteger'), ('addAndGet()', 'returns value after addition', 'AtomicInteger'), ('getAndAdd()', 'adds number to', 'AtomicInteger'), ('getAndAdd()', 'returns value before addition', 'AtomicInteger')]"
Here is an example of obtaining the Comparator used by a SortedSet via the comparator() method,"[('SortedSet', 'uses method', 'comparator()'), ('comparator()', 'obtains', 'Comparator')]"
You will call take() instead of notify() and release() instead of wait(),"[('You', 'will call', 'take()'), ('You', 'will call', 'release()'), ('take()', 'instead of', 'notify()'), ('release()', 'instead of', 'wait()')]"
The problem with calling wait() and notify() on the empty string or any other constant string is that the JVMCompiler internally translates constant strings into the same object,"[('wait()', 'called on', 'empty string'), ('wait()', 'called on', 'constant string'), ('notify()', 'called on', 'empty string'), ('notify()', 'called on', 'constant string'), ('JVMCompiler', 'translates', 'constant strings'), ('constant strings', 'translated into', 'same object')]"
"if the Deque is full, the offerFirst() method returns false. This is different from the addFirst() method which will throw an exception is adding an element to the beginning of the Deque fails. ","[('offerFirst()', 'returns', 'false'), ('Deque', 'is full', 'offerFirst()'), ('addFirst()', 'throws', 'exception'), ('adding an element to the beginning of the Deque', 'fails', 'addFirst()')]"
You read characters from a Java PushbackReader just like you do from a Java Reader because PushbackReader is a Java Reader subclass,"[('PushbackReader', 'is a', 'Java Reader subclass'), ('You', 'read characters from', 'Java PushbackReader'), ('You', 'read characters from', 'Java Reader')]"
Since the Map does not contain any object stored by the key E the given default value will be returned which is the String default value passed as the last parameter to the getOrDefault() method,"[('Map', 'does not contain', 'object stored by the key E'), ('default value', 'is', 'String'), ('default value', 'passed as', 'last parameter'), ('last parameter', 'to', 'getOrDefault() method')]"
When you call select() or selectNow() on the Selector it gives you only the SelectableChannel instances that actually has data to read,"[('Selector', 'method', 'select()'), ('Selector', 'method', 'selectNow()'), ('select()', 'returns', 'SelectableChannel instances'), ('selectNow()', 'returns', 'SelectableChannel instances'), ('SelectableChannel instances', 'has', 'data to read')]"
" For the SortedSet to be able to determine the natural order of the elements, the elements must implement the java.lang.Comparable interface.","[('SortedSet', 'determines order of', 'elements'), ('elements', 'implement', 'java.lang.Comparable interface')]"
For the SortedSet to be able to determine the natural order of the elements the elements must implement the java.lang.Comparable interface,"[('SortedSet', 'determines order of', 'elements'), ('elements', 'must implement', 'java.lang.Comparable interface')]"
java.util.concurrent.RecursiveTask example is similar to the RecursiveAction example except it returns a result,"[('java.util.concurrent.RecursiveTask example', 'is similar to', 'RecursiveAction example'), ('java.util.concurrent.RecursiveTask example', 'returns', 'result')]"
Notice the two synchronized blocks inside the set() and get() method. Notice how the blocks are placed last and first in the two methods.,"[('synchronized blocks', 'located inside', 'set() method'), ('synchronized blocks', 'located inside', 'get() method'), ('blocks', 'placed', 'last in set() method'), ('blocks', 'placed', 'first in get() method')]"
This Keytool delete command will remove the KeyStore entry with the alias testkey from the KeyStore stored in the file keystore.jks,"[('Keytool delete command', 'will remove', 'KeyStore entry'), ('KeyStore entry', 'has alias', 'testkey'), ('KeyStore entry', 'is from', 'KeyStore'), ('KeyStore', 'is stored in', 'file keystore.jks')]"
Deque.addFirst(E e) is different from the offerFirst() method which will return false if an element cannot be inserted in the beginning of the Deque,"[('Deque.addFirst(E e)', 'different from', 'offerFirst() method'), ('offerFirst() method', 'return', 'false'), ('element', 'cannot be inserted in', 'beginning of the Deque')]"
To access a private method you will need to call the Class.getDeclaredMethod(String name Class[] parameterTypes) or Class.getDeclaredMethods() method,"[('private method', 'accessed by', 'Class.getDeclaredMethod(String name Class[] parameterTypes)'), ('private method', 'accessed by', 'Class.getDeclaredMethods()')]"
There are several overridden versions of both update() and doFinal() which takes different parameters,"[('update()', 'has overridden version', 'update() with different parameters'), ('doFinal()', 'has overridden version', 'doFinal() with different parameters')]"
If you look at the example in the previous section imagine what happens if an exception is thrown between the call to lock.lock() and lock.unlock(),"[('exception', 'thrown between', 'call to lock.lock() and lock.unlock()')]"
"The replace() method will only insert the new value if there is already an existing value mapped to the key. If no existing value is mapped to the given key, no value is inserted. This is different from how put() works, which always insert the value no matter what.","[('replace() method', 'inserts new value if', 'existing value mapped to key'), ('no existing value mapped to key', 'results in', 'no value inserted'), ('put() method', 'always inserts', 'value')]"
The logrb() methods work like the log() methods too except they can obtain the log messages from a resource bundle,"[('logrb() methods', 'work like', 'log() methods'), ('logrb() methods', 'can obtain', 'log messages'), ('log messages', 'from', 'resource bundle')]"
a stop() or pause() method too) then you can no longer create your Runnable implementation with a Java lambda expression,"[('Runnable implementation', 'created with', 'Java lambda expression'), ('stop() method', 'related to', 'Runnable implementation'), ('pause() method', 'related to', 'Runnable implementation')]"
java.security.KeyStore example loads the KeyStore file located in the keystore.ks file,"[('java.security.KeyStore example', 'loads', 'KeyStore file'), ('KeyStore file', 'located in', 'keystore.ks file')]"
The queueObject.doWait() call is placed outside the synchronized(this) block to avoid nested monitor lockout so another thread can actually call unlock() when no thread is executing inside the synchronized(this) block in lock() method,"[('queueObject.doWait()', 'is placed outside', 'synchronized(this) block'), ('synchronized(this) block', 'prevents', 'nested monitor lockout'), ('another thread', 'can call', 'unlock()'), ('no thread', 'is executing inside', 'synchronized(this) block'), ('synchronized(this) block', 'is in', 'lock() method')]"
The read() and write() calls on the streams are blocking meaning if you try to use the same thread to both read and write this may result in the thread deadlocking itself,"[('read()', 'is a call on', 'streams'), ('write()', 'is a call on', 'streams'), ('read()', 'is', 'blocking'), ('write()', 'is', 'blocking'), ('thread', 'may deadlock', 'itself'), ('use', 'same thread to', 'read'), ('use', 'same thread to', 'write')]"
"mutiple blocks from a large file, you call the update() once for each block of data, and finish with a call to doFinal() with the last data loce","[('you', 'call', 'update()'), ('update()', 'used for', 'each block of data'), ('you', 'finish with', 'call to doFinal()'), ('call to doFinal()', 'used with', 'last data block')]"
That means that when a thread invokes a read() or write() that thread is blocked until there is some data to read or the data is fully written,"[('thread', 'invokes', 'read()'), ('thread', 'invokes', 'write()'), ('thread', 'is blocked until', 'there is some data to read'), ('thread', 'is blocked until', 'the data is fully written')]"
You can convert a Java List to a Java Array using the List toArray() method,"[('Java List', 'can be converted to', 'Java Array'), ('List toArray() method', 'used for', 'convert Java List to Java Array')]"
When the thread is done with the code in the critical section (the code between lock() and unlock()) the thread calls unlock(),"[('thread', 'executes', 'code in the critical section'), ('code in the critical section', 'located between', 'lock() and unlock()'), ('thread', 'calls', 'unlock()')]"
The LinkedList class is a pretty standard Deque and Queue implementation,"[('LinkedList class', 'is a type of', 'Deque'), ('LinkedList class', 'is a type of', 'Queue')]"
The System class also has a getProperty() and setProperty() method which are shortcuts to the Properties getProperty() and setProperty() methods of the System Properties instance,"[('System class', 'has method', 'getProperty()'), ('System class', 'has method', 'setProperty()'), ('getProperty()', 'is shortcut to', 'Properties getProperty()'), ('setProperty()', 'is shortcut to', 'Properties setProperty()'), ('System Properties instance', 'has method', 'Properties getProperty()'), ('System Properties instance', 'has method', 'Properties setProperty()')]"
The Handler in the Java Logging API use a java.util.logging.Formatter to format the LogRecord before writing it to an external system,"[('The Handler', 'uses', 'java.util.logging.Formatter'), ('java.util.logging.Formatter', 'formats', 'LogRecord'), ('The Handler', 'writes to', 'external system')]"
The compare() method returns an int with the same meaning as the String.compareTo() method,"[('compare() method', 'returns', 'int'), ('int', 'has meaning as', 'String.compareTo() method')]"
The method getBuffer() returns the StringBuffer used by the StringWriter to build the string from the written characters,"[('getBuffer()', 'returns', 'StringBuffer'), ('StringWriter', 'uses', 'StringBuffer'), ('StringWriter', 'builds', 'string'), ('string', 'built from', 'written characters')]"
java.io.Writer is faster to write an array of characters to a Java BufferedWriter than writing one character at a time,"[('java.io.Writer', 'writes to', 'Java BufferedWriter'), ('java.io.Writer', 'writes', 'array of characters'), ('java.io.Writer', 'faster than', 'writing one character at a time')]"
java.util.Stack Java example pushes a Java String with the text 1 onto the Stack,"[('java.util.Stack', 'pushes', 'Java String'), ('Java String', 'has text', '1'), ('1', 'onto', 'Stack')]"
Deque.peekFirst() is similar to how peek() works but the method name peekFirst() is a bit more saying about which end of the Deque you peek at,"[('Deque.peekFirst()', 'is similar to', 'peek()'), ('method name', 'is', 'peekFirst()'), ('peekFirst()', 'indicates', 'which end of the Deque you peek at')]"
To sort a collection of strings according to the rules of a certain Locale you use a java.text.Collator instance created for that specific Locale,"[('java.text.Collator', 'used for', 'sorting a collection of strings'), ('java.text.Collator', 'created for', 'specific Locale'), ('Locale', 'has rules for', 'sorting a collection of strings')]"
